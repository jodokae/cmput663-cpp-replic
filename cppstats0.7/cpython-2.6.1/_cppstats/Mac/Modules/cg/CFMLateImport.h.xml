<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Mac/Modules/cg/CFMLateImport.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>! <name>MORE_FRAMEWORK_INCLUDES</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;MacTypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CodeFragments.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Devices.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CFBundle.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>pascal</name> <name>OSStatus</name></type> (*<name>CFMLateImportLookupProc</name>)<parameter_list>(<param><decl><type><name>ConstStr255Param</name></type> <name>symName</name></decl></param>, <param><decl><type><name>CFragSymbolClass</name></type> <name>symClass</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>symAddr</name></decl></param>, <param><decl><type><name>void</name> *</type><name>refCon</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><specifier>extern</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>CFMLateImportCore</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>CFragSystem7DiskFlatLocator</name> *</type><name>fragToFixLocator</name></decl></param>,
<param><decl><type><name>CFragConnectionID</name></type> <name>fragToFixConnID</name></decl></param>,
<param><decl><type><name>CFragInitFunction</name></type> <name>fragToFixInitRoutine</name></decl></param>,
<param><decl><type><name>ConstStr255Param</name></type> <name>weakLinkedLibraryName</name></decl></param>,
<param><decl><type><name>CFMLateImportLookupProc</name></type> <name>lookup</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>refCon</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>CFMLateImportLibrary</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>CFragSystem7DiskFlatLocator</name> *</type><name>fragToFixLocator</name></decl></param>,
<param><decl><type><name>CFragConnectionID</name></type> <name>fragToFixConnID</name></decl></param>,
<param><decl><type><name>CFragInitFunction</name></type> <name>fragToFixInitRoutine</name></decl></param>,
<param><decl><type><name>ConstStr255Param</name></type> <name>weakLinkedLibraryName</name></decl></param>,
<param><decl><type><name>CFragConnectionID</name></type> <name>connIDToImport</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>CFMLateImportBundle</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>CFragSystem7DiskFlatLocator</name> *</type><name>fragToFixLocator</name></decl></param>,
<param><decl><type><name>CFragConnectionID</name></type> <name>fragToFixConnID</name></decl></param>,
<param><decl><type><name>CFragInitFunction</name></type> <name>fragToFixInitRoutine</name></decl></param>,
<param><decl><type><name>ConstStr255Param</name></type> <name>weakLinkedLibraryName</name></decl></param>,
<param><decl><type><name>CFBundleRef</name></type> <name>bundleToImport</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
