<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Mac/Modules/fm/_Fmmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL ) {PyErr_SetString(PyExc_NotImplementedError, "Not available in this shared library/OS version"); return NULL; }} while(0)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>FMRec_New</name><parameter_list>(<param><decl><type><name>FMetricRec</name> *</type><name>itself</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>ascent</name></name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>descent</name></name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>leading</name></name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>widMax</name></name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>wTabHandle</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static int
FMRec_Convert(PyObject *v, FMetricRec *p_itself) {
return PyArg_ParseTuple(v, "O&amp;O&amp;O&amp;O&amp;O&amp;",
PyMac_GetFixed, &amp;itself-&gt;ascent,
PyMac_GetFixed, &amp;itself-&gt;descent,
PyMac_GetFixed, &amp;itself-&gt;leading,
PyMac_GetFixed, &amp;itself-&gt;widMax,
ResObj_Convert, &amp;itself-&gt;wTabHandle);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_Error</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetFontName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>familyID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetFontName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>familyID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetFontName</name><argument_list>(<argument><expr><name>familyID</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetFNum</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>familyID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetFNum</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetFNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetFNum</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
<argument><expr>&amp;<name>familyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>familyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_RealFont</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fontNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RealFont</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RealFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
<argument><expr>&amp;<name>fontNum</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>RealFont</name><argument_list>(<argument><expr><name>fontNum</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_SetFScaleDisable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>fscaleDisable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetFScaleDisable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetFScaleDisable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>fscaleDisable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetFScaleDisable</name><argument_list>(<argument><expr><name>fscaleDisable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_FontMetrics</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FMetricRec</name></type> <name>theMetrics</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FontMetrics</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FontMetrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FontMetrics</name><argument_list>(<argument><expr>&amp;<name>theMetrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>FMRec_New</name></expr></argument>, <argument><expr>&amp;<name>theMetrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_SetFractEnable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>fractEnable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetFractEnable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetFractEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>fractEnable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetFractEnable</name><argument_list>(<argument><expr><name>fractEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetDefFontSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetDefFontSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDefFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetDefFontSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_IsOutline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>numer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>denom</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>IsOutline</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsOutline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>numer</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>denom</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>IsOutline</name><argument_list>(<argument><expr><name>numer</name></expr></argument>,
<argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_SetOutlinePreferred</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outlinePreferred</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetOutlinePreferred</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetOutlinePreferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>outlinePreferred</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetOutlinePreferred</name><argument_list>(<argument><expr><name>outlinePreferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetOutlinePreferred</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetOutlinePreferred</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetOutlinePreferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetOutlinePreferred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_SetPreserveGlyph</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>preserveGlyph</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetPreserveGlyph</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPreserveGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>preserveGlyph</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetPreserveGlyph</name><argument_list>(<argument><expr><name>preserveGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetPreserveGlyph</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetPreserveGlyph</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPreserveGlyph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetPreserveGlyph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetSysFont</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetSysFont</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetSysFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetSysFont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_GetAppFont</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetAppFont</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetAppFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetAppFont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Fm_QDTextBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inText__in__</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inText__len__</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inText__in_len__</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QDTextBounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QDTextBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"s#"</expr></argument>,
<argument><expr>&amp;<name>inText__in__</name></expr></argument>, <argument><expr>&amp;<name>inText__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>inText__len__</name> = <name>inText__in_len__</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QDTextBounds</name><argument_list>(<argument><expr><name>inText__len__</name></expr></argument>, <argument><expr><name>inText__in__</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Fm_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"GetFontName"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetFontName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short familyID) -&gt; (Str255 name)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetFNum"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetFNum</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 name) -&gt; (short familyID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"RealFont"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_RealFont</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short fontNum, short size) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetFScaleDisable"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_SetFScaleDisable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean fscaleDisable) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FontMetrics"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_FontMetrics</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (FMetricRec theMetrics)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetFractEnable"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_SetFractEnable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean fractEnable) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetDefFontSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetDefFontSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"IsOutline"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_IsOutline</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point numer, Point denom) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetOutlinePreferred"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_SetOutlinePreferred</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean outlinePreferred) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetOutlinePreferred"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetOutlinePreferred</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetPreserveGlyph"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_SetPreserveGlyph</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean preserveGlyph) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetPreserveGlyph"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetPreserveGlyph</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetSysFont"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetSysFont</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetAppFont"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_GetAppFont</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QDTextBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Fm_QDTextBounds</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Buffer inText) -&gt; (Rect bounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Fm_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>init_Fm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Fm"</expr></argument>, <argument><expr><name>Fm_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Fm_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Fm_Error</name> == <name>NULL</name> ||
<call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Fm_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
