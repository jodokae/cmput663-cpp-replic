<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/methodobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyCFunctionObject</name> *</type><name>free_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>numfree</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PyCFunction_MAXFREELIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_MAXFREELIST</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyObject</name> *</type>
<name>PyCFunction_NewEx</name><parameter_list>(<param><decl><type><name>PyMethodDef</name> *</type><name>ml</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>module</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCFunctionObject</name> *</type><name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><name>op</name> = <name>free_list</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>free_list</name> = <call>(<name>PyCFunctionObject</name> *)<argument_list>(<argument><expr><name><name>op</name>-&gt;<name>m_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>&amp;<name>PyCFunction_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numfree</name>--</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>op</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>PyCFunctionObject</name></expr></argument>, <argument><expr>&amp;<name>PyCFunction_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>op</name>-&gt;<name>m_ml</name></name> = <name>ml</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>m_self</name></name> = <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>m_module</name></name> = <name>module</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>op</name></expr>;</return>
}</block></function>
<function><type><name>PyCFunction</name></type>
<name>PyCFunction_GetFunction</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyCFunction_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>((<name>PyCFunctionObject</name> *)<name>op</name>) -&gt; <name><name>m_ml</name> -&gt; <name>ml_meth</name></name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyCFunction_GetSelf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyCFunction_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>((<name>PyCFunctionObject</name> *)<name>op</name>) -&gt; <name>m_self</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyCFunction_GetFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyCFunction_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>((<name>PyCFunctionObject</name> *)<name>op</name>) -&gt; <name><name>m_ml</name> -&gt; <name>ml_flags</name></name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyCFunction_Call</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>func</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCFunctionObject</name>*</type> <name>f</name> <init>= <expr>(<name>PyCFunctionObject</name>*)<name>func</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCFunction</name></type> <name>meth</name> <init>= <expr><call><name>PyCFunction_GET_FUNCTION</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr><call><name>PyCFunction_GET_SELF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyCFunction_GET_FLAGS</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call> &amp; ~(<name>METH_CLASS</name> | <name>METH_STATIC</name> | <name>METH_COEXIST</name>)</expr>)</condition> <block>{
<case>case <expr><name>METH_VARARGS</name></expr>:
<if>if <condition>(<expr><name>kw</name> == <name>NULL</name> || <call><name>PyDict_Size</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call>(*<name>meth</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>:
</case><case>case <expr><name>METH_OLDARGS</name> | <name>METH_KEYWORDS</name></expr>:
<return>return <expr>(*(<name>PyCFunctionWithKeywords</name>)<name>meth</name>)(<name>self</name>, <name>arg</name>, <name>kw</name>)</expr>;</return>
</case><case>case <expr><name>METH_NOARGS</name></expr>:
<if>if <condition>(<expr><name>kw</name> == <name>NULL</name> || <call><name>PyDict_Size</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>size</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
<return>return <expr><call>(*<name>meth</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.200s() takes no arguments (%zd given)"</expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>METH_O</name></expr>:
<if>if <condition>(<expr><name>kw</name> == <name>NULL</name> || <call><name>PyDict_Size</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>size</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> == 1</expr>)</condition><then>
<return>return <expr><call>(*<name>meth</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.200s() takes exactly one argument (%zd given)"</expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>METH_OLDARGS</name></expr>:
<if>if <condition>(<expr><name>kw</name> == <name>NULL</name> || <call><name>PyDict_Size</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>size</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> == 1</expr>)</condition><then>
<expr_stmt><expr><name>arg</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>arg</name> = <name>NULL</name></expr>;</expr_stmt></then></if></else></if>
<return>return <expr><call>(*<name>meth</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"%.200s() takes no keyword arguments"</expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>meth_dealloc</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>m</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>m_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>m_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>numfree</name> &lt; <name>PyCFunction_MAXFREELIST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>m</name>-&gt;<name>m_self</name></name> = (<name>PyObject</name> *)<name>free_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>free_list</name> = <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numfree</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>meth_get__doc__</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>m</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>doc</name> <init>= <expr><name><name>m</name>-&gt;<name>m_ml</name>-&gt;<name>ml_doc</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>doc</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>meth_get__name__</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>m</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>meth_traverse</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>m</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>m_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>m_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>meth_get__self__</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>m</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyEval_GetRestricted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"method.__self__ not accessible in restricted mode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>self</name> = <name><name>m</name>-&gt;<name>m_self</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>self</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>meth_getsets</name> <index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__doc__"</expr>, <expr>(<name>getter</name>)<name>meth_get__doc__</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"__name__"</expr>, <expr>(<name>getter</name>)<name>meth_get__name__</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"__self__"</expr>, <expr>(<name>getter</name>)<name>meth_get__self__</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(PyCFunctionObject, x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>meth_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__module__"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>m_module</name></expr></argument>)</argument_list></call></expr>, <expr><name>PY_WRITE_RESTRICTED</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>meth_repr</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>m</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>m_self</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;built-in function %s&gt;"</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;built-in method %s of %s object at %p&gt;"</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>m_self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>m_self</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>meth_compare</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyCFunctionObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>m_self</name></name> != <name><name>b</name>-&gt;<name>m_self</name></name></expr>)</condition><then>
<return>return <expr>(<name><name>a</name>-&gt;<name>m_self</name></name> &lt; <name><name>b</name>-&gt;<name>m_self</name></name>) ? -1 : 1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>m_ml</name>-&gt;<name>ml_meth</name></name> == <name><name>b</name>-&gt;<name>m_ml</name>-&gt;<name>ml_meth</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>m_ml</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else
<return>return <expr>1</expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>meth_richcompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCFunctionObject</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eq</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>op</name> != <name>Py_EQ</name> &amp;&amp; <name>op</name> != <name>Py_NE</name>) ||
!<call><name>PyCFunction_Check</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ||
!<call><name>PyCFunction_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"builtin_function_or_method inequality "
"comparisons not supported in 3.x"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>a</name> = (<name>PyCFunctionObject</name> *)<name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = (<name>PyCFunctionObject</name> *)<name>other</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eq</name> = <name><name>a</name>-&gt;<name>m_self</name></name> == <name><name>b</name>-&gt;<name>m_self</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>eq</name></expr>)</condition><then>
<expr_stmt><expr><name>eq</name> = <name><name>a</name>-&gt;<name>m_ml</name>-&gt;<name>ml_meth</name></name> == <name><name>b</name>-&gt;<name>m_ml</name>-&gt;<name>ml_meth</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = <name>eq</name> ? <name>Py_True</name> : <name>Py_False</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>res</name> = <name>eq</name> ? <name>Py_False</name> : <name>Py_True</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>meth_hash</name><parameter_list>(<param><decl><type><name>PyCFunctionObject</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>m_self</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>x</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>x</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>m_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><name>y</name> = <call><name>_Py_HashPointer</name><argument_list>(<argument><expr><call>(<name>void</name>*)<argument_list>(<argument><expr><name><name>a</name>-&gt;<name>m_ml</name>-&gt;<name>ml_meth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>y</name> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>x</name> ^= <name>y</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == -1</expr>)</condition><then>
<expr_stmt><expr><name>x</name> = -2</expr>;</expr_stmt></then></if>
<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCFunction_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"builtin_function_or_method"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyCFunctionObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>meth_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>cmpfunc</name>)<name>meth_compare</name></expr>,
<expr>(<name>reprfunc</name>)<name>meth_repr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>meth_hash</name></expr>,
<expr><name>PyCFunction_Call</name></expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>meth_traverse</name></expr>,
<expr>0</expr>,
<expr><name>meth_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>meth_members</name></expr>,
<expr><name>meth_getsets</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>listmethodchain</name><parameter_list>(<param><decl><type><name>PyMethodChain</name> *</type><name>chain</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyMethodChain</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyMethodDef</name> *</type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>c</name> = <name>chain</name></expr>;</init> <condition><expr><name>c</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>c</name> = <name><name>c</name>-&gt;<name>link</name></name></expr></incr>) <block>{
<for>for (<init><expr><name>ml</name> = <name><name>c</name>-&gt;<name>methods</name></name></expr>;</init> <condition><expr><name><name>ml</name>-&gt;<name>ml_name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name>++</expr></incr>)
<expr_stmt><expr><name>n</name>++</expr>;</expr_stmt></for>
}</block></for>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>c</name> = <name>chain</name></expr>;</init> <condition><expr><name>c</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>c</name> = <name><name>c</name>-&gt;<name>link</name></name></expr></incr>) <block>{
<for>for (<init><expr><name>ml</name> = <name><name>c</name>-&gt;<name>methods</name></name></expr>;</init> <condition><expr><name><name>ml</name>-&gt;<name>ml_name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>ml</name>-&gt;<name>ml_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></for>
}</block></for>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_Sort</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>Py_FindMethodInChain</name><parameter_list>(<param><decl><type><name>PyMethodChain</name> *</type><name>chain</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == '_' &amp;&amp; <name><name>name</name><index>[<expr>1</expr>]</index></name> == '_'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"__methods__"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"__methods__ not supported in 3.x"</expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>listmethodchain</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"__doc__"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>doc</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_doc</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>doc</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr><name>chain</name> != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyMethodDef</name> *</type><name>ml</name> <init>= <expr><name><name>chain</name>-&gt;<name>methods</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name><name>ml</name>-&gt;<name>ml_name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ml</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == <name><name>ml</name>-&gt;<name>ml_name</name><index>[<expr>0</expr>]</index></name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name>+1</expr></argument>, <argument><expr><name><name>ml</name>-&gt;<name>ml_name</name></name>+1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyCFunction_New</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><name>chain</name> = <name><name>chain</name>-&gt;<name>link</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>Py_FindMethod</name><parameter_list>(<param><decl><type><name>PyMethodDef</name> *</type><name>methods</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyMethodChain</name></type> <name>chain</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>chain</name>.<name>methods</name></name> = <name>methods</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain</name>.<name>link</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>Py_FindMethodInChain</name><argument_list>(<argument><expr>&amp;<name>chain</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyCFunction_ClearFreeList</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>freelist_size</name> <init>= <expr><name>numfree</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>free_list</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyCFunctionObject</name> *</type><name>v</name> <init>= <expr><name>free_list</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>free_list</name> = <call>(<name>PyCFunctionObject</name> *)<argument_list>(<argument><expr><name><name>v</name>-&gt;<name>m_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numfree</name>--</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numfree</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>freelist_size</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyCFunction_Fini</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>PyCFunction_ClearFreeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyCFunction_New</name></cpp:undef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_New</name><argument_list>(<argument><expr><name>PyMethodDef</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyCFunction_New</name><parameter_list>(<param><decl><type><name>PyMethodDef</name> *</type><name>ml</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyCFunction_NewEx</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
