<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/exceptions.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_SSIZE_T_CLEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osdefs.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_IT_NONE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(x) = Py_None; Py_INCREF(Py_None);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXC_MODULE_NAME</name></cpp:macro> <cpp:value>"exceptions."</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>exceptions_doc</name></expr></argument>, <argument><expr>"Python's standard exception class hierarchy.\n\
\n\
Exceptions found here are defined both in the exceptions module and the\n\
built-in namespace. It is recommended that user-defined exceptions\n\
inherit from Exception. See the documentation for the exception\n\
inheritance hierarchy.\n\
"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = (<name>PyBaseExceptionObject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>self</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>message</name></name> = <name><name>self</name>-&gt;<name>dict</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>args</name></name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>message</name></name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>message</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BaseException_init</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>_PyArg_NoKeywords</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>args</name></name> = <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>message</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BaseException_clear</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BaseException_dealloc</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BaseException_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BaseException_traverse</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_str</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>out</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>out</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><name>out</name> = <call><name>PyObject_Str</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>out</name> = <call><name>PyObject_Str</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>out</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_unicode</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>out</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>out</name> = <call><name>PyUnicode_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><name>out</name> = <call><name>PyObject_Unicode</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>out</name> = <call><name>PyObject_Unicode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>out</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_repr</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr_suffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dot</name></decl>;</decl_stmt>
<expr_stmt><expr><name>repr_suffix</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>repr_suffix</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>name</name> = (<name>char</name> *)<call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dot</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dot</name> != <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><name>name</name> = <name>dot</name>+1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>repr</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>repr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><name>repr_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>repr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_reduce</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>args</name></name> &amp;&amp; <name><name>self</name>-&gt;<name>dict</name></name></expr>)</condition><then>
<return>return <expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_setstate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>state</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d_key</name></decl>, *<decl><type ref="prev"/><name>d_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>state</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"state is not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>d_key</name></expr></argument>, <argument><expr>&amp;<name>d_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>PyObject_SetAttr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>d_key</name></expr></argument>, <argument><expr><name>d_value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>BaseException_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>BaseException_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{<expr>"__setstate__"</expr>, <expr>(<name>PyCFunction</name>)<name>BaseException_setstate</name></expr>, <expr><name>METH_O</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"__unicode__"</expr>, <expr>(<name>PyCFunction</name>)<name>BaseException_unicode</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_getitem</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"__getitem__ not supported for exception "
"classes in 3.x; use args attribute"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_getslice</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>stop</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"__getslice__ not supported for exception "
"classes in 3.x; use args attribute"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>BaseException_as_sequence</name> <init>= <expr><block>{
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>ssizeargfunc</name>)<name>BaseException_getitem</name></expr>,
<expr>(<name>ssizessizeargfunc</name>)<name>BaseException_getslice</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_get_dict</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>dict</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>dict</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>dict</name></name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>dict</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BaseException_set_dict</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"__dict__ may not be deleted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"__dict__ must be a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>dict</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_get_args</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>args</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>args</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BaseException_set_args</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>seq</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"args may not be deleted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>seq</name> = <call><name>PySequence_Tuple</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>seq</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>args</name></name> = <name>seq</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BaseException_get_message</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>PyErr_WarnEx</name><argument_list>(<argument><expr><name>PyExc_DeprecationWarning</name></expr></argument>,
<argument><expr>"BaseException.message has been deprecated as "
"of Python 2.6"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>message</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BaseException_set_message</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>PyErr_WarnEx</name><argument_list>(<argument><expr><name>PyExc_DeprecationWarning</name></expr></argument>,
<argument><expr>"BaseException.message has been deprecated as "
"of Python 2.6"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>message</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>BaseException_getset</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__dict__"</expr>, <expr>(<name>getter</name>)<name>BaseException_get_dict</name></expr>, <expr>(<name>setter</name>)<name>BaseException_set_dict</name></expr>}</block></expr>,
<expr><block>{<expr>"args"</expr>, <expr>(<name>getter</name>)<name>BaseException_get_args</name></expr>, <expr>(<name>setter</name>)<name>BaseException_set_args</name></expr>}</block></expr>,
<expr><block>{
<expr>"message"</expr>, <expr>(<name>getter</name>)<name>BaseException_get_message</name></expr>,
<expr>(<name>setter</name>)<name>BaseException_set_message</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>_PyExc_BaseException</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr><name>EXC_MODULE_NAME</name> "BaseException"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyBaseExceptionObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>BaseException_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>BaseException_repr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>BaseException_as_sequence</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>BaseException_str</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_GC</name> |
<name>Py_TPFLAGS_BASE_EXC_SUBCLASS</name></expr>,
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"Common base class for all exceptions"</expr></argument>)</argument_list></call></expr>,
<expr>(<name>traverseproc</name>)<name>BaseException_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>BaseException_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>BaseException_methods</name></expr>,
<expr>0</expr>,
<expr><name>BaseException_getset</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyBaseExceptionObject</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>,
<expr>(<name>initproc</name>)<name>BaseException_init</name></expr>,
<expr>0</expr>,
<expr><name>BaseException_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyExc_BaseException</name> <init>= <expr>(<name>PyObject</name> *)&amp;<name>_PyExc_BaseException</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SimpleExtendsException</name><parameter_list>(<param><type><name>EXCBASE</name></type></param>, <param><type><name>EXCNAME</name></type></param>, <param><type><name>EXCDOC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyTypeObject _PyExc_ ##EXCNAME = { PyObject_HEAD_INIT(NULL) 0, EXC_MODULE_NAME #EXCNAME, sizeof(PyBaseExceptionObject), 0, (destructor)BaseException_dealloc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC, PyDoc_STR(EXCDOC), (traverseproc)BaseException_traverse, (inquiry)BaseException_clear, 0, 0, 0, 0, 0, 0, 0, &amp;_ ##EXCBASE, 0, 0, 0, offsetof(PyBaseExceptionObject, dict), (initproc)BaseException_init, 0, BaseException_new,}; PyObject *PyExc_ ##EXCNAME = (PyObject *)&amp;_PyExc_ ##EXCNAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MiddlingExtendsException</name><parameter_list>(<param><type><name>EXCBASE</name></type></param>, <param><type><name>EXCNAME</name></type></param>, <param><type><name>EXCSTORE</name></type></param>, <param><type><name>EXCDOC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyTypeObject _PyExc_ ##EXCNAME = { PyObject_HEAD_INIT(NULL) 0, EXC_MODULE_NAME #EXCNAME, sizeof(Py ##EXCSTORE ##Object), 0, (destructor)EXCSTORE ##_dealloc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC, PyDoc_STR(EXCDOC), (traverseproc)EXCSTORE ##_traverse, (inquiry)EXCSTORE ##_clear, 0, 0, 0, 0, 0, 0, 0, &amp;_ ##EXCBASE, 0, 0, 0, offsetof(Py ##EXCSTORE ##Object, dict), (initproc)EXCSTORE ##_init, 0, BaseException_new,}; PyObject *PyExc_ ##EXCNAME = (PyObject *)&amp;_PyExc_ ##EXCNAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ComplexExtendsException</name><parameter_list>(<param><type><name>EXCBASE</name></type></param>, <param><type><name>EXCNAME</name></type></param>, <param><type><name>EXCSTORE</name></type></param>, <param><type><name>EXCDEALLOC</name></type></param>, <param><type><name>EXCMETHODS</name></type></param>, <param><type><name>EXCMEMBERS</name></type></param>, <param><type><name>EXCSTR</name></type></param>, <param><type><name>EXCDOC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyTypeObject _PyExc_ ##EXCNAME = { PyObject_HEAD_INIT(NULL) 0, EXC_MODULE_NAME #EXCNAME, sizeof(Py ##EXCSTORE ##Object), 0, (destructor)EXCSTORE ##_dealloc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (reprfunc)EXCSTR, 0, 0, 0, Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC, PyDoc_STR(EXCDOC), (traverseproc)EXCSTORE ##_traverse, (inquiry)EXCSTORE ##_clear, 0, 0, 0, 0, EXCMETHODS, EXCMEMBERS, 0, &amp;_ ##EXCBASE, 0, 0, 0, offsetof(Py ##EXCSTORE ##Object, dict), (initproc)EXCSTORE ##_init, 0, BaseException_new,}; PyObject *PyExc_ ##EXCNAME = (PyObject *)&amp;_PyExc_ ##EXCNAME</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_BaseException</name></expr></argument>, <argument><expr><name>Exception</name></expr></argument>,
<argument><expr>"Common base class for all non-exit exceptions."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Exception</name></expr></argument>, <argument><expr><name>StandardError</name></expr></argument>,
<argument><expr>"Base class for all standard Python exceptions that do not represent\n"
"interpreter exiting."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>TypeError</name></expr></argument>,
<argument><expr>"Inappropriate argument type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Exception</name></expr></argument>, <argument><expr><name>StopIteration</name></expr></argument>,
<argument><expr>"Signal the end from iterator.next()."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_BaseException</name></expr></argument>, <argument><expr><name>GeneratorExit</name></expr></argument>,
<argument><expr>"Request that a generator exit."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SystemExit_init</name><parameter_list>(<param><decl><type><name>PySystemExitObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name> <init>= <expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> == 1</expr>)</condition><then>
<expr_stmt><expr><name><name>self</name>-&gt;<name>code</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>size</name> &gt; 1</expr>)</condition><then>
<expr_stmt><expr><name><name>self</name>-&gt;<name>code</name></name> = <name>args</name></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SystemExit_clear</name><parameter_list>(<param><decl><type><name>PySystemExitObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_clear</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SystemExit_dealloc</name><parameter_list>(<param><decl><type><name>PySystemExitObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SystemExit_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SystemExit_traverse</name><parameter_list>(<param><decl><type><name>PySystemExitObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_traverse</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>SystemExit_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"code"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySystemExitObject</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception code"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ComplexExtendsException</name><argument_list>(<argument><expr><name>PyExc_BaseException</name></expr></argument>, <argument><expr><name>SystemExit</name></expr></argument>, <argument><expr><name>SystemExit</name></expr></argument>,
<argument><expr><name>SystemExit_dealloc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SystemExit_members</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Request to exit from the interpreter."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_BaseException</name></expr></argument>, <argument><expr><name>KeyboardInterrupt</name></expr></argument>,
<argument><expr>"Program interrupted by user."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>ImportError</name></expr></argument>,
<argument><expr>"Import can't find module, or can't find name in module."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>EnvironmentError_init</name><parameter_list>(<param><decl><type><name>PyEnvironmentErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>myerrno</name> <init>= <expr><name>NULL</name></expr></init>, *<name>strerror</name> <init>= <expr><name>NULL</name></expr></init>, *<name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>subslice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt;= 1 || <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt; 3</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"EnvironmentError"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>3</expr></argument>,
<argument><expr>&amp;<name>myerrno</name></expr></argument>, <argument><expr>&amp;<name>strerror</name></expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>myerrno</name></name> = <name>myerrno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>strerror</name></name> = <name>strerror</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>filename</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>filename</name></name> = <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subslice</name> = <call><name>PyTuple_GetSlice</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>subslice</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>args</name></name> = <name>subslice</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>EnvironmentError_clear</name><parameter_list>(<param><decl><type><name>PyEnvironmentErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_clear</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EnvironmentError_dealloc</name><parameter_list>(<param><decl><type><name>PyEnvironmentErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnvironmentError_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>EnvironmentError_traverse</name><parameter_list>(<param><decl><type><name>PyEnvironmentErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_traverse</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>EnvironmentError_str</name><parameter_list>(<param><decl><type><name>PyEnvironmentErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rtnval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"[Errno %s] %s: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fmt</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>repr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>repr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tuple</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>strerror</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtnval</name> = <call><name>PyString_Format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>myerrno</name></name> &amp;&amp; <name><name>self</name>-&gt;<name>strerror</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"[Errno %s] %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fmt</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tuple</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>strerror</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rtnval</name> = <call><name>PyString_Format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>rtnval</name> = <call><name>BaseException_str</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<return>return <expr><name>rtnval</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>EnvironmentError_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"errno"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyEnvironmentErrorObject</name></expr></argument>, <argument><expr><name>myerrno</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception errno"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"strerror"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyEnvironmentErrorObject</name></expr></argument>, <argument><expr><name>strerror</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception strerror"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"filename"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyEnvironmentErrorObject</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception filename"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>EnvironmentError_reduce</name><parameter_list>(<param><decl><type><name>PyEnvironmentErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name> <init>= <expr><name><name>self</name>-&gt;<name>args</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init>, *<name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 2 &amp;&amp; <name><name>self</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>args</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>dict</name></name></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>res</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>EnvironmentError_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>EnvironmentError_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ComplexExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>EnvironmentError</name></expr></argument>,
<argument><expr><name>EnvironmentError</name></expr></argument>, <argument><expr><name>EnvironmentError_dealloc</name></expr></argument>,
<argument><expr><name>EnvironmentError_methods</name></expr></argument>, <argument><expr><name>EnvironmentError_members</name></expr></argument>,
<argument><expr><name>EnvironmentError_str</name></expr></argument>,
<argument><expr>"Base class for I/O related errors."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MiddlingExtendsException</name><argument_list>(<argument><expr><name>PyExc_EnvironmentError</name></expr></argument>, <argument><expr><name>IOError</name></expr></argument>,
<argument><expr><name>EnvironmentError</name></expr></argument>, <argument><expr>"I/O operation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MiddlingExtendsException</name><argument_list>(<argument><expr><name>PyExc_EnvironmentError</name></expr></argument>, <argument><expr><name>OSError</name></expr></argument>,
<argument><expr><name>EnvironmentError</name></expr></argument>, <argument><expr>"OS system call failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errmap.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>WindowsError_clear</name><parameter_list>(<param><decl><type><name>PyWindowsErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_clear</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>WindowsError_dealloc</name><parameter_list>(<param><decl><type><name>PyWindowsErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WindowsError_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>WindowsError_traverse</name><parameter_list>(<param><decl><type><name>PyWindowsErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_traverse</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>WindowsError_init</name><parameter_list>(<param><decl><type><name>PyWindowsErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o_errcode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>errcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>posix_errno</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>EnvironmentError_init</name><argument_list>(<argument><expr>(<name>PyEnvironmentErrorObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call>
== -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>myerrno</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>errcode</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>myerrno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errcode</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>posix_errno</name> = <call><name>winerror_to_errno</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>winerror</name></name> = <name><name>self</name>-&gt;<name>myerrno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_errcode</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>posix_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>o_errcode</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>myerrno</name></name> = <name>o_errcode</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>WindowsError_str</name><parameter_list>(<param><decl><type><name>PyWindowsErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rtnval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"[Error %s] %s: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fmt</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>repr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>repr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tuple</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>winerror</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>strerror</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtnval</name> = <call><name>PyString_Format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>winerror</name></name> &amp;&amp; <name><name>self</name>-&gt;<name>strerror</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"[Error %s] %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fmt</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tuple</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>winerror</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>winerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>strerror</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>strerror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rtnval</name> = <call><name>PyString_Format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>rtnval</name> = <call><name>EnvironmentError_str</name><argument_list>(<argument><expr>(<name>PyEnvironmentErrorObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<return>return <expr><name>rtnval</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>WindowsError_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"errno"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyWindowsErrorObject</name></expr></argument>, <argument><expr><name>myerrno</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"POSIX exception code"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"strerror"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyWindowsErrorObject</name></expr></argument>, <argument><expr><name>strerror</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception strerror"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"filename"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyWindowsErrorObject</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception filename"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"winerror"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyWindowsErrorObject</name></expr></argument>, <argument><expr><name>winerror</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Win32 exception code"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ComplexExtendsException</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>, <argument><expr><name>WindowsError</name></expr></argument>, <argument><expr><name>WindowsError</name></expr></argument>,
<argument><expr><name>WindowsError_dealloc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>WindowsError_members</name></expr></argument>,
<argument><expr><name>WindowsError_str</name></expr></argument>, <argument><expr>"MS-Windows OS system call failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>MiddlingExtendsException</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>, <argument><expr><name>VMSError</name></expr></argument>, <argument><expr><name>EnvironmentError</name></expr></argument>,
<argument><expr>"OpenVMS OS system call failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>EOFError</name></expr></argument>,
<argument><expr>"Read beyond end of file."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>RuntimeError</name></expr></argument>,
<argument><expr>"Unspecified run-time error."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr><name>NotImplementedError</name></expr></argument>,
<argument><expr>"Method or function hasn't been implemented yet."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>NameError</name></expr></argument>,
<argument><expr>"Name not found globally."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_NameError</name></expr></argument>, <argument><expr><name>UnboundLocalError</name></expr></argument>,
<argument><expr>"Local name referenced but not bound to a value."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>AttributeError</name></expr></argument>,
<argument><expr>"Attribute not found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SyntaxError_init</name><parameter_list>(<param><decl><type><name>PySyntaxErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lenargs</name> <init>= <expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>lenargs</name> &gt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>msg</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>lenargs</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <call><name>PySequence_Tuple</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>info</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> != 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"tuple index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>filename</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>lineno</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>offset</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>text</name></name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SyntaxError_clear</name><parameter_list>(<param><decl><type><name>PySyntaxErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>print_file_and_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_clear</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SyntaxError_dealloc</name><parameter_list>(<param><decl><type><name>PySyntaxErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SyntaxError_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>SyntaxError_traverse</name><parameter_list>(<param><decl><type><name>PySyntaxErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>print_file_and_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_traverse</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>my_basename</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>result</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>"???"</expr>;</return></then></if>
<while>while <condition>(<expr>*<name>cp</name> != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>cp</name> == <name>SEP</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>cp</name> + 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr>++<name>cp</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>SyntaxError_str</name><parameter_list>(<param><decl><type><name>PySyntaxErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_filename</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_lineno</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>msg</name></name></expr>)</condition><then>
<expr_stmt><expr><name>str</name> = <call><name>PyObject_Str</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>str</name> = <call><name>PyObject_Str</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>str</name></expr>;</return></then></if>
<expr_stmt><expr><name>have_filename</name> = (<name><name>self</name>-&gt;<name>filename</name></name> != <name>NULL</name>) &amp;&amp;
<call><name>PyString_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_lineno</name> = (<name><name>self</name>-&gt;<name>lineno</name></name> != <name>NULL</name>) &amp;&amp; <call><name>PyInt_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>have_filename</name> &amp;&amp; !<name>have_lineno</name></expr>)</condition><then>
<return>return <expr><name>str</name></expr>;</return></then></if>
<expr_stmt><expr><name>bufsize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> + 64</expr>;</expr_stmt>
<if>if <condition>(<expr><name>have_filename</name></expr>)</condition><then>
<expr_stmt><expr><name>bufsize</name> += <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>buffer</name> = <call><name>PyMem_MALLOC</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buffer</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>str</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>have_filename</name> &amp;&amp; <name>have_lineno</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%s (%s, line %ld)"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>my_basename</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>have_filename</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%s (%s)"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>my_basename</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%s (line %ld)"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>str</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>SyntaxError_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"msg"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySyntaxErrorObject</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception msg"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"filename"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySyntaxErrorObject</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception filename"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"lineno"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySyntaxErrorObject</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception lineno"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"offset"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySyntaxErrorObject</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception offset"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"text"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySyntaxErrorObject</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception text"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"print_file_and_line"</expr>, <expr><name>T_OBJECT</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PySyntaxErrorObject</name></expr></argument>, <argument><expr><name>print_file_and_line</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception print_file_and_line"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ComplexExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>SyntaxError</name></expr></argument>, <argument><expr><name>SyntaxError</name></expr></argument>,
<argument><expr><name>SyntaxError_dealloc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SyntaxError_members</name></expr></argument>,
<argument><expr><name>SyntaxError_str</name></expr></argument>, <argument><expr>"Invalid syntax."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MiddlingExtendsException</name><argument_list>(<argument><expr><name>PyExc_SyntaxError</name></expr></argument>, <argument><expr><name>IndentationError</name></expr></argument>, <argument><expr><name>SyntaxError</name></expr></argument>,
<argument><expr>"Improper indentation."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MiddlingExtendsException</name><argument_list>(<argument><expr><name>PyExc_IndentationError</name></expr></argument>, <argument><expr><name>TabError</name></expr></argument>, <argument><expr><name>SyntaxError</name></expr></argument>,
<argument><expr>"Improper mixture of spaces and tabs."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>LookupError</name></expr></argument>,
<argument><expr>"Base class for lookup errors."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_LookupError</name></expr></argument>, <argument><expr><name>IndexError</name></expr></argument>,
<argument><expr>"Sequence index out of range."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>KeyError_str</name><parameter_list>(<param><decl><type><name>PyBaseExceptionObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>BaseException_str</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>ComplexExtendsException</name><argument_list>(<argument><expr><name>PyExc_LookupError</name></expr></argument>, <argument><expr><name>KeyError</name></expr></argument>, <argument><expr><name>BaseException</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>KeyError_str</name></expr></argument>, <argument><expr>"Mapping key not found."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>ValueError</name></expr></argument>,
<argument><expr>"Inappropriate argument value (of correct type)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><name>UnicodeError</name></expr></argument>,
<argument><expr>"Unicode related error."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_string</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>attr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"%.200s attribute not set"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"%.200s attribute must be str"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_string</name><parameter_list>(<param><decl><type><name>PyObject</name> **</type><name>attr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr>*<name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>attr</name> = <name>obj</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_unicode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>attr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"%.200s attribute not set"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%.200s attribute must be unicode"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeEncodeError_GetEncoding</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>encoding</name></expr></argument>, <argument><expr>"encoding"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeDecodeError_GetEncoding</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>encoding</name></expr></argument>, <argument><expr>"encoding"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeEncodeError_GetObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_unicode</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>, <argument><expr>"object"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeDecodeError_GetObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>, <argument><expr>"object"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeTranslateError_GetObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_unicode</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>, <argument><expr>"object"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeEncodeError_GetStart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>start</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name> <init>= <expr><call><name>get_unicode</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>,
<argument><expr>"object"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*<name>start</name> = ((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>start</name>&lt;0</expr>)</condition><then>
<expr_stmt><expr>*<name>start</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>start</name>&gt;=<name>size</name></expr>)</condition><then>
<expr_stmt><expr>*<name>start</name> = <name>size</name>-1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeDecodeError_GetStart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>start</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name> <init>= <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>,
<argument><expr>"object"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>size</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>start</name> = ((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>start</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>start</name>&lt;0</expr>)</condition><then>
<expr_stmt><expr>*<name>start</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>start</name>&gt;=<name>size</name></expr>)</condition><then>
<expr_stmt><expr>*<name>start</name> = <name>size</name>-1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeTranslateError_GetStart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>start</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyUnicodeEncodeError_GetStart</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeEncodeError_SetStart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>start</name> = <name>start</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeDecodeError_SetStart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>start</name> = <name>start</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeTranslateError_SetStart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>start</name> = <name>start</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeEncodeError_GetEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>end</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name> <init>= <expr><call><name>get_unicode</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>,
<argument><expr>"object"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*<name>end</name> = ((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>end</name>&lt;1</expr>)</condition><then>
<expr_stmt><expr>*<name>end</name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>end</name>&gt;<name>size</name></expr>)</condition><then>
<expr_stmt><expr>*<name>end</name> = <name>size</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeDecodeError_GetEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>end</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name> <init>= <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>object</name></expr></argument>,
<argument><expr>"object"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*<name>end</name> = ((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>end</name>&lt;1</expr>)</condition><then>
<expr_stmt><expr>*<name>end</name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>end</name>&gt;<name>size</name></expr>)</condition><then>
<expr_stmt><expr>*<name>end</name> = <name>size</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeTranslateError_GetEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>start</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyUnicodeEncodeError_GetEnd</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeEncodeError_SetEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>end</name> = <name>end</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeDecodeError_SetEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>end</name> = <name>end</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeTranslateError_SetEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>end</name> = <name>end</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeEncodeError_GetReason</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>reason</name></expr></argument>, <argument><expr>"reason"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeDecodeError_GetReason</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>reason</name></expr></argument>, <argument><expr>"reason"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeTranslateError_GetReason</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_string</name><argument_list>(<argument><expr>((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>reason</name></expr></argument>, <argument><expr>"reason"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeEncodeError_SetReason</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>set_string</name><argument_list>(<argument><expr>&amp;((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>reason</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeDecodeError_SetReason</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>set_string</name><argument_list>(<argument><expr>&amp;((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>reason</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyUnicodeTranslateError_SetReason</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>set_string</name><argument_list>(<argument><expr>&amp;((<name>PyUnicodeErrorObject</name> *)<name>exc</name>)-&gt;<name>reason</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UnicodeError_init</name><parameter_list>(<param><decl><type><name>PyUnicodeErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>,
<param><decl><type><name>PyTypeObject</name> *</type><name>objecttype</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!O!nnO!"</expr></argument>,
<argument><expr>&amp;<name>PyString_Type</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>encoding</name></name></expr></argument>,
<argument><expr><name>objecttype</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>object</name></name></expr></argument>,
<argument><expr>&amp;<name><name>self</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr>&amp;<name><name>self</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr>&amp;<name>PyString_Type</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>encoding</name></name> = <name><name>self</name>-&gt;<name>object</name></name> = <name><name>self</name>-&gt;<name>reason</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UnicodeError_clear</name><parameter_list>(<param><decl><type><name>PyUnicodeErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_clear</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>UnicodeError_dealloc</name><parameter_list>(<param><decl><type><name>PyUnicodeErrorObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_PyObject_GC_UNTRACK</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnicodeError_clear</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UnicodeError_traverse</name><parameter_list>(<param><decl><type><name>PyUnicodeErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BaseException_traverse</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>visit</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>UnicodeError_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"encoding"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception encoding"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"object"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception object"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"start"</expr>, <expr><name>T_PYSSIZET</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception start"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"end"</expr>, <expr><name>T_PYSSIZET</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception end"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"reason"</expr>, <expr><name>T_OBJECT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"exception reason"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UnicodeEncodeError_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>UnicodeError_init</name><argument_list>(<argument><expr>(<name>PyUnicodeErrorObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><name>kwds</name></expr></argument>, <argument><expr>&amp;<name>PyUnicode_Type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>UnicodeEncodeError_str</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyUnicodeErrorObject</name> *</type><name>uself</name> <init>= <expr>(<name>PyUnicodeErrorObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>uself</name>-&gt;<name>end</name></name>==<name><name>uself</name>-&gt;<name>start</name></name>+1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>badchar</name> <init>= <expr>(<name>int</name>)<call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call><index>[<expr><name><name>uself</name>-&gt;<name>start</name></name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>badchar_str</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>badchar</name> &lt;= 0xff</expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>badchar_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>badchar_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"x%02x"</expr></argument>, <argument><expr><name>badchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>badchar</name> &lt;= 0xffff</expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>badchar_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>badchar_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"u%04x"</expr></argument>, <argument><expr><name>badchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>badchar_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>badchar_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"U%08x"</expr></argument>, <argument><expr><name>badchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"'%.400s' codec can't encode character u'\\%s' in position %zd: %.400s"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>badchar_str</name></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"'%.400s' codec can't encode characters in position %zd-%zd: %.400s"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>end</name></name>-1</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>_PyExc_UnicodeEncodeError</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr><name>EXC_MODULE_NAME</name> "UnicodeEncodeError"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
<expr>(<name>destructor</name>)<name>UnicodeError_dealloc</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>UnicodeEncodeError_str</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"Unicode encoding error."</expr></argument>)</argument_list></call></expr>, <expr>(<name>traverseproc</name>)<name>UnicodeError_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>UnicodeError_clear</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr><name>UnicodeError_members</name></expr>,
<expr>0</expr>, <expr>&amp;<name>_PyExc_UnicodeError</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>,
<expr>(<name>initproc</name>)<name>UnicodeEncodeError_init</name></expr>, <expr>0</expr>, <expr><name>BaseException_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyExc_UnicodeEncodeError</name> <init>= <expr>(<name>PyObject</name> *)&amp;<name>_PyExc_UnicodeEncodeError</name></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeEncodeError_Create</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>object</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>PyExc_UnicodeEncodeError</name></expr></argument>, <argument><expr>"su#nns"</expr></argument>,
<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UnicodeDecodeError_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>UnicodeError_init</name><argument_list>(<argument><expr>(<name>PyUnicodeErrorObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><name>kwds</name></expr></argument>, <argument><expr>&amp;<name>PyString_Type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>UnicodeDecodeError_str</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyUnicodeErrorObject</name> *</type><name>uself</name> <init>= <expr>(<name>PyUnicodeErrorObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>uself</name>-&gt;<name>end</name></name>==<name><name>uself</name>-&gt;<name>start</name></name>+1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>byte</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>byte</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%02x"</expr></argument>,
<argument><expr>((<name>int</name>)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call><index>[<expr><name><name>uself</name>-&gt;<name>start</name></name></expr>]</index>)&amp;0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"'%.400s' codec can't decode byte 0x%s in position %zd: %.400s"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>byte</name></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"'%.400s' codec can't decode bytes in position %zd-%zd: %.400s"</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>end</name></name>-1</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>_PyExc_UnicodeDecodeError</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr><name>EXC_MODULE_NAME</name> "UnicodeDecodeError"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
<expr>(<name>destructor</name>)<name>UnicodeError_dealloc</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>UnicodeDecodeError_str</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"Unicode decoding error."</expr></argument>)</argument_list></call></expr>, <expr>(<name>traverseproc</name>)<name>UnicodeError_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>UnicodeError_clear</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr><name>UnicodeError_members</name></expr>,
<expr>0</expr>, <expr>&amp;<name>_PyExc_UnicodeError</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>,
<expr>(<name>initproc</name>)<name>UnicodeDecodeError_init</name></expr>, <expr>0</expr>, <expr><name>BaseException_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyExc_UnicodeDecodeError</name> <init>= <expr>(<name>PyObject</name> *)&amp;<name>_PyExc_UnicodeDecodeError</name></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeDecodeError_Create</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>object</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>length</name> &lt; <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> &lt; <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> &lt; <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>PyExc_UnicodeDecodeError</name></expr></argument>, <argument><expr>"ss#nns"</expr></argument>,
<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>UnicodeTranslateError_init</name><parameter_list>(<param><decl><type><name>PyUnicodeErrorObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr>(<name>PyBaseExceptionObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!nnO!"</expr></argument>,
<argument><expr>&amp;<name>PyUnicode_Type</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>object</name></name></expr></argument>,
<argument><expr>&amp;<name><name>self</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr>&amp;<name><name>self</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr>&amp;<name>PyString_Type</name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>object</name></name> = <name><name>self</name>-&gt;<name>reason</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>UnicodeTranslateError_str</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyUnicodeErrorObject</name> *</type><name>uself</name> <init>= <expr>(<name>PyUnicodeErrorObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>uself</name>-&gt;<name>end</name></name>==<name><name>uself</name>-&gt;<name>start</name></name>+1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>badchar</name> <init>= <expr>(<name>int</name>)<call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call><index>[<expr><name><name>uself</name>-&gt;<name>start</name></name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>badchar_str</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>badchar</name> &lt;= 0xff</expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>badchar_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>badchar_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"x%02x"</expr></argument>, <argument><expr><name>badchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>badchar</name> &lt;= 0xffff</expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>badchar_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>badchar_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"u%04x"</expr></argument>, <argument><expr><name>badchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>badchar_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>badchar_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"U%08x"</expr></argument>, <argument><expr><name>badchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"can't translate character u'\\%s' in position %zd: %.400s"</expr></argument>,
<argument><expr><name>badchar_str</name></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"can't translate characters in position %zd-%zd: %.400s"</expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>uself</name>-&gt;<name>end</name></name>-1</expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>uself</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>_PyExc_UnicodeTranslateError</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr><name>EXC_MODULE_NAME</name> "UnicodeTranslateError"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
<expr>(<name>destructor</name>)<name>UnicodeError_dealloc</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>UnicodeTranslateError_str</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"Unicode translation error."</expr></argument>)</argument_list></call></expr>, <expr>(<name>traverseproc</name>)<name>UnicodeError_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>UnicodeError_clear</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr><name>UnicodeError_members</name></expr>,
<expr>0</expr>, <expr>&amp;<name>_PyExc_UnicodeError</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PyUnicodeErrorObject</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>,
<expr>(<name>initproc</name>)<name>UnicodeTranslateError_init</name></expr>, <expr>0</expr>, <expr><name>BaseException_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyExc_UnicodeTranslateError</name> <init>= <expr>(<name>PyObject</name> *)&amp;<name>_PyExc_UnicodeTranslateError</name></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyUnicodeTranslateError_Create</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>object</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>PyExc_UnicodeTranslateError</name></expr></argument>, <argument><expr>"u#nns"</expr></argument>,
<argument><expr><name>object</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>AssertionError</name></expr></argument>,
<argument><expr>"Assertion failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>ArithmeticError</name></expr></argument>,
<argument><expr>"Base class for arithmetic errors."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_ArithmeticError</name></expr></argument>, <argument><expr><name>FloatingPointError</name></expr></argument>,
<argument><expr>"Floating point operation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_ArithmeticError</name></expr></argument>, <argument><expr><name>OverflowError</name></expr></argument>,
<argument><expr>"Result too large to be represented."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_ArithmeticError</name></expr></argument>, <argument><expr><name>ZeroDivisionError</name></expr></argument>,
<argument><expr>"Second argument to a division or modulo operation was zero."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>SystemError</name></expr></argument>,
<argument><expr>"Internal error in the Python interpreter.\n"
"\n"
"Please report this to the Python maintainer, along with the traceback,\n"
"the Python version, and the hardware/OS platform and version."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>ReferenceError</name></expr></argument>,
<argument><expr>"Weak ref proxy used after referent went away."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>MemoryError</name></expr></argument>, <argument><expr>"Out of memory."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_StandardError</name></expr></argument>, <argument><expr><name>BufferError</name></expr></argument>, <argument><expr>"Buffer error."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Exception</name></expr></argument>, <argument><expr><name>Warning</name></expr></argument>,
<argument><expr>"Base class for warning categories."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>UserWarning</name></expr></argument>,
<argument><expr>"Base class for warnings generated by user code."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>DeprecationWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about deprecated features."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>PendingDeprecationWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about features which will be deprecated\n"
"in the future."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>SyntaxWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about dubious syntax."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>RuntimeWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about dubious runtime behavior."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>FutureWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about constructs that will change semantically\n"
"in the future."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>ImportWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about probable mistakes in module imports"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>UnicodeWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about Unicode related problems, mostly\n"
"related to conversion problems."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SimpleExtendsException</name><argument_list>(<argument><expr><name>PyExc_Warning</name></expr></argument>, <argument><expr><name>BytesWarning</name></expr></argument>,
<argument><expr>"Base class for warnings about bytes and buffer related problems, mostly\n"
"related to conversion from str or comparing to str."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyExc_MemoryErrorInst</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>PyExc_RecursionErrorInst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>functions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_INIT</name><parameter_list>(<param><type><name>TYPE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (PyType_Ready(&amp;_PyExc_ ##TYPE) &lt; 0) Py_FatalError("exceptions bootstrapping error.");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POST_INIT</name><parameter_list>(<param><type><name>TYPE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_INCREF(PyExc_ ##TYPE); PyModule_AddObject(m, #TYPE, PyExc_ ##TYPE); if (PyDict_SetItemString(bdict, #TYPE, PyExc_ ##TYPE)) Py_FatalError("Module dictionary insertion problem.");</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name> &amp;&amp; <name>_MSC_VER</name> &gt;= 1400 &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_SECURE_LIB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtdbg.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevCrtReportMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>_invalid_parameter_handler</name></type> <name>prevCrtHandler</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InvalidParameterHandler</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>wchar_t</name> *</type> <name>expression</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>wchar_t</name> *</type> <name>function</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>wchar_t</name> *</type> <name>file</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>line</name></decl></param>,
<param><decl><type><name>uintptr_t</name></type> <name>pReserved</name></decl></param>)</parameter_list> <block>{
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>_PyExc_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>bltinmod</name></decl>, *<decl><type ref="prev"/><name>bdict</name></decl>;</decl_stmt>
<macro><name>PRE_INIT</name><argument_list>(<argument>BaseException</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>Exception</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>StandardError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>TypeError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>StopIteration</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>GeneratorExit</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>SystemExit</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>KeyboardInterrupt</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>ImportError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>EnvironmentError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>IOError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>OSError</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PRE_INIT</name><argument_list>(<argument>WindowsError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PRE_INIT</name><argument_list>(<argument>VMSError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PRE_INIT</name><argument_list>(<argument>EOFError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>RuntimeError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>NotImplementedError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>NameError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>UnboundLocalError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>AttributeError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>SyntaxError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>IndentationError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>TabError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>LookupError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>IndexError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>KeyError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>ValueError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>UnicodeError</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PRE_INIT</name><argument_list>(<argument>UnicodeEncodeError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>UnicodeDecodeError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>UnicodeTranslateError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PRE_INIT</name><argument_list>(<argument>AssertionError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>ArithmeticError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>FloatingPointError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>OverflowError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>ZeroDivisionError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>SystemError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>ReferenceError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>MemoryError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>BufferError</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>Warning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>UserWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>DeprecationWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>PendingDeprecationWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>SyntaxWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>RuntimeWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>FutureWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>ImportWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>UnicodeWarning</argument>)</argument_list></macro>
<macro><name>PRE_INIT</name><argument_list>(<argument>BytesWarning</argument>)</argument_list></macro>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"exceptions"</expr></argument>, <argument><expr><name>functions</name></expr></argument>, <argument><expr><name>exceptions_doc</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><name>bltinmod</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>"__builtin__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bltinmod</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"exceptions bootstrapping error."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>bdict</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>bltinmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bdict</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"exceptions bootstrapping error."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<macro><name>POST_INIT</name><argument_list>(<argument>BaseException</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>Exception</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>StandardError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>TypeError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>StopIteration</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>GeneratorExit</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>SystemExit</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>KeyboardInterrupt</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>ImportError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>EnvironmentError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>IOError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>OSError</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>POST_INIT</name><argument_list>(<argument>WindowsError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>POST_INIT</name><argument_list>(<argument>VMSError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>POST_INIT</name><argument_list>(<argument>EOFError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>RuntimeError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>NotImplementedError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>NameError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>UnboundLocalError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>AttributeError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>SyntaxError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>IndentationError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>TabError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>LookupError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>IndexError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>KeyError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>ValueError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>UnicodeError</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>POST_INIT</name><argument_list>(<argument>UnicodeEncodeError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>UnicodeDecodeError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>UnicodeTranslateError</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>POST_INIT</name><argument_list>(<argument>AssertionError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>ArithmeticError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>FloatingPointError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>OverflowError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>ZeroDivisionError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>SystemError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>ReferenceError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>MemoryError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>BufferError</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>Warning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>UserWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>DeprecationWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>PendingDeprecationWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>SyntaxWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>RuntimeWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>FutureWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>ImportWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>UnicodeWarning</argument>)</argument_list></macro>
<macro><name>POST_INIT</name><argument_list>(<argument>BytesWarning</argument>)</argument_list></macro>
<expr_stmt><expr><name>PyExc_MemoryErrorInst</name> = <call><name>BaseException_new</name><argument_list>(<argument><expr>&amp;<name>_PyExc_MemoryError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>PyExc_MemoryErrorInst</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Cannot pre-allocate MemoryError instance\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>PyExc_RecursionErrorInst</name> = <call><name>BaseException_new</name><argument_list>(<argument><expr>&amp;<name>_PyExc_RuntimeError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>PyExc_RecursionErrorInst</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Cannot pre-allocate RuntimeError instance for "
"recursion errors"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>PyBaseExceptionObject</name> *</type><name>err_inst</name> <init>=
<expr>(<name>PyBaseExceptionObject</name> *)<name>PyExc_RecursionErrorInst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args_tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_message</name></decl>;</decl_stmt>
<expr_stmt><expr><name>exc_message</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"maximum recursion depth exceeded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>exc_message</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"cannot allocate argument for RuntimeError "
"pre-allocation"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>args_tuple</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>exc_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>args_tuple</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"cannot allocate tuple for RuntimeError "
"pre-allocation"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>exc_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>BaseException_init</name><argument_list>(<argument><expr><name>err_inst</name></expr></argument>, <argument><expr><name>args_tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"init of pre-allocated RuntimeError failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>bltinmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name> &amp;&amp; <name>_MSC_VER</name> &gt;= 1400 &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_SECURE_LIB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prevCrtHandler</name> = <call><name>_set_invalid_parameter_handler</name><argument_list>(<argument><expr><name>InvalidParameterHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevCrtReportMode</name> = <call><name>_CrtSetReportMode</name><argument_list>(<argument><expr><name>_CRT_ASSERT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type>
<name>_PyExc_Fini</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>PyExc_MemoryErrorInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PyExc_MemoryErrorInst</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name> &amp;&amp; <name>_MSC_VER</name> &gt;= 1400 &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_SECURE_LIB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_set_invalid_parameter_handler</name><argument_list>(<argument><expr><name>prevCrtHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CrtSetReportMode</name><argument_list>(<argument><expr><name>_CRT_ASSERT</name></expr></argument>, <argument><expr><name>prevCrtReportMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
