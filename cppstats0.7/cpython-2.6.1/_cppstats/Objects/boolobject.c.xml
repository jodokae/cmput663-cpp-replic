<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/boolobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bool_print</name><parameter_list>(<param><decl><type><name>PyBoolObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fputs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_ival</name></name> == 0 ? "False" : "True"</expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>false_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>true_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bool_repr</name><parameter_list>(<param><decl><type><name>PyBoolObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_ival</name></name></expr>)</condition><then>
<expr_stmt><expr><name>s</name> = <name>true_str</name> ? <name>true_str</name> :
(<name>true_str</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"True"</expr></argument>)</argument_list></call>)</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>s</name> = <name>false_str</name> ? <name>false_str</name> :
(<name>false_str</name> = <call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"False"</expr></argument>)</argument_list></call>)</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type><name>PyBool_FromLong</name><parameter_list>(<param><decl><type><name>long</name></type> <name>ok</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>Py_True</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <name>Py_False</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bool_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"x"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ok</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"|O:bool"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ok</name> = <call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ok</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bool_and</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> || !<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name><name>PyInt_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_and</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(
<argument><expr>((<name>PyBoolObject</name> *)<name>a</name>)-&gt;<name>ob_ival</name> &amp; ((<name>PyBoolObject</name> *)<name>b</name>)-&gt;<name>ob_ival</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bool_or</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> || !<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name><name>PyInt_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_or</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(
<argument><expr>((<name>PyBoolObject</name> *)<name>a</name>)-&gt;<name>ob_ival</name> | ((<name>PyBoolObject</name> *)<name>b</name>)-&gt;<name>ob_ival</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bool_xor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> || !<call><name>PyBool_Check</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name><name>PyInt_Type</name>.<name>tp_as_number</name>-&gt;<name>nb_xor</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(
<argument><expr>((<name>PyBoolObject</name> *)<name>a</name>)-&gt;<name>ob_ival</name> ^ ((<name>PyBoolObject</name> *)<name>b</name>)-&gt;<name>ob_ival</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>bool_doc</name></expr></argument>,
<argument><expr>"bool(x) -&gt; bool\n\
\n\
Returns True when the argument x is true, False otherwise.\n\
The builtins True and False are the only two instances of the class bool.\n\
The class bool is a subclass of the class int, and cannot be subclassed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>bool_as_number</name> <init>= <expr><block>{
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>bool_and</name></expr>,
<expr><name>bool_xor</name></expr>,
<expr><name>bool_or</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyBool_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"bool"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyIntObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>printfunc</name>)<name>bool_print</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>bool_repr</name></expr>,
<expr>&amp;<name>bool_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>bool_repr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name></expr>,
<expr><name>bool_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>&amp;<name>PyInt_Type</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>bool_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name></type> <name>_Py_ZeroStruct</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyBool_Type</name></expr></argument>)</argument_list></call>
0</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyIntObject</name></type> <name>_Py_TrueStruct</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyBool_Type</name></expr></argument>)</argument_list></call>
1</expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
