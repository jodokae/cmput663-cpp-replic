<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/bufferobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>b_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>b_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>b_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>b_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_readonly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>b_hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyBufferObject</name>;</typedef>
<enum>enum <name>buffer_t</name> <block>{
<decl><name>READ_BUFFER</name></decl>,
<decl><name>WRITE_BUFFER</name></decl>,
<decl><name>CHAR_BUFFER</name></decl>,
<decl><name>ANY_BUFFER</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>get_buf</name><argument_list>(<argument><expr><name>PyBufferObject</name> *<name>self</name></expr></argument>, <argument><expr><name>void</name> **<name>ptr</name></expr></argument>, <argument><expr><name>Py_ssize_t</name> *<name>size</name></expr></argument>,
<argument>enum <expr><name>buffer_t</name> <name>buffer_type</name></expr></argument>)</argument_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>b_base</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>ptr</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ptr</name> = <name><name>self</name>-&gt;<name>b_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>size</name> = <name><name>self</name>-&gt;<name>b_size</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>readbufferproc</name></type> <name>proc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>bp</name> <init>= <expr><name><name>self</name>-&gt;<name>b_base</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call>(*<name><name>bp</name>-&gt;<name>bf_getsegcount</name></name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>b_base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"single-segment buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>buffer_type</name> == <name>READ_BUFFER</name>) ||
((<name>buffer_type</name> == <name>ANY_BUFFER</name>) &amp;&amp; <name><name>self</name>-&gt;<name>b_readonly</name></name>)</expr>)</condition><then>
<expr_stmt><expr><name>proc</name> = <name><name>bp</name>-&gt;<name>bf_getreadbuffer</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>(<name>buffer_type</name> == <name>WRITE_BUFFER</name>) ||
(<name>buffer_type</name> == <name>ANY_BUFFER</name>)</expr>)</condition><then>
<expr_stmt><expr><name>proc</name> = (<name>readbufferproc</name>)<name><name>bp</name>-&gt;<name>bf_getwritebuffer</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>buffer_type</name> == <name>CHAR_BUFFER</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyType_HasFeature</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_type</name></name></expr></argument>,
<argument><expr><name>Py_TPFLAGS_HAVE_GETCHARBUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"Py_TPFLAGS_HAVE_GETCHARBUFFER needed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>proc</name> = (<name>readbufferproc</name>)<name><name>bp</name>-&gt;<name>bf_getcharbuffer</name></name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr>!<name>proc</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buffer_type_name</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>buffer_type</name></expr>)</condition> <block>{
<case>case <expr><name>READ_BUFFER</name></expr>:
<expr_stmt><expr><name>buffer_type_name</name> = "read"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>WRITE_BUFFER</name></expr>:
<expr_stmt><expr><name>buffer_type_name</name> = "write"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CHAR_BUFFER</name></expr>:
<expr_stmt><expr><name>buffer_type_name</name> = "char"</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>buffer_type_name</name> = "no"</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"%s buffer type not available"</expr></argument>,
<argument><expr><name>buffer_type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>count</name> = <call>(*<name>proc</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>b_base</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>b_offset</name></name> &gt; <name>count</name></expr>)</condition><then>
<expr_stmt><expr><name>offset</name> = <name>count</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>offset</name> = <name><name>self</name>-&gt;<name>b_offset</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*(<name>char</name> **)<name>ptr</name> = *(<name>char</name> **)<name>ptr</name> + <name>offset</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>b_size</name></name> == <name>Py_END_OF_BUFFER</name></expr>)</condition><then>
<expr_stmt><expr>*<name>size</name> = <name>count</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>size</name> = <name><name>self</name>-&gt;<name>b_size</name></name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>offset</name> + *<name>size</name> &gt; <name>count</name></expr>)</condition><then>
<expr_stmt><expr>*<name>size</name> = <name>count</name> - <name>offset</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<return>return <expr>1</expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_from_memory</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>base</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>offset</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>,
<param><decl><type><name>int</name></type> <name>readonly</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferObject</name> *</type> <name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>size</name> &lt; 0 &amp;&amp; <name>size</name> != <name>Py_END_OF_BUFFER</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"size must be zero or positive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>offset</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"offset must be zero or positive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>b</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyBufferObject</name></expr></argument>, <argument><expr>&amp;<name>PyBuffer_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>b</name> == <name>NULL</name></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_base</name></name> = <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_ptr</name></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_size</name></name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_offset</name></name> = <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_readonly</name></name> = <name>readonly</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_hash</name></name> = -1</expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *) <name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_from_object</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>base</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>readonly</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>offset</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"offset must be zero or positive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><call><name>PyBuffer_Check</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> &amp;&amp; (((<name>PyBufferObject</name> *)<name>base</name>)-&gt;<name>b_base</name>)</expr> )</condition><then> <block>{
<decl_stmt><decl><type><name>PyBufferObject</name> *</type><name>b</name> <init>= <expr>(<name>PyBufferObject</name> *)<name>base</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>b_size</name></name> != <name>Py_END_OF_BUFFER</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>base_size</name> <init>= <expr><name><name>b</name>-&gt;<name>b_size</name></name> - <name>offset</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>base_size</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>base_size</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>size</name> == <name>Py_END_OF_BUFFER</name> || <name>size</name> &gt; <name>base_size</name></expr>)</condition><then>
<expr_stmt><expr><name>size</name> = <name>base_size</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>offset</name> += <name><name>b</name>-&gt;<name>b_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> = <name><name>b</name>-&gt;<name>b_base</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>buffer_from_memory</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>readonly</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyBuffer_FromObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>base</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>offset</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name> <init>= <expr><name><name>base</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr><name>pb</name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>buffer_from_object</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyBuffer_FromReadWriteObject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>base</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>offset</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name> <init>= <expr><name><name>base</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr><name>pb</name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getwritebuffer</name></name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>buffer_from_object</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyBuffer_FromMemory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>buffer_from_memory</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyBuffer_FromReadWriteMemory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>buffer_from_memory</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyBuffer_New</name><parameter_list>(<param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBufferObject</name> *</type> <name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>size</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"size must be zero or positive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof> &gt; <name>PY_SSIZE_T_MAX</name> - <name>size</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>o</name> = (<name>PyObject</name> *)<call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof> + <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>o</name> == <name>NULL</name></expr> )</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>b</name> = (<name>PyBufferObject</name> *) <call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr>&amp;<name>PyBuffer_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_base</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_ptr</name></name> = <call>(<name>void</name> *)<argument_list>(<argument><expr><name>b</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_size</name></name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_offset</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_readonly</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>b_hash</name></name> = -1</expr>;</expr_stmt>
<return>return <expr><name>o</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name> <init>= <expr><name>Py_END_OF_BUFFER</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"buffer() not supported in 3.x"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>_PyArg_NoKeywords</name><argument_list>(<argument><expr>"buffer()"</expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|nn:buffer"</expr></argument>, <argument><expr>&amp;<name>ob</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyBuffer_FromObject</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>buffer_doc</name></expr></argument>,
<argument><expr>"buffer(object [, offset[, size]])\n\
\n\
Create a new buffer object which references the given object.\n\
The buffer will reference a slice of the target object from the\n\
start of the object (or at the specified offset). The slice will\n\
extend to the end of the target object (or with the specified size)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>buffer_dealloc</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>b_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>buffer_compare</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyBufferObject</name> *</type><name>other</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>p1</name></decl>, *<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len_self</name></decl>, <decl><type ref="prev"/><name>len_other</name></decl>, <decl><type ref="prev"/><name>min_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>p1</name></expr></argument>, <argument><expr>&amp;<name>len_self</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>&amp;<name>p2</name></expr></argument>, <argument><expr>&amp;<name>len_other</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>min_len</name> = (<name>len_self</name> &lt; <name>len_other</name>) ? <name>len_self</name> : <name>len_other</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>min_len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmp</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> != 0</expr>)</condition><then>
<return>return <expr><name>cmp</name> &lt; 0 ? -1 : 1</expr>;</return></then></if>
}</block></then></if>
<return>return <expr>(<name>len_self</name> &lt; <name>len_other</name>) ? -1 : (<name>len_self</name> &gt; <name>len_other</name>) ? 1 : 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_repr</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status</name> <init>= <expr><name><name>self</name>-&gt;<name>b_readonly</name></name> ? "read-only" : "read-write"</expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr><name><name>self</name>-&gt;<name>b_base</name></name> == <name>NULL</name></expr> )</condition><then>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"&lt;%s buffer ptr %p, size %zd at %p&gt;"</expr></argument>,
<argument><expr><name>status</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>b_ptr</name></name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>b_size</name></name></expr></argument>,
<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(
<argument><expr>"&lt;%s buffer for %p, size %zd, offset %zd at %p&gt;"</expr></argument>,
<argument><expr><name>status</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>b_base</name></name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>b_size</name></name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>b_offset</name></name></expr></argument>,
<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>buffer_hash</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name><name>self</name>-&gt;<name>b_hash</name></name> != -1</expr> )</condition><then>
<return>return <expr><name><name>self</name>-&gt;<name>b_hash</name></name></expr>;</return></then></if>
<if>if <condition>( <expr>!<name><name>self</name>-&gt;<name>b_readonly</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"writable buffers are not hashable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>p</name> = (<name>unsigned</name> <name>char</name> *) <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = *<name>p</name> &lt;&lt; 7</expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>len</name> &gt;= 0</expr>)</condition>
<expr_stmt><expr><name>x</name> = (1000003*<name>x</name>) ^ *<name>p</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name>x</name> ^= <name>size</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == -1</expr>)</condition><then>
<expr_stmt><expr><name>x</name> = -2</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>b_hash</name></name> = <name>x</name></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_str</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>buffer_length</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>size</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_concat</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name> <init>= <expr><name><name>other</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ptr1</name></decl>, *<decl><type ref="prev"/><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>pb</name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><call>(*<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name>)<argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"single-segment buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr1</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>( <expr><name>size</name> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>other</name></expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>(<name>count</name> = <call>(*<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name>)<argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ptr2</name></expr></argument>)</argument_list></call>) &lt; 0</expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> &lt;= <name>PY_SIZE_MAX</name> - <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ob</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name> + <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>ob</name> == <name>NULL</name></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>p</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> + <name>size</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>size</name> + <name>count</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>ob</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_repeat</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>count</name> &lt; 0</expr> )</condition><then>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>count</name> &gt; <name>PY_SSIZE_T_MAX</name> / <name>size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>, <argument><expr>"result too large"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ob</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name> * <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>ob</name> == <name>NULL</name></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>p</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>( <expr><name>count</name>--</expr> )</condition> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += <name>size</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>ob</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_item</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>( <expr><name>idx</name> &lt; 0 || <name>idx</name> &gt;= <name>size</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"buffer index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>ptr</name> + <name>idx</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_slice</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>left</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>right</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>( <expr><name>left</name> &lt; 0</expr> )</condition><then>
<expr_stmt><expr><name>left</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>( <expr><name>right</name> &lt; 0</expr> )</condition><then>
<expr_stmt><expr><name>right</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>( <expr><name>right</name> &gt; <name>size</name></expr> )</condition><then>
<expr_stmt><expr><name>right</name> = <name>size</name></expr>;</expr_stmt></then></if>
<if>if <condition>( <expr><name>right</name> &lt; <name>left</name></expr> )</condition><then>
<expr_stmt><expr><name>right</name> = <name>left</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>ptr</name> + <name>left</name></expr></argument>,
<argument><expr><name>right</name> - <name>left</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>buffer_subscript</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>item</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyIndex_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><call><name>PyNumber_AsSsize_t</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>PyExc_IndexError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>i</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> += <name>size</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>buffer_item</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelength</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr>(<name>PySliceObject</name>*)<name>item</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>, <argument><expr>&amp;<name>step</name></expr></argument>, <argument><expr>&amp;<name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>slicelength</name> &lt;= 0</expr>)</condition><then>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>step</name> == 1</expr>)</condition><then>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>p</name> + <name>start</name></expr></argument>,
<argument><expr><name>stop</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>source_buf</name> <init>= <expr>(<name>char</name> *)<name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>result_buf</name> <init>= <expr>(<name>char</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>slicelength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>result_buf</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>cur</name> = <name>start</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>slicelength</name></expr>;</condition>
<incr><expr><name>cur</name> += <name>step</name></expr>, <expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>result_buf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>source_buf</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>result_buf</name></expr></argument>,
<argument><expr><name>slicelength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>result_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"sequence index must be integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>buffer_ass_item</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ptr1</name></decl>, *<decl><type ref="prev"/><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name><name>self</name>-&gt;<name>b_readonly</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"buffer is read-only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr1</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>idx</name> &lt; 0 || <name>idx</name> &gt;= <name>size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"buffer assignment index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pb</name> = <name>other</name> ? <name><name>other</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>( <expr><name>pb</name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><call>(*<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name>)<argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"single-segment buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>(<name>count</name> = <call>(*<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name>)<argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ptr2</name></expr></argument>)</argument_list></call>) &lt; 0</expr> )</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>( <expr><name>count</name> != 1</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"right operand must be a single byte"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>((<name>char</name> *)<name>ptr1</name>)<index>[<expr><name>idx</name></expr>]</index> = *(<name>char</name> *)<name>ptr2</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>buffer_ass_slice</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>left</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>right</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ptr1</name></decl>, *<decl><type ref="prev"/><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>slice_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name><name>self</name>-&gt;<name>b_readonly</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"buffer is read-only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pb</name> = <name>other</name> ? <name><name>other</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>( <expr><name>pb</name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><call>(*<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name>)<argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"single-segment buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr1</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>( <expr>(<name>count</name> = <call>(*<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name>)<argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ptr2</name></expr></argument>)</argument_list></call>) &lt; 0</expr> )</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>( <expr><name>left</name> &lt; 0</expr> )</condition><then>
<expr_stmt><expr><name>left</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>( <expr><name>left</name> &gt; <name>size</name></expr> )</condition><then>
<expr_stmt><expr><name>left</name> = <name>size</name></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>( <expr><name>right</name> &lt; <name>left</name></expr> )</condition><then>
<expr_stmt><expr><name>right</name> = <name>left</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>( <expr><name>right</name> &gt; <name>size</name></expr> )</condition><then>
<expr_stmt><expr><name>right</name> = <name>size</name></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>slice_len</name> = <name>right</name> - <name>left</name></expr>;</expr_stmt>
<if>if <condition>( <expr><name>count</name> != <name>slice_len</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"right operand length must match slice length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><name>slice_len</name></expr> )</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name>ptr1</name> + <name>left</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>slice_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>buffer_ass_subscript</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>item</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ptr1</name></decl>, *<decl><type ref="prev"/><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>selfsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>othersize</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name><name>self</name>-&gt;<name>b_readonly</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"buffer is read-only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pb</name> = <name>value</name> ? <name><name>value</name>-&gt;<name>ob_type</name>-&gt;<name>tp_as_buffer</name></name> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>( <expr><name>pb</name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name> == <name>NULL</name> ||
<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><call>(*<name><name>pb</name>-&gt;<name>bf_getsegcount</name></name>)<argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"single-segment buffer object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr1</name></expr></argument>, <argument><expr>&amp;<name>selfsize</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyIndex_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><call><name>PyNumber_AsSsize_t</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>PyExc_IndexError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>i</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> += <name>selfsize</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>buffer_ass_item</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelength</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr>(<name>PySliceObject</name> *)<name>item</name></expr></argument>, <argument><expr><name>selfsize</name></expr></argument>,
<argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>, <argument><expr>&amp;<name>step</name></expr></argument>, <argument><expr>&amp;<name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>othersize</name> = <call>(*<name><name>pb</name>-&gt;<name>bf_getreadbuffer</name></name>)<argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ptr2</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>othersize</name> != <name>slicelength</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"right operand length must match slice length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>slicelength</name> == 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then>
<else>else <if>if <condition>(<expr><name>step</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name>ptr1</name> + <name>start</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>slicelength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>cur</name> = <name>start</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>slicelength</name></expr>;</condition>
<incr><expr><name>cur</name> += <name>step</name></expr>, <expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr>((<name>char</name> *)<name>ptr1</name>)<index>[<expr><name>cur</name></expr>]</index> = ((<name>char</name> *)<name>ptr2</name>)<index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"buffer indices must be integers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>buffer_getreadbuf</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></param>, <param><decl><type><name>void</name> **</type><name>pp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>idx</name> != 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
<argument><expr>"accessing non-existent buffer segment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>READ_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>size</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>buffer_getwritebuf</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></param>, <param><decl><type><name>void</name> **</type><name>pp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name><name>self</name>-&gt;<name>b_readonly</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer is read-only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr><name>idx</name> != 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
<argument><expr>"accessing non-existent buffer segment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>WRITE_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>size</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>buffer_getsegcount</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>lenp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>ANY_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>lenp</name></expr>)</condition><then>
<expr_stmt><expr>*<name>lenp</name> = <name>size</name></expr>;</expr_stmt></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>buffer_getcharbuf</name><parameter_list>(<param><decl><type><name>PyBufferObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>( <expr><name>idx</name> != 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
<argument><expr>"accessing non-existent buffer segment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>get_buf</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>CHAR_BUFFER</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*<name>pp</name> = (const <name>char</name> *)<name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>buffer_as_sequence</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>buffer_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>buffer_concat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>buffer_repeat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>buffer_item</name></expr>,
<expr>(<name>ssizessizeargfunc</name>)<name>buffer_slice</name></expr>,
<expr>(<name>ssizeobjargproc</name>)<name>buffer_ass_item</name></expr>,
<expr>(<name>ssizessizeobjargproc</name>)<name>buffer_ass_slice</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>buffer_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>buffer_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>buffer_subscript</name></expr>,
<expr>(<name>objobjargproc</name>)<name>buffer_ass_subscript</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyBufferProcs</name></type> <name>buffer_as_buffer</name> <init>= <expr><block>{
<expr>(<name>readbufferproc</name>)<name>buffer_getreadbuf</name></expr>,
<expr>(<name>writebufferproc</name>)<name>buffer_getwritebuf</name></expr>,
<expr>(<name>segcountproc</name>)<name>buffer_getsegcount</name></expr>,
<expr>(<name>charbufferproc</name>)<name>buffer_getcharbuf</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyBuffer_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"buffer"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyBufferObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>buffer_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>cmpfunc</name>)<name>buffer_compare</name></expr>,
<expr>(<name>reprfunc</name>)<name>buffer_repr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>buffer_as_sequence</name></expr>,
<expr>&amp;<name>buffer_as_mapping</name></expr>,
<expr>(<name>hashfunc</name>)<name>buffer_hash</name></expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>buffer_str</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>buffer_as_buffer</name></expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GETCHARBUFFER</name></expr>,
<expr><name>buffer_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>buffer_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
