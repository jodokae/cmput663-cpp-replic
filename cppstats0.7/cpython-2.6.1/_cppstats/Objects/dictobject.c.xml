<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/dictobject.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_key_error</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tup</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tup</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SHOW_CONVERSION_COUNTS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERTURB_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>dummy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_REF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>PyObject</name> *</type>
<name>_PyDict_Dummy</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><name>dummy</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>PyDictEntry</name> *</type>
<name>lookdict_string</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>hash</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_CONVERSION_COUNTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>created</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>converted</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_counts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"created %ld string dicts\n"</expr></argument>, <argument><expr><name>created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"converted %ld to normal dicts\n"</expr></argument>, <argument><expr><name>converted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%.2f%% conversion rate\n"</expr></argument>, <argument><expr>(100.0*<name>converted</name>)/<name>created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SHOW_ALLOC_COUNT</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_ALLOC_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>count_alloc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>count_reuse</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_alloc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Dict allocations: %" <name>PY_FORMAT_SIZE_T</name> "d\n"</expr></argument>,
<argument><expr><name>count_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Dict reuse through freelist: %" <name>PY_FORMAT_SIZE_T</name>
"d\n"</expr></argument>, <argument><expr><name>count_reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%.2f%% reuse rate\n\n"</expr></argument>,
<argument><expr>(100.0*<name>count_reuse</name>/(<name>count_alloc</name>+<name>count_reuse</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_NONZERO_DICT_SLOTS</name><parameter_list>(<param><type><name>mp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { (mp)-&gt;ma_table = (mp)-&gt;ma_smalltable; (mp)-&gt;ma_mask = PyDict_MINSIZE - 1; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_TO_MINSIZE</name><parameter_list>(<param><type><name>mp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { memset((mp)-&gt;ma_smalltable, 0, sizeof((mp)-&gt;ma_smalltable)); (mp)-&gt;ma_used = (mp)-&gt;ma_fill = 0; INIT_NONZERO_DICT_SLOTS(mp); } while(0)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PyDict_MAXFREELIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_MAXFREELIST</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyDictObject</name> *</type><name><name>free_list</name><index>[<expr><name>PyDict_MAXFREELIST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>numfree</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>PyDict_Fini</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>op</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>numfree</name></expr>)</condition> <block>{
<expr_stmt><expr><name>op</name> = <name><name>free_list</name><index>[<expr>--<name>numfree</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyDict_New</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dummy</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dummy</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"&lt;dummy key&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dummy</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_CONVERSION_COUNTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Py_AtExit</name><argument_list>(<argument><expr><name>show_counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_ALLOC_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Py_AtExit</name><argument_list>(<argument><expr><name>show_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<if>if <condition>(<expr><name>numfree</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mp</name> = <name><name>free_list</name><index>[<expr>--<name>numfree</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>mp</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> == &amp;<name>PyDict_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_Py_NewReference</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_fill</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>EMPTY_TO_MINSIZE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>INIT_NONZERO_DICT_SLOTS</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_used</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_table</name></name> == <name><name>mp</name>-&gt;<name>ma_smalltable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_mask</name></name> == <name>PyDict_MINSIZE</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_ALLOC_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>count_reuse</name>++</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>mp</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>PyDictObject</name></expr></argument>, <argument><expr>&amp;<name>PyDict_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>EMPTY_TO_MINSIZE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_ALLOC_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>count_alloc</name>++</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_lookup</name></name> = <name>lookdict_string</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_CONVERSION_COUNTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>++<name>created</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>_PyObject_GC_TRACK</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>mp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyDictEntry</name> *</type>
<name>lookdict</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>register</name> <name>long</name></type> <name>hash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>perturb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>freeslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>mask</name> <init>= <expr>(<name>size_t</name>)<name><name>mp</name>-&gt;<name>ma_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep0</name> <init>= <expr><name><name>mp</name>-&gt;<name>ma_table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>startkey</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = (<name>size_t</name>)<name>hash</name> &amp; <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>ep0</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>NULL</name> || <name><name>ep</name>-&gt;<name>me_key</name></name> == <name>key</name></expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>dummy</name></expr>)</condition><then>
<expr_stmt><expr><name>freeslot</name> = <name>ep</name></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_hash</name></name> == <name>hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>startkey</name> = <name><name>ep</name>-&gt;<name>me_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>startkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>startkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>startkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>ep0</name> == <name><name>mp</name>-&gt;<name>ma_table</name></name> &amp;&amp; <name><name>ep</name>-&gt;<name>me_key</name></name> == <name>startkey</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>cmp</name> &gt; 0</expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>lookdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>freeslot</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>perturb</name> = <name>hash</name></expr>;</init> <condition>;</condition> <incr><expr><name>perturb</name> &gt;&gt;= <name>PERTURB_SHIFT</name></expr></incr>) <block>{
<expr_stmt><expr><name>i</name> = (<name>i</name> &lt;&lt; 2) + <name>i</name> + <name>perturb</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>ep0</name><index>[<expr><name>i</name> &amp; <name>mask</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>freeslot</name> == <name>NULL</name> ? <name>ep</name> : <name>freeslot</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>key</name></expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_hash</name></name> == <name>hash</name> &amp;&amp; <name><name>ep</name>-&gt;<name>me_key</name></name> != <name>dummy</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>startkey</name> = <name><name>ep</name>-&gt;<name>me_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>startkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>startkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>startkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>ep0</name> == <name><name>mp</name>-&gt;<name>ma_table</name></name> &amp;&amp; <name><name>ep</name>-&gt;<name>me_key</name></name> == <name>startkey</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>cmp</name> &gt; 0</expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>lookdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>dummy</name> &amp;&amp; <name>freeslot</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>freeslot</name> = <name>ep</name></expr>;</expr_stmt></then></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyDictEntry</name> *</type>
<name>lookdict_string</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>register</name> <name>long</name></type> <name>hash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>perturb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>freeslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>mask</name> <init>= <expr>(<name>size_t</name>)<name><name>mp</name>-&gt;<name>ma_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep0</name> <init>= <expr><name><name>mp</name>-&gt;<name>ma_table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_CONVERSION_COUNTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>++<name>converted</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_lookup</name></name> = <name>lookdict</name></expr>;</expr_stmt>
<return>return <expr><call><name>lookdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name>hash</name> &amp; <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>ep0</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>NULL</name> || <name><name>ep</name>-&gt;<name>me_key</name></name> == <name>key</name></expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>dummy</name></expr>)</condition><then>
<expr_stmt><expr><name>freeslot</name> = <name>ep</name></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_hash</name></name> == <name>hash</name> &amp;&amp; <call><name>_PyString_Eq</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
<expr_stmt><expr><name>freeslot</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>perturb</name> = <name>hash</name></expr>;</init> <condition>;</condition> <incr><expr><name>perturb</name> &gt;&gt;= <name>PERTURB_SHIFT</name></expr></incr>) <block>{
<expr_stmt><expr><name>i</name> = (<name>i</name> &lt;&lt; 2) + <name>i</name> + <name>perturb</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>ep0</name><index>[<expr><name>i</name> &amp; <name>mask</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>freeslot</name> == <name>NULL</name> ? <name>ep</name> : <name>freeslot</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>key</name>
|| (<name><name>ep</name>-&gt;<name>me_hash</name></name> == <name>hash</name>
&amp;&amp; <name><name>ep</name>-&gt;<name>me_key</name></name> != <name>dummy</name>
&amp;&amp; <call><name>_PyString_Eq</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>ep</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>dummy</name> &amp;&amp; <name>freeslot</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>freeslot</name> = <name>ep</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>insertdict</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>hash</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>old_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>PyDictEntry</name> *</type>(*<name>lookupfunc</name>)<parameter_list>(<param><decl><type><name>PyDictObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>long</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_lookup</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = <call><name><name>mp</name>-&gt;<name>ma_lookup</name></name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_value</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>old_value</name> = <name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_value</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_fill</name></name>++</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_key</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_hash</name></name> = (<name>Py_ssize_t</name>)<name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_value</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_used</name></name>++</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insertdict_clean</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>hash</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>perturb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>size_t</name></type> <name>mask</name> <init>= <expr>(<name>size_t</name>)<name><name>mp</name>-&gt;<name>ma_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep0</name> <init>= <expr><name><name>mp</name>-&gt;<name>ma_table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <name>hash</name> &amp; <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>ep0</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for (<init><expr><name>perturb</name> = <name>hash</name></expr>;</init> <condition><expr><name><name>ep</name>-&gt;<name>me_key</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>perturb</name> &gt;&gt;= <name>PERTURB_SHIFT</name></expr></incr>) <block>{
<expr_stmt><expr><name>i</name> = (<name>i</name> &lt;&lt; 2) + <name>i</name> + <name>perturb</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>ep0</name><index>[<expr><name>i</name> &amp; <name>mask</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_fill</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_key</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_hash</name></name> = (<name>Py_ssize_t</name>)<name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_value</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_used</name></name>++</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dictresize</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>minused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>newsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>oldtable</name></decl>, *<decl><type ref="prev"/><name>newtable</name></decl>, *<decl><type ref="prev"/><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_oldtable_malloced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name></type> <name><name>small_copy</name><index>[<expr><name>PyDict_MINSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>minused</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>newsize</name> = <name>PyDict_MINSIZE</name></expr>;</init>
<condition><expr><name>newsize</name> &lt;= <name>minused</name> &amp;&amp; <name>newsize</name> &gt; 0</expr>;</condition>
<incr><expr><name>newsize</name> &lt;&lt;= 1</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr><name>newsize</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>oldtable</name> = <name><name>mp</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oldtable</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_oldtable_malloced</name> = <name>oldtable</name> != <name><name>mp</name>-&gt;<name>ma_smalltable</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newsize</name> == <name>PyDict_MINSIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newtable</name> = <name><name>mp</name>-&gt;<name>ma_smalltable</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newtable</name> == <name>oldtable</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_fill</name></name> == <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_fill</name></name> &gt; <name><name>mp</name>-&gt;<name>ma_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>small_copy</name></expr></argument>, <argument><expr><name>oldtable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>small_copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldtable</name> = <name>small_copy</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>newtable</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>PyDictEntry</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newtable</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>newtable</name> != <name>oldtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_table</name></name> = <name>newtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_mask</name></name> = <name>newsize</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newtable</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDictEntry</name></expr></argument>)</argument_list></sizeof> * <name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_used</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <name><name>mp</name>-&gt;<name>ma_fill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_fill</name></name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>ep</name> = <name>oldtable</name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>ep</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_value</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insertdict_clean</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>ep</name>-&gt;<name>me_hash</name></name></expr></argument>,
<argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name> == <name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>is_oldtable_malloced</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>oldtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>_PyDict_NewPresized</name><parameter_list>(<param><decl><type><name>Py_ssize_t</name></type> <name>minused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>op</name> <init>= <expr><call><name>PyDict_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>minused</name>&gt;5 &amp;&amp; <name>op</name> != <name>NULL</name> &amp;&amp; <call><name>dictresize</name><argument_list>(<argument><expr>(<name>PyDictObject</name> *)<name>op</name></expr></argument>, <argument><expr><name>minused</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>op</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyDict_GetItem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>mp</name> <init>= <expr>(<name>PyDictObject</name> *)<name>op</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>tstate</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>tstate</name> = <name>_PyThreadState_Current</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tstate</name> != <name>NULL</name> &amp;&amp; <name><name>tstate</name>-&gt;<name>curexc_type</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>err_type</name></decl>, *<decl><type ref="prev"/><name>err_value</name></decl>, *<decl><type ref="prev"/><name>err_tb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>err_type</name></expr></argument>, <argument><expr>&amp;<name>err_value</name></expr></argument>, <argument><expr>&amp;<name>err_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>err_type</name></expr></argument>, <argument><expr><name>err_value</name></expr></argument>, <argument><expr><name>err_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_SetItem</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>n_used</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> = (<name>PyDictObject</name> *)<name>op</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = ((<name>PyStringObject</name> *)<name>key</name>)-&gt;<name>ob_shash</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_fill</name></name> &lt;= <name><name>mp</name>-&gt;<name>ma_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_used</name> = <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>insertdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!(<name><name>mp</name>-&gt;<name>ma_used</name></name> &gt; <name>n_used</name> &amp;&amp; <name><name>mp</name>-&gt;<name>ma_fill</name></name>*3 &gt;= (<name><name>mp</name>-&gt;<name>ma_mask</name></name>+1)*2)</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>dictresize</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr>(<name><name>mp</name>-&gt;<name>ma_used</name></name> &gt; 50000 ? 2 : 4) * <name><name>mp</name>-&gt;<name>ma_used</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_DelItem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>old_value</name></decl>, *<decl><type ref="prev"/><name>old_key</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>mp</name> = (<name>PyDictObject</name> *)<name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_value</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>set_key_error</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>old_key</name> = <name><name>ep</name>-&gt;<name>me_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_key</name></name> = <name>dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_value</name> = <name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_used</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>old_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>PyDict_Clear</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>, *<decl><type ref="prev"/><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>table_is_malloced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name></type> <name><name>small_copy</name><index>[<expr><name>PyDict_MINSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>mp</name> = (<name>PyDictObject</name> *)<name>op</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> = <name><name>mp</name>-&gt;<name>ma_mask</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>table</name> = <name><name>mp</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>table</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table_is_malloced</name> = <name>table</name> != <name><name>mp</name>-&gt;<name>ma_smalltable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fill</name> = <name><name>mp</name>-&gt;<name>ma_fill</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>table_is_malloced</name></expr>)</condition><then>
<expr_stmt><expr><call><name>EMPTY_TO_MINSIZE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>fill</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>small_copy</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>small_copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table</name> = <name>small_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMPTY_TO_MINSIZE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<for>for (<init><expr><name>ep</name> = <name>table</name></expr>;</init> <condition><expr><name>fill</name> &gt; 0</expr>;</condition> <incr><expr>++<name>ep</name></expr></incr>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> &lt; <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>fill</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<if>if <condition>(<expr><name>table_is_malloced</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_Next</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>ppos</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pkey</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pvalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = *<name>ppos</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ep</name> = ((<name>PyDictObject</name> *)<name>op</name>)-&gt;<name>ma_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = ((<name>PyDictObject</name> *)<name>op</name>)-&gt;<name>ma_mask</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt;= <name>mask</name> &amp;&amp; <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr>*<name>ppos</name> = <name>i</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name>mask</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>pkey</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pkey</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>pvalue</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pvalue</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name></expr>;</expr_stmt></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>_PyDict_Next</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>ppos</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pkey</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pvalue</name></decl></param>, <param><decl><type><name>long</name> *</type><name>phash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = *<name>ppos</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ep</name> = ((<name>PyDictObject</name> *)<name>op</name>)-&gt;<name>ma_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = ((<name>PyDictObject</name> *)<name>op</name>)-&gt;<name>ma_mask</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt;= <name>mask</name> &amp;&amp; <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr>*<name>ppos</name> = <name>i</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name>mask</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr>*<name>phash</name> = <call>(<name>long</name>)<argument_list>(<argument><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pkey</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pkey</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>pvalue</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pvalue</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name></expr>;</expr_stmt></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dict_dealloc</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>fill</name> <init>= <expr><name><name>mp</name>-&gt;<name>ma_fill</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Py_TRASHCAN_SAFE_BEGIN</name><argument_list>(<argument>mp</argument>)</argument_list></macro>
<for>for (<init><expr><name>ep</name> = <name><name>mp</name>-&gt;<name>ma_table</name></name></expr>;</init> <condition><expr><name>fill</name> &gt; 0</expr>;</condition> <incr><expr><name>ep</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>fill</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_table</name></name> != <name><name>mp</name>-&gt;<name>ma_smalltable</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>numfree</name> &lt; <name>PyDict_MAXFREELIST</name> &amp;&amp; <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> == &amp;<name>PyDict_Type</name></expr>)</condition><then>
<expr_stmt><expr><name><name>free_list</name><index>[<expr><name>numfree</name>++</expr>]</index></name> = <name>mp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<macro><name>Py_TRASHCAN_SAFE_END</name><argument_list>(<argument>mp</argument>)</argument_list></macro>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_print</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>register</name> <name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>register</name> <name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>any</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>Py_ReprEnter</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>status</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"{...}"</expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"{"</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>any</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name><name>mp</name>-&gt;<name>ma_mask</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name> <init>= <expr><name><name>mp</name>-&gt;<name>ma_table</name></name> + <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pvalue</name> <init>= <expr><name><name>ep</name>-&gt;<name>me_value</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pvalue</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>any</name>++ &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr></expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyObject_Print</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>!=0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_ReprLeave</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>": "</expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><call><name>PyObject_Print</name><argument_list>(<argument><expr><name>pvalue</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_ReprLeave</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"}"</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>Py_ReprLeave</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>mp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_repr</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>temp</name></decl>, *<decl><type ref="prev"/><name>colon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pieces</name> <init>= <expr><name>NULL</name></expr></init>, *<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name>Py_ReprEnter</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
<return>return <expr><name>i</name> &gt; 0 ? <call><name>PyString_FromString</name><argument_list>(<argument><expr>"{...}"</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_used</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"{}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>pieces</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pieces</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>colon</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>": "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>colon</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_Concat</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>temp</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>temp</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>, <argument><expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>, <argument><expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call> - 1</expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>result</name> = <call><name>_PyString_Join</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>Done</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_ReprLeave</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>dict_length</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>mp</name>-&gt;<name>ma_used</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_subscript</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>register</name> <name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_table</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>v</name> = <name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>missing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>missing_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>missing_str</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>missing_str</name> =
<call><name>PyString_InternFromString</name><argument_list>(<argument><expr>"__missing__"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>missing</name> = <call><name>_PyType_Lookup</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>missing_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>missing</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>missing</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>set_key_error</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_ass_sub</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyDict_DelItem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>dict_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>dict_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>dict_subscript</name></expr>,
<expr>(<name>objobjargproc</name>)<name>dict_ass_sub</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_keys</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<label><name>again</name>:</label>
<expr_stmt><expr><name>n</name> = <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>n</name> != <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <name><name>mp</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>mp</name>-&gt;<name>ma_mask</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>mask</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>j</name> == <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_values</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<label><name>again</name>:</label>
<expr_stmt><expr><name>n</name> = <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>n</name> != <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <name><name>mp</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>mp</name>-&gt;<name>ma_mask</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>mask</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>j</name> == <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_items</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>item</name></decl>, *<decl><type ref="prev"/><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<label><name>again</name>:</label>
<expr_stmt><expr><name>n</name> = <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>item</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>n</name> != <name><name>mp</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <name><name>mp</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>mp</name>-&gt;<name>ma_mask</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>mask</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<name>value</name>=<name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>key</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>j</name> == <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_fromkeys</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"fromkeys"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>seq</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>mp</name> <init>= <expr>(<name>PyDictObject</name> *)<name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>oldvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>dictresize</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<while>while <condition>(<expr><call><name>_PyDict_Next</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr>&amp;<name>pos</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>oldvalue</name></expr></argument>, <argument><expr>&amp;<name>hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>insertdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></while>
<return>return <expr><name>d</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyAnySet_CheckExact</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>mp</name> <init>= <expr>(<name>PyDictObject</name> *)<name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>dictresize</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><call><name>PySet_GET_SIZE</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<while>while <condition>(<expr><call><name>_PySet_NextEntry</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr>&amp;<name>pos</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>insertdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></while>
<return>return <expr><name>d</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDict_CheckExact</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<while>while <condition>(<expr>(<name>key</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
}</block></while>
}</block></then> <else>else <block>{
<while>while <condition>(<expr>(<name>key</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
}</block></while>
}</block></else></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_update_common</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>, <param><decl><type><name>char</name> *</type><name>methname</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>methname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>arg</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"keys"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>PyDict_Merge</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <call><name>PyDict_MergeFromSeq2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>result</name> == 0 &amp;&amp; <name>kwds</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>PyDict_Merge</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_update</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>dict_update_common</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"update"</expr></argument>)</argument_list></call> != -1</expr>)</condition><then>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_MergeFromSeq2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>d</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>seq2</name></decl></param>, <param><decl><type><name>int</name></type> <name>override</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fast</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>seq2</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>seq2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fast</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>fast</name> = <call><name>PySequence_Fast</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fast</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"cannot convert dictionary update "
"sequence element #%zd to a sequence"</expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <call><name>PySequence_Fast_GET_SIZE</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> != 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"dictionary update sequence element #%zd "
"has length %zd; 2 is required"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>key</name> = <call><name>PySequence_Fast_GET_ITEM</name><argument_list>(<argument><expr><name>fast</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>PySequence_Fast_GET_ITEM</name><argument_list>(<argument><expr><name>fast</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>override</name> || <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<goto>goto <name>Return</name>;</goto>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
<label><name>Return</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_SAFE_DOWNCAST</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_Update</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyDict_Merge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_Merge</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>override</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl>, *<decl><type ref="prev"/><name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>a</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> || <name>b</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mp</name> = (<name>PyDictObject</name>*)<name>a</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>other</name> = (<name>PyDictObject</name>*)<name>b</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>other</name> == <name>mp</name> || <name><name>other</name>-&gt;<name>ma_used</name></name> == 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_used</name></name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>override</name> = 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name><name>mp</name>-&gt;<name>ma_fill</name></name> + <name><name>other</name>-&gt;<name>ma_used</name></name>)*3 &gt;= (<name><name>mp</name>-&gt;<name>ma_mask</name></name>+1)*2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>dictresize</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr>(<name><name>mp</name>-&gt;<name>ma_used</name></name> + <name><name>other</name>-&gt;<name>ma_used</name></name>)*2</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name><name>other</name>-&gt;<name>ma_mask</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>entry</name> = &amp;<name><name>other</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>me_value</name></name> != <name>NULL</name> &amp;&amp;
(<name>override</name> ||
<call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>me_key</name></name></expr></argument>)</argument_list></call> == <name>NULL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>me_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>me_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>insertdict</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>me_key</name></name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>entry</name>-&gt;<name>me_hash</name></name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>me_value</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name> <init>= <expr><call><name>PyMapping_Keys</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>keys</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>iter</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iter</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>key</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>key</name></expr>;</condition> <incr><expr><name>key</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr>!<name>override</name> &amp;&amp; <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>value</name> = <call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_copy</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyDict_Copy</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>mp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyDict_Copy</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>o</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>copy</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>o</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>copy</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_Merge</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>copy</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>Py_ssize_t</name></type>
<name>PyDict_Size</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>mp</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>((<name>PyDictObject</name> *)<name>mp</name>)-&gt;<name>ma_used</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyDict_Keys</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>mp</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>dict_keys</name><argument_list>(<argument><expr>(<name>PyDictObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyDict_Values</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>mp</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>dict_values</name><argument_list>(<argument><expr>(<name>PyDictObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>PyDict_Items</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>mp</name> == <name>NULL</name> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>dict_items</name><argument_list>(<argument><expr>(<name>PyDictObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>characterize</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyDictObject</name> *</type><name>b</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>pval</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>akey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>aval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name><name>a</name>-&gt;<name>ma_mask</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>thiskey</name></decl>, *<decl><type ref="prev"/><name>thisaval</name></decl>, *<decl><type ref="prev"/><name>thisbval</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>thiskey</name> = <name><name>a</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>akey</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>akey</name></expr></argument>, <argument><expr><name>thiskey</name></expr></argument>, <argument><expr><name>Py_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>cmp</name> &gt; 0 ||
<name>i</name> &gt; <name><name>a</name>-&gt;<name>ma_mask</name></name> ||
<name><name>a</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>thisaval</name> = <name><name>a</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>thisaval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>thisaval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thisbval</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>b</name></expr></argument>, <argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>thisbval</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>cmp</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(
<argument><expr><name>thisaval</name></expr></argument>, <argument><expr><name>thisbval</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>thisaval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>cmp</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>akey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>akey</name> = <name>thiskey</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aval</name> = <name>thisaval</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>thiskey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>thisaval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr>*<name>pval</name> = <name>aval</name></expr>;</expr_stmt>
<return>return <expr><name>akey</name></expr>;</return>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>akey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pval</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_compare</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyDictObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>adiff</name></decl>, *<decl><type ref="prev"/><name>bdiff</name></decl>, *<decl><type ref="prev"/><name>aval</name></decl>, *<decl><type ref="prev"/><name>bval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>ma_used</name></name> &lt; <name><name>b</name>-&gt;<name>ma_used</name></name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>a</name>-&gt;<name>ma_used</name></name> &gt; <name><name>b</name>-&gt;<name>ma_used</name></name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if></else></if>
<expr_stmt><expr><name>bdiff</name> = <name>bval</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adiff</name> = <call><name>characterize</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>adiff</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> ? -1 : 0</expr>;</expr_stmt>
<goto>goto <name>Finished</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>bdiff</name> = <call><name>characterize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>&amp;<name>bval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bdiff</name> == <name>NULL</name> &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name>bval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt>
<goto>goto <name>Finished</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bdiff</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name>adiff</name></expr></argument>, <argument><expr><name>bdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>res</name> == 0 &amp;&amp; <name>bval</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = <call><name>PyObject_Compare</name><argument_list>(<argument><expr><name>aval</name></expr></argument>, <argument><expr><name>bval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<label><name>Finished</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>adiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>bval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_equal</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyDictObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>ma_used</name></name> != <name><name>b</name>-&gt;<name>ma_used</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name><name>a</name>-&gt;<name>ma_mask</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>aval</name> <init>= <expr><name><name>a</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>aval</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>bval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><name><name>a</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bval</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>b</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bval</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>aval</name></expr></argument>, <argument><expr><name>bval</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &lt;= 0</expr>)</condition><then>
<return>return <expr><name>cmp</name></expr>;</return></then></if>
}</block></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_richcompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <name>Py_NotImplemented</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name> || <name>op</name> == <name>Py_NE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cmp</name> = <call><name>dict_equal</name><argument_list>(<argument><expr>(<name>PyDictObject</name> *)<name>v</name></expr></argument>, <argument><expr>(<name>PyDictObject</name> *)<name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>res</name> = (<name>cmp</name> == (<name>op</name> == <name>Py_EQ</name>)) ? <name>Py_True</name> : <name>Py_False</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"dict inequality comparisons not supported "
"in 3.x"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <name>Py_NotImplemented</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_contains</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_has_key</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"dict.has_key() not supported in 3.x; "
"use the in operator"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>dict_contains</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_get</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>failobj</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"get"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>failobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>val</name> = <name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>val</name> = <name>failobj</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_setdefault</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>failobj</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"setdefault"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>failobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>val</name> = <name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> = <name>failobj</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>failobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>val</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_clear</name><parameter_list>(<param><decl><type><name>register</name> <name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyDict_Clear</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_pop</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>old_value</name></decl>, *<decl><type ref="prev"/><name>old_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>deflt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if<condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"pop"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>deflt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_used</name></name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>deflt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>deflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>deflt</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
<argument><expr>"pop(): dictionary is empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ep</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_value</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>deflt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>deflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>deflt</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>set_key_error</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>old_key</name> = <name><name>ep</name>-&gt;<name>me_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_key</name></name> = <name>dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_value</name> = <name><name>ep</name>-&gt;<name>me_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_used</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>old_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>old_value</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_popitem</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_used</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
<argument><expr>"popitem(): dictionary is empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = &amp;<name><name>mp</name>-&gt;<name>ma_table</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ep</name>-&gt;<name>me_value</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = <name><name>ep</name>-&gt;<name>me_hash</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name><name>mp</name>-&gt;<name>ma_mask</name></name> || <name>i</name> &lt; 1</expr>)</condition><then>
<expr_stmt><expr><name>i</name> = 1</expr>;</expr_stmt></then></if>
<while>while <condition>(<expr>(<name>ep</name> = &amp;<name><name>mp</name>-&gt;<name>ma_table</name><index>[<expr><name>i</name></expr>]</index></name>)-&gt;<name>me_value</name> == <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name><name>mp</name>-&gt;<name>ma_mask</name></name></expr>)</condition><then>
<expr_stmt><expr><name>i</name> = 1</expr>;</expr_stmt></then></if>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ep</name>-&gt;<name>me_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>ep</name>-&gt;<name>me_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_key</name></name> = <name>dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name>-&gt;<name>me_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_used</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mp</name>-&gt;<name>ma_table</name><index>[<expr>0</expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name>-&gt;<name>ma_table</name><index>[<expr>0</expr>]</index></name>.<name>me_hash</name> = <name>i</name> + 1</expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_traverse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pv</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>pk</name></expr></argument>, <argument><expr>&amp;<name>pv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_tp_clear</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyDict_Clear</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PyTypeObject</name></type> <name>PyDictIterKey_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PyTypeObject</name></type> <name>PyDictIterValue_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PyTypeObject</name></type> <name>PyDictIterItem_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>dictiter_new</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_iterkeys</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>dict</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dictiter_new</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>PyDictIterKey_Type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_itervalues</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>dict</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dictiter_new</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>PyDictIterValue_Type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_iteritems</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>dict</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dictiter_new</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>PyDictIterItem_Type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_sizeof</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>PyDictObject</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mp</name>-&gt;<name>ma_table</name></name> != <name><name>mp</name>-&gt;<name>ma_smalltable</name></name></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = <name>res</name> + (<name><name>mp</name>-&gt;<name>ma_mask</name></name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>PyDictEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>has_key__doc__</name></expr></argument>,
<argument><expr>"D.has_key(k) -&gt; True if D has a key k, else False"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>contains__doc__</name></expr></argument>,
<argument><expr>"D.__contains__(k) -&gt; True if D has a key k, else False"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>getitem__doc__</name></expr></argument>, <argument><expr>"x.__getitem__(y) &lt;==&gt; x[y]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>sizeof__doc__</name></expr></argument>,
<argument><expr>"D.__sizeof__() -&gt; size of D in memory, in bytes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>get__doc__</name></expr></argument>,
<argument><expr>"D.get(k[,d]) -&gt; D[k] if k in D, else d. d defaults to None."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>setdefault_doc__</name></expr></argument>,
<argument><expr>"D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pop__doc__</name></expr></argument>,
<argument><expr>"D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.\n\
If key is not found, d is returned if given, otherwise KeyError is raised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>popitem__doc__</name></expr></argument>,
<argument><expr>"D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a\n\
2-tuple; but raise KeyError if D is empty."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>keys__doc__</name></expr></argument>,
<argument><expr>"D.keys() -&gt; list of D's keys"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>items__doc__</name></expr></argument>,
<argument><expr>"D.items() -&gt; list of D's (key, value) pairs, as 2-tuples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>values__doc__</name></expr></argument>,
<argument><expr>"D.values() -&gt; list of D's values"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>update__doc__</name></expr></argument>,
<argument><expr>"D.update(E, **F) -&gt; None. Update D from dict/iterable E and F.\n"
"If E has a .keys() method, does: for k in E: D[k] = E[k]\n\
If E lacks .keys() method, does: for (k, v) in E: D[k] = v\n\
In either case, this is followed by: for k in F: D[k] = F[k]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>fromkeys__doc__</name></expr></argument>,
<argument><expr>"dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.\n\
v defaults to None."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>clear__doc__</name></expr></argument>,
<argument><expr>"D.clear() -&gt; None. Remove all items from D."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>copy__doc__</name></expr></argument>,
<argument><expr>"D.copy() -&gt; a shallow copy of D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>iterkeys__doc__</name></expr></argument>,
<argument><expr>"D.iterkeys() -&gt; an iterator over the keys of D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>itervalues__doc__</name></expr></argument>,
<argument><expr>"D.itervalues() -&gt; an iterator over the values of D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>iteritems__doc__</name></expr></argument>,
<argument><expr>"D.iteritems() -&gt; an iterator over the (key, value) items of D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>mapp_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"__contains__"</expr>,<expr>(<name>PyCFunction</name>)<name>dict_contains</name></expr>, <expr><name>METH_O</name> | <name>METH_COEXIST</name></expr>,
<expr><name>contains__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"__getitem__"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_subscript</name></expr>, <expr><name>METH_O</name> | <name>METH_COEXIST</name></expr>,
<expr><name>getitem__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"__sizeof__"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_sizeof</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>sizeof__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"has_key"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_has_key</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>has_key__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"get"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_get</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>get__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"setdefault"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_setdefault</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>setdefault_doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"pop"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_pop</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>pop__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"popitem"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_popitem</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>popitem__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"keys"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_keys</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>keys__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"items"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_items</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>items__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"values"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_values</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>values__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"update"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_update</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>update__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"fromkeys"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_fromkeys</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_CLASS</name></expr>,
<expr><name>fromkeys__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"clear"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_clear</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>clear__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"copy"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_copy</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>copy__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"iterkeys"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_iterkeys</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>iterkeys__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"itervalues"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_itervalues</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>itervalues__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"iteritems"</expr>, <expr>(<name>PyCFunction</name>)<name>dict_iteritems</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>iteritems__doc__</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>PyDict_Contains</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>mp</name> <init>= <expr>(<name>PyDictObject</name> *)<name>op</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyString_CheckExact</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> ||
(<name>hash</name> = ((<name>PyStringObject</name> *) <name>key</name>)-&gt;<name>ob_shash</name>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ep</name> == <name>NULL</name> ? -1 : (<name><name>ep</name>-&gt;<name>me_value</name></name> != <name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>_PyDict_Contains</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>hash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>mp</name> <init>= <expr>(<name>PyDictObject</name> *)<name>op</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ep</name> = <call>(<name><name>mp</name>-&gt;<name>ma_lookup</name></name>)<argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ep</name> == <name>NULL</name> ? -1 : (<name><name>ep</name>-&gt;<name>me_value</name></name> != <name>NULL</name>)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>dict_as_sequence</name> <init>= <expr><block>{
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyDict_Contains</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> != <name>NULL</name> &amp;&amp; <name><name>type</name>-&gt;<name>tp_alloc</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>d</name> <init>= <expr>(<name>PyDictObject</name> *)<name>self</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>ma_table</name></name> == <name>NULL</name> &amp;&amp; <name><name>d</name>-&gt;<name>ma_fill</name></name> == 0 &amp;&amp; <name><name>d</name>-&gt;<name>ma_used</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_NONZERO_DICT_SLOTS</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ma_lookup</name></name> = <name>lookdict_string</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHOW_CONVERSION_COUNTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>++<name>created</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dict_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dict_update_common</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"dict"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dict_iter</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>dict</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dictiter_new</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>PyDictIterKey_Type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dictionary_doc</name></expr></argument>,
<argument><expr>"dict() -&gt; new empty dictionary.\n"
"dict(mapping) -&gt; new dictionary initialized from a mapping object's\n"
" (key, value) pairs.\n"
"dict(seq) -&gt; new dictionary initialized as if via:\n"
" d = {}\n"
" for k, v in seq:\n"
" d[k] = v\n"
"dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n"
" in the keyword argument list. For example: dict(one=1, two=2)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyDict_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"dict"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDictObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>dict_dealloc</name></expr>,
<expr>(<name>printfunc</name>)<name>dict_print</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>cmpfunc</name>)<name>dict_compare</name></expr>,
<expr>(<name>reprfunc</name>)<name>dict_repr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>dict_as_sequence</name></expr>,
<expr>&amp;<name>dict_as_mapping</name></expr>,
<expr>(<name>hashfunc</name>)<name>PyObject_HashNotImplemented</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name> |
<name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_DICT_SUBCLASS</name></expr>,
<expr><name>dictionary_doc</name></expr>,
<expr><name>dict_traverse</name></expr>,
<expr><name>dict_tp_clear</name></expr>,
<expr><name>dict_richcompare</name></expr>,
<expr>0</expr>,
<expr>(<name>getiterfunc</name>)<name>dict_iter</name></expr>,
<expr>0</expr>,
<expr><name>mapp_methods</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>dict_init</name></expr>,
<expr><name>PyType_GenericAlloc</name></expr>,
<expr><name>dict_new</name></expr>,
<expr><name>PyObject_GC_Del</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>PyDict_GetItemString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>kv</name></decl>, *<decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kv</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_SetItemString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>item</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>kv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kv</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyString_InternInPlace</name><argument_list>(<argument><expr>&amp;<name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyDict_DelItemString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>kv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kv</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>PyDict_DelItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyDictObject</name> *</type><name>di_dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>di_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>di_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>di_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>dictiterobject</name>;</typedef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dictiter_new</name><parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>dict</name></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type><name>itertype</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dictiterobject</name> *</type><name>di</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>dictiterobject</name></expr></argument>, <argument><expr><name>itertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>di</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_dict</name></name> = <name>dict</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_used</name></name> = <name><name>dict</name>-&gt;<name>ma_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_pos</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>len</name></name> = <name><name>dict</name>-&gt;<name>ma_used</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>itertype</name> == &amp;<name>PyDictIterItem_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_result</name></name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>di</name>-&gt;<name>di_result</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_result</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<return>return <expr>(<name>PyObject</name> *)<name>di</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dictiter_dealloc</name><parameter_list>(<param><decl><type><name>dictiterobject</name> *</type><name>di</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>di</name>-&gt;<name>di_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>di</name>-&gt;<name>di_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dictiter_len</name><parameter_list>(<param><decl><type><name>dictiterobject</name> *</type><name>di</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>di</name>-&gt;<name>di_dict</name></name> != <name>NULL</name> &amp;&amp; <name><name>di</name>-&gt;<name>di_used</name></name> == <name><name>di</name>-&gt;<name>di_dict</name>-&gt;<name>ma_used</name></name></expr>)</condition><then>
<expr_stmt><expr><name>len</name> = <name><name>di</name>-&gt;<name>len</name></name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyInt_FromSize_t</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>length_hint_doc</name></expr></argument>, <argument><expr>"Private method returning an estimate of len(list(it))."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>dictiter_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__length_hint__"</expr>, <expr>(<name>PyCFunction</name>)<name>dictiter_len</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>length_hint_doc</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>dictiter_iternextkey</name><parameter_list>(<param><decl><type><name>dictiterobject</name> *</type><name>di</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>d</name> <init>= <expr><name><name>di</name>-&gt;<name>di_dict</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>di</name>-&gt;<name>di_used</name></name> != <name><name>d</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"dictionary changed size during iteration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_used</name></name> = -1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name><name>di</name>-&gt;<name>di_pos</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name>ep</name> = <name><name>d</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>d</name>-&gt;<name>ma_mask</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt;= <name>mask</name> &amp;&amp; <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_pos</name></name> = <name>i</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name>mask</name></expr>)</condition><then>
<goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>di</name>-&gt;<name>len</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>key</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_dict</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyDictIterKey_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"dictionary-keyiterator"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictiterobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>dictiter_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>dictiter_iternextkey</name></expr>,
<expr><name>dictiter_methods</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>dictiter_iternextvalue</name><parameter_list>(<param><decl><type><name>dictiterobject</name> *</type><name>di</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>d</name> <init>= <expr><name><name>di</name>-&gt;<name>di_dict</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>di</name>-&gt;<name>di_used</name></name> != <name><name>d</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"dictionary changed size during iteration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_used</name></name> = -1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name><name>di</name>-&gt;<name>di_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>d</name>-&gt;<name>ma_mask</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt; <name>mask</name></expr>)</condition><then>
<goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name>ep</name> = <name><name>d</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>value</name>=<name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name>) == <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name>mask</name></expr>)</condition><then>
<goto>goto <name>fail</name>;</goto></then></if>
}</block></while>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_pos</name></name> = <name>i</name>+1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>len</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_dict</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyDictIterValue_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"dictionary-valueiterator"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictiterobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>dictiter_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>dictiter_iternextvalue</name></expr>,
<expr><name>dictiter_methods</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>dictiter_iternextitem</name><parameter_list>(<param><decl><type><name>dictiterobject</name> *</type><name>di</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>, *<decl><type ref="prev"/><name>result</name> <init>= <expr><name><name>di</name>-&gt;<name>di_result</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>PyDictEntry</name> *</type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictObject</name> *</type><name>d</name> <init>= <expr><name><name>di</name>-&gt;<name>di_dict</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>di</name>-&gt;<name>di_used</name></name> != <name><name>d</name>-&gt;<name>ma_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"dictionary changed size during iteration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_used</name></name> = -1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name><name>di</name>-&gt;<name>di_pos</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name>ep</name> = <name><name>d</name>-&gt;<name>ma_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> = <name><name>d</name>-&gt;<name>ma_mask</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt;= <name>mask</name> &amp;&amp; <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name> == <name>NULL</name></expr>)</condition>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_pos</name></name> = <name>i</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; <name>mask</name></expr>)</condition><then>
<goto>goto <name>fail</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>result</name>-&gt;<name>ob_refcnt</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>di</name>-&gt;<name>len</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name>.<name>me_value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>di_dict</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyDictIterItem_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"dictionary-itemiterator"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictiterobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>dictiter_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>dictiter_iternextitem</name></expr>,
<expr><name>dictiter_methods</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
