<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/stringlib/fastsearch.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_FASTSEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGLIB_FASTSEARCH_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_COUNT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_SEARCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>fastsearch</name><argument_list>(<argument>const STRINGLIB_CHAR* s</argument>, <argument>Py_ssize_t n</argument>,
<argument>const STRINGLIB_CHAR* p</argument>, <argument>Py_ssize_t m</argument>,
<argument>int mode</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mlast</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> = <name>n</name> - <name>m</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>m</name> &lt;= 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>m</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>FAST_COUNT</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>p</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if></for>
<return>return <expr><name>count</name></expr>;</return>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>p</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<return>return <expr><name>i</name></expr>;</return></then></if></for>
}</block></else></if>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mlast</name> = <name>m</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> = <name>mlast</name> - 1</expr>;</expr_stmt>
<for>for (<init><expr><name>mask</name> = <name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>mlast</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>mask</name> |= (1 &lt;&lt; (<name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0x1F))</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>p</name><index>[<expr><name>mlast</name></expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>skip</name> = <name>mlast</name> - <name>i</name> - 1</expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>mask</name> |= (1 &lt;&lt; (<name><name>p</name><index>[<expr><name>mlast</name></expr>]</index></name> &amp; 0x1F))</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>w</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name>+<name>m</name>-1</expr>]</index></name> == <name><name>p</name><index>[<expr><name>m</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>mlast</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name>+<name>j</name></expr>]</index></name> != <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
<break>break;</break></then></if></for>
<if>if <condition>(<expr><name>j</name> == <name>mlast</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>mode</name> != <name>FAST_COUNT</name></expr>)</condition><then>
<return>return <expr><name>i</name></expr>;</return></then></if>
<expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <name>i</name> + <name>mlast</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!(<name>mask</name> &amp; (1 &lt;&lt; (<name><name>s</name><index>[<expr><name>i</name>+<name>m</name></expr>]</index></name> &amp; 0x1F)))</expr>)</condition><then>
<expr_stmt><expr><name>i</name> = <name>i</name> + <name>m</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>i</name> = <name>i</name> + <name>skip</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!(<name>mask</name> &amp; (1 &lt;&lt; (<name><name>s</name><index>[<expr><name>i</name>+<name>m</name></expr>]</index></name> &amp; 0x1F)))</expr>)</condition><then>
<expr_stmt><expr><name>i</name> = <name>i</name> + <name>m</name></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></for>
<if>if <condition>(<expr><name>mode</name> != <name>FAST_COUNT</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>count</name></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
