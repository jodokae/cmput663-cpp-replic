<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Objects/stringlib/find.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_FIND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGLIB_FIND_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_FASTSEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> must include "stringlib/fastsearch.h" before including this module</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>stringlib_find</name><argument_list>(<argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
<argument>const STRINGLIB_CHAR* sub</argument>, <argument>Py_ssize_t sub_len</argument>,
<argument>Py_ssize_t offset</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str_len</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>sub_len</name> == 0</expr>)</condition><then>
<return>return <expr><name>offset</name></expr>;</return></then></if>
<expr_stmt><expr><name>pos</name> = <call><name>fastsearch</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>sub_len</name></expr></argument>, <argument><expr><name>FAST_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pos</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>pos</name> += <name>offset</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>pos</name></expr>;</return>
}</block>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>stringlib_rfind</name><argument_list>(<argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
<argument>const STRINGLIB_CHAR* sub</argument>, <argument>Py_ssize_t sub_len</argument>,
<argument>Py_ssize_t offset</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>sub_len</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>str_len</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>str_len</name> + <name>offset</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = <name>str_len</name> - <name>sub_len</name></expr>;</init> <condition><expr><name>j</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>j</name></expr></incr>)
<if>if <condition>(<expr><call><name>STRINGLIB_CMP</name><argument_list>(<argument><expr><name>str</name>+<name>j</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>sub_len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pos</name> = <name>j</name> + <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if></for>
<return>return <expr><name>pos</name></expr>;</return>
}</block></else></if>
}</block>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>stringlib_find_slice</name><argument_list>(<argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
<argument>const STRINGLIB_CHAR* sub</argument>, <argument>Py_ssize_t sub_len</argument>,
<argument>Py_ssize_t start</argument>, <argument>Py_ssize_t end</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>start</name> += <name>str_len</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> &gt; <name>str_len</name></expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>str_len</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>end</name> += <name>str_len</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>end</name> = 0</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>stringlib_find</name><argument_list>(
<argument><expr><name>str</name> + <name>start</name></expr></argument>, <argument><expr><name>end</name> - <name>start</name></expr></argument>,
<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>sub_len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>
)</argument_list></call></expr>;</return>
}</block>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>stringlib_rfind_slice</name><argument_list>(<argument>const STRINGLIB_CHAR* str</argument>, <argument>Py_ssize_t str_len</argument>,
<argument>const STRINGLIB_CHAR* sub</argument>, <argument>Py_ssize_t sub_len</argument>,
<argument>Py_ssize_t start</argument>, <argument>Py_ssize_t end</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>start</name> += <name>str_len</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> &gt; <name>str_len</name></expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>str_len</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>end</name> += <name>str_len</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>end</name> = 0</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>stringlib_rfind</name><argument_list>(<argument><expr><name>str</name> + <name>start</name></expr></argument>, <argument><expr><name>end</name> - <name>start</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>sub_len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRINGLIB_STR</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>FROM_BYTEARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>stringlib_contains_obj</name><argument_list>(<argument>PyObject* str</argument>, <argument>PyObject* sub</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>stringlib_find</name><argument_list>(
<argument><expr><call><name>STRINGLIB_STR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRINGLIB_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>STRINGLIB_STR</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRINGLIB_LEN</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>
)</argument_list></call> != -1</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FROM_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>Py_LOCAL_INLINE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>_ParseTupleFinds</name> <argument_list>(<argument>PyObject *args</argument>, <argument>PyObject **substring</argument>,
<argument>Py_ssize_t *start</argument>, <argument>Py_ssize_t *end</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp_substring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tmp_start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tmp_end</name> <init>= <expr><name>PY_SSIZE_T_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj_start</name><init>=<expr><name>Py_None</name></expr></init>, *<name>obj_end</name><init>=<expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|OO:find"</expr></argument>, <argument><expr>&amp;<name>tmp_substring</name></expr></argument>,
<argument><expr>&amp;<name>obj_start</name></expr></argument>, <argument><expr>&amp;<name>obj_end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>obj_start</name> != <name>Py_None</name></expr>)</condition><then>
<if>if <condition>(<expr>!<call><name>_PyEval_SliceIndex</name><argument_list>(<argument><expr><name>obj_start</name></expr></argument>, <argument><expr>&amp;<name>tmp_start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if></then></if>
<if>if <condition>(<expr><name>obj_end</name> != <name>Py_None</name></expr>)</condition><then>
<if>if <condition>(<expr>!<call><name>_PyEval_SliceIndex</name><argument_list>(<argument><expr><name>obj_end</name></expr></argument>, <argument><expr>&amp;<name>tmp_end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if></then></if>
<expr_stmt><expr><name>tmp_substring</name> = <call><name>PyUnicode_FromObject</name><argument_list>(<argument><expr><name>tmp_substring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tmp_substring</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr>*<name>start</name> = <name>tmp_start</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>end</name> = <name>tmp_end</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>substring</name> = <name>tmp_substring</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
