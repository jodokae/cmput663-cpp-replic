<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Include/grammar.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_GRAMMAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_GRAMMAR_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitset.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lb_str</name></decl>;</decl_stmt>
}</block></struct></type> <name>label</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ll_nlabels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>label</name> *</type><name>ll_label</name></decl>;</decl_stmt>
}</block></struct></type> <name>labellist</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>short</name></type> <name>a_lbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>a_arrow</name></decl>;</decl_stmt>
}</block></struct></type> <name>arc</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s_narcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arc</name> *</type><name>s_arc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_lower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_upper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>s_accel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_accept</name></decl>;</decl_stmt>
}</block></struct></type> <name>state</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>d_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>d_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d_initial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d_nstates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>state</name> *</type><name>d_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitset</name></type> <name>d_first</name></decl>;</decl_stmt>
}</block></struct></type> <name>dfa</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>g_ndfas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dfa</name> *</type><name>g_dfa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>labellist</name></type> <name>g_ll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g_accel</name></decl>;</decl_stmt>
}</block></struct></type> <name>grammar</name>;</typedef>
<function_decl><type><name>grammar</name> *</type><name>newgrammar</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dfa</name> *</type><name>adddfa</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>addstate</name><parameter_list>(<param><decl><type><name>dfa</name> *</type><name>d</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addarc</name><parameter_list>(<param><decl><type><name>dfa</name> *</type><name>d</name></decl></param>, <param><decl><type><name>int</name></type> <name>from</name></decl></param>, <param><decl><type><name>int</name></type> <name>to</name></decl></param>, <param><decl><type><name>int</name></type> <name>lbl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dfa</name> *</type><name>PyGrammar_FindDFA</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>addlabel</name><parameter_list>(<param><decl><type><name>labellist</name> *</type><name>ll</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>char</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>findlabel</name><parameter_list>(<param><decl><type><name>labellist</name> *</type><name>ll</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>char</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>PyGrammar_LabelRepr</name><parameter_list>(<param><decl><type><name>label</name> *</type><name>lb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>translatelabels</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addfirstsets</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PyGrammar_AddAccelerators</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PyGrammar_RemoveAccelerators</name><parameter_list>(<param><decl><type><name>grammar</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>printgrammar</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>printnonterminals</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
