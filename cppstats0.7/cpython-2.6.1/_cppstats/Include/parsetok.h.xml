<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Include/parsetok.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_PARSETOK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PARSETOK_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expected</name></decl>;</decl_stmt>
}</block></struct></type> <name>perrdetail</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyPARSE_YIELD_IS_KEYWORD</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyPARSE_DONT_IMPLY_DEDENT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyPARSE_WITH_IS_KEYWORD</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyPARSE_PRINT_IS_FUNCTION</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyPARSE_UNICODE_LITERALS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseString</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>grammar</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>,
<argument><expr><name>perrdetail</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseFile</name> <argument_list>(<argument><expr><name>FILE</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>grammar</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>,
<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>perrdetail</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseStringFlags</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>grammar</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>,
<argument><expr><name>perrdetail</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseFileFlags</name><argument_list>(<argument><expr><name>FILE</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>grammar</name> *</expr></argument>,
<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>,
<argument><expr><name>perrdetail</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseFileFlagsEx</name><argument_list>(<argument><expr><name>FILE</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>grammar</name> *</expr></argument>,
<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>,
<argument><expr><name>perrdetail</name> *</expr></argument>, <argument><expr><name>int</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseStringFlagsFilename</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>,
<argument><expr><name>grammar</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>,
<argument><expr><name>perrdetail</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>node *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_ParseStringFlagsFilenameEx</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>,
<argument><expr><name>grammar</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>,
<argument><expr><name>perrdetail</name> *</expr></argument>, <argument><expr><name>int</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyParser_SetError</name><argument_list>(<argument><expr><name>perrdetail</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
