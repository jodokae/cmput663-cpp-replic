<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Include/unicodeobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODEOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODEOBJECT_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Must define Py_UNICODE_SIZE</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>Py_UNICODE_SIZE</name> &gt;= 4</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_WIDE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PY_UNICODE_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; <name>Py_UNICODE_SIZE</name> == 2</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_USABLE_WCHAR_T</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_UNICODE_TYPE</name></cpp:macro> <cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_UNICODE_TYPE</name></cpp:macro> <cpp:value>Py_UCS4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_USABLE_WCHAR_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_WCHAR_H</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HAVE_BSDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> &gt;= 4</expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>Py_UCS4</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG</name> &gt;= 4</expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>Py_UCS4</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>PY_UNICODE_TYPE</name></type> <name>Py_UNICODE</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsASCIIString</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsASCIIString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsCharmapString</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsCharmapString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsEncodedObject</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsEncodedObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsEncodedString</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsEncodedString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsLatin1String</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsLatin1String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsRawUnicodeEscapeString</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsRawUnicodeEscapeString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF32String</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsUTF32String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF16String</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsUTF16String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF8String</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsUTF8String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUnicode</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsUnicode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUnicodeEscapeString</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsUnicodeEscapeString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsWideChar</name></cpp:macro> <cpp:value>PyUnicodeUCS2_AsWideChar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Compare</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Compare</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Concat</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Concat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Contains</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Contains</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Count</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Count</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Decode</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Decode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeASCII</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeASCII</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeCharmap</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeCharmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeLatin1</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeLatin1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeRawUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeRawUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF32</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUTF32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF32Stateful</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUTF32Stateful</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF16</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUTF16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF16Stateful</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUTF16Stateful</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF8</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUTF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF8Stateful</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUTF8Stateful</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS2_DecodeUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Encode</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Encode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeASCII</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeASCII</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeCharmap</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeCharmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeDecimal</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeDecimal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeLatin1</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeLatin1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeRawUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeRawUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUTF32</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeUTF32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUTF16</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeUTF16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUTF8</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeUTF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS2_EncodeUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Find</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Find</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Format</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Format</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromEncodedObject</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromEncodedObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromObject</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromOrdinal</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromOrdinal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromUnicode</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromUnicode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromString</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromStringAndSize</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromFormatV</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromFormatV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromFormat</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromFormat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromWideChar</name></cpp:macro> <cpp:value>PyUnicodeUCS2_FromWideChar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GetDefaultEncoding</name></cpp:macro> <cpp:value>PyUnicodeUCS2_GetDefaultEncoding</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GetMax</name></cpp:macro> <cpp:value>PyUnicodeUCS2_GetMax</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GetSize</name></cpp:macro> <cpp:value>PyUnicodeUCS2_GetSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Join</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Join</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Partition</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Partition</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_RPartition</name></cpp:macro> <cpp:value>PyUnicodeUCS2_RPartition</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_RSplit</name></cpp:macro> <cpp:value>PyUnicodeUCS2_RSplit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Replace</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Replace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Resize</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Resize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_RichCompare</name></cpp:macro> <cpp:value>PyUnicodeUCS2_RichCompare</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_SetDefaultEncoding</name></cpp:macro> <cpp:value>PyUnicodeUCS2_SetDefaultEncoding</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Split</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Split</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Splitlines</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Splitlines</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Tailmatch</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Tailmatch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Translate</name></cpp:macro> <cpp:value>PyUnicodeUCS2_Translate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_TranslateCharmap</name></cpp:macro> <cpp:value>PyUnicodeUCS2_TranslateCharmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_AsDefaultEncodedString</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_AsDefaultEncodedString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_Fini</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_Fini</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_Init</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_Init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_ClearFreeList</name></cpp:macro> <cpp:value>PyUnicodeUCS2_ClearFreelist</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsAlpha</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsAlpha</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsDecimalDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsDecimalDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsLinebreak</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsLinebreak</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsLowercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsLowercase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsNumeric</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsNumeric</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsTitlecase</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsTitlecase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsUppercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsUppercase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsWhitespace</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_IsWhitespace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToDecimalDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_ToDecimalDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_ToDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToLowercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_ToLowercase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToNumeric</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_ToNumeric</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToTitlecase</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_ToTitlecase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToUppercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS2_ToUppercase</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsASCIIString</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsASCIIString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsCharmapString</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsCharmapString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsEncodedObject</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsEncodedObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsEncodedString</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsEncodedString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsLatin1String</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsLatin1String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsRawUnicodeEscapeString</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsRawUnicodeEscapeString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF32String</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsUTF32String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF16String</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsUTF16String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUTF8String</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsUTF8String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUnicode</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsUnicode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsUnicodeEscapeString</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsUnicodeEscapeString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsWideChar</name></cpp:macro> <cpp:value>PyUnicodeUCS4_AsWideChar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Compare</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Compare</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Concat</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Concat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Contains</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Contains</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Count</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Count</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Decode</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Decode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeASCII</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeASCII</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeCharmap</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeCharmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeLatin1</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeLatin1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeRawUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeRawUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF32</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUTF32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF32Stateful</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUTF32Stateful</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF16</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUTF16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF16Stateful</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUTF16Stateful</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF8</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUTF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUTF8Stateful</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUTF8Stateful</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_DecodeUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS4_DecodeUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Encode</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Encode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeASCII</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeASCII</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeCharmap</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeCharmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeDecimal</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeDecimal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeLatin1</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeLatin1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeRawUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeRawUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUTF32</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeUTF32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUTF16</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeUTF16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUTF8</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeUTF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_EncodeUnicodeEscape</name></cpp:macro> <cpp:value>PyUnicodeUCS4_EncodeUnicodeEscape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Find</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Find</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Format</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Format</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromEncodedObject</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromEncodedObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromObject</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromOrdinal</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromOrdinal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromUnicode</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromUnicode</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromString</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromStringAndSize</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromFormatV</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromFormatV</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromFormat</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromFormat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_FromWideChar</name></cpp:macro> <cpp:value>PyUnicodeUCS4_FromWideChar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GetDefaultEncoding</name></cpp:macro> <cpp:value>PyUnicodeUCS4_GetDefaultEncoding</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GetMax</name></cpp:macro> <cpp:value>PyUnicodeUCS4_GetMax</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GetSize</name></cpp:macro> <cpp:value>PyUnicodeUCS4_GetSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Join</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Join</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Partition</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Partition</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_RPartition</name></cpp:macro> <cpp:value>PyUnicodeUCS4_RPartition</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_RSplit</name></cpp:macro> <cpp:value>PyUnicodeUCS4_RSplit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Replace</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Replace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Resize</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Resize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_RichCompare</name></cpp:macro> <cpp:value>PyUnicodeUCS4_RichCompare</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_SetDefaultEncoding</name></cpp:macro> <cpp:value>PyUnicodeUCS4_SetDefaultEncoding</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Split</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Split</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Splitlines</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Splitlines</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Tailmatch</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Tailmatch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Translate</name></cpp:macro> <cpp:value>PyUnicodeUCS4_Translate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_TranslateCharmap</name></cpp:macro> <cpp:value>PyUnicodeUCS4_TranslateCharmap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_AsDefaultEncodedString</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_AsDefaultEncodedString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_Fini</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_Fini</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_Init</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_Init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_ClearFreeList</name></cpp:macro> <cpp:value>PyUnicodeUCS2_ClearFreelist</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsAlpha</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsAlpha</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsDecimalDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsDecimalDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsLinebreak</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsLinebreak</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsLowercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsLowercase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsNumeric</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsNumeric</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsTitlecase</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsTitlecase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsUppercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsUppercase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_IsWhitespace</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_IsWhitespace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToDecimalDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_ToDecimalDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToDigit</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_ToDigit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToLowercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_ToLowercase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToNumeric</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_ToNumeric</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToTitlecase</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_ToTitlecase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyUnicode_ToUppercase</name></cpp:macro> <cpp:value>_PyUnicodeUCS4_ToUppercase</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_USABLE_WCHAR_T</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>WANT_WCTYPE_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISSPACE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>iswspace(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISLOWER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>iswlower(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISUPPER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>iswupper(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISTITLE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsTitlecase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISLINEBREAK</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsLinebreak(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TOLOWER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>towlower(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TOUPPER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>towupper(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TOTITLE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToTitlecase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISDECIMAL</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsDecimalDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISDIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISNUMERIC</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsNumeric(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TODECIMAL</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToDecimalDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TODIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TONUMERIC</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToNumeric(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISALPHA</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>iswalpha(ch)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>const unsigned char</argument>)</argument_list></macro> <expr_stmt><expr><name><name>_Py_ascii_whitespace</name><index>[]</index></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISSPACE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((ch) &lt; 128U ? _Py_ascii_whitespace[(ch)] : _PyUnicode_IsWhitespace(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISLOWER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsLowercase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISUPPER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsUppercase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISTITLE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsTitlecase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISLINEBREAK</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsLinebreak(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TOLOWER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToLowercase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TOUPPER</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToUppercase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TOTITLE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToTitlecase(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISDECIMAL</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsDecimalDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISDIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISNUMERIC</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsNumeric(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TODECIMAL</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToDecimalDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TODIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToDigit(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_TONUMERIC</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_ToNumeric(ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISALPHA</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyUnicode_IsAlpha(ch)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_ISALNUM</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_UNICODE_ISALPHA(ch) || Py_UNICODE_ISDECIMAL(ch) || Py_UNICODE_ISDIGIT(ch) || Py_UNICODE_ISNUMERIC(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_COPY</name><parameter_list>(<param><type><name>target</name></type></param>, <param><type><name>source</name></type></param>, <param><type><name>length</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_MEMCPY((target), (source), (length)*sizeof(Py_UNICODE))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_FILL</name><parameter_list>(<param><type><name>target</name></type></param>, <param><type><name>value</name></type></param>, <param><type><name>length</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do{Py_ssize_t i_; Py_UNICODE *t_ = (target); Py_UNICODE v_ = (value);for (i_ = 0; i_ &lt; (length); i_++) t_[i_] = v_;} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_MATCH</name><parameter_list>(<param><type><name>string</name></type></param>, <param><type><name>offset</name></type></param>, <param><type><name>substring</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((*((string)-&gt;str + (offset)) == *((substring)-&gt;str)) &amp;&amp; ((*((string)-&gt;str + (offset) + (substring)-&gt;length-1) == *((substring)-&gt;str + (substring)-&gt;length-1))) &amp;&amp; !memcmp((string)-&gt;str + (offset), (substring)-&gt;str, (substring)-&gt;length*sizeof(Py_UNICODE)))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_ClearFreeList</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Py_ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>defenc</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyUnicodeObject</name>;</typedef>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyUnicode_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyUnicode_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GET_SIZE</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyUnicodeObject *)(op))-&gt;length)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_GET_DATA_SIZE</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyUnicodeObject *)(op))-&gt;length * sizeof(Py_UNICODE))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AS_UNICODE</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyUnicodeObject *)(op))-&gt;str)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AS_DATA</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((const char *)((PyUnicodeObject *)(op))-&gt;str)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_UNICODE_REPLACEMENT_CHARACTER</name></cpp:macro> <cpp:value>((Py_UNICODE) 0xFFFD)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_FromUnicode</name><argument_list>(
<argument>const Py_UNICODE *u</argument>,
<argument>Py_ssize_t size</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_FromStringAndSize</name><argument_list>(
<argument>const char *u</argument>,
<argument>Py_ssize_t size</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_FromString</name><argument_list>(
<argument><expr>const <name>char</name> *<name>u</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_UNICODE *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsUnicode</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_GetSize</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_UNICODE</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_GetMax</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyUnicode_Resize</name><argument_list>(
<argument>PyObject **unicode</argument>,
<argument>Py_ssize_t length</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_FromEncodedObject</name><argument_list>(
<argument>register PyObject *obj</argument>,
<argument>const char *encoding</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_FromObject</name><argument_list>(
<argument>register PyObject *obj</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_FromFormatV</name><argument_list>(<argument><expr>const <name>char</name>*</expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_FromFormat</name><argument_list>(<argument><expr>const <name>char</name>*</expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyUnicode_FormatAdvanced</name><argument_list>(<argument>PyObject *obj</argument>,
<argument>Py_UNICODE *format_spec</argument>,
<argument>Py_ssize_t format_spec_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_FromWideChar</name><argument_list>(
<argument>register const wchar_t *w</argument>,
<argument>Py_ssize_t size</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <macro><name>PyUnicode_AsWideChar</name><argument_list>(
<argument>PyUnicodeObject *unicode</argument>,
<argument>register wchar_t *w</argument>,
<argument>Py_ssize_t size</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_FromOrdinal</name><argument_list>(<argument>int ordinal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyUnicode_AsDefaultEncodedString</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>const char*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_GetDefaultEncoding</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_SetDefaultEncoding</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_Decode</name><argument_list>(
<argument>const char *s</argument>,
<argument>Py_ssize_t size</argument>,
<argument>const char *encoding</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_Encode</name><argument_list>(
<argument>const Py_UNICODE *s</argument>,
<argument>Py_ssize_t size</argument>,
<argument>const char *encoding</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsEncodedObject</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsEncodedString</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_BuildEncodingMap</name><argument_list>(
<argument><expr><name>PyObject</name>* <name>string</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF7</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF7Stateful</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>Py_ssize_t *consumed</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeUTF7</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>int encodeSetO</argument>,
<argument>int encodeWhiteSpace</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF8</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF8Stateful</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>Py_ssize_t *consumed</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsUTF8String</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeUTF8</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF32</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>int *byteorder</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF32Stateful</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>int *byteorder</argument>,
<argument>Py_ssize_t *consumed</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsUTF32String</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeUTF32</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>int byteorder</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF16</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>int *byteorder</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUTF16Stateful</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>int *byteorder</argument>,
<argument>Py_ssize_t *consumed</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsUTF16String</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeUTF16</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>int byteorder</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeUnicodeEscape</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsUnicodeEscapeString</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeUnicodeEscape</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeRawUnicodeEscape</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsRawUnicodeEscapeString</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeRawUnicodeEscape</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>PyObject</name> *</type><name>_PyUnicode_DecodeUnicodeInternal</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errors</name></decl></param>
)</parameter_list>;</function_decl>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeLatin1</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsLatin1String</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeLatin1</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeASCII</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsASCIIString</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeASCII</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeCharmap</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>PyObject *mapping</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsCharmapString</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>mapping</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeCharmap</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>PyObject *mapping</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyUnicode_TranslateCharmap</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>PyObject *table</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeMBCS</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_DecodeMBCSStateful</name><argument_list>(
<argument>const char *string</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>,
<argument>Py_ssize_t *consumed</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_AsMBCSString</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>unicode</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeMBCS</name><argument_list>(
<argument>const Py_UNICODE *data</argument>,
<argument>Py_ssize_t length</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyUnicode_EncodeDecimal</name><argument_list>(
<argument>Py_UNICODE *s</argument>,
<argument>Py_ssize_t length</argument>,
<argument>char *output</argument>,
<argument>const char *errors</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Concat</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>left</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>right</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_Split</name><argument_list>(
<argument>PyObject *s</argument>,
<argument>PyObject *sep</argument>,
<argument>Py_ssize_t maxsplit</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_Splitlines</name><argument_list>(
<argument>PyObject *s</argument>,
<argument>int keepends</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Partition</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>s</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>sep</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_RPartition</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>s</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>sep</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <macro><name>PyUnicode_RSplit</name><argument_list>(
<argument>PyObject *s</argument>,
<argument>PyObject *sep</argument>,
<argument>Py_ssize_t maxsplit</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Translate</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>str</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>table</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Join</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>separator</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>seq</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <macro><name>PyUnicode_Tailmatch</name><argument_list>(
<argument>PyObject *str</argument>,
<argument>PyObject *substr</argument>,
<argument>Py_ssize_t start</argument>,
<argument>Py_ssize_t end</argument>,
<argument>int direction</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <macro><name>PyUnicode_Find</name><argument_list>(
<argument>PyObject *str</argument>,
<argument>PyObject *substr</argument>,
<argument>Py_ssize_t start</argument>,
<argument>Py_ssize_t end</argument>,
<argument>int direction</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <macro><name>PyUnicode_Count</name><argument_list>(
<argument>PyObject *str</argument>,
<argument>PyObject *substr</argument>,
<argument>Py_ssize_t start</argument>,
<argument>Py_ssize_t end</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyUnicode_Replace</name><argument_list>(
<argument>PyObject *str</argument>,
<argument>PyObject *substr</argument>,
<argument>PyObject *replstr</argument>,
<argument>Py_ssize_t maxcount</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Compare</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>left</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>right</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyUnicode_RichCompare</name><argument_list>(
<argument>PyObject *left</argument>,
<argument>PyObject *right</argument>,
<argument>int op</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Format</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>format</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>args</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicode_Contains</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>container</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>element</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyUnicode_XStrip</name><argument_list>(
<argument>PyUnicodeObject *self</argument>,
<argument>int striptype</argument>,
<argument>PyObject *sepobj</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsLowercase</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsUppercase</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsTitlecase</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsWhitespace</name><argument_list>(
<argument>const Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsLinebreak</name><argument_list>(
<argument>const Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_UNICODE</argument>)</argument_list></macro> <macro><name>_PyUnicode_ToLowercase</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_UNICODE</argument>)</argument_list></macro> <macro><name>_PyUnicode_ToUppercase</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_UNICODE</argument>)</argument_list></macro> <macro><name>_PyUnicode_ToTitlecase</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_ToDecimalDigit</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_ToDigit</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <macro><name>_PyUnicode_ToNumeric</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsDecimalDigit</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsDigit</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsNumeric</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyUnicode_IsAlpha</name><argument_list>(
<argument>Py_UNICODE ch</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
