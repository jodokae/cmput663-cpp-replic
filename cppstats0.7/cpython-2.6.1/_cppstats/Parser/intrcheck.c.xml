<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Parser/intrcheck.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pythread.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUICKWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type>
<name>PyOS_InitInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>void</name></type>
<name>PyOS_FiniInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>int</name></type>
<name>PyOS_InterruptOccurred</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_wyield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>QUICKWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;go32.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type>
<name>PyOS_InitInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_go32_want_ctrl_break</name><argument_list>(<argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyOS_FiniInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>int</name></type>
<name>PyOS_InterruptOccurred</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>_go32_was_ctrl_break_hit</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type>
<name>PyOS_InitInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>void</name></type>
<name>PyOS_FiniInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>int</name></type>
<name>PyOS_InterruptOccurred</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>interrupted</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>kbhit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>getch</name><argument_list>()</argument_list></call> == '\003'</expr>)</condition><then>
<expr_stmt><expr><name>interrupted</name> = 1</expr>;</expr_stmt></then></if>
}</block></while>
<return>return <expr><name>interrupted</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>interrupted</name></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>PyErr_SetInterrupt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>interrupted</name> = 1</expr>;</expr_stmt>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>PyErr_CheckSignals</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>checksignals_witharg</name><parameter_list>(<param><decl><type><name>void</name> *</type> <name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyErr_CheckSignals</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>intcatcher</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list> <block>{
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>Py_Exit</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>message</name><index>[]</index></name> <init>=
<expr>"python: to interrupt a truly hanging Python program, interrupt once more.\n"</expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>interrupted</name>++</expr>)</condition> <block>{
<case>case <expr>0</expr>:
<break>break;</break>
</case><case>case <expr>1</expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RISCOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr>2</expr>:
<expr_stmt><expr><name>interrupted</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>intcatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_AddPendingCall</name><argument_list>(<argument><expr><name>checksignals_witharg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr>static <call><call><name>void</name> <argument_list>(<argument><expr>*<name>old_siginthandler</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call> = <name>SIG_DFL</name></expr>;</expr_stmt>
<function><type><name>void</name></type>
<name>PyOS_InitInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name>old_siginthandler</name> = <call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call>) != <name>SIG_IGN</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>intcatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>PyOS_FiniInterrupts</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>old_siginthandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>PyOS_InterruptOccurred</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>interrupted</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>interrupted</name> = 0</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>PyOS_AfterFork</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyEval_ReInitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_ReInitTLS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
