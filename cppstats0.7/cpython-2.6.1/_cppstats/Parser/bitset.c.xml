<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Parser/bitset.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgenheaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitset.h"</cpp:file></cpp:include>
<function><type><name>bitset</name></type>
<name>newbitset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>nbits</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nbytes</name> <init>= <expr><call><name>NBYTES</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bitset</name></type> <name>ss</name> <init>= <expr>(<name>char</name> *)<call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BYTE</name></expr></argument>)</argument_list></sizeof> * <name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ss</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"no mem for bitset"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ss</name> += <name>nbytes</name></expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>nbytes</name> &gt;= 0</expr>)</condition>
<expr_stmt><expr>*--<name>ss</name> = 0</expr>;</expr_stmt></while>
<return>return <expr><name>ss</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>delbitset</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>ss</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>addbit</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>ss</name></decl></param>, <param><decl><type><name>int</name></type> <name>ibit</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ibyte</name> <init>= <expr><call><name>BIT2BYTE</name><argument_list>(<argument><expr><name>ibit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>mask</name> <init>= <expr><call><name>BIT2MASK</name><argument_list>(<argument><expr><name>ibit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>ibyte</name></expr>]</index></name> &amp; <name>mask</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name><name>ss</name><index>[<expr><name>ibyte</name></expr>]</index></name> |= <name>mask</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
int
testbit(bitset ss, int ibit) {
return (ss[BIT2BYTE(ibit)] &amp; BIT2MASK(ibit)) != 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type>
<name>samebitset</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>ss1</name></decl></param>, <param><decl><type><name>bitset</name></type> <name>ss2</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbits</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <call><name>NBYTES</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr/>)
<if>if <condition>(<expr>*<name>ss1</name>++ != *<name>ss2</name>++</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>mergebitset</name><parameter_list>(<param><decl><type><name>bitset</name></type> <name>ss1</name></decl></param>, <param><decl><type><name>bitset</name></type> <name>ss2</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbits</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <call><name>NBYTES</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr/>)
<expr_stmt><expr>*<name>ss1</name>++ |= *<name>ss2</name>++</expr>;</expr_stmt></for>
}</block></function>
</unit>
