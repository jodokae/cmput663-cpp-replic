<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PC/_subprocess.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOWS_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
}</block></struct></type> <name>sp_handle_object</name>;</typedef>
<decl_stmt><decl><type><name>staticforward</name> <name>PyTypeObject</name></type> <name>sp_handle_type</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>sp_handle_new</name><parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>handle</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sp_handle_object</name>*</type> <name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>sp_handle_object</name></expr></argument>, <argument><expr>&amp;<name>sp_handle_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>handle</name></name> = <name>handle</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>self</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_TO_PYNUM</name><parameter_list>(<param><type><name>handle</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyInt_FromLong((long) handle)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_HANDLE_PARAM</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_TO_PYNUM</name><parameter_list>(<param><type><name>handle</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyLong_FromLongLong((long long) handle)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_HANDLE_PARAM</name></cpp:macro> <cpp:value>"L"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>sp_handle_detach</name><parameter_list>(<param><decl><type><name>sp_handle_object</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":Detach"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>handle</name> = <name><name>self</name>-&gt;<name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>HANDLE_TO_PYNUM</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>sp_handle_close</name><parameter_list>(<param><decl><type><name>sp_handle_object</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":Close"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle</name></name> != <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>handle</name></name> = <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sp_handle_dealloc</name><parameter_list>(<param><decl><type><name>sp_handle_object</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>handle</name></name> != <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>sp_handle_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"Detach"</expr>, <expr>(<name>PyCFunction</name>) <name>sp_handle_detach</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"Close"</expr>, <expr>(<name>PyCFunction</name>) <name>sp_handle_close</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>sp_handle_getattr</name><parameter_list>(<param><decl><type><name>sp_handle_object</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>sp_handle_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>sp_handle_as_int</name><parameter_list>(<param><decl><type><name>sp_handle_object</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>HANDLE_TO_PYNUM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>sp_handle_as_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>sp_handle_type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_subprocess_handle"</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sp_handle_object</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
<expr>(<name>destructor</name>) <name>sp_handle_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>) <name>sp_handle_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>&amp;<name>sp_handle_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_GetStdHandle</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>std_handle</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:GetStdHandle"</expr></argument>, <argument><expr>&amp;<name>std_handle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>handle</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr>(<name>DWORD</name>) <name>std_handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>handle</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <name>handle</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>HANDLE_TO_PYNUM</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_GetCurrentProcess</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":GetCurrentProcess"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>sp_handle_new</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_DuplicateHandle</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>target_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>source_process_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>source_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>target_process_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desired_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inherit_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <macro><name>PyArg_ParseTuple</name><argument_list>(<argument>args</argument>,
<argument>PY_HANDLE_PARAM PY_HANDLE_PARAM PY_HANDLE_PARAM
"ii|i:DuplicateHandle"</argument>,
<argument>&amp;source_process_handle</argument>,
<argument>&amp;source_handle</argument>,
<argument>&amp;target_process_handle</argument>,
<argument>&amp;desired_access</argument>,
<argument>&amp;inherit_handle</argument>,
<argument>&amp;options</argument>)</argument_list></macro></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>result</name> <init>= <expr><call><name>DuplicateHandle</name><argument_list>(
<argument><expr><name>source_process_handle</name></expr></argument>,
<argument><expr><name>source_handle</name></expr></argument>,
<argument><expr><name>target_process_handle</name></expr></argument>,
<argument><expr>&amp;<name>target_handle</name></expr></argument>,
<argument><expr><name>desired_access</name></expr></argument>,
<argument><expr><name>inherit_handle</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>sp_handle_new</name><argument_list>(<argument><expr><name>target_handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_CreatePipe</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>read_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>write_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>pipe_attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oi:CreatePipe"</expr></argument>, <argument><expr>&amp;<name>pipe_attributes</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>result</name> <init>= <expr><call><name>CreatePipe</name><argument_list>(<argument><expr>&amp;<name>read_pipe</name></expr></argument>, <argument><expr>&amp;<name>write_pipe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(
<argument><expr>"NN"</expr></argument>, <argument><expr><call><name>sp_handle_new</name><argument_list>(<argument><expr><name>read_pipe</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sp_handle_new</name><argument_list>(<argument><expr><name>write_pipe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>getint</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = (<name>int</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>gethandle</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sp_handle_object</name>*</type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> = (<name>sp_handle_object</name>*) <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>value</name>-&gt;<name>ob_type</name></name> != &amp;<name>sp_handle_type</name></expr>)</condition><then>
<expr_stmt><expr><name>ret</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ret</name> = <name><name>value</name>-&gt;<name>handle</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>getenvironment</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>environment</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>envsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"environment must be dictionary or None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>envsize</name> = <call><name>PyMapping_Length</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> = <call><name>PyMapping_Keys</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>values</name> = <call><name>PyMapping_Values</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>keys</name> || !<name>values</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>out</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>2048</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>out</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>p</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>envsize</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ksize</name></decl>, <decl><type ref="prev"/><name>vsize</name></decl>, <decl><type ref="prev"/><name>totalsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name> <init>= <expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name> <init>= <expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyString_Check</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> || ! <call><name>PyString_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"environment can only contain strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>ksize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>totalsize</name> = (<name>p</name> - <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call>) + <name>ksize</name> + 1 +
<name>vsize</name> + 1 + 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>totalsize</name> &gt; <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>p</name> - <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>totalsize</name> + 1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> + <name>offset</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += <name>ksize</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = '='</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += <name>vsize</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = '\0'</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>p</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name> - <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_CreateProcess</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>environment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>application_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>command_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>process_attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>thread_attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inherit_handles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>creation_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>env_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>current_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>startup_info</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"zzOOiiOzO:CreateProcess"</expr></argument>,
<argument><expr>&amp;<name>application_name</name></expr></argument>,
<argument><expr>&amp;<name>command_line</name></expr></argument>,
<argument><expr>&amp;<name>process_attributes</name></expr></argument>,
<argument><expr>&amp;<name>thread_attributes</name></expr></argument>,
<argument><expr>&amp;<name>inherit_handles</name></expr></argument>,
<argument><expr>&amp;<name>creation_flags</name></expr></argument>,
<argument><expr>&amp;<name>env_mapping</name></expr></argument>,
<argument><expr>&amp;<name>current_directory</name></expr></argument>,
<argument><expr>&amp;<name>startup_info</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr>&amp;<name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>cb</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>dwFlags</name></name> = <call><name>getint</name><argument_list>(<argument><expr><name>startup_info</name></expr></argument>, <argument><expr>"dwFlags"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>wShowWindow</name></name> = <call><name>getint</name><argument_list>(<argument><expr><name>startup_info</name></expr></argument>, <argument><expr>"wShowWindow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>hStdInput</name></name> = <call><name>gethandle</name><argument_list>(<argument><expr><name>startup_info</name></expr></argument>, <argument><expr>"hStdInput"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>hStdOutput</name></name> = <call><name>gethandle</name><argument_list>(<argument><expr><name>startup_info</name></expr></argument>, <argument><expr>"hStdOutput"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>hStdError</name></name> = <call><name>gethandle</name><argument_list>(<argument><expr><name>startup_info</name></expr></argument>, <argument><expr>"hStdError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>env_mapping</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>environment</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>environment</name> = <call><name>getenvironment</name><argument_list>(<argument><expr><name>env_mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>environment</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></else></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>result</name> <init>= <expr><call><name>CreateProcess</name><argument_list>(<argument><expr><name>application_name</name></expr></argument>,
<argument><expr><name>command_line</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>inherit_handles</name></expr></argument>,
<argument><expr><name>creation_flags</name></expr></argument>,
<argument><expr><name>environment</name> ? <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></argument>,
<argument><expr><name>current_directory</name></expr></argument>,
<argument><expr>&amp;<name>si</name></expr></argument>,
<argument><expr>&amp;<name>pi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>Py_XDECREF</name><parameter_list>(<param><decl><type><name>environment</name></type></decl></param>)</parameter_list>;</function_decl>
<if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"NNii"</expr></argument>,
<argument><expr><call><name>sp_handle_new</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hProcess</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sp_handle_new</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hThread</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>pi</name>.<name>dwProcessId</name></name></expr></argument>,
<argument><expr><name><name>pi</name>.<name>dwThreadId</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_TerminateProcess</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exit_code</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>PY_HANDLE_PARAM</name> "i:TerminateProcess"</expr></argument>,
<argument><expr>&amp;<name>process</name></expr></argument>, <argument><expr>&amp;<name>exit_code</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>TerminateProcess</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_GetExitCodeProcess</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>exit_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>PY_HANDLE_PARAM</name> ":GetExitCodeProcess"</expr></argument>, <argument><expr>&amp;<name>process</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>&amp;<name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_WaitForSingleObject</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>milliseconds</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>PY_HANDLE_PARAM</name> "i:WaitForSingleObject"</expr></argument>,
<argument><expr>&amp;<name>handle</name></expr></argument>,
<argument><expr>&amp;<name>milliseconds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>result</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr>(<name>DWORD</name>) <name>milliseconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>result</name> == <name>WAIT_FAILED</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>int</name>) <name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_GetVersion</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":GetVersion"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>int</name>) <call><name>GetVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sp_GetModuleFileName</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>filename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>PY_HANDLE_PARAM</name> ":GetModuleFileName"</expr></argument>,
<argument><expr>&amp;<name>module</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filename</name><index>[<expr><name>MAX_PATH</name>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>sp_functions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"GetStdHandle"</expr>, <expr><name>sp_GetStdHandle</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"GetCurrentProcess"</expr>, <expr><name>sp_GetCurrentProcess</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"DuplicateHandle"</expr>, <expr><name>sp_DuplicateHandle</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"CreatePipe"</expr>, <expr><name>sp_CreatePipe</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"CreateProcess"</expr>, <expr><name>sp_CreateProcess</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"TerminateProcess"</expr>, <expr><name>sp_TerminateProcess</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"GetExitCodeProcess"</expr>, <expr><name>sp_GetExitCodeProcess</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"WaitForSingleObject"</expr>, <expr><name>sp_WaitForSingleObject</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"GetVersion"</expr>, <expr><name>sp_GetVersion</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"GetModuleFileName"</expr>, <expr><name>sp_GetModuleFileName</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>defint</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>d</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>v</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x02030000</expr></cpp:if>
<function><type><name>PyMODINIT_FUNC</name></type>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>DL_EXPORT</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
init_subprocess<parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sp_handle_type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp_handle_as_number</name>.<name>nb_int</name></name> = (<name>unaryfunc</name>) <name>sp_handle_as_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_subprocess"</expr></argument>, <argument><expr><name>sp_functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STD_INPUT_HANDLE"</expr></argument>, <argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STD_OUTPUT_HANDLE"</expr></argument>, <argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STD_ERROR_HANDLE"</expr></argument>, <argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DUPLICATE_SAME_ACCESS"</expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STARTF_USESTDHANDLES"</expr></argument>, <argument><expr><name>STARTF_USESTDHANDLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STARTF_USESHOWWINDOW"</expr></argument>, <argument><expr><name>STARTF_USESHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"SW_HIDE"</expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"INFINITE"</expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"WAIT_OBJECT_0"</expr></argument>, <argument><expr><name>WAIT_OBJECT_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>defint</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CREATE_NEW_CONSOLE"</expr></argument>, <argument><expr><name>CREATE_NEW_CONSOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
