<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PC/bdist_wininst/install.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commctrl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;imagehlp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objidl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"archive.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>FILE</name> *</type><name>logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>modulename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwndMain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ini_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>info</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>title</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>target_version</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>build_info</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>meta_name</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>install_script</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pre_install_script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>user_access_control</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>py_major</name></decl>, <decl><type ref="prev"/><name>py_minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arc_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>arc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exe_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>python_dir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pythondll</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>pyc_compile</name></decl>, <decl><type ref="prev"/><name>pyo_compile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey_root</name> <init>= <expr>(<name>HKEY</name>)-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>failure_reason</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hBitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>bitmap_bytes</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_NUMFILES</name></cpp:macro> <cpp:value>WM_USER+1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_NEXTFILE</name></cpp:macro> <cpp:value>WM_USER+2</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>notify</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>SCHEME</name></type> <name><name>old_scheme</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"PURELIB"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>"PLATLIB"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>"HEADERS"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>"SCRIPTS"</expr>, <expr>"Scripts\\"</expr> }</block></expr>,
<expr><block>{ <expr>"DATA"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCHEME</name></type> <name><name>new_scheme</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"PURELIB"</expr>, <expr>"Lib\\site-packages\\"</expr> }</block></expr>,
<expr><block>{ <expr>"PLATLIB"</expr>, <expr>"Lib\\site-packages\\"</expr> }</block></expr>,
<expr><block>{ <expr>"HEADERS"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>"SCRIPTS"</expr>, <expr>"Scripts\\"</expr> }</block></expr>,
<expr><block>{ <expr>"DATA"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>unescape</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>dst</name></decl></param>, <param><decl><type><name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>eon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>src</name> &amp;&amp; *<name>src</name> &amp;&amp; (<name>size</name> &gt; 2)</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>src</name> == '\\'</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>*++<name>src</name></expr>)</condition> <block>{
<case>case <expr>'n'</expr>:
<expr_stmt><expr>++<name>src</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dst</name>++ = '\r'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>dst</name>++ = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> -= 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr>++<name>src</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dst</name>++ = '\r'</expr>;</expr_stmt>
<expr_stmt><expr>--<name>size</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'0'</expr>:
</case><case>case <expr>'1'</expr>:
</case><case>case <expr>'2'</expr>:
</case><case>case <expr>'3'</expr>:
<expr_stmt><expr><name>ch</name> = (<name>char</name>)<call><name>strtol</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>&amp;<name>eon</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name>++ = '\r'</expr>;</expr_stmt>
<expr_stmt><expr>--<name>size</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>dst</name>++ = <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> = <name>eon</name></expr>;</expr_stmt>
</case>}</block></switch>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>dst</name>++ = *<name>src</name>++</expr>;</expr_stmt>
<expr_stmt><expr>--<name>size</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<expr_stmt><expr>*<name>dst</name> = '\0'</expr>;</expr_stmt>
}</block></function>
<struct><specifier>static</specifier> struct <name>tagFile</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>tagFile</name> *</type><name>next</name></decl>;</decl_stmt>
}</block> <decl>*<name>file_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_failure_reason</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>failure_reason</name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>failure_reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>failure_reason</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_failure_reason</name><parameter_list>()</parameter_list> <block>{
<if>if <condition>(<expr>!<name>failure_reason</name></expr>)</condition><then>
<return>return <expr>"Installation failed."</expr>;</return></then></if>
<return>return <expr><name>failure_reason</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_to_filelist</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tagFile</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = (struct <name>tagFile</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>tagFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>path</name></name> = <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name>file_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file_list</name> = <name>p</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_compile_files</name><parameter_list>(<param><function_decl><type><name>int</name></type> (<name>__cdecl</name> * <name>PyRun_SimpleString</name>)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>int</name></type> <name>optimize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tagFile</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr><name>MAX_PATH</name> + 64</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>total</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>file_list</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{
<expr_stmt><expr>++<name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_PROGRESS</name></expr></argument>, <argument><expr><name>PBM_SETRANGE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>MAKELPARAM</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_PROGRESS</name></expr></argument>, <argument><expr><name>PBM_SETPOS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>file_list</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{
<expr_stmt><expr>++<name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>,
<argument><expr>"import py_compile; py_compile.compile (r'%s')"</expr></argument>,
<argument><expr><name><name>p</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>errors</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr>"%s%c"</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>optimize</name> ? 'o' : 'c'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><name>FILE_CREATED</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_PROGRESS</name></expr></argument>, <argument><expr><name>PBM_SETPOS</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>errors</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLPROC</name><parameter_list>(<param><type><name>dll</name></type></param>, <param><type><name>result</name></type></param>, <param><type><name>name</name></type></param>, <param><type><name>args</name></type></param>)</parameter_list></cpp:macro><cpp:value>typedef result (*__PROC__##name) args;result (*name)args = (__PROC__##name)GetProcAddress(dll, #name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLVAR</name><parameter_list>(<param><type><name>dll</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>name</name></type></param>)</parameter_list></cpp:macro><cpp:value>type *name = (type*)GetProcAddress(dll, #name)</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name></type> <name>PyObject</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compile_filelist</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>optimize_flag</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_Initialize</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_SetProgramName</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_Finalize</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyRun_SimpleString</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PySys_GetObject</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLVAR</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>Py_OptimizeFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>tagFile</name> *</type><name>p</name> <init>= <expr><name>file_list</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>Py_Initialize</name> || !<name>Py_SetProgramName</name> || !<name>Py_Finalize</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>PyRun_SimpleString</name> || !<name>PySys_GetObject</name> || !<name>Py_OptimizeFlag</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*<name>Py_OptimizeFlag</name> = <name>optimize_flag</name> ? 1 : 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SetProgramName</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errors</name> += <call><name>do_compile_files</name><argument_list>(<argument><expr><name>PyRun_SimpleString</name></expr></argument>, <argument><expr><name>optimize_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errors</name></expr>;</return>
}</block></function>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>PyCFunction</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>PyMethodDef</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ml_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCFunction</name></type> <name>ml_meth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ml_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ml_doc</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>PyMethodDef</name></type> <name>PyMethodDef</name>;</typedef>
<function_decl><type><name>void</name> *</type>(*<name>g_Py_BuildValue</name>)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>g_PyArg_ParseTuple</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name> *</type> (*<name>g_PyLong_FromVoidPtr</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>g_PyExc_ValueError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>g_PyExc_OSError</name></decl>;</decl_stmt>
<function_decl><type><name>PyObject</name> *</type>(*<name>g_PyErr_Format</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_CSIDL</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ name, #name }</cpp:value></cpp:define>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nFolder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>csidl_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_COMMON_STARTMENU</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_STARTMENU</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_APPDATA</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_COMMON_DESKTOPDIRECTORY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_DESKTOPDIRECTORY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_COMMON_STARTUP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_STARTUP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_COMMON_PROGRAMS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_PROGRAMS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEF_CSIDL</name><argument_list>(<argument><expr><name>CSIDL_FONTS</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIM</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof((a)[0]))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>FileCreated</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>g_PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><name>FILE_CREATED</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>g_Py_BuildValue</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DirectoryCreated</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>g_PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><name>DIR_CREATED</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>g_Py_BuildValue</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GetSpecialFolderPath</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lpszPath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> (<name>WINAPI</name> *<name>My_SHGetSpecialFolderPath</name>)<parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>,
<param><decl><type><name>LPTSTR</name></type> <name>lpszPath</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nFolder</name></decl></param>,
<param><decl><type><name>BOOL</name></type> <name>fCreate</name></decl></param>)</parameter_list>;</function_decl>
<if>if <condition>(<expr>!<name>My_SHGetSpecialFolderPath</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hLib</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr>"shell32.dll"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>hLib</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"function not available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>My_SHGetSpecialFolderPath</name> = (<call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> *</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HWND</name></expr></argument>, <argument><expr><name>LPTSTR</name></expr></argument>,
<argument><expr><name>int</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call>)
<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLib</name></expr></argument>,
<argument><expr>"SHGetSpecialFolderPathA"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>g_PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>My_SHGetSpecialFolderPath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>, <argument><expr>"function not available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>DIM</name><argument_list>(<argument><expr><name>csidl_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>0 == <call><name>strcmpi</name><argument_list>(<argument><expr><name><name>csidl_names</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nFolder</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nFolder</name> = <name><name>csidl_names</name><index>[<expr><name>i</name></expr>]</index></name>.<name>nFolder</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>My_SHGetSpecialFolderPath</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lpszPath</name></expr></argument>,
<argument><expr><name>nFolder</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>g_Py_BuildValue</name><argument_list>(<argument><expr>"s"</expr></argument>, <argument><expr><name>lpszPath</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"no such folder (%s)"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></for><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_ValueError</name></expr></argument>, <argument><expr>"unknown CSIDL (%s)"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>CreateShortcut</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arguments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>iconpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iconindex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>workdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wszFilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IShellLink</name> *</type><name>ps1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPersistFile</name> *</type><name>pPf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> = <call><name>CoInitialize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"CoInitialize failed, error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>g_PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"sss|sssi"</expr></argument>,
<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>description</name></expr></argument>, <argument><expr>&amp;<name>filename</name></expr></argument>,
<argument><expr>&amp;<name>arguments</name></expr></argument>, <argument><expr>&amp;<name>workdir</name></expr></argument>, <argument><expr>&amp;<name>iconpath</name></expr></argument>, <argument><expr>&amp;<name>iconindex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>hr</name> = <call><name>CoCreateInstance</name><argument_list>(<argument><expr>&amp;<name>CLSID_ShellLink</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr>&amp;<name>IID_IShellLink</name></expr></argument>,
<argument><expr>&amp;<name>ps1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"CoCreateInstance failed, error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>hr</name> = <call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr>&amp;<name>IID_IPersistFile</name></expr></argument>,
<argument><expr>(<name>void</name> **)&amp;<name>pPf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"QueryInterface(IPersistFile) error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>hr</name> = <call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>SetPath</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"SetPath() failed, error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>hr</name> = <call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>SetDescription</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"SetDescription() failed, error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>arguments</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hr</name> = <call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>SetArguments</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"SetArguments() error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>iconpath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hr</name> = <call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>SetIconLocation</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>iconpath</name></expr></argument>, <argument><expr><name>iconindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"SetIconLocation() error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>workdir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hr</name> = <call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>SetWorkingDirectory</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>workdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"SetWorkingDirectory() error 0x%x"</expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr>-1</expr></argument>,
<argument><expr><name>wszFilename</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> = <call><name><name>pPf</name>-&gt;<name>lpVtbl</name>-&gt;<name>Save</name></name><argument_list>(<argument><expr><name>pPf</name></expr></argument>, <argument><expr><name>wszFilename</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>g_PyErr_Format</name><argument_list>(<argument><expr><name>g_PyExc_OSError</name></expr></argument>,
<argument><expr>"Failed to create shortcut '%s' - error 0x%x"</expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name><name>pPf</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>pPf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>g_Py_BuildValue</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
<label><name>error</name>:</label>
<if>if <condition>(<expr><name>pPf</name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>pPf</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>pPf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ps1</name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>ps1</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>ps1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyMessageBox</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>text</name></decl>, *<decl><type ref="prev"/><name>caption</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>g_PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ssi"</expr></argument>, <argument><expr>&amp;<name>text</name></expr></argument>, <argument><expr>&amp;<name>caption</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>g_Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>GetRootHKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>g_PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>hkey_root</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_VARARGS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_NOARGS</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>PyCFunction</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>PyMethodDef</name></type> <name><name>meth</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"create_shortcut"</expr>, <expr><name>CreateShortcut</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"get_special_folder_path"</expr>, <expr><name>GetSpecialFolderPath</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"get_root_hkey"</expr>, <expr>(<name>PyCFunction</name>)<name>GetRootHKey</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"file_created"</expr>, <expr><name>FileCreated</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"directory_created"</expr>, <expr><name>DirectoryCreated</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"message_box"</expr>, <expr><name>PyMessageBox</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>LoadPythonDll</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>fname</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fullpath</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullpath</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>subkey_name</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>260 + 12</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"PYTHONHOME=%s"</expr></argument>, <argument><expr><name>python_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_putenv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> = <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>h</name></expr>)</condition><then>
<return>return <expr><name>h</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>subkey_name</name></expr></argument>,
<argument><expr>"SOFTWARE\\Python\\PythonCore\\%d.%d\\InstallPath"</expr></argument>,
<argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ERROR_SUCCESS</name> != <call><name>RegQueryValue</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>,
<argument><expr><name>fullpath</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call> &amp;&amp;
<name>ERROR_SUCCESS</name> != <call><name>RegQueryValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>,
<argument><expr><name>fullpath</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fullpath</name></expr></argument>, <argument><expr>"\\"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fullpath</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><name>fullpath</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>prepare_script_environment</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>mod</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyImport_ImportModule</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyObject_SetAttrString</name></expr></argument>, <argument><expr>(<name>PyObject</name> *, <name>char</name> *, <name>PyObject</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject_GetAttrString</name></expr></argument>, <argument><expr>(<name>PyObject</name> *, <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyCFunction_New</name></expr></argument>, <argument><expr>(<name>PyMethodDef</name> *, <name>PyObject</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_BuildValue</name></expr></argument>, <argument><expr>(<name>char</name> *, ...)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyArg_ParseTuple</name></expr></argument>, <argument><expr>(<name>PyObject</name> *, <name>char</name> *, ...)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyErr_Format</name></expr></argument>, <argument><expr>(<name>PyObject</name> *, <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyLong_FromVoidPtr</name></expr></argument>, <argument><expr>(<name>void</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>PyImport_ImportModule</name> || !<name>PyObject_GetAttrString</name> ||
!<name>PyObject_SetAttrString</name> || !<name>PyCFunction_New</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>Py_BuildValue</name> || !<name>PyArg_ParseTuple</name> || !<name>PyErr_Format</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>mod</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>"__builtin__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mod</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>g_PyExc_ValueError</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr>"ValueError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_PyExc_OSError</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr>"OSError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>DIM</name><argument_list>(<argument><expr><name>meth</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name><name>meth</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ml_name</name></expr></argument>,
<argument><expr><call><name>PyCFunction_New</name><argument_list>(<argument><expr>&amp;<name><name>meth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>g_Py_BuildValue</name> = <name>Py_BuildValue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_PyArg_ParseTuple</name> = <name>PyArg_ParseTuple</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_PyErr_Format</name> = <name>PyErr_Format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_PyLong_FromVoidPtr</name> = <name>PyLong_FromVoidPtr</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>run_installscript</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl></param>, <param><decl><type><name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_Initialize</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PySys_SetArgv</name></expr></argument>, <argument><expr>(<name>int</name>, <name>char</name> **)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyRun_SimpleString</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_Finalize</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_BuildValue</name></expr></argument>, <argument><expr>(<name>char</name> *, ...)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyCFunction_New</name></expr></argument>,
<argument><expr>(<name>PyMethodDef</name> *, <name>PyObject</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyArg_ParseTuple</name></expr></argument>, <argument><expr>(<name>PyObject</name> *, <name>char</name> *, ...)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyErr_Format</name></expr></argument>, <argument><expr>(<name>PyObject</name> *, <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fh</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>Py_Initialize</name> || !<name>PySys_SetArgv</name>
|| !<name>PyRun_SimpleString</name> || !<name>Py_Finalize</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>Py_BuildValue</name> || !<name>PyArg_ParseTuple</name> || !<name>PyErr_Format</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>PyCFunction_New</name> || !<name>PyArg_ParseTuple</name> || !<name>PyErr_Format</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr><name>pathname</name> == <name>NULL</name> || <name><name>pathname</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr>2</expr>;</return></then></if>
<expr_stmt><expr><name>fh</name> = <call><name>open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>_O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>-1 == <name>fh</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not open postinstall-script %s\n"</expr></argument>,
<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>3</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr>"Running Script..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prepare_script_environment</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PySys_SetArgv</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = 3</expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type>struct <name>_stat</name></type> <name>statbuf</name></decl>;</decl_stmt>
<if>if<condition>(<expr>0 == <call><name>_fstat</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr>&amp;<name>statbuf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>script</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name><name>statbuf</name>.<name>st_size</name></name> + 5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>statbuf</name>.<name>st_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>script</name><index>[<expr><name>n</name></expr>]</index></name> = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>script</name><index>[<expr><name>n</name>+1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_run_simple_script</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl></param>, <param><decl><type><name>char</name> *</type><name>script</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_Initialize</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_SetProgramName</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>Py_Finalize</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyRun_SimpleString</name></expr></argument>, <argument><expr>(<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLPROC</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>PyErr_Print</name></expr></argument>, <argument><expr>(<name>void</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>Py_Initialize</name> || !<name>Py_SetProgramName</name> || !<name>Py_Finalize</name> ||
!<name>PyRun_SimpleString</name> || !<name>PyErr_Print</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_SetProgramName</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prepare_script_environment</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>run_simple_script</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>script</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tempname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tempname</name> = <call><name>tempnam</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hPython</name> = <call><name>LoadPythonDll</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hPython</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>reason</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr>"Can't load Python for pre-install script (%d)"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_failure_reason</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>do_run_simple_script</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>err_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name> <init>= <expr>"Running the pre-installation script failed\r\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_buf_size</name> = <call><name>ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_buf</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>prefix_len</name> + <name>err_buf_size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_buf</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>err_buf</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>fread</name><argument_list>(<argument><expr><name>err_buf</name>+<name>prefix_len</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>err_buf_size</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err_buf</name><index>[<expr><name>prefix_len</name>+<name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_failure_reason</name><argument_list>(<argument><expr><name>err_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>err_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>set_failure_reason</name><argument_list>(<argument><expr>"Out of memory!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>SystemError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>error</name></decl></param>, <param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpMsgBuf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(
<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> |
<name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>,
<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>LPSTR</name>)&amp;<name>lpMsgBuf</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>lpMsgBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>lpMsgBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>Buffer</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>n</name> = <call><name>lstrlen</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_snprintf</name><argument_list>(<argument><expr><name>Buffer</name>+<name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></sizeof>-<name>n</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>hwndMain</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>, <argument><expr>"Runtime Error"</expr></argument>, <argument><expr><name>MB_OK</name> | <name>MB_ICONSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>notify</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>marker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_vsnprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{
<case>case <expr><name>CAN_OVERWRITE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>DIR_CREATED</name></expr>:
<if>if <condition>(<expr><name>logfile</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"100 Made Dir: %s\n"</expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FILE_CREATED</name></expr>:
<if>if <condition>(<expr><name>logfile</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"200 File Copy: %s\n"</expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<goto>goto <name>add_to_filelist_label</name>;</goto>
<break>break;</break>
</case><case>case <expr><name>FILE_OVERWRITTEN</name></expr>:
<if>if <condition>(<expr><name>logfile</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"200 File Overwrite: %s\n"</expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<label><name>add_to_filelist_label</name>:</label>
<if>if <condition>(<expr>(<name>cp</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>) &amp;&amp; (0 == <call><name>strcmp</name> <argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>".py"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>add_to_filelist</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>ZLIB_ERROR</name></expr>:
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>, <argument><expr>"Error"</expr></argument>,
<argument><expr><name>MB_OK</name> | <name>MB_ICONWARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SYSTEM_ERROR</name></expr>:
<expr_stmt><expr><call><name>SystemError</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>NUM_FILES</name></expr>:
<expr_stmt><expr><name>a</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>WM_NUMFILES</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>MAKELPARAM</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>WM_NEXTFILE</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,<argument><expr>(<name>LPARAM</name>)<name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case>}</block></switch>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>MapExistingFile</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>DWORD</name> *</type><name>psize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>, <decl><type ref="prev"/><name>hFileMapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nSizeLow</name></decl>, <decl><type ref="prev"/><name>nSizeHigh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hFile</name> = <call><name>CreateFile</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>,
<argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hFile</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>nSizeLow</name> = <call><name>GetFileSize</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr>&amp;<name>nSizeHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hFileMapping</name> = <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READONLY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hFileMapping</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>data</name> = <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name>hFileMapping</name></expr></argument>,
<argument><expr><name>FILE_MAP_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFileMapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>psize</name> = <name>nSizeLow</name></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>create_bitmap</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BITMAPFILEHEADER</name> *</type><name>bfh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFO</name> *</type><name>bi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>bitmap_bytes</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>hBitmap</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>hdc</name> = <call><name>GetDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bfh</name> = (<name>BITMAPFILEHEADER</name> *)<name>bitmap_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bi</name> = <call>(<name>BITMAPINFO</name> *)<argument_list>(<argument><expr><name>bitmap_bytes</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPFILEHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hBitmap</name> = <call><name>CreateDIBitmap</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>,
<argument><expr>&amp;<name><name>bi</name>-&gt;<name>bmiHeader</name></name></expr></argument>,
<argument><expr><name>CBM_INIT</name></expr></argument>,
<argument><expr><name>bitmap_bytes</name> + <name><name>bfh</name>-&gt;<name>bfOffBits</name></name></expr></argument>,
<argument><expr><name>bi</name></expr></argument>,
<argument><expr><name>DIB_RGB_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>ExtractInstallData</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>size</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pexe_size</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>out_ini_file</name></decl></param>, <param><decl><type><name>char</name> **</type><name>out_preinstall_script</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>eof_cdir</name> *</type><name>pe</name> <init>= <expr>(struct <name>eof_cdir</name> *)&amp;<name><name>data</name><index>[<expr><name>size</name> - <sizeof>sizeof
<argument_list>(<argument>struct <argument><expr><name>eof_cdir</name></expr></argument></argument>)</argument_list></sizeof></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arc_start</name> <init>= <expr><name>size</name> - <sizeof>sizeof <argument_list>(<argument>struct <expr><name>eof_cdir</name></expr></argument>)</argument_list></sizeof> - <name><name>pe</name>-&gt;<name>nBytesCDir</name></name> -
<name><name>pe</name>-&gt;<name>ofsCDir</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ofs</name> <init>= <expr><name>arc_start</name> - <sizeof>sizeof <argument_list>(<argument>struct <expr><name>meta_data_hdr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>meta_data_hdr</name> *</type><name>pmd</name> <init>= <expr>(struct <name>meta_data_hdr</name> *)&amp;<name><name>data</name><index>[<expr><name>ofs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>src</name></decl>, *<decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ini_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tempdir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>out_ini_file</name> = *<name>out_preinstall_script</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pe</name>-&gt;<name>tag</name></name> != 0x06054b50</expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>pmd</name>-&gt;<name>tag</name></name> != 0x1234567B</expr>)</condition><then> <block>{
<return>return <expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>,
<argument><expr>"Invalid cfgdata magic number (see bdist_wininst.py)"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ofs</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>pmd</name>-&gt;<name>bitmap_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bitmap_bytes</name> = (<name>char</name> *)<name>pmd</name> - <name><name>pmd</name>-&gt;<name>uncomp_size</name></name> - <name><name>pmd</name>-&gt;<name>bitmap_size</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>pexe_size</name> = <name>ofs</name> - <name><name>pmd</name>-&gt;<name>uncomp_size</name></name> - <name><name>pmd</name>-&gt;<name>bitmap_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> = ((<name>char</name> *)<name>pmd</name>) - <name><name>pmd</name>-&gt;<name>uncomp_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ini_file</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ini_file</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>GetTempPath</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tempdir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tempdir</name></expr></argument>)</argument_list></call>
|| !<call><name>GetTempFileName</name><argument_list>(<argument><expr><name>tempdir</name></expr></argument>, <argument><expr>"~du"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SystemError</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr>"Could not create temporary file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dst</name> = <call><name>map_new_file</name><argument_list>(<argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>ini_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pmd</name>-&gt;<name>uncomp_size</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dst</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>pmd</name>-&gt;<name>uncomp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>out_preinstall_script</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>out_ini_file</name> = <name>ini_file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PumpMessages</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>PeekMessage</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><name>LRESULT</name> <name>CALLBACK</name></type>
<name>WindowProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>msg</name></decl></param>, <param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HFONT</name></type> <name>hFont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAINTSTRUCT</name></type> <name>ps</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>msg</name></expr>)</condition> <block>{
<case>case <expr><name>WM_PAINT</name></expr>:
<expr_stmt><expr><name>hdc</name> = <call><name>BeginPaint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr>&amp;<name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> = <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSCREEN</name></expr></argument>)</argument_list></call> / 10</expr>;</expr_stmt>
<expr_stmt><expr><name>hFont</name> = <call><name>CreateFont</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>700</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"Times Roman"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hFont</name> = <call><name>SelectObject</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBkMode</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>TRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TextOut</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetTextColor</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><call><name>RGB</name><argument_list>(<argument><expr>255</expr></argument>, <argument><expr>255</expr></argument>, <argument><expr>255</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TextOut</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>hFont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EndPaint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr>&amp;<name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case>}</block></switch>
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>HWND</name></type> <name>CreateBackground</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>title</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>style</name></name> = <name>CS_VREDRAW</name> | <name>CS_HREDRAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>lpfnWndProc</name></name> = <name>WindowProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>cbWndExtra</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>cbClsExtra</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>hInstance</name></name> = <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>hIcon</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>hCursor</name></name> = <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>hbrBackground</name></name> = <call><name>CreateSolidBrush</name><argument_list>(<argument><expr><call><name>RGB</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>128</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>lpszMenuName</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wc</name>.<name>lpszClassName</name></name> = "SetupWindowClass"</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>RegisterClass</name><argument_list>(<argument><expr>&amp;<name>wc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>hwndMain</name></expr></argument>,
<argument><expr>"Could not register window class"</expr></argument>,
<argument><expr>"Setup.exe"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Setup %s"</expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hwnd</name> = <call><name>CreateWindow</name><argument_list>(<argument><expr>"SetupWindowClass"</expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXFULLSCREEN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYFULLSCREEN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>SW_SHOWMAXIMIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdateWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hwnd</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CenterWindow</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>RECT</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr>&amp;<name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> = <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> = <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MoveWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>,
<argument><expr>(<name>w</name> - (<name><name>rc</name>.<name>right</name></name>-<name><name>rc</name>.<name>left</name></name>))/2</expr></argument>,
<argument><expr>(<name>h</name> - (<name><name>rc</name>.<name>bottom</name></name>-<name><name>rc</name>.<name>top</name></name>))/2</expr></argument>,
<argument><expr><name><name>rc</name>.<name>right</name></name>-<name><name>rc</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>rc</name>.<name>bottom</name></name>-<name><name>rc</name>.<name>top</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prsht.h&gt;</cpp:file></cpp:include>
<function><type><name>BOOL</name> <name>CALLBACK</name></type>
<name>IntroDlgProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>msg</name></decl></param>, <param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPNMHDR</name></type> <name>lpnm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>msg</name></expr>)</condition> <block>{
<case>case <expr><name>WM_INITDIALOG</name></expr>:
<expr_stmt><expr><call><name>create_bitmap</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>hBitmap</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_BITMAP</name></expr></argument>, <argument><expr><name>STM_SETIMAGE</name></expr></argument>,
<argument><expr><name>IMAGE_BITMAP</name></expr></argument>, <argument><expr>(<name>LPARAM</name>)<name>hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>CenterWindow</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>,
<argument><expr>"This Wizard will install %s on your computer. "
"Click Next to continue "
"or Cancel to exit the Setup Wizard."</expr></argument>,
<argument><expr><name>meta_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INTRO_TEXT</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_BUILD_INFO</name></expr></argument>, <argument><expr><name>build_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</case><case>case <expr><name>WM_NOTIFY</name></expr>:
<expr_stmt><expr><name>lpnm</name> = (<name>LPNMHDR</name>) <name>lParam</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>lpnm</name>-&gt;<name>code</name></name></expr>)</condition> <block>{
<case>case <expr><name>PSN_SETACTIVE</name></expr>:
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PSWIZB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>PSN_WIZNEXT</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PSN_RESET</name></expr>:
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
</case>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OTHER_PYTHON_VERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>bound_image_dll</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bound_image_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bound_image_minor</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>__stdcall</name></type> <name>StatusRoutine</name><parameter_list>(<param><decl><type><name>IMAGEHLP_STATUS_REASON</name></type> <name>reason</name></decl></param>,
<param><decl><type><name>PSTR</name></type> <name>ImageName</name></decl></param>,
<param><decl><type><name>PSTR</name></type> <name>DllName</name></decl></param>,
<param><decl><type><name>ULONG</name></type> <name>Va</name></decl></param>,
<param><decl><type><name>ULONG</name></type> <name>Parameter</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_version</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>reason</name></expr>)</condition> <block>{
<case>case <expr><name>BindOutOfMemory</name></expr>:
</case><case>case <expr><name>BindRvaToVaFailed</name></expr>:
</case><case>case <expr><name>BindNoRoomInImage</name></expr>:
</case><case>case <expr><name>BindImportProcedureFailed</name></expr>:
<break>break;</break>
</case><case>case <expr><name>BindImportProcedure</name></expr>:
</case><case>case <expr><name>BindForwarder</name></expr>:
</case><case>case <expr><name>BindForwarderNOT</name></expr>:
</case><case>case <expr><name>BindImageModified</name></expr>:
</case><case>case <expr><name>BindExpandFileHeaders</name></expr>:
</case><case>case <expr><name>BindImageComplete</name></expr>:
</case><case>case <expr><name>BindSymbolsNotUpdated</name></expr>:
</case><case>case <expr><name>BindMismatchedSymbols</name></expr>:
</case><case>case <expr><name>BindImportModuleFailed</name></expr>:
<break>break;</break>
</case><case>case <expr><name>BindImportModule</name></expr>:
<if>if <condition>(<expr>1 == <call><name>sscanf</name><argument_list>(<argument><expr><name>DllName</name></expr></argument>, <argument><expr>"python%d"</expr></argument>, <argument><expr>&amp;<name>int_version</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SearchPath</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DllName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bound_image_dll</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bound_image_major</name> = <name>int_version</name> / 10</expr>;</expr_stmt>
<expr_stmt><expr><name>bound_image_minor</name> = <name>int_version</name> % 10</expr>;</expr_stmt>
<expr_stmt><expr><call><name>OutputDebugString</name><argument_list>(<argument><expr>"BOUND "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OutputDebugString</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OutputDebugString</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>LPSTR</name></type> <name>get_sys_prefix</name><parameter_list>(<param><decl><type><name>LPSTR</name></type> <name>exe</name></decl></param>, <param><decl><type><name>LPSTR</name></type> <name>dll</name></decl></param>)</parameter_list> <block>{
<function_decl><type><name>void</name></type> (<name>__cdecl</name> * <name>Py_Initialize</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<name>__cdecl</name> * <name>Py_SetProgramName</name>)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<name>__cdecl</name> * <name>Py_Finalize</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>*</type> (<name>__cdecl</name> * <name>PySys_GetObject</name>)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<name>__cdecl</name> * <name>PySys_SetArgv</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name>*</type> (<name>__cdecl</name> * <name>Py_GetPrefix</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name>*</type> (<name>__cdecl</name> * <name>Py_GetPath</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPSTR</name></type> <name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<name>__cdecl</name> * <name>PyRun_SimpleString</name>)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr>"PYTHONHOME=%s"</expr></argument>, <argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<call><name>strrchr</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>_putenv</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_putenv</name><argument_list>(<argument><expr>"PYTHONPATH="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name>hPython</name> = <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hPython</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>Py_Initialize</name> = (<call><call><name>void</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"Py_Initialize"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PySys_SetArgv</name> = (<call><call><name>void</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name> **</expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"PySys_SetArgv"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PyRun_SimpleString</name> = (<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"PyRun_SimpleString"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_SetProgramName</name> = (<call><call><name>void</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"Py_SetProgramName"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PySys_GetObject</name> = (<call><call><name>void</name>* <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"PySys_GetObject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_GetPrefix</name> = (<call><call><name>char</name> * <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"Py_GetPrefix"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_GetPath</name> = (<call><call><name>char</name> * <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name>
<argument_list>(<argument><expr><name>hPython</name></expr></argument>,<argument><expr>"Py_GetPath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_Finalize</name> = (<call><call><name>void</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>,
<argument><expr>"Py_Finalize"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SetProgramName</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PySys_SetArgv</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Py_GetPrefix</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"PREFIX"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Py_GetPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"PATH"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>prefix</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>CheckPythonExe</name><parameter_list>(<param><decl><type><name>LPSTR</name></type> <name>pathname</name></decl></param>, <param><decl><type><name>LPSTR</name></type> <name>version</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pmajor</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pminor</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>bound_image_dll</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>BindImageEx</name><argument_list>(<argument><expr><name>BIND_NO_BOUND_IMPORTS</name> | <name>BIND_NO_UPDATE</name> | <name>BIND_ALL_IMAGES</name></expr></argument>,
<argument><expr><name>pathname</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>StatusRoutine</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Could not bind image"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>bound_image_dll</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Does not seem to be a python executable"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>pmajor</name> = <name>bound_image_major</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pminor</name> = <name>bound_image_minor</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>version</name> &amp;&amp; *<name>version</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>core_version</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>core_version</name></expr></argument>, <argument><expr>"%d.%d"</expr></argument>, <argument><expr><name>bound_image_major</name></expr></argument>, <argument><expr><name>bound_image_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>core_version</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Wrong Python version"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>get_sys_prefix</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>bound_image_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>GetOtherPythonVersion</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>LPSTR</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>vers_name</name><index>[<expr><name>_MAX_PATH</name> + 80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>itemindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OPENFILENAME</name></type> <name>of</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pathname</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr>"python.exe"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>of</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>of</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lStructSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>OPENFILENAME</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>hwndOwner</name></name> = <call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>hInstance</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrFilter</name></name> = "python.exe\0python.exe\0"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrCustomFilter</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>nMaxCustFilter</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>nFilterIndex</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrFile</name></name> = <name>pathname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>nMaxFile</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrFileTitle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>nMaxFileTitle</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrInitialDir</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrTitle</name></name> = "Python executable"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>Flags</name></name> = <name>OFN_FILEMUSTEXIST</name> | <name>OFN_PATHMUSTEXIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>of</name>.<name>lpstrDefExt</name></name> = "exe"</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>GetOpenFileName</name><argument_list>(<argument><expr>&amp;<name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>CheckPythonExe</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr>&amp;<name>major</name></expr></argument>, <argument><expr>&amp;<name>minor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<call><name>strrchr</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>vers_name</name></expr></argument>, <argument><expr>"Python Version %d.%d in %s"</expr></argument>,
<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>itemindex</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>LB_INSERTSTRING</name></expr></argument>, <argument><expr>-1</expr></argument>,
<argument><expr>(<name>LPARAM</name>)(<name>LPSTR</name>)<name>vers_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>LB_SETCURSEL</name></expr></argument>, <argument><expr><name>itemindex</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>LB_SETITEMDATA</name></expr></argument>, <argument><expr><name>itemindex</name></expr></argument>,
<argument><expr>(<name>LPARAM</name>)(<name>LPSTR</name>)<call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>_InstalledVersionInfo</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>prefix</name><index>[<expr><name>MAX_PATH</name>+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>
}</block></struct></type> <name>InstalledVersionInfo</name>;</typedef>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>GetPythonVersions</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>HKEY</name></type> <name>hkRoot</name></decl></param>, <param><decl><type><name>LPSTR</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>core_version</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bufsize</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ERROR_SUCCESS</name> != <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkRoot</name></expr></argument>,
<argument><expr>"Software\\Python\\PythonCore"</expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>bufsize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>core_version</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ERROR_SUCCESS</name> == <call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
<argument><expr><name>core_version</name></expr></argument>, <argument><expr>&amp;<name>bufsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>subkey_name</name><index>[<expr>80</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vers_name</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itemindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>value_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hk</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bufsize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>core_version</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr>++<name>index</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>version</name> &amp;&amp; *<name>version</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>core_version</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>vers_name</name></expr></argument>, <argument><expr>"Python Version %s (found in registry)"</expr></argument>,
<argument><expr><name>core_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>subkey_name</name></expr></argument>,
<argument><expr>"Software\\Python\\PythonCore\\%s\\InstallPath"</expr></argument>,
<argument><expr><name>core_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ERROR_SUCCESS</name> == <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkRoot</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr>&amp;<name>hk</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>InstalledVersionInfo</name> *</type><name>ivi</name> <init>=
<expr>(<name>InstalledVersionInfo</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InstalledVersionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>value_size</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>ivi</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ivi</name> &amp;&amp;
<name>ERROR_SUCCESS</name> == <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>ivi</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr>&amp;<name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>itemindex</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>LB_ADDSTRING</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>(<name>LPARAM</name>)(<name>LPSTR</name>)<name>vers_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ivi</name>-&gt;<name>hkey</name></name> = <name>hkRoot</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>LB_SETITEMDATA</name></expr></argument>, <argument><expr><name>itemindex</name></expr></argument>,
<argument><expr>(<name>LPARAM</name>)(<name>LPSTR</name>)<name>ivi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>HasLocalMachinePrivs</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>KeyName</name><index>[]</index></name> <init>=
<expr>"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,
<argument><expr><name>KeyName</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>KEY_CREATE_SUB_KEY</name></expr></argument>,
<argument><expr>&amp;<name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name>==0</expr>)</condition><then>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name>==0</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>CheckRootKey</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>hkey_root</name>==<name>HKEY_CURRENT_USER</name></expr>)</condition><then> <block>{
<empty_stmt>;</empty_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>hkey_root</name>==<name>HKEY_LOCAL_MACHINE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>HasLocalMachinePrivs</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>hkey_root</name> = <name>HKEY_CURRENT_USER</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr>"Don't know Python's installation type"</expr></argument>,
<argument><expr>"Strange"</expr></argument>, <argument><expr><name>MB_OK</name> | <name>MB_ICONSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hkey_root</name> = <call><name>HasLocalMachinePrivs</name><argument_list>()</argument_list></call> ? <name>HKEY_LOCAL_MACHINE</name> : <name>HKEY_CURRENT_USER</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></function>
<function><type><name>SCHEME</name> *</type><name>GetScheme</name><parameter_list>(<param><decl><type><name>int</name></type> <name>major</name></decl></param>, <param><decl><type><name>int</name></type> <name>minor</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>major</name> &gt; 2</expr>)</condition><then>
<return>return <expr><name>new_scheme</name></expr>;</return></then>
<else>else <if>if<condition>(<expr>(<name>major</name> == 2) &amp;&amp; (<name>minor</name> &gt;= 2)</expr>)</condition><then>
<return>return <expr><name>new_scheme</name></expr>;</return></then></if></else></if>
<return>return <expr><name>old_scheme</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name> <name>CALLBACK</name></type>
<name>SelectPythonDlgProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>msg</name></decl></param>, <param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPNMHDR</name></type> <name>lpnm</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>msg</name></expr>)</condition> <block>{
<case>case <expr><name>WM_INITDIALOG</name></expr>:
<if>if <condition>(<expr><name>hBitmap</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_BITMAP</name></expr></argument>, <argument><expr><name>STM_SETIMAGE</name></expr></argument>,
<argument><expr><name>IMAGE_BITMAP</name></expr></argument>, <argument><expr>(<name>LPARAM</name>)<name>hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>GetPythonVersions</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>target_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPythonVersions</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><name>target_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> = <call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>,
<argument><expr><name>LB_GETCOUNT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> &amp;&amp; <name>count</name> != <name>LB_ERR</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>, <argument><expr><name>LB_SETCURSEL</name></expr></argument>,
<argument><expr><name>count</name>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>target_version</name> &amp;&amp; <name><name>target_version</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr>"Python %s is required for this package. "
"Select installation to use:"</expr></argument>,
<argument><expr><name>target_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>target_version</name> &amp;&amp; <name><name>target_version</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>,
<argument><expr>"Python version %s required, which was not found"
" in the registry."</expr></argument>, <argument><expr><name>target_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> = <name>Buffer</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>msg</name> = "No Python installation found in the registry."</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>"Cannot install"</expr></argument>,
<argument><expr><name>MB_OK</name> | <name>MB_ICONSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<goto>goto <name>UpdateInstallDir</name>;</goto>
<break>break;</break>
</case><case>case <expr><name>WM_COMMAND</name></expr>:
<switch>switch <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>IDC_VERSIONS_LIST</name></expr>:
<switch>switch <condition>(<expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<case>case <expr><name>LBN_SELCHANGE</name></expr>:
<label><name>UpdateInstallDir</name>:</label>
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PSWIZB_BACK</name> | <name>PSWIZB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> = <call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>,
<argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> == <name>LB_ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PSWIZB_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_PATH</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INSTALL_PATH</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>python_dir</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InstalledVersionInfo</name> *</type><name>ivi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PSWIZB_BACK</name> | <name>PSWIZB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ivi</name> = (<name>InstalledVersionInfo</name> *)
<call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>,
<argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>,
<argument><expr><name>LB_GETITEMDATA</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hkey_root</name> = <name><name>ivi</name>-&gt;<name>hkey</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>python_dir</name></expr></argument>, <argument><expr><name><name>ivi</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_PATH</name></expr></argument>, <argument><expr><name>python_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>,
<argument><expr><name>LB_GETTEXTLEN</name></expr></argument>, <argument><expr>(<name>WPARAM</name>)<name>id</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pbuf</name> = (<name>char</name> *)<call><name>malloc</name><argument_list>(<argument><expr><name>result</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>,
<argument><expr><name>LB_GETTEXT</name></expr></argument>, <argument><expr>(<name>WPARAM</name>)<name>id</name></expr></argument>,
<argument><expr>(<name>LPARAM</name>)<name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>sscanf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr>"Python Version %d.%d"</expr></argument>,
<argument><expr>&amp;<name>py_major</name></expr></argument>, <argument><expr>&amp;<name>py_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == 2</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>, <argument><expr>"python%d%d_d.dll"</expr></argument>,
<argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>, <argument><expr>"python%d%d.dll"</expr></argument>,
<argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>install_path</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCHEME</name> *</type><name>scheme</name> <init>= <expr><call><name>GetScheme</name><argument_list>(<argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>install_path</name></expr></argument>, <argument><expr><name>python_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>install_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>install_path</name></expr></argument>)</argument_list></call>-1</expr>]</index></name> != '\\'</expr>)</condition><then>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>install_path</name></expr></argument>, <argument><expr>"\\"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>install_path</name></expr></argument>, <argument><expr><name><name>scheme</name><index>[<expr>0</expr>]</index></name>.<name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INSTALL_PATH</name></expr></argument>, <argument><expr><name>install_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block></else></if>
</case>}</block></switch>
<break>break;</break>
</case>}</block></switch>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>WM_NOTIFY</name></expr>:
<expr_stmt><expr><name>lpnm</name> = (<name>LPNMHDR</name>) <name>lParam</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>lpnm</name>-&gt;<name>code</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<case>case <expr><name>PSN_SETACTIVE</name></expr>:
<expr_stmt><expr><name>id</name> = <call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_VERSIONS_LIST</name></expr></argument>,
<argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> == <name>LB_ERR</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PSWIZB_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PSWIZB_BACK</name> | <name>PSWIZB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>PSN_WIZNEXT</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PSN_WIZFINISH</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PSN_RESET</name></expr>:
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
</case>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>OpenLogfile</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>_MAX_PATH</name>+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ltime</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>tm</name> *</type><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>, <decl><type ref="prev"/><name>hSubkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>subkey_name</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>KeyName</name><index>[]</index></name> <init>=
<expr>"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_name</name> <init>= <expr>(<name>hkey_root</name>==<name>HKEY_LOCAL_MACHINE</name> ?
"HKEY_LOCAL_MACHINE" : "HKEY_CURRENT_USER")</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>disposition</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RegCreateKeyEx</name><argument_list>(<argument><expr><name>hkey_root</name></expr></argument>,
<argument><expr><name>KeyName</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>KEY_CREATE_SUB_KEY</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>hKey</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>result</name> == <name>ERROR_ACCESS_DENIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr>"You do not seem to have sufficient access rights\n"
"on this machine to install this software"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>MB_OK</name> | <name>MB_ICONSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>KeyName</name></expr></argument>, <argument><expr>"Could not open key"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"%s\\%s-wininst.log"</expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>meta_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logfile</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr>&amp;<name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> = <call><name>localtime</name><argument_list>(<argument><expr>&amp;<name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"*** Installation started %Y/%m/%d %H:%M ***\n"</expr></argument>,
<argument><expr><call><name>localtime</name><argument_list>(<argument><expr>&amp;<name>ltime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"Source: %s\n"</expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"999 Root Key: %s\n"</expr></argument>, <argument><expr><name>root_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>subkey_name</name></expr></argument>, <argument><expr>"%s-py%d.%d"</expr></argument>, <argument><expr><name>meta_name</name></expr></argument>, <argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RegCreateKeyEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>KEY_WRITE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>hSubkey</name></expr></argument>,
<argument><expr>&amp;<name>disposition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>, <argument><expr>"Could not create key"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>disposition</name> == <name>REG_CREATED_NEW_KEY</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"020 Reg DB Key: [%s]%s\n"</expr></argument>, <argument><expr><name>KeyName</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Python %d.%d %s"</expr></argument>, <argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RegSetValueEx</name><argument_list>(<argument><expr><name>hSubkey</name></expr></argument>, <argument><expr>"DisplayName"</expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>REG_SZ</name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Could not set key value"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"040 Reg DB Value: [%s\\%s]%s=%s\n"</expr></argument>,
<argument><expr><name>KeyName</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>, <argument><expr>"DisplayName"</expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"%s\\Remove%s.exe"</expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>meta_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"wb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>arc_data</name></expr></argument>, <argument><expr><name>exe_size</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"\"%s\\Remove%s.exe\" -u \"%s\\%s-wininst.log\""</expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>meta_name</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>meta_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RegSetValueEx</name><argument_list>(<argument><expr><name>hSubkey</name></expr></argument>, <argument><expr>"UninstallString"</expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>REG_SZ</name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Could not set key value"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"040 Reg DB Value: [%s\\%s]%s=%s\n"</expr></argument>,
<argument><expr><name>KeyName</name></expr></argument>, <argument><expr><name>subkey_name</name></expr></argument>, <argument><expr>"UninstallString"</expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseLogfile</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>_MAX_PATH</name>+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ltime</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>tm</name> *</type><name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr>&amp;<name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> = <call><name>localtime</name><argument_list>(<argument><expr>&amp;<name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"*** Installation finished %Y/%m/%d %H:%M ***\n"</expr></argument>,
<argument><expr><call><name>localtime</name><argument_list>(<argument><expr>&amp;<name>ltime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>logfile</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>BOOL</name> <name>CALLBACK</name></type>
<name>InstallFilesDlgProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>msg</name></decl></param>, <param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPNMHDR</name></type> <name>lpnm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCHEME</name> *</type><name>scheme</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>msg</name></expr>)</condition> <block>{
<case>case <expr><name>WM_INITDIALOG</name></expr>:
<if>if <condition>(<expr><name>hBitmap</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_BITMAP</name></expr></argument>, <argument><expr><name>STM_SETIMAGE</name></expr></argument>,
<argument><expr><name>IMAGE_BITMAP</name></expr></argument>, <argument><expr>(<name>LPARAM</name>)<name>hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>,
<argument><expr>"Click Next to begin the installation of %s. "
"If you want to review or change any of your "
" installation settings, click Back. "
"Click Cancel to exit the wizard."</expr></argument>,
<argument><expr><name>meta_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr>"Ready to install"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>WM_NUMFILES</name></expr>:
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_PROGRESS</name></expr></argument>, <argument><expr><name>PBM_SETRANGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PumpMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_NEXTFILE</name></expr>:
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_PROGRESS</name></expr></argument>, <argument><expr><name>PBM_SETPOS</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr>(<name>LPSTR</name>)<name>lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PumpMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_NOTIFY</name></expr>:
<expr_stmt><expr><name>lpnm</name> = (<name>LPNMHDR</name>) <name>lParam</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>lpnm</name>-&gt;<name>code</name></name></expr>)</condition> <block>{
<case>case <expr><name>PSN_SETACTIVE</name></expr>:
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PSWIZB_BACK</name> | <name>PSWIZB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>PSN_WIZFINISH</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PSN_WIZNEXT</name></expr>:
<expr_stmt><expr><name>hDialog</name> = <name>hwnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PSM_CANCELTOCLOSE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>python_dir</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>python_dir</name></expr></argument>)</argument_list></call>-1</expr>]</index></name> != '\\'</expr>)</condition><then>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>python_dir</name></expr></argument>, <argument><expr>"\\"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>python_dir</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>python_dir</name></expr></argument>)</argument_list></call>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>CheckRootKey</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>OpenLogfile</name><argument_list>(<argument><expr><name>python_dir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>scheme</name> = <call><name>GetScheme</name><argument_list>(<argument><expr><name>py_major</name></expr></argument>, <argument><expr><name>py_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pre_install_script</name> &amp;&amp; *<name>pre_install_script</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetDlgItemText</name> <argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>,
<argument><expr>"Running pre-installation script"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_simple_script</name><argument_list>(<argument><expr><name>pre_install_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>success</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>, <argument><expr>"Installing files..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>unzip_archive</name> <argument_list>(<argument><expr><name>scheme</name></expr></argument>,
<argument><expr><name>python_dir</name></expr></argument>, <argument><expr><name>arc_data</name></expr></argument>,
<argument><expr><name>arc_size</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>set_failure_reason</name><argument_list>(<argument><expr>"Failed to unzip installation files"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>success</name> &amp;&amp; <name>pyc_compile</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>,
<argument><expr>"Compiling files to .pyc..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr>"Loading python..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hPython</name> = <call><name>LoadPythonDll</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hPython</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errors</name> = <call><name>compile_filelist</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>success</name> &amp;&amp; <name>pyo_compile</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>,
<argument><expr>"Compiling files to .pyo..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hDialog</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr>"Loading python..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hPython</name> = <call><name>LoadPythonDll</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hPython</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errors</name> = <call><name>compile_filelist</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>PSN_RESET</name></expr>:
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
</case>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>BOOL</name> <name>CALLBACK</name></type>
<name>FinishedDlgProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>msg</name></decl></param>, <param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPNMHDR</name></type> <name>lpnm</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>msg</name></expr>)</condition> <block>{
<case>case <expr><name>WM_INITDIALOG</name></expr>:
<if>if <condition>(<expr><name>hBitmap</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SendDlgItemMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_BITMAP</name></expr></argument>, <argument><expr><name>STM_SETIMAGE</name></expr></argument>,
<argument><expr><name>IMAGE_BITMAP</name></expr></argument>, <argument><expr>(<name>LPARAM</name>)<name>hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr><call><name>get_failure_reason</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_USER</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_USER</name></expr>:
<if>if <condition>(<expr><name>success</name> &amp;&amp; <name>install_script</name> &amp;&amp; <name><name>install_script</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tempname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>hCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>argv</name><index>[<expr>3</expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr>"-install"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>,
<argument><expr>"Please wait while running postinstall script..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>python_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>"\\Scripts\\"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>install_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>logfile</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr>"300 Run Script: [%s]%s\n"</expr></argument>, <argument><expr><name>pythondll</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>tempname</name> = <call><name>tempnam</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>freopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"freopen stderr"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<call><name>freopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"freopen stdout"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>hCursor</name> = <call><name>SetCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_WAIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hPython</name> = <call><name>LoadPythonDll</name><argument_list>(<argument><expr><name>pythondll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hPython</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>run_installscript</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>-1 == <name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"*** run_installscript: internal error 0x%X ***\n"</expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"*** Could not load Python ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_INFO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDlgItemText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>IDC_TITLE</name></expr></argument>,
<argument><expr>"Postinstall script finished.\n"
"Click the Finish button to exit the Setup wizard."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>hCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseLogfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_NOTIFY</name></expr>:
<expr_stmt><expr><name>lpnm</name> = (<name>LPNMHDR</name>) <name>lParam</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>lpnm</name>-&gt;<name>code</name></name></expr>)</condition> <block>{
<case>case <expr><name>PSN_SETACTIVE</name></expr>:
<expr_stmt><expr><call><name>PropSheet_SetWizButtons</name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PSWIZB_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>PSN_WIZNEXT</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PSN_WIZFINISH</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PSN_RESET</name></expr>:
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
</case>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>RunWizard</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PROPSHEETPAGE</name></type> <name>psp</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HPROPSHEETPAGE</name></type> <name><name>ahpsp</name><index>[<expr>4</expr>]</index></name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROPSHEETHEADER</name></type> <name>psh</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>dwSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>psp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>dwFlags</name></name> = <name>PSP_DEFAULT</name>|<name>PSP_HIDEHEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>hInstance</name></name> = <call><name>GetModuleHandle</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>lParam</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pfnDlgProc</name></name> = <name>IntroDlgProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pszTemplate</name></name> = <call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_INTRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ahpsp</name><index>[<expr>0</expr>]</index></name> = <call><name>CreatePropertySheetPage</name><argument_list>(<argument><expr>&amp;<name>psp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>dwFlags</name></name> = <name>PSP_DEFAULT</name>|<name>PSP_HIDEHEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pszTemplate</name></name> = <call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_SELECTPYTHON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pfnDlgProc</name></name> = <name>SelectPythonDlgProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ahpsp</name><index>[<expr>1</expr>]</index></name> = <call><name>CreatePropertySheetPage</name><argument_list>(<argument><expr>&amp;<name>psp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>dwFlags</name></name> = <name>PSP_DEFAULT</name>|<name>PSP_HIDEHEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pszTemplate</name></name> = <call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_INSTALLFILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pfnDlgProc</name></name> = <name>InstallFilesDlgProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ahpsp</name><index>[<expr>2</expr>]</index></name> = <call><name>CreatePropertySheetPage</name><argument_list>(<argument><expr>&amp;<name>psp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>dwFlags</name></name> = <name>PSP_DEFAULT</name>|<name>PSP_HIDEHEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pszTemplate</name></name> = <call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psp</name>.<name>pfnDlgProc</name></name> = <name>FinishedDlgProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ahpsp</name><index>[<expr>3</expr>]</index></name> = <call><name>CreatePropertySheetPage</name><argument_list>(<argument><expr>&amp;<name>psp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>dwSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>psh</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>hInstance</name></name> = <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>hwndParent</name></name> = <name>hwnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>phpage</name></name> = <name>ahpsp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>dwFlags</name></name> = <name>PSH_WIZARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>pszbmWatermark</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>pszbmHeader</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>nStartPage</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>psh</name>.<name>nPages</name></name> = 4</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PropertySheet</name><argument_list>(<argument><expr>&amp;<name>psh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>BOOL</name></type> <name>MyIsUserAnAdmin</name><parameter_list>()</parameter_list> <block>{
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> *<name>PFNIsUserAnAdmin</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PFNIsUserAnAdmin</name></type> <name>pfnIsUserAnAdmin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>shell32</name></decl>;</decl_stmt>
<if>if <condition>(<expr>0 == (<name>shell32</name>=<call><name>LoadLibrary</name><argument_list>(<argument><expr>"shell32.dll"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr>0 == (<name>pfnIsUserAnAdmin</name>=(<name>PFNIsUserAnAdmin</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>shell32</name></expr></argument>, <argument><expr>"IsUserAnAdmin"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<return>return <expr><call>(*<name>pfnIsUserAnAdmin</name>)<argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>NeedAutoUAC</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>HKEY</name></type> <name>hk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key_name</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>target_version</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>,
<argument><expr>"Software\\Python\\PythonCore\\%s\\InstallPath"</expr></argument>,
<argument><expr><name>target_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ERROR_SUCCESS</name> != <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr>&amp;<name>hk</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>PlatformSupportsUAC</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>bIsWindowsXPorLater</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>winverinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>winverinfo</name>.<name>dwOSVersionInfoSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>winverinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>GetVersionEx</name><argument_list>(<argument><expr>&amp;<name>winverinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>bIsWindowsXPorLater</name> =
( (<name><name>winverinfo</name>.<name>dwMajorVersion</name></name> &gt; 5) ||
( (<name><name>winverinfo</name>.<name>dwMajorVersion</name></name> == 5) &amp;&amp; (<name><name>winverinfo</name>.<name>dwMinorVersion</name></name> &gt;= 1) ))</expr>;</expr_stmt>
<return>return <expr><name>bIsWindowsXPorLater</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>SpawnUAC</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>(<name>int</name>)<call><name>ShellExecute</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"runas"</expr></argument>, <argument><expr><name>modulename</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SW_SHOWNORMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ret</name> &lt;= 32</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"Failed to start elevated process (ShellExecute returned %d)"</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>"Setup"</expr></argument>, <argument><expr><name>MB_OK</name> | <name>MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>DoInstall</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ini_buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"title"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>ini_buffer</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ini_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unescape</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>ini_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"info"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>ini_buffer</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ini_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unescape</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>ini_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"build_info"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>build_info</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>build_info</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pyc_compile</name> = <call><name>GetPrivateProfileInt</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"target_compile"</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pyo_compile</name> = <call><name>GetPrivateProfileInt</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"target_optimize"</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"target_version"</expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>target_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>target_version</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"metadata"</expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>meta_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>meta_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"install_script"</expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>install_script</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>install_script</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetPrivateProfileString</name><argument_list>(<argument><expr>"Setup"</expr></argument>, <argument><expr>"user_access_control"</expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>user_access_control</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user_access_control</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>user_access_control</name></expr></argument>, <argument><expr>"force"</expr></argument>)</argument_list></call>==0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PlatformSupportsUAC</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>MyIsUserAnAdmin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SpawnUAC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>user_access_control</name></expr></argument>, <argument><expr>"auto"</expr></argument>)</argument_list></call>==0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PlatformSupportsUAC</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>MyIsUserAnAdmin</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>NeedAutoUAC</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SpawnUAC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>user_access_control</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>user_access_control</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Bad user_access_control value"</expr></argument>, <argument><expr>"oops"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><name>hwndMain</name> = <call><name>CreateBackground</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RunWizard</name><argument_list>(<argument><expr><name>hwndMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>arc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ini_file</name></expr>)</condition><then>
<expr_stmt><expr><call><name>DeleteFile</name><argument_list>(<argument><expr><name>ini_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>hBitmap</name></expr>)</condition><then>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>p2</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr>*(<name>char</name> **)<name>p2</name></expr></argument>, <argument><expr>*(<name>char</name> **)<name>p1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>remove_exe</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>exename</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>batname</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>exename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>exename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>batname</name></expr></argument>, <argument><expr>"%s.bat"</expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>batname</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>":Repeat\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"del \"%s\"\n"</expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"if exist \"%s\" goto Repeat\n"</expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"del \"%s\"\n"</expr></argument>, <argument><expr><name>batname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr>&amp;<name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>cb</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>dwFlags</name></name> = <name>STARTF_USESHOWWINDOW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name>.<name>wShowWindow</name></name> = <name>SW_HIDE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>CreateProcess</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>batname</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>CREATE_SUSPENDED</name> | <name>IDLE_PRIORITY_CLASS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"\\"</expr></argument>,
<argument><expr>&amp;<name>si</name></expr></argument>,
<argument><expr>&amp;<name>pi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetThreadPriority</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hThread</name></name></expr></argument>, <argument><expr><name>THREAD_PRIORITY_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetThreadPriority</name><argument_list>(<argument><expr><call><name>GetCurrentThread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>THREAD_PRIORITY_TIME_CRITICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetPriorityClass</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HIGH_PRIORITY_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name>.<name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>DeleteRegistryKey</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>keyname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subkeyname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>delim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keyname</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>'['</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>keyname</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr>++<name>keyname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subkeyname</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr>']'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>subkeyname</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr>*<name>subkeyname</name>++='\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>delim</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>subkeyname</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>delim</name></expr>)</condition><then>
<expr_stmt><expr>*<name>delim</name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>result</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey_root</name></expr></argument>,
<argument><expr><name>keyname</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>KEY_WRITE</name></expr></argument>,
<argument><expr>&amp;<name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>"Could not open key"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>RegDeleteKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>subkeyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name> &amp;&amp; <name>result</name> != <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>"Could not delete key"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>DeleteRegistryValue</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>keyname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>valuename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keyname</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>'['</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>keyname</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr>++<name>keyname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>valuename</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr>']'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>valuename</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr>*<name>valuename</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>value</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr>*<name>value</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hkey_root</name></expr></argument>,
<argument><expr><name>keyname</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>KEY_WRITE</name></expr></argument>,
<argument><expr>&amp;<name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>"Could not open key"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>RegDeleteValue</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name> &amp;&amp; <name>result</name> != <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>"Could not delete value"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>BOOL</name></type> <name>MyDeleteFile</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pathname</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>pathname</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>++<name>pathname</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr>*<name>pathname</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>pathname</name></expr>;</expr_stmt></while>
<return>return <expr><call><name>DeleteFile</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>MyRemoveDirectory</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pathname</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>pathname</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>++<name>pathname</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr>*<name>pathname</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>pathname</name></expr>;</expr_stmt></while>
<return>return <expr><call><name>RemoveDirectory</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>Run_RemoveScript</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>dllname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scriptname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>lastscript</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>dllname</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>'['</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dllname</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>++<name>dllname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scriptname</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>dllname</name></expr></argument>, <argument><expr>']'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>scriptname</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>scriptname</name>++ = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>lastscript</name></expr></argument>, <argument><expr><name>scriptname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hPython</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>argv</name><index>[<expr>3</expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr>"-remove"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tempname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name>scriptname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tempname</name> = <call><name>tempnam</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>freopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"freopen stderr"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<call><name>freopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"freopen stdout"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>hPython</name> = <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>dllname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hPython</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>0x80000000 == <call><name>run_installscript</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>, <argument><expr><name>scriptname</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"*** Could not load Python ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>"uninstall-script"</expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>lastscript</name></expr></argument>, <argument><expr><name>scriptname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>DoUninstall</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nLines</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nFiles</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nDirs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nErrors</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines_buffer_size</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>argc</name> != 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Wrong number of args"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>"-u"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"2. arg is not -u"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>logfile</name> = <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>logfile</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"could not open logfile"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>lines</name> = (<name>char</name> **)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * <name>lines_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>lines</name></expr>)</condition><then>
<return>return <expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Out of memory"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>len</name> -= 1</expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>nLines</name>++</expr>]</index></name> = <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nLines</name> &gt;= <name>lines_buffer_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lines_buffer_size</name> += 10</expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name> = (<name>char</name> **)<call><name>realloc</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * <name>lines_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>lines</name></expr>)</condition><then>
<return>return <expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Out of memory"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>&amp;<name><name>lines</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>nLines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>IDYES</name> != <call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Are you sure you want to remove\n"
"this package from your computer?"</expr></argument>,
<argument><expr>"Please confirm"</expr></argument>,
<argument><expr><name>MB_YESNO</name> | <name>MB_ICONQUESTION</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>hkey_root</name> = <name>HKEY_LOCAL_MACHINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = ""</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nLines</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ign</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cp</name> = <name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d Root Key: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"HKEY_CURRENT_USER"</expr></argument>)</argument_list></call>==0</expr>)</condition><then>
<expr_stmt><expr><name>hkey_root</name> = <name>HKEY_CURRENT_USER</name></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr>!<call><name>HasLocalMachinePrivs</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr>"You do not seem to have sufficient access rights\n"
"on this machine to uninstall this software"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>MB_OK</name> | <name>MB_ICONSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d Made Dir: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>MyRemoveDirectory</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>nDirs</name></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>code</name> != 2 &amp;&amp; <name>code</name> != 3</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>nErrors</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d File Copy: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>MyDeleteFile</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>nFiles</name></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>code</name> != 2 &amp;&amp; <name>code</name> != 3</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>nErrors</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d File Overwrite: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>MyDeleteFile</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>nFiles</name></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>code</name> != 2 &amp;&amp; <name>code</name> != 3</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>nErrors</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d Reg DB Key: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DeleteRegistryKey</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d Reg DB Value: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DeleteRegistryValue</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>2 == <call><name>sscanf</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>"%d Run Script: %s"</expr></argument>, <argument><expr>&amp;<name>ign</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Run_RemoveScript</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><call><name>DeleteFile</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>nFiles</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name>nErrors</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SystemError</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>nErrors</name></expr>)</condition><then>
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr>"%d files and %d directories removed\n"
"%d files or directories could not be removed"</expr></argument>,
<argument><expr><name>nFiles</name></expr></argument>, <argument><expr><name>nDirs</name></expr></argument>, <argument><expr><name>nErrors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"%d files and %d directories removed"</expr></argument>,
<argument><expr><name>nFiles</name></expr></argument>, <argument><expr><name>nDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Uninstall Finished!"</expr></argument>,
<argument><expr><name>MB_OK</name> | <name>MB_ICONINFORMATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_exe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name> <name>WINAPI</name></type> <name>WinMain</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hInst</name></decl></param>, <param><decl><type><name>HINSTANCE</name></type> <name>hPrevInst</name></decl></param>,
<param><decl><type><name>LPSTR</name></type> <name>lpszCmdLine</name></decl></param>, <param><decl><type><name>INT</name></type> <name>nCmdShow</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> **</type><name>__argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>basename</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>modulename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>modulename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arc_data</name> = <call><name>MapExistingFile</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr>&amp;<name>arc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>arc_data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SystemError</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Could not open archive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ExtractInstallData</name><argument_list>(<argument><expr><name>arc_data</name></expr></argument>, <argument><expr><name>arc_size</name></expr></argument>, <argument><expr>&amp;<name>exe_size</name></expr></argument>,
<argument><expr>&amp;<name>ini_file</name></expr></argument>, <argument><expr>&amp;<name>pre_install_script</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>DoInstall</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>ini_file</name> &amp;&amp; <name>__argc</name> &gt; 1</expr>)</condition><then> <block>{
<return>return <expr><call><name>DoUninstall</name><argument_list>(<argument><expr><name>__argc</name></expr></argument>, <argument><expr><name>__argv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>basename</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>basename</name></expr>)</condition><then>
<expr_stmt><expr>++<name>basename</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>basename</name> &amp;&amp; (0 == <call><name>strncmp</name><argument_list>(<argument><expr><name>basename</name></expr></argument>, <argument><expr>"Remove"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"This program is normally started by windows"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SystemError</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Setup program invalid or damaged"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
</unit>
