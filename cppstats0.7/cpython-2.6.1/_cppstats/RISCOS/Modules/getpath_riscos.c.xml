<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="RISCOS/Modules/getpath_riscos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osdefs.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>prefix</name></decl>, *<decl><type ref="prev"/><name>exec_prefix</name></decl>, *<decl><type ref="prev"/><name>progpath</name></decl>, *<decl><type ref="prev"/><name>module_search_path</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>calculate_path</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pypath</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr>"Python$Path"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pypath</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pypath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>module_search_path</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>pathlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>module_search_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>module_search_path</name></expr></argument>, <argument><expr><name>pypath</name></expr></argument>, <argument><expr><name>pathlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"Not enough memory for dynamic PYTHONPATH.\n"
"Using default static PYTHONPATH.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>module_search_path</name></expr>)</condition><then>
<expr_stmt><expr><name>module_search_path</name> = "&lt;Python$Dir&gt;.Lib"</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>prefix</name> = "&lt;Python$Dir&gt;"</expr>;</expr_stmt>
<expr_stmt><expr><name>exec_prefix</name> = <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>progpath</name> = <call><name>Py_GetProgramName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>char</name> *</type>
<name>Py_GetPath</name><parameter_list>()</parameter_list> <block>{
<if>if <condition>(<expr>!<name>module_search_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>calculate_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>module_search_path</name></expr>;</return>
}</block></function>
<function><type><name>char</name> *</type>
<name>Py_GetPrefix</name><parameter_list>()</parameter_list> <block>{
<if>if <condition>(<expr>!<name>module_search_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>calculate_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>prefix</name></expr>;</return>
}</block></function>
<function><type><name>char</name> *</type>
<name>Py_GetExecPrefix</name><parameter_list>()</parameter_list> <block>{
<if>if <condition>(<expr>!<name>module_search_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>calculate_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>exec_prefix</name></expr>;</return>
}</block></function>
<function><type><name>char</name> *</type>
<name>Py_GetProgramFullPath</name><parameter_list>()</parameter_list> <block>{
<if>if <condition>(<expr>!<name>module_search_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>calculate_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>progpath</name></expr>;</return>
}</block></function>
</unit>
