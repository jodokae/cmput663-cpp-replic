<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/nismodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/rpc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpcsvc/yp_prot.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpcsvc/ypclnt.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>yp_get_default_domain</name><parameter_list>(<param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>get_default_domain__doc__</name></expr></argument>,
<argument><expr>"get_default_domain() -&gt; str\n\
Corresponds to the C library yp_get_default_domain() call, returning\n\
the default NIS domain.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>match__doc__</name></expr></argument>,
<argument><expr>"match(key, map, domain = defaultdomain)\n\
Corresponds to the C library yp_match() call, returning the value of\n\
key in the given map. Optionally domain can be specified but it\n\
defaults to the system default domain.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>cat__doc__</name></expr></argument>,
<argument><expr>"cat(map, domain = defaultdomain)\n\
Returns the entire map as a dictionary. Optionally domain can be\n\
specified but it defaults to the system default domain.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>maps__doc__</name></expr></argument>,
<argument><expr>"maps(domain = defaultdomain)\n\
Returns an array of all available NIS maps within a domain. If domain\n\
is not specified it defaults to the system default domain.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>NisError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nis_error</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NisError</name></expr></argument>, <argument><expr><call><name>yperr_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<struct><specifier>static</specifier> struct <name>nis_map</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fix</name></decl>;</decl_stmt>
}</block> <decl><name><name>aliases</name> <index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"passwd"</expr>, <expr>"passwd.byname"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>"group"</expr>, <expr>"group.byname"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>"networks"</expr>, <expr>"networks.byaddr"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>"hosts"</expr>, <expr>"hosts.byname"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>"protocols"</expr>, <expr>"protocols.bynumber"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>"services"</expr>, <expr>"services.byname"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>"aliases"</expr>, <expr>"mail.aliases"</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>"ethers"</expr>, <expr>"ethers.byname"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>0L</expr>, <expr>0L</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>nis_mapname</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>map</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pfix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>pfix</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>alias</name> != 0L</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name> <argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>alias</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pfix</name> = <name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fix</name></expr>;</expr_stmt>
<return>return <expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>map</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name> <argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>map</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pfix</name> = <name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fix</name></expr>;</expr_stmt>
<return>return <expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>map</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>map</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>foreachfunc</name>)<parameter_list>(<param><decl><type><name>unsigned</name></type> <name>long</name></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>foreachfunc</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>ypcallback_data</name> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>state</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>nis_foreach</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>instatus</name></decl></param>, <param><decl><type><name>char</name> *</type><name>inkey</name></decl></param>, <param><decl><type><name>int</name></type> <name>inkeylen</name></decl></param>, <param><decl><type><name>char</name> *</type><name>inval</name></decl></param>,
<param><decl><type><name>int</name></type> <name>invallen</name></decl></param>, <param><decl><type>struct <name>ypcallback_data</name> *</type><name>indata</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>instatus</name> == <name>YP_TRUE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyEval_RestoreThread</name><argument_list>(<argument><expr><name><name>indata</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>indata</name>-&gt;<name>fix</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>inkeylen</name> &gt; 0 &amp;&amp; <name><name>inkey</name><index>[<expr><name>inkeylen</name>-1</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>inkeylen</name>--</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>invallen</name> &gt; 0 &amp;&amp; <name><name>inval</name><index>[<expr><name>invallen</name>-1</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>invallen</name>--</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>key</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>inkey</name></expr></argument>, <argument><expr><name>inkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>inval</name></expr></argument>, <argument><expr><name>invallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name> || <name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>indata</name>-&gt;<name>dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>indata</name>-&gt;<name>state</name></name> = <call><name>PyEval_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nis_get_default_domain</name> <parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>yp_get_default_domain</name><argument_list>(<argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
<return>return <expr><call><name>nis_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>res</name> = <call><name>PyString_FromStringAndSize</name> <argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nis_match</name> <parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwdict</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"key"</expr>, <expr>"map"</expr>, <expr>"domain"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwdict</name></expr></argument>,
<argument><expr>"t#s|s:match"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>keylen</name></expr></argument>, <argument><expr>&amp;<name>map</name></expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>domain</name> &amp;&amp; ((<name>err</name> = <call><name>yp_get_default_domain</name><argument_list>(<argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call>) != 0)</expr>)</condition><then>
<return>return <expr><call><name>nis_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>map</name> = <call><name>nis_mapname</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr>&amp;<name>fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fix</name></expr>)</condition><then>
<expr_stmt><expr><name>keylen</name>++</expr>;</expr_stmt></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>err</name> <init>= <expr><call><name>yp_match</name> <argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr>&amp;<name>match</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>fix</name></expr>)</condition><then>
<expr_stmt><expr><name>len</name>--</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>nis_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>res</name> = <call><name>PyString_FromStringAndSize</name> <argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nis_cat</name> <parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwdict</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ypall_callback</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ypcallback_data</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"map"</expr>, <expr>"domain"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwdict</name></expr></argument>, <argument><expr>"s|s:cat"</expr></argument>,
<argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>map</name></expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>domain</name> &amp;&amp; ((<name>err</name> = <call><name>yp_get_default_domain</name><argument_list>(<argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call>) != 0)</expr>)</condition><then>
<return>return <expr><call><name>nis_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name> = <call><name>PyDict_New</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>cb</name>.<name>foreach</name></name> = (<name>foreachfunc</name>)<name>nis_foreach</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name>.<name>dict</name></name> = <name>dict</name></expr>;</expr_stmt>
<expr_stmt><expr><name>map</name> = <call><name>nis_mapname</name> <argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr>&amp;<name><name>data</name>.<name>fix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>data</name></name> = (<name>char</name> *)&amp;<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name>.<name>state</name></name> = <call><name>PyEval_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>yp_all</name> <argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyEval_RestoreThread</name><argument_list>(<argument><expr><name><name>data</name>.<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>nis_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>dict</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>YPPROC_MAPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YPPROC_MAPLIST</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>YPPROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YPPROG</name></cpp:macro> <cpp:value>100004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>YPVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YPVERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>char</name> *</type><name>domainname</name>;</typedef>
<typedef>typedef <type><name>char</name> *</type><name>mapname</name>;</typedef>
<enum>enum <name>nisstat</name> <block>{
<decl><name>NIS_TRUE</name> <init>= <expr>1</expr></init></decl>,
<decl><name>NIS_NOMORE</name> <init>= <expr>2</expr></init></decl>,
<decl><name>NIS_FALSE</name> <init>= <expr>0</expr></init></decl>,
<decl><name>NIS_NOMAP</name> <init>= <expr>-1</expr></init></decl>,
<decl><name>NIS_NODOM</name> <init>= <expr>-2</expr></init></decl>,
<decl><name>NIS_NOKEY</name> <init>= <expr>-3</expr></init></decl>,
<decl><name>NIS_BADOP</name> <init>= <expr>-4</expr></init></decl>,
<decl><name>NIS_BADDB</name> <init>= <expr>-5</expr></init></decl>,
<decl><name>NIS_YPERR</name> <init>= <expr>-6</expr></init></decl>,
<decl><name>NIS_BADARGS</name> <init>= <expr>-7</expr></init></decl>,
<decl><name>NIS_VERS</name> <init>= <expr>-8</expr></init></decl>
}</block>;</enum>
<typedef>typedef <type><enum>enum <name>nisstat</name> <name>nisstat</name>;</enum></type></typedef>
<struct>struct <name>nismaplist</name> <block>{
<decl_stmt><decl><type><name>mapname</name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>nismaplist</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>nismaplist</name></type> <name>nismaplist</name>;</typedef>
<struct>struct <name>nisresp_maplist</name> <block>{
<decl_stmt><decl><type><name>nisstat</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nismaplist</name> *</type><name>maps</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>nisresp_maplist</name></type> <name>nisresp_maplist</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>timeval</name></type> <name>TIMEOUT</name> <init>= <expr><block>{ <expr>25</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier>
<name>bool_t</name></type>
<name>nis_xdr_domainname</name><parameter_list>(<param><decl><type><name>XDR</name> *</type><name>xdrs</name></decl></param>, <param><decl><type><name>domainname</name> *</type><name>objp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>xdr_string</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>YPMAXDOMAIN</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>TRUE</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>bool_t</name></type>
<name>nis_xdr_mapname</name><parameter_list>(<param><decl><type><name>XDR</name> *</type><name>xdrs</name></decl></param>, <param><decl><type><name>mapname</name> *</type><name>objp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>xdr_string</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>YPMAXMAP</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>TRUE</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>bool_t</name></type>
<name>nis_xdr_ypmaplist</name><parameter_list>(<param><decl><type><name>XDR</name> *</type><name>xdrs</name></decl></param>, <param><decl><type><name>nismaplist</name> *</type><name>objp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>nis_xdr_mapname</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr>&amp;<name><name>objp</name>-&gt;<name>map</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>xdr_pointer</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr>(<name>char</name> **)&amp;<name><name>objp</name>-&gt;<name>next</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nismaplist</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>(<name>xdrproc_t</name>)<name>nis_xdr_ypmaplist</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>TRUE</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>bool_t</name></type>
<name>nis_xdr_ypstat</name><parameter_list>(<param><decl><type><name>XDR</name> *</type><name>xdrs</name></decl></param>, <param><decl><type><name>nisstat</name> *</type><name>objp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>xdr_enum</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr>(<name>enum_t</name> *)<name>objp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>TRUE</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>bool_t</name></type>
<name>nis_xdr_ypresp_maplist</name><parameter_list>(<param><decl><type><name>XDR</name> *</type><name>xdrs</name></decl></param>, <param><decl><type><name>nisresp_maplist</name> *</type><name>objp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>nis_xdr_ypstat</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr>&amp;<name><name>objp</name>-&gt;<name>stat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>xdr_pointer</name><argument_list>(<argument><expr><name>xdrs</name></expr></argument>, <argument><expr>(<name>char</name> **)&amp;<name><name>objp</name>-&gt;<name>maps</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nismaplist</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>(<name>xdrproc_t</name>)<name>nis_xdr_ypmaplist</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>TRUE</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>nisresp_maplist</name> *</type>
<name>nisproc_maplist_2</name><parameter_list>(<param><decl><type><name>domainname</name> *</type><name>argp</name></decl></param>, <param><decl><type><name>CLIENT</name> *</type><name>clnt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>nisresp_maplist</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>clnt_call</name><argument_list>(<argument><expr><name>clnt</name></expr></argument>, <argument><expr><name>YPPROC_MAPLIST</name></expr></argument>,
<argument><expr>(<name>xdrproc_t</name>)<name>nis_xdr_domainname</name></expr></argument>, <argument><expr>(<name>caddr_t</name>)<name>argp</name></expr></argument>,
<argument><expr>(<name>xdrproc_t</name>)<name>nis_xdr_ypresp_maplist</name></expr></argument>, <argument><expr>(<name>caddr_t</name>)&amp;<name>res</name></expr></argument>,
<argument><expr><name>TIMEOUT</name></expr></argument>)</argument_list></call> != <name>RPC_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<return>return <expr>(&amp;<name>res</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>nismaplist</name> *</type>
<name>nis_maplist</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>dom</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>nisresp_maplist</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CLIENT</name> *</type><name>cl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mapi</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<name>server</name> &amp;&amp; <name><name>aliases</name><index>[<expr><name>mapi</name></expr>]</index></name>.<name>map</name> != 0L</expr>)</condition> <block>{
<expr_stmt><expr><call><name>yp_master</name> <argument_list>(<argument><expr><name>dom</name></expr></argument>, <argument><expr><name><name>aliases</name><index>[<expr><name>mapi</name></expr>]</index></name>.<name>map</name></expr></argument>, <argument><expr>&amp;<name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mapi</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>server</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NisError</name></expr></argument>, <argument><expr>"No NIS master found for any map"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cl</name> = <call><name>clnt_create</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>YPPROG</name></expr></argument>, <argument><expr><name>YPVERS</name></expr></argument>, <argument><expr>"tcp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>NisError</name></expr></argument>, <argument><expr><call><name>clnt_spcreateerror</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <call><name>nisproc_maplist_2</name> <argument_list>(<argument><expr>&amp;<name>dom</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clnt_destroy</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>list</name>-&gt;<name>stat</name></name> != <name>NIS_TRUE</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>list</name>-&gt;<name>maps</name></name></expr>;</return>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>nis_maps</name> <parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwdict</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nismaplist</name> *</type><name>maps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"domain"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwdict</name></expr></argument>,
<argument><expr>"|s:maps"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>domain</name> &amp;&amp; ((<name>err</name> = <call><name>yp_get_default_domain</name> <argument_list>(<argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call>) != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>nis_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>maps</name> = <call><name>nis_maplist</name> <argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>maps</name> = <name>maps</name></expr>;</init> <condition><expr><name>maps</name></expr>;</condition> <incr><expr><name>maps</name> = <name><name>maps</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>maps</name>-&gt;<name>map</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>str</name> || <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>list</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>nis_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"match"</expr>, <expr>(<name>PyCFunction</name>)<name>nis_match</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>match__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"cat"</expr>, <expr>(<name>PyCFunction</name>)<name>nis_cat</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>cat__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"maps"</expr>, <expr>(<name>PyCFunction</name>)<name>nis_maps</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>maps__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"get_default_domain"</expr>, <expr>(<name>PyCFunction</name>)<name>nis_get_default_domain</name></expr>,
<expr><name>METH_NOARGS</name></expr>,
<expr><name>get_default_domain__doc__</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>nis__doc__</name></expr></argument>,
<argument><expr>"This module contains functions for accessing NIS maps.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>void</name></type>
<name>initnis</name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"nis"</expr></argument>, <argument><expr><name>nis_methods</name></expr></argument>, <argument><expr><name>nis__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NisError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"nis.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>NisError</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>NisError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
