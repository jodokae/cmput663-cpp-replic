<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/cStringIO.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"import.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cStringIO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>cStringIO_module_documentation</name></expr></argument>,
<argument><expr>"A simple fast partial StringIO replacement.\n"
"\n"
"This module provides a simple useful replacement for\n"
"the StringIO module that is written in C. It does not provide the\n"
"full generality of StringIO, but it provides enough for most\n"
"applications and is especially useful in conjunction with the\n"
"pickle module.\n"
"\n"
"Usage:\n"
"\n"
" from cStringIO import StringIO\n"
"\n"
" an_output_stream=StringIO()\n"
" an_output_stream.write(some_stuff)\n"
" ...\n"
" value=an_output_stream.getvalue()\n"
"\n"
" an_input_stream=StringIO(a_string)\n"
" spam=an_input_stream.readline()\n"
" spam=an_input_stream.read(5)\n"
" an_input_stream.seek(0) #OK, start over\n"
" spam=an_input_stream.read() #and read it all\n"
" \n"
"If someone else wants to provide a more complete implementation,\n"
"go for it. :-) \n"
"\n"
"cStringIO.c,v 1.29 1999/06/15 14:10:27 jim Exp\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>string_size</name>;</decl_stmt>
}</block></struct></type> <name>IOobject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOOOBJECT</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((IOobject*)(O))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>string_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>softspace</name></decl>;</decl_stmt>
}</block></struct></type> <name>Oobject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>string_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pbuf</name></decl>;</decl_stmt>
}</block></struct></type> <name>Iobject</name>;</typedef>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_flush__doc__</name></expr></argument>, <argument><expr>"flush(): does nothing."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>IO__opencheck</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>buf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"I/O operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_get_closed</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>Py_True</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>file_getsetlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"closed"</expr>, <expr>(<name>getter</name>)<name>IO_get_closed</name></expr>, <expr><name>NULL</name></expr>, <expr>"True if the file is closed"</expr>}</block></expr>,
<expr><block>{<expr>0</expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_flush</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_getval__doc__</name></expr></argument>,
<argument><expr>"getvalue([use_pos]) -- Get the string value."
"\n"
"If use_pos is specified and is a true value, then the string returned\n"
"will include only the text up to the current file position.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_cgetval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>pos</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>((<name>IOobject</name>*)<name>self</name>)-&gt;<name>buf</name></expr></argument>,
<argument><expr>((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_getval</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>use_pos</name><init>=<expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"getval"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>,<argument><expr>&amp;<name>use_pos</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>use_pos</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name>=<name><name>self</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> &gt; <name><name>self</name>-&gt;<name>string_size</name></name></expr>)</condition><then> <expr_stmt><expr><name>s</name>=<name><name>self</name>-&gt;<name>string_size</name></name></expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>s</name>=<name><name>self</name>-&gt;<name>string_size</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pos</name></name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_isatty__doc__</name></expr></argument>, <argument><expr>"isatty(): always returns 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_isatty</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_False</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_read__doc__</name></expr></argument>,
<argument><expr>"read([s]) -- Read s characters, or the rest of the string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>IO_cread</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>output</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>pos</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>string_size</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>string_size</name> - ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0 || <name>n</name> &gt; <name>l</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <name>l</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>n</name>=0</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>output</name>=((<name>IOobject</name>*)<name>self</name>)-&gt;<name>buf</name> + ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr>((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name> += <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_read</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|n:read"</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>( <expr>(<name>n</name>=<call><name>IO_cread</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>,<argument><expr>&amp;<name>output</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_readline__doc__</name></expr></argument>, <argument><expr>"readline() -- Read one line"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>IO_creadline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>output</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>n</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>n</name> = ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>buf</name> + ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name></expr>,
<expr><name>s</name> = ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>buf</name> + ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>string_size</name></expr>;</init>
<condition><expr><name>n</name> &lt; <name>s</name> &amp;&amp; *<name>n</name> != '\n'</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr><name>n</name> &lt; <name>s</name></expr>)</condition><then> <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>output</name>=((<name>IOobject</name>*)<name>self</name>)-&gt;<name>buf</name> + ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <name>n</name> - ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>buf</name> - ((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>pos</name> &lt;= <name>PY_SSIZE_T_MAX</name> - <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>pos</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>string_size</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>((<name>IOobject</name>*)<name>self</name>)-&gt;<name>pos</name> += <name>l</name></expr>;</expr_stmt>
<return>return <expr>(<name>int</name>)<name>l</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_readline</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name><init>=<expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>output</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>args</name></expr>)</condition><then>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:readline"</expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if></then></if>
<if>if<condition>( <expr>(<name>n</name>=<call><name>IO_creadline</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>,<argument><expr>&amp;<name>output</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>m</name> &gt;= 0 &amp;&amp; <name>m</name> &lt; <name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>m</name> = <name>n</name> - <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> -= <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name> -= <name>m</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>pos</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_readlines__doc__</name></expr></argument>, <argument><expr>"readlines() -- Read all lines"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_readlines</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hint</name> <init>= <expr>0</expr></init>, <name>length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:readlines"</expr></argument>, <argument><expr>&amp;<name>hint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>( <expr>(<name>n</name> = <call><name>IO_creadline</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>,<argument><expr>&amp;<name>output</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>line</name> = <call><name>PyString_FromStringAndSize</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>line</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>PyList_Append</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name> <argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> += <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hint</name> &gt; 0 &amp;&amp; <name>length</name> &gt;= <name>hint</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></while>
<return>return <expr><name>result</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_reset__doc__</name></expr></argument>,
<argument><expr>"reset() -- Reset the file position to the beginning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_reset</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_tell__doc__</name></expr></argument>, <argument><expr>"tell() -- get the current position."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_tell</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pos</name></name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pos</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_truncate__doc__</name></expr></argument>,
<argument><expr>"truncate(): truncate the file at the current position."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_truncate</name><parameter_list>(<param><decl><type><name>IOobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|n:truncate"</expr></argument>, <argument><expr>&amp;<name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pos</name> = <name><name>self</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pos</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>errno</name> = <name>EINVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>string_size</name></name> &gt; <name>pos</name></expr>)</condition><then> <expr_stmt><expr><name><name>self</name>-&gt;<name>string_size</name></name> = <name>pos</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name> = <name><name>self</name>-&gt;<name>string_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_iternext</name><parameter_list>(<param><decl><type><name>Iobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> = <call><name>IO_readline</name><argument_list>(<argument><expr>(<name>IOobject</name> *)<name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>next</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_StopIteration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>next</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>O_seek__doc__</name></expr></argument>,
<argument><expr>"seek(position) -- set the current position\n"
"seek(position, mode) -- mode 0: absolute; 1: relative; 2: relative to EOF"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>O_seek</name><parameter_list>(<param><decl><type><name>Oobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"n|i:seek"</expr></argument>, <argument><expr>&amp;<name>position</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>mode</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>position</name> += <name><name>self</name>-&gt;<name>string_size</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mode</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>position</name> += <name><name>self</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>position</name> &gt; <name><name>self</name>-&gt;<name>buf_size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name>*=2</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf_size</name></name> &lt;= <name>position</name></expr>)</condition><then> <expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name>=<name>position</name>+1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>newbuf</name> = (<name>char</name>*) <call><name>realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>,<argument><expr><name><name>self</name>-&gt;<name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>newbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name>=<name><name>self</name>-&gt;<name>pos</name></name>=0</expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = <name>newbuf</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>position</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>position</name>=0</expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name>=<name>position</name></expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>position</name> &gt;= <name><name>self</name>-&gt;<name>string_size</name></name></expr>)</condition> <expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name><index>[<expr><name>position</name></expr>]</index></name>=0</expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>O_write__doc__</name></expr></argument>,
<argument><expr>"write(s) -- Write a string to the file"
"\n\nNote (hack:) writing None resets the buffer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>O_cwrite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>newl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Oobject</name> *</type><name>oself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>newbuf</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>oself</name> = (<name>Oobject</name> *)<name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newl</name> = <name><name>oself</name>-&gt;<name>pos</name></name>+<name>l</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newl</name> &gt;= <name><name>oself</name>-&gt;<name>buf_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>oself</name>-&gt;<name>buf_size</name></name> *= 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>oself</name>-&gt;<name>buf_size</name></name> &lt;= <name>newl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>newl</name> + 1 &lt; <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oself</name>-&gt;<name>buf_size</name></name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>newl</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>newbuf</name> = (<name>char</name>*)<call><name>realloc</name><argument_list>(<argument><expr><name><name>oself</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>oself</name>-&gt;<name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>newbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>,<argument><expr>"out of memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>oself</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oself</name>-&gt;<name>buf</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>oself</name>-&gt;<name>buf_size</name></name> = <name><name>oself</name>-&gt;<name>pos</name></name> = 0</expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>oself</name>-&gt;<name>buf</name></name> = <name>newbuf</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>oself</name>-&gt;<name>buf</name></name>+<name><name>oself</name>-&gt;<name>pos</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>oself</name>-&gt;<name>pos</name></name> + <name>l</name> &lt; <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oself</name>-&gt;<name>pos</name></name> += (<name>int</name>)<name>l</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>oself</name>-&gt;<name>string_size</name></name> &lt; <name><name>oself</name>-&gt;<name>pos</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>oself</name>-&gt;<name>string_size</name></name> = <name><name>oself</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>int</name>)<name>l</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>O_write</name><parameter_list>(<param><decl><type><name>Oobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"t#:write"</expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>O_cwrite</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>O_close__doc__</name></expr></argument>, <argument><expr>"close(): explicitly release resources held."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>O_close</name><parameter_list>(<param><decl><type><name>Oobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf</name></name> != <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name> = <name><name>self</name>-&gt;<name>string_size</name></name> = <name><name>self</name>-&gt;<name>buf_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>O_writelines__doc__</name></expr></argument>,
<argument><expr>"writelines(sequence_of_strings) -&gt; None. Write the strings to the file.\n"
"\n"
"Note that newlines are not added. The sequence can be any iterable object\n"
"producing strings. This is equivalent to calling write() for each string."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>O_writelines</name><parameter_list>(<param><decl><type><name>Oobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>it</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<while>while <condition>(<expr>(<name>s</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyString_AsStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>O_cwrite</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>O_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"flush"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_flush</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_flush__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"getvalue"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_getval</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_getval__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"isatty"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_isatty</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_isatty__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"read"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_read</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_read__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"readline"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_readline</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_readline__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"readlines"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_readlines</name></expr>,<expr><name>METH_VARARGS</name></expr>, <expr><name>IO_readlines__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"reset"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_reset</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_reset__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"tell"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_tell</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_tell__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"truncate"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_truncate</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_truncate__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>O_close</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>O_close__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"seek"</expr>, <expr>(<name>PyCFunction</name>)<name>O_seek</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>O_seek__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"write"</expr>, <expr>(<name>PyCFunction</name>)<name>O_write</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>O_write__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"writelines"</expr>, <expr>(<name>PyCFunction</name>)<name>O_writelines</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>O_writelines__doc__</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>O_memberlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"softspace"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Oobject</name></expr></argument>, <argument><expr><name>softspace</name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>,
<expr>"flag indicating that a space needs to be printed; used by print"</expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>O_dealloc</name><parameter_list>(<param><decl><type><name>Oobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>Otype__doc__</name></expr></argument>, <argument><expr>"Simple type for output to strings."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Otype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"cStringIO.StringO"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>O_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr> ,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr><name>Otype__doc__</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>IO_iternext</name></expr>,
<expr><name>O_methods</name></expr>,
<expr><name>O_memberlist</name></expr>,
<expr><name>file_getsetlist</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newOobject</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Oobject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>Oobject</name></expr></argument>, <argument><expr>&amp;<name>Otype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name>=0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>string_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>softspace</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = (<name>char</name> *)<call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>buf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_MemoryError</name></expr></argument>,<argument><expr>"out of memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name>=<name>size</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>I_close</name><parameter_list>(<param><decl><type><name>Iobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name> = <name><name>self</name>-&gt;<name>string_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>I_seek</name><parameter_list>(<param><decl><type><name>Iobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>IO__opencheck</name><argument_list>(<argument><expr><call><name>IOOOBJECT</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"n|i:seek"</expr></argument>, <argument><expr>&amp;<name>position</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>mode</name> == 2</expr>)</condition><then> <expr_stmt><expr><name>position</name> += <name><name>self</name>-&gt;<name>string_size</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>mode</name> == 1</expr>)</condition><then> <expr_stmt><expr><name>position</name> += <name><name>self</name>-&gt;<name>pos</name></name></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>position</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>position</name>=0</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name>=<name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>I_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"flush"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_flush</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_flush__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"getvalue"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_getval</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_getval__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"isatty"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_isatty</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_isatty__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"read"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_read</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_read__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"readline"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_readline</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_readline__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"readlines"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_readlines</name></expr>,<expr><name>METH_VARARGS</name></expr>, <expr><name>IO_readlines__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"reset"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_reset</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_reset__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"tell"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_tell</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>IO_tell__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"truncate"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_truncate</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>IO_truncate__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>I_close</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>O_close__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"seek"</expr>, <expr>(<name>PyCFunction</name>)<name>I_seek</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>O_seek__doc__</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>I_dealloc</name><parameter_list>(<param><decl><type><name>Iobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>Itype__doc__</name></expr></argument>,
<argument><expr>"Simple type for treating strings as input file streams"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Itype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"cStringIO.StringI"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Iobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>I_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr><name>Itype__doc__</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>IO_iternext</name></expr>,
<expr><name>I_methods</name></expr>,
<expr>0</expr>,
<expr><name>file_getsetlist</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newIobject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Iobject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyObject_AsReadBuffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>(const <name>void</name> **)&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected read buffer, %.200s found"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>Iobject</name></expr></argument>, <argument><expr>&amp;<name>Itype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>self</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name>=<name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>string_size</name></name>=<name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pbuf</name></name>=<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pos</name></name>=0</expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>self</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>IO_StringIO__doc__</name></expr></argument>,
<argument><expr>"StringIO([s]) -- Return a StringIO-like stream for reading or writing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>IO_StringIO</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"StringIO"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <return>return <expr><call><name>newIobject</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>newOobject</name><argument_list>(<argument><expr>128</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>IO_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"StringIO"</expr>, <expr>(<name>PyCFunction</name>)<name>IO_StringIO</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>IO_StringIO__doc__</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PycStringIO_CAPI</name></type> <name>CAPI</name> <init>= <expr><block>{
<expr><name>IO_cread</name></expr>,
<expr><name>IO_creadline</name></expr>,
<expr><name>O_cwrite</name></expr>,
<expr><name>IO_cgetval</name></expr>,
<expr><name>newOobject</name></expr>,
<expr><name>newIobject</name></expr>,
<expr>&amp;<name>Itype</name></expr>,
<expr>&amp;<name>Otype</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PyMODINIT_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMODINIT_FUNC</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initcStringIO</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"cStringIO"</expr></argument>, <argument><expr><name>IO_methods</name></expr></argument>,
<argument><expr><name>cStringIO_module_documentation</name></expr></argument>,
<argument><expr>(<name>PyObject</name>*)<name>NULL</name></expr></argument>,<argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>Itype</name></expr></argument>)</argument_list></call>=&amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>Otype</name></expr></argument>)</argument_list></call>=&amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Otype</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Itype</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr>"cStringIO_CAPI"</expr></argument>,
<argument><expr><name>v</name> = <call><name>PyCObject_FromVoidPtr</name><argument_list>(<argument><expr>&amp;<name>CAPI</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr>"InputType"</expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>Itype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr>"OutputType"</expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>Otype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>0</expr>)</condition><then> <expr_stmt><expr><name>PycString_IMPORT</name></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
