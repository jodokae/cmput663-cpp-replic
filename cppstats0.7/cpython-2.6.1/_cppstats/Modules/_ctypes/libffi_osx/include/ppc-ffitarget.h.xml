<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi_osx/include/ppc-ffitarget.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LIBFFI_TARGET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBFFI_TARGET_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>POWERPC</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call>) || (<call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POWERPC64</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LIBFFI_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ffi_arg</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>long</name></type> <name>ffi_sarg</name>;</typedef>
<typedef>typedef <type><enum>enum <name>ffi_abi</name> <block>{
<decl><name>FFI_FIRST_ABI</name> <init>= <expr>0</expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>FFI_SYSV</name></decl>,
<decl><name>FFI_GCC_SYSV</name></decl>,
<decl><name>FFI_LINUX64</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_LINUX64</name></expr></init></decl>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_GCC_SYSV</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>FFI_AIX</name></decl>,
<decl><name>FFI_DARWIN</name></decl>,
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_AIX</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>FFI_AIX</name></decl>,
<decl><name>FFI_DARWIN</name></decl>,
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_DARWIN</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>FFI_SYSV</name></decl>,
<decl><name>FFI_GCC_SYSV</name></decl>,
<decl><name>FFI_LINUX64</name></decl>,
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_SYSV</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>FFI_LAST_ABI</name> <init>= <expr><name>FFI_DEFAULT_ABI</name> + 1</expr></init></decl>
}</block></enum></type> <name>ffi_abi</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_CLOSURES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_NATIVE_RAW_API</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_SYSV_TYPE_SMALL_STRUCT</name></cpp:macro> <cpp:value>(FFI_TYPE_LAST)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LIBFFI_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>ffi_aix_trampoline_struct</name> <block>{
<decl_stmt><decl><type><name>void</name>*</type> <name>code_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>toc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>static_chain</name></decl>;</decl_stmt>
}</block></struct></type> <name>ffi_aix_trampoline_struct</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
