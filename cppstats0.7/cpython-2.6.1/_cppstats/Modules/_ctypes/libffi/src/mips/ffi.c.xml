<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi/src/mips/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>__GNUC__</name> &gt; 4) || ((<name>__GNUC__</name> == 4) &amp;&amp; (<name>__GNUC_MINOR__</name> &gt;= 3))</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE__BUILTIN___CLEAR_CACHE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>USE__BUILTIN___CLEAR_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cachectl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_MIPS_STOP_HERE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ffi_stop_here()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_MIPS_STOP_HERE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_ARGP</name></cpp:macro> <cpp:value>FFI_ASSERT(argp &lt;= &amp;stack[bytes]); if (argp == &amp;stack[bytes]) { argp = stack; FFI_MIPS_STOP_HERE(); }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_ARGP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>,
<param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>,
<param><decl><type><name>int</name></type> <name>bytes</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>bytes</name> &gt; 8 * <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><name>argp</name> = &amp;<name><name>stack</name><index>[<expr><name>bytes</name> - (8 * <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof>)</expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>( <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rstruct_flag</name></name> != 0</expr> )</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>( <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr> )</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr>*(<name>ffi_arg</name> *) <name>argp</name> = (<name>ffi_arg</name>) <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>FIX_ARGP</name></expr>;</expr_stmt>
}</block></then></if></then></if>
<expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> = <name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>a</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><name>a</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>a</name> - 1) &amp; (<name>unsigned</name> <name>long</name>) <name>argp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>argp</name> = (<name>char</name> *) <call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FIX_ARGP</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>z</name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_POINTER</name></expr>)</condition><then>
<expr_stmt><expr><name>type</name> =
(<name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_N64</name>) ? <name>FFI_TYPE_SINT64</name> : <name>FFI_TYPE_SINT32</name></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr>*(<name>ffi_arg</name> *)<name>argp</name> = *<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr>*(<name>ffi_arg</name> *)<name>argp</name> = *<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr>*(<name>ffi_arg</name> *)<name>argp</name> = *<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr>*(<name>ffi_arg</name> *)<name>argp</name> = *<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr>*(<name>ffi_arg</name> *)<name>argp</name> = *<call>(<name>SINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr>*(<name>ffi_arg</name> *)<name>argp</name> = *<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr>*(<name>float</name> *) <name>argp</name> = *<call>(<name>float</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>end</name> <init>= <expr>(<name>unsigned</name> <name>long</name>) <name>argp</name> + <name>z</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cap</name> <init>= <expr>(<name>unsigned</name> <name>long</name>) <name>stack</name> + <name>bytes</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>end</name> &lt;= <name>cap</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>portion</name> <init>= <expr><name>cap</name> - (<name>unsigned</name> <name>long</name>)<name>argp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>portion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> -= <name>portion</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><call>(<name>void</name>*)<argument_list>(<argument><expr><call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call> + <name>portion</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FIX_ARGP</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>calc_n32_struct_flags</name><parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>unsigned</name> *</type><name>loc</name></decl></param>, <param><decl><type><name>unsigned</name> *</type><name>arg_reg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> *</type><name>e</name></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>e</name> = <name><name>arg</name>-&gt;<name>elements</name><index>[<expr><name>index</name></expr>]</index></name>)</expr>)</condition> <block>{
<expr_stmt><expr>*<name>loc</name> = <call><name>ALIGN</name><argument_list>(<argument><expr>*<name>loc</name></expr></argument>, <argument><expr><name><name>e</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>arg_reg</name> = *<name>loc</name> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>arg_reg</name> &gt; 7</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>flags</name> += (<name>FFI_TYPE_DOUBLE</name> &lt;&lt; (*<name>arg_reg</name> * <name>FFI_FLAG_BITS</name>))</expr>;</expr_stmt>
<expr_stmt><expr>*<name>loc</name> += <name><name>e</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>loc</name> += <name><name>e</name>-&gt;<name>size</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>arg_reg</name> = <call><name>ALIGN</name><argument_list>(<argument><expr>*<name>loc</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
<return>return <expr><name>flags</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>calc_n32_return_struct_flags</name><parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>small</name> <init>= <expr><name>FFI_TYPE_SMALLSTRUCT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> &gt; 16</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> &gt; 8</expr>)</condition><then>
<expr_stmt><expr><name>small</name> = <name>FFI_TYPE_SMALLSTRUCT2</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>e</name> = <name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>FFI_TYPE_DOUBLE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>e</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>FFI_TYPE_FLOAT</name></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>flags</name> &amp;&amp; (<name>e</name> = <name><name>arg</name>-&gt;<name>elements</name><index>[<expr>1</expr>]</index></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> += <name>FFI_TYPE_DOUBLE</name> &lt;&lt; <name>FFI_FLAG_BITS</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>e</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> += <name>FFI_TYPE_FLOAT</name> &lt;&lt; <name>FFI_FLAG_BITS</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>small</name></expr>;</return></else></if></else></if>
<if>if <condition>(<expr><name>flags</name> &amp;&amp; (<name><name>arg</name>-&gt;<name>elements</name><index>[<expr>2</expr>]</index></name>)</expr>)</condition><then> <block>{
<return>return <expr><name>small</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<name>flags</name></expr>)</condition><then>
<return>return <expr><name>small</name></expr>;</return></then></if></else></if>
<return>return <expr><name>flags</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_STRUCT</name> &amp;&amp; <name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_O32</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>nargs</name></name> &gt; 0</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>(<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr>0</expr>]</index>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += (<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr>0</expr>]</index>-&gt;<name>type</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>nargs</name></name> &gt; 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>(<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr>1</expr>]</index>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += (<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr>1</expr>]</index>-&gt;<name>type</name> &lt;&lt; <name>FFI_FLAG_BITS</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_O32_SOFT_FLOAT</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_VOID</name></expr>:
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 2)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_UINT64</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 2)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_INT</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 2)</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else <block>{
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_VOID</name></expr>:
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 2)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_UINT64</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 2)</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_INT</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 2)</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>arg_reg</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>loc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr>(<name><name>cif</name>-&gt;<name>nargs</name></name> &lt; 8) ? <name><name>cif</name>-&gt;<name>nargs</name></name> : 8</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>struct_flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>struct_flags</name> = <call><name>calc_n32_return_struct_flags</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>struct_flags</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>arg_reg</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = (<name><name>cif</name>-&gt;<name>nargs</name></name> &lt; 7) ? <name><name>cif</name>-&gt;<name>nargs</name></name> : 7</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>rstruct_flag</name></name> = !0</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>cif</name>-&gt;<name>rstruct_flag</name></name> = 0</expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>cif</name>-&gt;<name>rstruct_flag</name></name> = 0</expr>;</expr_stmt></else></if>
<while>while <condition>(<expr><name>count</name>-- &gt; 0 &amp;&amp; <name>arg_reg</name> &lt; 8</expr>)</condition> <block>{
<switch>switch <condition>(<expr>(<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>index</name></expr>]</index>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> +=
((<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>index</name></expr>]</index>-&gt;<name>type</name> &lt;&lt; (<name>arg_reg</name> * <name>FFI_FLAG_BITS</name>))</expr>;</expr_stmt>
<expr_stmt><expr><name>arg_reg</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>arg_reg</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>arg_reg</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> +=
(<name>FFI_TYPE_DOUBLE</name> &lt;&lt; (<name>arg_reg</name> * <name>FFI_FLAG_BITS</name>))</expr>;</expr_stmt>
<expr_stmt><expr><name>arg_reg</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> +=
(<name>FFI_TYPE_DOUBLE</name> &lt;&lt; (<name>arg_reg</name> * <name>FFI_FLAG_BITS</name>))</expr>;</expr_stmt>
<expr_stmt><expr><name>arg_reg</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>loc</name> = <name>arg_reg</name> * <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <call><name>calc_n32_struct_flags</name><argument_list>(<argument><expr>(<name><name>cif</name>-&gt;<name>arg_types</name></name>)<index>[<expr><name>index</name></expr>]</index></expr></argument>,
<argument><expr>&amp;<name>loc</name></expr></argument>, <argument><expr>&amp;<name>arg_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>arg_reg</name>++</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
}</block></while>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<if>if <condition>(<expr><name>struct_flags</name> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_STRUCT</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 8)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>struct_flags</name> &lt;&lt; (4 + (<name>FFI_FLAG_BITS</name> * 8))</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 8)</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_STRUCT</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 8)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += (<name>FFI_TYPE_DOUBLE</name> + (<name>FFI_TYPE_DOUBLE</name> &lt;&lt; <name>FFI_FLAG_BITS</name>))
&lt;&lt; (4 + (<name>FFI_FLAG_BITS</name> * 8))</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> += <name>FFI_TYPE_INT</name> &lt;&lt; (<name>FFI_FLAG_BITS</name> * 8)</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ffi_call_O32</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ffi_call_N32</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp;
(<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>FFI_O32</name></expr>:
</case><case>case <expr><name>FFI_O32_SOFT_FLOAT</name></expr>:
<expr_stmt><expr><call><name>ffi_call_O32</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_N32</name></expr>:
</case><case>case <expr><name>FFI_N64</name></expr>: <block>{
<decl_stmt><decl><type><name>int</name></type> <name>copy_rvalue</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>rvalue_copy</name> <init>= <expr><name><name>ecif</name>.<name>rvalue</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name> &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> &lt; 16</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rvalue_copy</name> = <call><name>alloca</name><argument_list>(<argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_rvalue</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ffi_call_N32</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name>rvalue_copy</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy_rvalue</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>rvalue_copy</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_CLOSURES</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_O32</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_N32</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name> <init>= <expr>(<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>clear_location</name> <init>= <expr>(<name>char</name> *) <name>codeloc</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_O32</name> || <name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_O32_SOFT_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> = <name>ffi_closure_O32</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_N32</name> || <name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_N64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> = <name>ffi_closure_N32</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call> || (<name>_MIPS_SIM</name> ==<name>_ABIN32</name>)</expr></cpp:if>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x3c190000 | ((<name>unsigned</name>)<name>fn</name> &gt;&gt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x37390000 | ((<name>unsigned</name>)<name>fn</name> &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x3c0c0000 | ((<name>unsigned</name>)<name>codeloc</name> &gt;&gt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x03200008</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x358c0000 | ((<name>unsigned</name>)<name>codeloc</name> &amp; 0xffff)</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x3c190000 | ((<name>unsigned</name> <name>long</name>)<name>fn</name> &gt;&gt; 48)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x3c0c0000 | ((<name>unsigned</name> <name>long</name>)<name>codeloc</name> &gt;&gt; 48)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x37390000 | (((<name>unsigned</name> <name>long</name>)<name>fn</name> &gt;&gt; 32 ) &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x358c0000 | (((<name>unsigned</name> <name>long</name>)<name>codeloc</name> &gt;&gt; 32) &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x0019cc38</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0x000c6438</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0x37390000 | (((<name>unsigned</name> <name>long</name>)<name>fn</name> &gt;&gt; 16 ) &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x358c0000 | (((<name>unsigned</name> <name>long</name>)<name>codeloc</name> &gt;&gt; 16) &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>8</expr>]</index></name> = 0x0019cc38</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>9</expr>]</index></name> = 0x000c6438</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>10</expr>]</index></name> = 0x37390000 | ((<name>unsigned</name> <name>long</name>)<name>fn</name> &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>11</expr>]</index></name> = 0x03200008</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>12</expr>]</index></name> = 0x358c0000 | ((<name>unsigned</name> <name>long</name>)<name>codeloc</name> &amp; 0xffff)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE__BUILTIN___CLEAR_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__builtin___clear_cache</name><argument_list>(<argument><expr><name>clear_location</name></expr></argument>, <argument><expr><name>clear_location</name> + <name>FFI_TRAMPOLINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>cacheflush</name> <argument_list>(<argument><expr><name>clear_location</name></expr></argument>, <argument><expr><name>FFI_TRAMPOLINE_SIZE</name></expr></argument>, <argument><expr><name>ICACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>ffi_closure_mips_inner_O32</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>ffi_arg</name> *</type><name>ar</name></decl></param>,
<param><decl><type><name>double</name> *</type><name>fpr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avaluep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_arg</name> *</type><name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>, <decl><type ref="prev"/><name>argn</name></decl>, <decl><type ref="prev"/><name>seen_int</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avalue</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avaluep</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_int</name> = (<name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_O32_SOFT_FLOAT</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>cif</name>-&gt;<name>flags</name></name> &gt;&gt; (<name>FFI_FLAG_BITS</name> * 2)) == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *)(<name>UINT32</name>)<name><name>ar</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>avn</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>i</name> &lt; 2 &amp;&amp; !<name>seen_int</name> &amp;&amp;
(<name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name> ||
<name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MIPSEB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>char</name> *) &amp;<name><name>fpr</name><index>[<expr><name>i</name></expr>]</index></name>) + <sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) &amp;<name><name>fpr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>alignment</name> == 8 &amp;&amp; (<name>argn</name> &amp; 0x1)</expr>)</condition><then>
<expr_stmt><expr><name>argn</name>++</expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>SINT8</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>SINT8</name>) <name><name>ar</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>UINT8</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT8</name>) <name><name>ar</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>SINT16</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>SINT16</name>) <name><name>ar</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>UINT16</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT16</name>) <name><name>ar</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) &amp;<name><name>ar</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>seen_int</name> = 1</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>argn</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avaluep</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_O32_SOFT_FLOAT</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<return>return <expr><name>FFI_TYPE_INT</name></expr>;</return>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<return>return <expr><name>FFI_TYPE_UINT64</name></expr>;</return>
</case><default>default:
<return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
</default>}</block></switch>
}</block></then> <else>else <block>{
<return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_N32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_struct_N32</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>target</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>offset</name></decl></param>, <param><decl><type><name>ffi_abi</name></type> <name>abi</name></decl></param>, <param><decl><type><name>ffi_type</name> *</type><name>type</name></decl></param>,
<param><decl><type><name>int</name></type> <name>argn</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>arg_offset</name></decl></param>, <param><decl><type><name>ffi_arg</name> *</type><name>ar</name></decl></param>,
<param><decl><type><name>ffi_arg</name> *</type><name>fpr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>elt_typep</name> <init>= <expr><name><name>type</name>-&gt;<name>elements</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr>*<name>elt_typep</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>ffi_type</name> *</type><name>elt_type</name> <init>= <expr>*<name>elt_typep</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fpp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>o</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>elt_type</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_offset</name> += <name>o</name> - <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> += <name>arg_offset</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_offset</name> = <name>arg_offset</name> % <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> = <call>(<name>char</name> *)<argument_list>(<argument><expr><name>ar</name> + <name>argn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fpp</name> = <call>(<name>char</name> *)<argument_list>(<argument><expr><name>argn</name> &gt;= 8 ? <name>ar</name> + <name>argn</name> : <name>fpr</name> + <name>argn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> = <name>target</name> + <name>offset</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>elt_type</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name> *)<name>tp</name> = *(<name>double</name> *)<name>fpp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>argp</name> + <name>arg_offset</name></expr></argument>, <argument><expr><name><name>elt_type</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>offset</name> += <name><name>elt_type</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_offset</name> += <name><name>elt_type</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>elt_typep</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> += <name>arg_offset</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_offset</name> = <name>arg_offset</name> % <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><name>int</name></type>
<name>ffi_closure_mips_inner_N32</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>ffi_arg</name> *</type><name>ar</name></decl></param>,
<param><decl><type><name>ffi_arg</name> *</type><name>fpr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avaluep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_arg</name> *</type><name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>, <decl><type ref="prev"/><name>argn</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avalue</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avaluep</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rstruct_flag</name></name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name>==<name>_ABIN32</name></expr></cpp:if>
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *)(<name>UINT32</name>)<name><name>ar</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *)<name><name>ar</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>argn</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>avn</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name>
|| <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ffi_arg</name> *</type><name>argp</name> <init>= <expr><name>argn</name> &gt;= 8 ? <name>ar</name> + <name>argn</name> : <name>fpr</name> + <name>argn</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MIPSEB__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name> &amp;&amp; <name>argn</name> &lt; 8</expr>)</condition><then>
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>char</name> *) <name>argp</name>) + <sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) <name>argp</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name> <init>= <expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>alignment</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><name>argn</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>argn</name></expr></argument>, <argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>alignment</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<decl_stmt><decl><type><name>ffi_arg</name> *</type><name>argp</name> <init>= <expr><name>ar</name> + <name>argn</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_POINTER</name></expr>)</condition><then>
<expr_stmt><expr><name>type</name> = (<name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_N64</name>) ? <name>FFI_TYPE_SINT64</name> : <name>FFI_TYPE_SINT32</name></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>SINT8</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>SINT8</name>) *<name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>UINT8</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT8</name>) *<name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>SINT16</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>SINT16</name>) *<name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>UINT16</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT16</name>) *<name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>SINT32</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>SINT32</name>) *<name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>UINT32</name> *) &amp;<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>UINT32</name>) *<name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<if>if <condition>(<expr><name>argn</name> &lt; 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_struct_N32</name><argument_list>(<argument><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>abi</name></name></expr></argument>, <argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>argn</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>fpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
</case><default>default:
<expr_stmt><expr><name><name>avaluep</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) <name>argp</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></else></if>
<expr_stmt><expr><name>argn</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> / <sizeof>sizeof<argument_list>(<argument><expr><name>ffi_arg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avaluep</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cif</name>-&gt;<name>flags</name></name> &gt;&gt; (<name>FFI_FLAG_BITS</name> * 8)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
