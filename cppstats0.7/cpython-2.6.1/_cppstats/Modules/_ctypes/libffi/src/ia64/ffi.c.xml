<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi/src/ia64/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ia64_flags.h"</cpp:file></cpp:include>
<typedef>typedef <type><name>void</name> *<name>PTR64</name></type> <name>__attribute__</name>((<name>mode</name>(<name>DI</name>)));</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>UINT64</name> <name>x</name><index>[<expr>2</expr>]</index></type> <name>__attribute__</name>((<name>aligned</name>(16</decl>)</decl_stmt>)</block></struct></type>);</typedef>
} fpreg<empty_stmt>;</empty_stmt>
<struct>struct <name>ia64_args</name> <block>{
<decl_stmt><decl><type><name>fpreg</name></type> <name><name>fp_regs</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name><name>gp_regs</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name><name>other_args</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> *</type>
<name>endian_adjust</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BIG_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>addr</name> + (8 - <name>len</name>)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>addr</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stf_spill</name><parameter_list>(<param><type><name>addr</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro> <cpp:value>asm ("stf.spill %0 = %1%P0" : "=m" (*addr) : "f"(value));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldf_fill</name><parameter_list>(<param><type><name>result</name></type></param>, <param><type><name>addr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>asm ("ldf.fill %0 = %1%P1" : "=f"(result) : "m"(*addr));</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>hfa_type_size</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_IA64_TYPE_HFA_FLOAT</name></expr>:
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</case><case>case <expr><name>FFI_IA64_TYPE_HFA_DOUBLE</name></expr>:
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</case><case>case <expr><name>FFI_IA64_TYPE_HFA_LDOUBLE</name></expr>:
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__float80</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hfa_type_load</name> <parameter_list>(<param><decl><type><name>fpreg</name> *</type><name>fpaddr</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addr</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_IA64_TYPE_HFA_FLOAT</name></expr>:
<expr_stmt><expr><call><name>stf_spill</name> <argument_list>(<argument><expr><name>fpaddr</name></expr></argument>, <argument><expr>*(<name>float</name> *) <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</case><case>case <expr><name>FFI_IA64_TYPE_HFA_DOUBLE</name></expr>:
<expr_stmt><expr><call><name>stf_spill</name> <argument_list>(<argument><expr><name>fpaddr</name></expr></argument>, <argument><expr>*(<name>double</name> *) <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</case><case>case <expr><name>FFI_IA64_TYPE_HFA_LDOUBLE</name></expr>:
<expr_stmt><expr><call><name>stf_spill</name> <argument_list>(<argument><expr><name>fpaddr</name></expr></argument>, <argument><expr>*(<name>__float80</name> *) <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</case><default>default:
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hfa_type_store</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>fpreg</name> *</type><name>fpaddr</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_IA64_TYPE_HFA_FLOAT</name></expr>: <block>{
<decl_stmt><decl><type><name>float</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldf_fill</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fpaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>float</name> *) <name>addr</name> = <name>result</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_IA64_TYPE_HFA_DOUBLE</name></expr>: <block>{
<decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldf_fill</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fpaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>double</name> *) <name>addr</name> = <name>result</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_IA64_TYPE_HFA_LDOUBLE</name></expr>: <block>{
<decl_stmt><decl><type><name>__float80</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldf_fill</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fpaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>__float80</name> *) <name>addr</name> = <name>result</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><default>default:
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>hfa_element_type</name> <parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>nested</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>element</name> <init>= <expr><name>FFI_TYPE_VOID</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>type</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>nested</name></expr>)</condition><then>
<expr_stmt><expr><name>element</name> = <name>FFI_IA64_TYPE_HFA_FLOAT</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>nested</name></expr>)</condition><then>
<expr_stmt><expr><name>element</name> = <name>FFI_IA64_TYPE_HFA_DOUBLE</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<if>if <condition>(<expr><name>LDBL_MANT_DIG</name> == 64 &amp;&amp; <name>nested</name></expr>)</condition><then>
<expr_stmt><expr><name>element</name> = <name>FFI_IA64_TYPE_HFA_LDOUBLE</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name> <init>= <expr>&amp;<name><name>type</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>ptr</name> = &amp;<name><name>type</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name></expr>;</init> <condition><expr>*<name>ptr</name></expr> ;</condition> <incr><expr><name>ptr</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sub_element</name> <init>= <expr><call><name>hfa_element_type</name> <argument_list>(<argument><expr>*<name>ptr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sub_element</name> == <name>FFI_TYPE_VOID</name></expr>)</condition><then>
<return>return <expr><name>FFI_TYPE_VOID</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>element</name> == <name>FFI_TYPE_VOID</name></expr>)</condition><then>
<expr_stmt><expr><name>element</name> = <name>sub_element</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>element</name> != <name>sub_element</name></expr>)</condition><then>
<return>return <expr><name>FFI_TYPE_VOID</name></expr>;</return></then></if></else></if>
}</block></for>
}</block>
<break>break;</break>
</case><default>default:
<return>return <expr><name>FFI_TYPE_VOID</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>element</name></expr>;</return>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> += <call><name>offsetof</name><argument_list>(<argument>struct <expr><name>ia64_args</name></expr></argument>, <argument><expr><name><name>gp_regs</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>bytes</name></name> &lt; <sizeof>sizeof<argument_list>(<argument>struct <expr><name>ia64_args</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <sizeof>sizeof<argument_list>(<argument>struct <expr><name>ia64_args</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>flags</name> = <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<if>if <condition>(<expr><name>LDBL_MANT_DIG</name> != 64</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>FFI_IA64_TYPE_SMALL_STRUCT</name> | (16 &lt;&lt; 8)</expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hfa_type</name> <init>= <expr><call><name>hfa_element_type</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hfa_type</name> != <name>FFI_TYPE_VOID</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>nelts</name> <init>= <expr><name>size</name> / <call><name>hfa_type_size</name> <argument_list>(<argument><expr><name>hfa_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nelts</name> &lt;= 8</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>hfa_type</name> | (<name>size</name> &lt;&lt; 8)</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>size</name> &lt;= 32</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>FFI_IA64_TYPE_SMALL_STRUCT</name> | (<name>size</name> &lt;&lt; 8)</expr>;</expr_stmt></then></if>
}</block></else></if>
}</block>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ffi_call_unix</name> <parameter_list>(<param><decl><type>struct</type> <name>ia64_args</name> *</decl></param>, <param><decl><type><name>PTR64</name></type></decl></param>, <param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>UINT64</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>ia64_args</name> *</type><name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>, <decl><type ref="prev"/><name>gpcount</name></decl>, <decl><type ref="prev"/><name>fpcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rvalue</name> == <name>NULL</name> &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_VOID</name></expr>)</condition><then>
<expr_stmt><expr><name>rvalue</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>stack</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gpcount</name> = <name>fpcount</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>avn</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>SINT8</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>UINT8</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>SINT16</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>UINT16</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>SINT32</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>UINT32</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>UINT64</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = <call>(<name>UINT64</name>)<argument_list>(<argument><expr><name>PTR64</name></expr></argument>)</argument_list></call> *(<name>void</name> **)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>gpcount</name> &lt; 8 &amp;&amp; <name>fpcount</name> &lt; 8</expr>)</condition><then>
<expr_stmt><expr><call><name>stf_spill</name> <argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr>*(<name>float</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>UINT32</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>gpcount</name> &lt; 8 &amp;&amp; <name>fpcount</name> &lt; 8</expr>)</condition><then>
<expr_stmt><expr><call><name>stf_spill</name> <argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr>*(<name>double</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name> = *(<name>UINT64</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<if>if <condition>(<expr><name>gpcount</name> &amp; 1</expr>)</condition><then>
<expr_stmt><expr><name>gpcount</name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>LDBL_MANT_DIG</name> == 64 &amp;&amp; <name>gpcount</name> &lt; 8 &amp;&amp; <name>fpcount</name> &lt; 8</expr>)</condition><then>
<expr_stmt><expr><call><name>stf_spill</name> <argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr>*(<name>__float80</name> *)<name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gpcount</name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>align</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hfa_type</name> <init>= <expr><call><name>hfa_element_type</name> <argument_list>(<argument><expr>*<name>p_arg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name>align</name> &lt;= 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>align</name> == 16 &amp;&amp; (<name>gpcount</name> &amp; 1)</expr>)</condition><then>
<expr_stmt><expr><name>gpcount</name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>hfa_type</name> != <name>FFI_TYPE_VOID</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>hfa_size</name> <init>= <expr><call><name>hfa_type_size</name> <argument_list>(<argument><expr><name>hfa_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>gp_offset</name> <init>= <expr><name>gpcount</name> * 8</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>fpcount</name> &lt; 8
&amp;&amp; <name>offset</name> &lt; <name>size</name>
&amp;&amp; <name>gp_offset</name> &lt; 8 * 8</expr>)</condition> <block>{
<expr_stmt><expr><call><name>hfa_type_load</name> <argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name></expr>]</index></name></expr></argument>, <argument><expr><name>hfa_type</name></expr></argument>,
<argument><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> + <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name>hfa_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp_offset</name> += <name>hfa_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fpcount</name> += 1</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gpcount</name> += (<name>size</name> + 7) / 8</expr>;</expr_stmt>
}</block>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><call><name>ffi_call_unix</name> <argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_unix</name> <parameter_list>()</parameter_list>;</function_decl>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<struct>struct <name>ia64_fd</name> <block>{
<decl_stmt><decl><type><name>UINT64</name></type> <name>code_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>gp</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>ffi_ia64_trampoline_struct</name> <block>{
<decl_stmt><decl><type><name>UINT64</name></type> <name>code_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>fake_gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>real_gp</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type>struct <name>ffi_ia64_trampoline_struct</name> *</type><name>tramp</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ia64_fd</name> *</type><name>fd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tramp</name> = (struct <name>ffi_ia64_trampoline_struct</name> *)<name><name>closure</name>-&gt;<name>tramp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> = (struct <name>ia64_fd</name> *)(<name>void</name> *)<name>ffi_closure_unix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name>-&gt;<name>code_pointer</name></name> = <name><name>fd</name>-&gt;<name>code_pointer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name>-&gt;<name>real_gp</name></name> = <name><name>fd</name>-&gt;<name>gp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name>-&gt;<name>fake_gp</name></name> = (<name>UINT64</name>)(<name>PTR64</name>)<name>codeloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><name>UINT64</name></type>
<name>ffi_closure_unix_inner</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>, <param><decl><type>struct <name>ia64_args</name> *</type><name>stack</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>r8</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>, <decl><type ref="prev"/><name>gpcount</name></decl>, <decl><type ref="prev"/><name>fpcount</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avalue</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name>avn</name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name>rvalue</name> = <name>r8</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>gpcount</name> = <name>fpcount</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>avn</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>endian_adjust</name><argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>endian_adjust</name><argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>endian_adjust</name><argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>endian_adjust</name><argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name>++</expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>gpcount</name> &lt; 8 &amp;&amp; <name>fpcount</name> &lt; 8</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>fpreg</name> *</type><name>addr</name> <init>= <expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldf_fill</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>float</name> *)<name>addr</name> = <name>result</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>endian_adjust</name><argument_list>(<argument><expr>&amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name></expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>gpcount</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>gpcount</name> &lt; 8 &amp;&amp; <name>fpcount</name> &lt; 8</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>fpreg</name> *</type><name>addr</name> <init>= <expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldf_fill</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>double</name> *)<name>addr</name> = <name>result</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name></expr>]</index></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>gpcount</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<if>if <condition>(<expr><name>gpcount</name> &amp; 1</expr>)</condition><then>
<expr_stmt><expr><name>gpcount</name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>LDBL_MANT_DIG</name> == 64 &amp;&amp; <name>gpcount</name> &lt; 8 &amp;&amp; <name>fpcount</name> &lt; 8</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>fpreg</name> *</type><name>addr</name> <init>= <expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__float80</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldf_fill</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>__float80</name> *)<name>addr</name> = <name>result</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name></expr>]</index></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>gpcount</name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>align</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hfa_type</name> <init>= <expr><call><name>hfa_element_type</name> <argument_list>(<argument><expr>*<name>p_arg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name>align</name> &lt;= 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>align</name> == 16 &amp;&amp; (<name>gpcount</name> &amp; 1)</expr>)</condition><then>
<expr_stmt><expr><name>gpcount</name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>hfa_type</name> != <name>FFI_TYPE_VOID</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>hfa_size</name> <init>= <expr><call><name>hfa_type_size</name> <argument_list>(<argument><expr><name>hfa_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>gp_offset</name> <init>= <expr><name>gpcount</name> * 8</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>addr</name> <init>= <expr><call><name>alloca</name> <argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>addr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>fpcount</name> &lt; 8
&amp;&amp; <name>offset</name> &lt; <name>size</name>
&amp;&amp; <name>gp_offset</name> &lt; 8 * 8</expr>)</condition> <block>{
<expr_stmt><expr><call><name>hfa_type_store</name> <argument_list>(<argument><expr><name>hfa_type</name></expr></argument>, <argument><expr><name>addr</name> + <name>offset</name></expr></argument>,
<argument><expr>&amp;<name><name>stack</name>-&gt;<name>fp_regs</name><index>[<expr><name>fpcount</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name>hfa_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gp_offset</name> += <name>hfa_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fpcount</name> += 1</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>offset</name> &lt; <name>size</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>addr</name> + <name>offset</name></expr></argument>, <argument><expr>(<name>char</name> *)<name><name>stack</name>-&gt;<name>gp_regs</name></name> + <name>gp_offset</name></expr></argument>,
<argument><expr><name>size</name> - <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>stack</name>-&gt;<name>gp_regs</name><index>[<expr><name>gpcount</name></expr>]</index></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>gpcount</name> += (<name>size</name> + 7) / 8</expr>;</expr_stmt>
}</block>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>abort</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><call><name><name>closure</name>-&gt;<name>fun</name></name> <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cif</name>-&gt;<name>flags</name></name></expr>;</return>
}</block></function>
</unit>
