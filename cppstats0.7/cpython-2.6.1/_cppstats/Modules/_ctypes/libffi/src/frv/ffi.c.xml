<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi/src/frv/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name> *</type><name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init>
<condition><expr>(<name>i</name> != 0)</expr>;</condition>
<incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>void</name> **) <name>argp</name> = *<name>p_argv</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></then> <else>else <if>if <condition>(<expr><name>z</name> == <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> += <name>z</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr>(<name>stack</name> + ((<name>count</name> &gt; 24) ? 24 : <call><name>ALIGN_DOWN</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call>))</expr>;</return>
}</block></function>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = -1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <call><name>ALIGN</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_EABI</name><parameter_list>(<param><function_decl><type><name>void</name> *</type>(*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>extended_cif</name> *</type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name> *</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp;
(<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_EABI</name></expr>:
<expr_stmt><expr><call><name>ffi_call_EABI</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><name>void</name></type> <name>ffi_closure_eabi</name> <parameter_list>(<param><decl><type><name>unsigned</name></type> <name>arg1</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>arg2</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>arg3</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>arg4</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>arg5</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>arg6</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>ffi_closure</name> *<name>creg</name></type> <name>__asm__</name> <argument_list>(<argument><expr>"gr7"</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_closure</name> *</type><name>closure</name> <init>= <expr><name>creg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name> *<name>frame_pointer</name></type> <name>__asm__</name> <argument_list>(<argument><expr>"fp"</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>stack_args</name> <init>= <expr><name>frame_pointer</name> + 16</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>register_args</name><index>[<expr>6</expr>]</index></name> <init>=
<expr><block>{ <expr><name>arg1</name></expr>, <expr><name>arg2</name></expr>, <expr><name>arg3</name></expr>, <expr><name>arg4</name></expr>, <expr><name>arg5</name></expr>, <expr><name>arg6</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name> <init>= <expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name> <init>= <expr><name><name>cif</name>-&gt;<name>arg_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name> <init>= <expr><call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name> <init>= <expr>(<name>char</name> *) <name>register_args</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ptr</name> + 3</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ptr</name> + 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ptr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = *(<name>void</name>**)<name>ptr</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += 4</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>ptr</name> += 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ptr</name> == ((<name>char</name> *)<name>register_args</name> + (6*4))</expr>)</condition><then>
<expr_stmt><expr><name>ptr</name> = <name>stack_args</name></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>register</name> <name>void</name> *<name>return_struct_ptr</name></type> <name>__asm__</name><argument_list>(<argument><expr>"gr3"</expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>return_struct_ptr</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rvalue</name></decl>;</decl_stmt>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr>&amp;<name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<asm>asm ("ldi @(%0, #0), gr8" : : "r" (&amp;rvalue));</asm>
<asm>asm ("ldi @(%0, #0), gr9" : : "r" (&amp;((int *) &amp;rvalue)[1]));</asm>
}</block></else></if>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name> <init>= <expr>(<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fn</name> <init>= <expr>(<name>long</name>) <name>ffi_closure_eabi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cls</name> <init>= <expr>(<name>long</name>) <name>codeloc</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FRV_FDPIC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>register</name> <name>void</name> *<name>got</name></type> <name>__asm__</name><argument_list>(<argument><expr>"gr15"</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fn</name> = (<name>unsigned</name> <name>long</name>) <name>ffi_closure_eabi</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FRV_FDPIC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = &amp;((<name>unsigned</name> <name>int</name> *)<name>codeloc</name>)<index>[<expr>2</expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = <name>got</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x8cfc0000 + (<name>fn</name> &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x8efc0000 + (<name>cls</name> &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x8cf80000 + (<name>fn</name> &gt;&gt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0x8ef80000 + (<name>cls</name> &gt;&gt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0x9cc86000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x8030e000</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x8cfc0000 + (<name>fn</name> &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x8efc0000 + (<name>cls</name> &amp; 0xffff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x8cf80000 + (<name>fn</name> &gt;&gt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x8ef80000 + (<name>cls</name> &gt;&gt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x80300006</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>FFI_TRAMPOLINE_SIZE</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<asm>__asm__ <specifier>volatile</specifier> ("dcf @(%0,%1)\n\tici @(%2,%1)" :: "r" (tramp), "r" (i),
"r" (codeloc));</asm></for>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
</unit>
