<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/bsddb.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_BSDDB_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSDDB_H_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBVER</name></cpp:macro> <cpp:value>(DB_VERSION_MAJOR * 10 + DB_VERSION_MINOR)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MINOR</name> &gt; 9</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "eek! DBVER can't handle minor versions &gt; 9"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_BSDDB_VERSION</name></cpp:macro> <cpp:value>"4.7.3"</cpp:value></cpp:define>
<struct>struct <name>behaviourFlags</name> <block>{
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>getReturnsNone</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>cursorSetReturnsNone</name> : 1</expr>;</expr_stmt>
}</block>;</struct>
<struct_decl>struct <name>DBObject</name>;</struct_decl>
<struct_decl>struct <name>DBCursorObject</name>;</struct_decl>
<struct_decl>struct <name>DBTxnObject</name>;</struct_decl>
<struct_decl>struct <name>DBSequenceObject</name>;</struct_decl>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DB_ENV</name>*</type> <name>db_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>closed</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>behaviourFlags</name></type> <name>moduleFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>event_notifyCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>children_dbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>children_txns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>private_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rep_transport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>in_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>DBEnvObject</name>;</typedef>
<typedef>typedef <type><struct>struct <name>DBObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DB</name>*</type> <name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBEnvObject</name>*</type> <name>myenvobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>setflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>haveStat</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>behaviourFlags</name></type> <name>moduleFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>children_cursors</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;=43)</expr></cpp:if>
<decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>children_sequences</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type>struct <name>DBObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBObject</name> **</type><name>sibling_prev_p_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>sibling_next_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>associateCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>btCompareCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>primaryDBType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>private_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>in_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>DBObject</name>;</typedef>
<typedef>typedef <type><struct>struct <name>DBCursorObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DBC</name>*</type> <name>dbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBCursorObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBCursorObject</name> **</type><name>sibling_prev_p_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>sibling_next_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBObject</name>*</type> <name>mydb</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>in_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>DBCursorObject</name>;</typedef>
<typedef>typedef <type><struct>struct <name>DBTxnObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DB_TXN</name>*</type> <name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBEnvObject</name>*</type> <name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag_prepare</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>parent_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>children_txns</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBObject</name> *</type><name>children_dbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>children_sequences</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBCursorObject</name> *</type><name>children_cursors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>in_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>DBTxnObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DB_LOCK</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>in_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>DBLockObject</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<typedef>typedef <type><struct>struct <name>DBSequenceObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DB_SEQUENCE</name>*</type> <name>sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBObject</name>*</type> <name>mydb</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBTxnObject</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBSequenceObject</name> **</type><name>sibling_prev_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>sibling_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBSequenceObject</name> **</type><name>sibling_prev_p_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>DBSequenceObject</name> *</type><name>sibling_next_txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>in_weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>DBSequenceObject</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>db_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbcursor_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbenv_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbtxn_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dblock_type</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<decl_stmt><decl><type><name>PyTypeObject</name>*</type> <name>dbsequence_type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> (*<name>makeDBError</name>)<parameter_list>(<param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>BSDDB_api</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>COMPILING_BSDDB_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;db_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCursorObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbcursor_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBEnvObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbenv_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBTxnObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbtxn_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBLockObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dblock_type)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>DBVER</name> &gt;= 43)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBSequenceObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == bsddb_api-&gt;dbsequence_type)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
