<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_randommodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>397</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_A</name></cpp:macro> <cpp:value>0x9908b0dfUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER_MASK</name></cpp:macro> <cpp:value>0x80000000UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER_MASK</name></cpp:macro> <cpp:value>0x7fffffffUL</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>unsigned</name> <name>long</name></type> <name><name>state</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
}</block></struct></type> <name>RandomObject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Random_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RandomObject_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(v) == &amp;Random_Type)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>genrand_int32</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>mag01</name><index>[<expr>2</expr>]</index></name><init>= <expr><block>{<expr>0x0UL</expr>, <expr><name>MATRIX_A</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>mt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mt</name> = <name><name>self</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>index</name></name> &gt;= <name>N</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
<for>for (<init><expr><name>kk</name>=0</expr>;</init> <condition><expr><name>kk</name>&lt;<name>N</name>-<name>M</name></expr>;</condition> <incr><expr><name>kk</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>y</name> = (<name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name>&amp;<name>UPPER_MASK</name>)|(<name><name>mt</name><index>[<expr><name>kk</name>+1</expr>]</index></name>&amp;<name>LOWER_MASK</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> = <name><name>mt</name><index>[<expr><name>kk</name>+<name>M</name></expr>]</index></name> ^ (<name>y</name> &gt;&gt; 1) ^ <name><name>mag01</name><index>[<expr><name>y</name> &amp; 0x1UL</expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<for>for (<init>;</init> <condition><expr><name>kk</name>&lt;<name>N</name>-1</expr>;</condition> <incr><expr><name>kk</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>y</name> = (<name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name>&amp;<name>UPPER_MASK</name>)|(<name><name>mt</name><index>[<expr><name>kk</name>+1</expr>]</index></name>&amp;<name>LOWER_MASK</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> = <name><name>mt</name><index>[<expr><name>kk</name>+(<name>M</name>-<name>N</name>)</expr>]</index></name> ^ (<name>y</name> &gt;&gt; 1) ^ <name><name>mag01</name><index>[<expr><name>y</name> &amp; 0x1UL</expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>y</name> = (<name><name>mt</name><index>[<expr><name>N</name>-1</expr>]</index></name>&amp;<name>UPPER_MASK</name>)|(<name><name>mt</name><index>[<expr>0</expr>]</index></name>&amp;<name>LOWER_MASK</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>N</name>-1</expr>]</index></name> = <name><name>mt</name><index>[<expr><name>M</name>-1</expr>]</index></name> ^ (<name>y</name> &gt;&gt; 1) ^ <name><name>mag01</name><index>[<expr><name>y</name> &amp; 0x1UL</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>y</name> = <name><name>mt</name><index>[<expr><name><name>self</name>-&gt;<name>index</name></name>++</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> ^= (<name>y</name> &gt;&gt; 11)</expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> ^= (<name>y</name> &lt;&lt; 7) &amp; 0x9d2c5680UL</expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> ^= (<name>y</name> &lt;&lt; 15) &amp; 0xefc60000UL</expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> ^= (<name>y</name> &gt;&gt; 18)</expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_random</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name><init>=<expr><call><name>genrand_int32</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>&gt;&gt;5</expr></init>, <name>b</name><init>=<expr><call><name>genrand_int32</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>&gt;&gt;6</expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr>(<name>a</name>*67108864.0+<name>b</name>)*(1.0/9007199254740992.0)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_genrand</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>mt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mt</name> = <name><name>self</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr>0</expr>]</index></name>= <name>s</name> &amp; 0xffffffffUL</expr>;</expr_stmt>
<for>for (<init><expr><name>mti</name>=1</expr>;</init> <condition><expr><name>mti</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>mti</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> =
(1812433253UL * (<name><name>mt</name><index>[<expr><name>mti</name>-1</expr>]</index></name> ^ (<name><name>mt</name><index>[<expr><name>mti</name>-1</expr>]</index></name> &gt;&gt; 30)) + <name>mti</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> &amp;= 0xffffffffUL</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name> = <name>mti</name></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>init_by_array</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name><name>init_key</name><index>[]</index></name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name>key_length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>mt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mt</name> = <name><name>self</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_genrand</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>19650218UL</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>=1</expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>=0</expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> = (<name>N</name>&gt;<name>key_length</name> ? <name>N</name> : <name>key_length</name>)</expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name>--</expr></incr>) <block>{
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> = (<name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> ^ ((<name><name>mt</name><index>[<expr><name>i</name>-1</expr>]</index></name> ^ (<name><name>mt</name><index>[<expr><name>i</name>-1</expr>]</index></name> &gt;&gt; 30)) * 1664525UL))
+ <name><name>init_key</name><index>[<expr><name>j</name></expr>]</index></name> + <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> &amp;= 0xffffffffUL</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name>&gt;=<name>N</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mt</name><index>[<expr>0</expr>]</index></name> = <name><name>mt</name><index>[<expr><name>N</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>=1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>j</name>&gt;=<name>key_length</name></expr>)</condition><then> <expr_stmt><expr><name>j</name>=0</expr>;</expr_stmt></then></if>
}</block></for>
<for>for (<init><expr><name>k</name>=<name>N</name>-1</expr>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name>--</expr></incr>) <block>{
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> = (<name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> ^ ((<name><name>mt</name><index>[<expr><name>i</name>-1</expr>]</index></name> ^ (<name><name>mt</name><index>[<expr><name>i</name>-1</expr>]</index></name> &gt;&gt; 30)) * 1566083941UL))
- <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> &amp;= 0xffffffffUL</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name>&gt;=<name>N</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mt</name><index>[<expr>0</expr>]</index></name> = <name><name>mt</name><index>[<expr><name>N</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>=1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>mt</name><index>[<expr>0</expr>]</index></name> = 0x80000000UL</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_seed</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>masklower</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>thirtytwo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>keymax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>keyused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"seed"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>arg</name> == <name>NULL</name> || <name>arg</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr>&amp;<name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_genrand</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name>)<name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>n</name> = <call><name>PyNumber_Absolute</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>long</name></type> <name>hash</name> <init>= <expr><call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hash</name> == -1</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>n</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>)<name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>n</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>keymax</name> = 8</expr>;</expr_stmt>
<expr_stmt><expr><name>keyused</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = (<name>unsigned</name> <name>long</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>keymax</name> * <sizeof>sizeof<argument_list>(<argument><expr>*<name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>masklower</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>0xffffffffU</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>masklower</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>thirtytwo</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>32L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>thirtytwo</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<while>while <condition>(<expr>(<name>err</name>=<call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>newn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pychunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>chunk</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> == -1</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>pychunk</name> = <call><name>PyNumber_And</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>masklower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pychunk</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>chunk</name> = <call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>pychunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pychunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>chunk</name> == (<name>unsigned</name> <name>long</name>)-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>newn</name> = <call><name>PyNumber_Rshift</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>thirtytwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newn</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>newn</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>keyused</name> &gt;= <name>keymax</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bigger</name> <init>= <expr><name>keymax</name> &lt;&lt; 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>bigger</name> &gt;&gt; 1) != <name>keymax</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>key</name> = (<name>unsigned</name> <name>long</name> *)<call><name>PyMem_Realloc</name><argument_list>(<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>bigger</name> * <sizeof>sizeof<argument_list>(<argument><expr>*<name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>keymax</name> = <name>bigger</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>keyused</name> &lt; <name>keymax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>keyused</name>++</expr>]</index></name> = <name>chunk</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>keyused</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>keyused</name>++</expr>]</index></name> = 0UL</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>result</name> = <call><name>init_by_array</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>Done</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>masklower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>thirtytwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_getstate</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>element</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>N</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>N</name></expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>element</name> = <call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>element</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>element</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>)<argument_list>(<argument><expr><name><name>self</name>-&gt;<name>index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>element</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>state</name></expr>;</return>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_setstate</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>state</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"state vector must be a tuple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> != <name>N</name>+1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"state vector is the wrong size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>N</name></expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>element</name> = <call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>element</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>state</name><index>[<expr><name>i</name></expr>]</index></name> = <name>element</name> &amp; 0xffffffffUL</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>index</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>index</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name> = (<name>int</name>)<name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_jumpahead</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>iobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>remobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>mt</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>PyLong_Check</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"jumpahead requires an "
"integer, not '%s'"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mt</name> = <name><name>self</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>N</name>-1</expr>;</init> <condition><expr><name>i</name> &gt; 1</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<expr_stmt><expr><name>iobj</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iobj</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>remobj</name> = <call><name>PyNumber_Remainder</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>iobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>remobj</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>j</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>remobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>remobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>j</name> == -1L &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tmp</name> = <name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>mt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>j</name></expr>]</index></name> = <name>tmp</name></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>N</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> += <name>i</name>+1</expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>index</name></name> = <name>N</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_getrandbits</name><parameter_list>(<param><decl><type><name>RandomObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>bytearray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:getrandbits"</expr></argument>, <argument><expr>&amp;<name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>k</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"number of bits must be greater than zero"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bytes</name> = ((<name>k</name> - 1) / 32 + 1) * 4</expr>;</expr_stmt>
<expr_stmt><expr><name>bytearray</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bytearray</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name>=0</expr> ;</init> <condition><expr><name>i</name>&lt;<name>bytes</name></expr> ;</condition> <incr><expr><name>i</name>+=4</expr>, <expr><name>k</name>-=32</expr></incr>) <block>{
<expr_stmt><expr><name>r</name> = <call><name>genrand_int32</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>k</name> &lt; 32</expr>)</condition><then>
<expr_stmt><expr><name>r</name> &gt;&gt;= (32 - <name>k</name>)</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>bytearray</name><index>[<expr><name>i</name>+0</expr>]</index></name> = (<name>unsigned</name> <name>char</name>)<name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytearray</name><index>[<expr><name>i</name>+1</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name>r</name> &gt;&gt; 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytearray</name><index>[<expr><name>i</name>+2</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name>r</name> &gt;&gt; 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytearray</name><index>[<expr><name>i</name>+3</expr>]</index></name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name>r</name> &gt;&gt; 24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>result</name> = <call><name>_PyLong_FromByteArray</name><argument_list>(<argument><expr><name>bytearray</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>bytearray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>random_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>RandomObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name> == &amp;<name>Random_Type</name> &amp;&amp; !<call><name>_PyArg_NoKeywords</name><argument_list>(<argument><expr>"Random()"</expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = (<name>RandomObject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>random_seed</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>random_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"random"</expr>, <expr>(<name>PyCFunction</name>)<name>random_random</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"random() -&gt; x in the interval [0, 1)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"seed"</expr>, <expr>(<name>PyCFunction</name>)<name>random_seed</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"seed([n]) -&gt; None. Defaults to current time."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"getstate"</expr>, <expr>(<name>PyCFunction</name>)<name>random_getstate</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"getstate() -&gt; tuple containing the current state."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"setstate"</expr>, <expr>(<name>PyCFunction</name>)<name>random_setstate</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"setstate(state) -&gt; None. Restores generator state."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"jumpahead"</expr>, <expr>(<name>PyCFunction</name>)<name>random_jumpahead</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"jumpahead(int) -&gt; None. Create new state from "
"existing state and integer."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"getrandbits"</expr>, <expr>(<name>PyCFunction</name>)<name>random_getrandbits</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"getrandbits(k) -&gt; x. Generates a long int with "
"k random bits."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>random_doc</name></expr></argument>,
<argument><expr>"Random() -&gt; create a random number generator with its own internal state."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Random_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"_random.Random"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>RandomObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr><name>random_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>random_methods</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>random_new</name></expr>,
<expr><name>_PyObject_Del</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"Module implements the Mersenne Twister random number generator."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_random</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Random_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"_random"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Random_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Random"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Random_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
