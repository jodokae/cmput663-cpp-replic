<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_sqlite/row.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"row.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlitecompat.h"</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>pysqlite_row_dealloc</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>pysqlite_row_init</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pysqlite_Cursor</name>*</type> <name>cursor</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>description</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyObject_IsInstance</name><argument_list>(<argument><expr>(<name>PyObject</name>*)<name>cursor</name></expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>pysqlite_CursorType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"instance of cursor required for first argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"tuple required for second argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>cursor</name>-&gt;<name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>description</name></name> = <name><name>cursor</name>-&gt;<name>description</name></name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>PyObject</name>*</type> <name>pysqlite_row_subscript</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>idx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nitems</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>compare_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>_idx</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>_idx</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>key</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nitems</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nitems</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>compare_key</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>compare_key</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p1</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> = <name>compare_key</name></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr>(*<name>p1</name> == (<name>char</name>)0) || (*<name>p2</name> == (<name>char</name>)0)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>(*<name>p1</name> | 0x20) != (*<name>p2</name> | 0x20)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>p1</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>(*<name>p1</name> == (<name>char</name>)0) &amp;&amp; (*<name>p2</name> == (<name>char</name>)0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>item</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"No item with that key"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"slices not implemented, yet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"Index must be int or string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
}</block></function>
<function><type><name>Py_ssize_t</name></type> <name>pysqlite_row_length</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>PyObject</name>*</type> <name>pysqlite_row_keys</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nitems</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>list</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>nitems</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nitems</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>list</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pysqlite_row_print</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>(&amp;<name>PyTuple_Type</name>)-&gt;<name>tp_print</name></name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>pysqlite_iter</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type> <name>pysqlite_row_hash</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>)</argument_list></call> ^ <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type> <name>pysqlite_row_richcompare</name><parameter_list>(<param><decl><type><name>pysqlite_Row</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_other</name></decl></param>, <param><decl><type><name>int</name></type> <name>opid</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>opid</name> != <name>Py_EQ</name> &amp;&amp; <name>opid</name> != <name>Py_NE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>_other</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pysqlite_RowType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>pysqlite_Row</name> *</type><name>other</name> <init>= <expr>(<name>pysqlite_Row</name> *)<name>_other</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>description</name></name></expr></argument>, <argument><expr><name><name>other</name>-&gt;<name>description</name></name></expr></argument>, <argument><expr><name>opid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>opid</name> == <name>Py_EQ</name> &amp;&amp; <name>res</name> == <name>Py_True</name>)
|| (<name>opid</name> == <name>Py_NE</name> &amp;&amp; <name>res</name> == <name>Py_False</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>other</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>opid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyMappingMethods</name></type> <name>pysqlite_row_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>pysqlite_row_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>pysqlite_row_subscript</name></expr>,
<expr>(<name>objobjargproc</name>)0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>pysqlite_row_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"keys"</expr>, <expr>(<name>PyCFunction</name>)<name>pysqlite_row_keys</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Returns the keys of the row."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>pysqlite_RowType</name> <init>= <expr><block>{
<macro><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument>NULL</argument>, <argument>0</argument>)</argument_list></macro>
<expr><name>MODULE_NAME</name> ".Row"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>pysqlite_Row</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>pysqlite_row_dealloc</name></expr>,
<expr>(<name>printfunc</name>)<name>pysqlite_row_print</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>pysqlite_row_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)0</expr>,
<expr>0</expr>,
<expr>(<name>richcmpfunc</name>)<name>pysqlite_row_richcompare</name></expr>,
<expr>0</expr>,
<expr>(<name>getiterfunc</name>)<name>pysqlite_iter</name></expr>,
<expr>0</expr>,
<expr><name>pysqlite_row_methods</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>initproc</name>)<name>pysqlite_row_init</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>extern</specifier> <name>int</name></type> <name>pysqlite_row_setup_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>pysqlite_RowType</name>.<name>tp_new</name></name> = <name>PyType_GenericNew</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pysqlite_RowType</name>.<name>tp_as_mapping</name></name> = &amp;<name>pysqlite_row_as_mapping</name></expr>;</expr_stmt>
<return>return <expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>pysqlite_RowType</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
