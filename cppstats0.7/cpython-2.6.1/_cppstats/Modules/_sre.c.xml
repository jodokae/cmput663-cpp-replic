<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_sre.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SRE_RECURSIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>copyright</name><index>[]</index></name> <init>=
<expr>" SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB "</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_SSIZE_T_CLEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sre.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SRE_MODULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MODULE</name></cpp:macro> <cpp:value>"sre"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_PY_MODULE</name></cpp:macro> <cpp:value>"re"</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VERBOSE</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x01060000</expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &lt; 0x02020000 || <call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UNICODE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FAST_SEARCH</name></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_INLINE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_BUILTIN_COPY</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &lt; 0x01060000</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_DEL</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyMem_DEL((op))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> optimize("agtw", on)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> warning(disable: 4710)</cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static __inline type __fastcall</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static inline type</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static type</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_ERROR_ILLEGAL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_ERROR_STATE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_ERROR_RECURSION_LIMIT</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_ERROR_MEMORY</name></cpp:macro> <cpp:value>-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_ERROR_INTERRUPTED</name></cpp:macro> <cpp:value>-10</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>printf v</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_DIGIT_MASK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_SPACE_MASK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LINEBREAK_MASK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_ALNUM_MASK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_WORD_MASK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sre_char_info</name><index>[<expr>128</expr>]</index></name> <init>= <expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>2</expr>, <expr>6</expr>, <expr>2</expr>,
<expr>2</expr>, <expr>2</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>2</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>25</expr>, <expr>25</expr>, <expr>25</expr>, <expr>25</expr>, <expr>25</expr>, <expr>25</expr>, <expr>25</expr>, <expr>25</expr>,
<expr>25</expr>, <expr>25</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>,
<expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>16</expr>, <expr>0</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>,
<expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>24</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sre_char_lower</name><index>[<expr>128</expr>]</index></name> <init>= <expr><block>{ <expr>0</expr>, <expr>1</expr>, <expr>2</expr>, <expr>3</expr>, <expr>4</expr>, <expr>5</expr>, <expr>6</expr>, <expr>7</expr>, <expr>8</expr>, <expr>9</expr>,
<expr>10</expr>, <expr>11</expr>, <expr>12</expr>, <expr>13</expr>, <expr>14</expr>, <expr>15</expr>, <expr>16</expr>, <expr>17</expr>, <expr>18</expr>, <expr>19</expr>, <expr>20</expr>, <expr>21</expr>, <expr>22</expr>, <expr>23</expr>, <expr>24</expr>, <expr>25</expr>, <expr>26</expr>,
<expr>27</expr>, <expr>28</expr>, <expr>29</expr>, <expr>30</expr>, <expr>31</expr>, <expr>32</expr>, <expr>33</expr>, <expr>34</expr>, <expr>35</expr>, <expr>36</expr>, <expr>37</expr>, <expr>38</expr>, <expr>39</expr>, <expr>40</expr>, <expr>41</expr>, <expr>42</expr>, <expr>43</expr>,
<expr>44</expr>, <expr>45</expr>, <expr>46</expr>, <expr>47</expr>, <expr>48</expr>, <expr>49</expr>, <expr>50</expr>, <expr>51</expr>, <expr>52</expr>, <expr>53</expr>, <expr>54</expr>, <expr>55</expr>, <expr>56</expr>, <expr>57</expr>, <expr>58</expr>, <expr>59</expr>, <expr>60</expr>,
<expr>61</expr>, <expr>62</expr>, <expr>63</expr>, <expr>64</expr>, <expr>97</expr>, <expr>98</expr>, <expr>99</expr>, <expr>100</expr>, <expr>101</expr>, <expr>102</expr>, <expr>103</expr>, <expr>104</expr>, <expr>105</expr>, <expr>106</expr>, <expr>107</expr>,
<expr>108</expr>, <expr>109</expr>, <expr>110</expr>, <expr>111</expr>, <expr>112</expr>, <expr>113</expr>, <expr>114</expr>, <expr>115</expr>, <expr>116</expr>, <expr>117</expr>, <expr>118</expr>, <expr>119</expr>, <expr>120</expr>, <expr>121</expr>,
<expr>122</expr>, <expr>91</expr>, <expr>92</expr>, <expr>93</expr>, <expr>94</expr>, <expr>95</expr>, <expr>96</expr>, <expr>97</expr>, <expr>98</expr>, <expr>99</expr>, <expr>100</expr>, <expr>101</expr>, <expr>102</expr>, <expr>103</expr>, <expr>104</expr>, <expr>105</expr>,
<expr>106</expr>, <expr>107</expr>, <expr>108</expr>, <expr>109</expr>, <expr>110</expr>, <expr>111</expr>, <expr>112</expr>, <expr>113</expr>, <expr>114</expr>, <expr>115</expr>, <expr>116</expr>, <expr>117</expr>, <expr>118</expr>, <expr>119</expr>,
<expr>120</expr>, <expr>121</expr>, <expr>122</expr>, <expr>123</expr>, <expr>124</expr>, <expr>125</expr>, <expr>126</expr>, <expr>127</expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_IS_DIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro><cpp:value>((ch) &lt; 128 ? (sre_char_info[(ch)] &amp; SRE_DIGIT_MASK) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_IS_SPACE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro><cpp:value>((ch) &lt; 128 ? (sre_char_info[(ch)] &amp; SRE_SPACE_MASK) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_IS_LINEBREAK</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro><cpp:value>((ch) &lt; 128 ? (sre_char_info[(ch)] &amp; SRE_LINEBREAK_MASK) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_IS_ALNUM</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro><cpp:value>((ch) &lt; 128 ? (sre_char_info[(ch)] &amp; SRE_ALNUM_MASK) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_IS_WORD</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro><cpp:value>((ch) &lt; 128 ? (sre_char_info[(ch)] &amp; SRE_WORD_MASK) : 0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>sre_lower</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
<return>return <expr>((<name>ch</name>) &lt; 128 ? (<name>unsigned</name> <name>int</name>)<name><name>sre_char_lower</name><index>[<expr><name>ch</name></expr>]</index></name> : <name>ch</name>)</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LOC_IS_DIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(!((ch) &amp; ~255) ? isdigit((ch)) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LOC_IS_SPACE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(!((ch) &amp; ~255) ? isspace((ch)) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LOC_IS_LINEBREAK</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((ch) == '\n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LOC_IS_ALNUM</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(!((ch) &amp; ~255) ? isalnum((ch)) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LOC_IS_WORD</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SRE_LOC_IS_ALNUM((ch)) || (ch) == '_')</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>sre_lower_locale</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
<return>return <expr>((<name>ch</name>) &lt; 256 ? (<name>unsigned</name> <name>int</name>)<call><name>tolower</name><argument_list>(<argument><expr>(<name>ch</name>)</expr></argument>)</argument_list></call> : <name>ch</name>)</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_UNI_IS_DIGIT</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_UNICODE_ISDIGIT((Py_UNICODE)(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_UNI_IS_SPACE</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_UNICODE_ISSPACE((Py_UNICODE)(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_UNI_IS_LINEBREAK</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_UNICODE_ISLINEBREAK((Py_UNICODE)(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_UNI_IS_ALNUM</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_UNICODE_ISALNUM((Py_UNICODE)(ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_UNI_IS_WORD</name><parameter_list>(<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(SRE_UNI_IS_ALNUM((ch)) || (ch) == '_')</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>sre_lower_unicode</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>unsigned</name> <name>int</name>) <call><name>Py_UNICODE_TOLOWER</name><argument_list>(<argument><expr><call>(<name>Py_UNICODE</name>)<argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>sre_category</name><argument_list>(<argument>SRE_CODE category</argument>, <argument>unsigned int ch</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>category</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_CATEGORY_DIGIT</name></expr>:
<return>return <expr><call><name>SRE_IS_DIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_NOT_DIGIT</name></expr>:
<return>return <expr>!<call><name>SRE_IS_DIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_SPACE</name></expr>:
<return>return <expr><call><name>SRE_IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_NOT_SPACE</name></expr>:
<return>return <expr>!<call><name>SRE_IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_WORD</name></expr>:
<return>return <expr><call><name>SRE_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_NOT_WORD</name></expr>:
<return>return <expr>!<call><name>SRE_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_LINEBREAK</name></expr>:
<return>return <expr><call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_NOT_LINEBREAK</name></expr>:
<return>return <expr>!<call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_LOC_WORD</name></expr>:
<return>return <expr><call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_LOC_NOT_WORD</name></expr>:
<return>return <expr>!<call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>SRE_CATEGORY_UNI_DIGIT</name></expr>:
<return>return <expr><call><name>SRE_UNI_IS_DIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_DIGIT</name></expr>:
<return>return <expr>!<call><name>SRE_UNI_IS_DIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_SPACE</name></expr>:
<return>return <expr><call><name>SRE_UNI_IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_SPACE</name></expr>:
<return>return <expr>!<call><name>SRE_UNI_IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_WORD</name></expr>:
<return>return <expr><call><name>SRE_UNI_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_WORD</name></expr>:
<return>return <expr>!<call><name>SRE_UNI_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_LINEBREAK</name></expr>:
<return>return <expr><call><name>SRE_UNI_IS_LINEBREAK</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_LINEBREAK</name></expr>:
<return>return <expr>!<call><name>SRE_UNI_IS_LINEBREAK</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
</case><case>case <expr><name>SRE_CATEGORY_UNI_DIGIT</name></expr>:
<return>return <expr><call><name>SRE_IS_DIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_DIGIT</name></expr>:
<return>return <expr>!<call><name>SRE_IS_DIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_SPACE</name></expr>:
<return>return <expr><call><name>SRE_IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_SPACE</name></expr>:
<return>return <expr>!<call><name>SRE_IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_WORD</name></expr>:
<return>return <expr><call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_WORD</name></expr>:
<return>return <expr>!<call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_LINEBREAK</name></expr>:
<return>return <expr><call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_LINEBREAK</name></expr>:
<return>return <expr>!<call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>data_stack_dealloc</name><parameter_list>(<param><decl><type><name>SRE_STATE</name>*</type> <name>state</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>data_stack</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>data_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>data_stack</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>data_stack_size</name></name> = <name><name>state</name>-&gt;<name>data_stack_base</name></name> = 0</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>data_stack_grow</name><parameter_list>(<param><decl><type><name>SRE_STATE</name>*</type> <name>state</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>minsize</name></decl>, <decl><type ref="prev"/><name>cursize</name></decl>;</decl_stmt>
<expr_stmt><expr><name>minsize</name> = <name><name>state</name>-&gt;<name>data_stack_base</name></name>+<name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursize</name> = <name><name>state</name>-&gt;<name>data_stack_size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cursize</name> &lt; <name>minsize</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name>*</type> <name>stack</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cursize</name> = <name>minsize</name>+<name>minsize</name>/4+1024</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("allocate/grow stack %d\n", <name>cursize</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stack</name> = <call><name>PyMem_REALLOC</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>data_stack</name></name></expr></argument>, <argument><expr><name>cursize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>stack</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>data_stack_dealloc</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SRE_ERROR_MEMORY</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>data_stack</name></name> = (<name>char</name> *)<name>stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>data_stack_size</name></name> = <name>cursize</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CHAR</name></cpp:macro> <cpp:value>unsigned char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_AT</name></cpp:macro> <cpp:value>sre_at</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_COUNT</name></cpp:macro> <cpp:value>sre_count</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CHARSET</name></cpp:macro> <cpp:value>sre_charset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_INFO</name></cpp:macro> <cpp:value>sre_info</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MATCH</name></cpp:macro> <cpp:value>sre_match</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MATCH_CONTEXT</name></cpp:macro> <cpp:value>sre_match_context</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_SEARCH</name></cpp:macro> <cpp:value>sre_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LITERAL_TEMPLATE</name></cpp:macro> <cpp:value>sre_literal_template</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_RECURSIVE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_sre.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_RECURSIVE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_LITERAL_TEMPLATE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_SEARCH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_MATCH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_MATCH_CONTEXT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_INFO</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_CHARSET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_COUNT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_AT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRE_CHAR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CHAR</name></cpp:macro> <cpp:value>Py_UNICODE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_AT</name></cpp:macro> <cpp:value>sre_uat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_COUNT</name></cpp:macro> <cpp:value>sre_ucount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CHARSET</name></cpp:macro> <cpp:value>sre_ucharset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_INFO</name></cpp:macro> <cpp:value>sre_uinfo</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MATCH</name></cpp:macro> <cpp:value>sre_umatch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MATCH_CONTEXT</name></cpp:macro> <cpp:value>sre_umatch_context</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_SEARCH</name></cpp:macro> <cpp:value>sre_usearch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_LITERAL_TEMPLATE</name></cpp:macro> <cpp:value>sre_uliteral_template</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>SRE_AT</name><argument_list>(<argument>SRE_STATE* state</argument>, <argument>SRE_CHAR* ptr</argument>, <argument>SRE_CODE at</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>thisp</name></decl>, <decl><type ref="prev"/><name>thatp</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>at</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_AT_BEGINNING</name></expr>:
</case><case>case <expr><name>SRE_AT_BEGINNING_STRING</name></expr>:
<return>return <expr>((<name>void</name>*) <name>ptr</name> == <name><name>state</name>-&gt;<name>beginning</name></name>)</expr>;</return>
</case><case>case <expr><name>SRE_AT_BEGINNING_LINE</name></expr>:
<return>return <expr>((<name>void</name>*) <name>ptr</name> == <name><name>state</name>-&gt;<name>beginning</name></name> ||
<call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>SRE_AT_END</name></expr>:
<return>return <expr>((<call>(<name>void</name>*) <argument_list>(<argument><expr><name>ptr</name>+1</expr></argument>)</argument_list></call> == <name><name>state</name>-&gt;<name>end</name></name> &amp;&amp;
<call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>) ||
((<name>void</name>*) <name>ptr</name> == <name><name>state</name>-&gt;<name>end</name></name>))</expr>;</return>
</case><case>case <expr><name>SRE_AT_END_LINE</name></expr>:
<return>return <expr>((<name>void</name>*) <name>ptr</name> == <name><name>state</name>-&gt;<name>end</name></name> ||
<call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</return>
</case><case>case <expr><name>SRE_AT_END_STRING</name></expr>:
<return>return <expr>((<name>void</name>*) <name>ptr</name> == <name><name>state</name>-&gt;<name>end</name></name>)</expr>;</return>
</case><case>case <expr><name>SRE_AT_BOUNDARY</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>beginning</name></name> == <name><name>state</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>thatp</name> = ((<name>void</name>*) <name>ptr</name> &gt; <name><name>state</name>-&gt;<name>beginning</name></name>) ?
<call><name>SRE_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>thisp</name> = ((<name>void</name>*) <name>ptr</name> &lt; <name><name>state</name>-&gt;<name>end</name></name>) ?
<call><name>SRE_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<return>return <expr><name>thisp</name> != <name>thatp</name></expr>;</return>
</case><case>case <expr><name>SRE_AT_NON_BOUNDARY</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>beginning</name></name> == <name><name>state</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>thatp</name> = ((<name>void</name>*) <name>ptr</name> &gt; <name><name>state</name>-&gt;<name>beginning</name></name>) ?
<call><name>SRE_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>thisp</name> = ((<name>void</name>*) <name>ptr</name> &lt; <name><name>state</name>-&gt;<name>end</name></name>) ?
<call><name>SRE_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<return>return <expr><name>thisp</name> == <name>thatp</name></expr>;</return>
</case><case>case <expr><name>SRE_AT_LOC_BOUNDARY</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>beginning</name></name> == <name><name>state</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>thatp</name> = ((<name>void</name>*) <name>ptr</name> &gt; <name><name>state</name>-&gt;<name>beginning</name></name>) ?
<call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>thisp</name> = ((<name>void</name>*) <name>ptr</name> &lt; <name><name>state</name>-&gt;<name>end</name></name>) ?
<call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<return>return <expr><name>thisp</name> != <name>thatp</name></expr>;</return>
</case><case>case <expr><name>SRE_AT_LOC_NON_BOUNDARY</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>beginning</name></name> == <name><name>state</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>thatp</name> = ((<name>void</name>*) <name>ptr</name> &gt; <name><name>state</name>-&gt;<name>beginning</name></name>) ?
<call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>thisp</name> = ((<name>void</name>*) <name>ptr</name> &lt; <name><name>state</name>-&gt;<name>end</name></name>) ?
<call><name>SRE_LOC_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<return>return <expr><name>thisp</name> == <name>thatp</name></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>SRE_AT_UNI_BOUNDARY</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>beginning</name></name> == <name><name>state</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>thatp</name> = ((<name>void</name>*) <name>ptr</name> &gt; <name><name>state</name>-&gt;<name>beginning</name></name>) ?
<call><name>SRE_UNI_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>thisp</name> = ((<name>void</name>*) <name>ptr</name> &lt; <name><name>state</name>-&gt;<name>end</name></name>) ?
<call><name>SRE_UNI_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<return>return <expr><name>thisp</name> != <name>thatp</name></expr>;</return>
</case><case>case <expr><name>SRE_AT_UNI_NON_BOUNDARY</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>beginning</name></name> == <name><name>state</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>thatp</name> = ((<name>void</name>*) <name>ptr</name> &gt; <name><name>state</name>-&gt;<name>beginning</name></name>) ?
<call><name>SRE_UNI_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>thisp</name> = ((<name>void</name>*) <name>ptr</name> &lt; <name><name>state</name>-&gt;<name>end</name></name>) ?
<call><name>SRE_UNI_IS_WORD</name><argument_list>(<argument><expr>(<name>int</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<return>return <expr><name>thisp</name> == <name>thatp</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>SRE_CHARSET</name><argument_list>(<argument>SRE_CODE* set</argument>, <argument>SRE_CODE ch</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<switch>switch <condition>(<expr>*<name>set</name>++</expr>)</condition> <block>{
<case>case <expr><name>SRE_OP_FAILURE</name></expr>:
<return>return <expr>!<name>ok</name></expr>;</return>
</case><case>case <expr><name>SRE_OP_LITERAL</name></expr>:
<if>if <condition>(<expr><name>ch</name> == <name><name>set</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_CATEGORY</name></expr>:
<if>if <condition>(<expr><call><name>sre_category</name><argument_list>(<argument><expr><name><name>set</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>) <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name> += 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_CHARSET</name></expr>:
<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof> == 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ch</name> &lt; 256 &amp;&amp; (<name><name>set</name><index>[<expr><name>ch</name> &gt;&gt; 4</expr>]</index></name> &amp; (1 &lt;&lt; (<name>ch</name> &amp; 15)))</expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name> += 16</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>ch</name> &lt; 256 &amp;&amp; (<name><name>set</name><index>[<expr><name>ch</name> &gt;&gt; 5</expr>]</index></name> &amp; (1 &lt;&lt; (<name>ch</name> &amp; 31)))</expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name> += 8</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_RANGE</name></expr>:
<if>if <condition>(<expr><name><name>set</name><index>[<expr>0</expr>]</index></name> &lt;= <name>ch</name> &amp;&amp; <name>ch</name> &lt;= <name><name>set</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_NEGATE</name></expr>:
<expr_stmt><expr><name>ok</name> = !<name>ok</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_BIGCHARSET</name></expr>:
<block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>block</name></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> = *(<name>set</name>++)</expr>;</expr_stmt>
<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>block</name> = ((<name>unsigned</name> <name>char</name>*)<name>set</name>)<index>[<expr><name>ch</name> &gt;&gt; 8</expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>set</name> += 128</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>set</name><index>[<expr><name>block</name>*16 + ((<name>ch</name> &amp; 255)&gt;&gt;4)</expr>]</index></name> &amp; (1 &lt;&lt; (<name>ch</name> &amp; 15))</expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name> += <name>count</name>*16</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!(<name>ch</name> &amp; ~65535)</expr>)</condition><then>
<expr_stmt><expr><name>block</name> = ((<name>unsigned</name> <name>char</name>*)<name>set</name>)<index>[<expr><name>ch</name> &gt;&gt; 8</expr>]</index></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>block</name> = -1</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>set</name> += 64</expr>;</expr_stmt>
<if>if <condition>(<expr><name>block</name> &gt;=0 &amp;&amp;
(<name><name>set</name><index>[<expr><name>block</name>*8 + ((<name>ch</name> &amp; 255)&gt;&gt;5)</expr>]</index></name> &amp; (1 &lt;&lt; (<name>ch</name> &amp; 31)))</expr>)</condition><then>
<return>return <expr><name>ok</name></expr>;</return></then></if>
<expr_stmt><expr><name>set</name> += <name>count</name>*8</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block>
</case><default>default:
<return>return <expr>0</expr>;</return>
</default>}</block></switch>
}</block></for>
}</block>
<macro><name>LOCAL</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>SRE_MATCH</name><argument_list>(<argument><expr><name>SRE_STATE</name>* <name>state</name></expr></argument>, <argument><expr><name>SRE_CODE</name>* <name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>LOCAL</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>SRE_COUNT</name><argument_list>(<argument>SRE_STATE* state</argument>, <argument>SRE_CODE* pattern</argument>, <argument>Py_ssize_t maxcount</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>chr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>ptr</name> <init>= <expr>(<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>end</name> <init>= <expr>(<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>end</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>maxcount</name> &lt; <name>end</name> - <name>ptr</name> &amp;&amp; <name>maxcount</name> != 65535</expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>ptr</name> + <name>maxcount</name></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr><name>SRE_OP_IN</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT IN\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; <call><name>SRE_CHARSET</name><argument_list>(<argument><expr><name>pattern</name> + 2</expr></argument>, <argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ANY</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT ANY\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; !<call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ANY_ALL</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT ANY_ALL\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> = <name>end</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_LITERAL</name></expr>:
<expr_stmt><expr><name>chr</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT LITERAL %d\n", <name>pattern</name>, <name>ptr</name>, <name>chr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; (<name>SRE_CODE</name>) *<name>ptr</name> == <name>chr</name></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_LITERAL_IGNORE</name></expr>:
<expr_stmt><expr><name>chr</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT LITERAL_IGNORE %d\n", <name>pattern</name>, <name>ptr</name>, <name>chr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; (<name>SRE_CODE</name>) <call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call> == <name>chr</name></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_NOT_LITERAL</name></expr>:
<expr_stmt><expr><name>chr</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT NOT_LITERAL %d\n", <name>pattern</name>, <name>ptr</name>, <name>chr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; (<name>SRE_CODE</name>) *<name>ptr</name> != <name>chr</name></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_NOT_LITERAL_IGNORE</name></expr>:
<expr_stmt><expr><name>chr</name> = <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT NOT_LITERAL_IGNORE %d\n", <name>pattern</name>, <name>ptr</name>, <name>chr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; (<name>SRE_CODE</name>) <call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call> != <name>chr</name></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT SUBPATTERN\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>ptr</name></name> &lt; <name>end</name></expr>)</condition> <block>{
<expr_stmt><expr><name>i</name> = <call><name>SRE_MATCH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>i</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>i</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></while>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT %d\n", <name>pattern</name>, <name>ptr</name>,
(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>ptr</name></name> - <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>ptr</name></name> - <name>ptr</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|COUNT %d\n", <name>pattern</name>, <name>ptr</name>, <name>ptr</name> - (<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ptr</name> - (<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>ptr</name></name></expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
LOCAL(int)
SRE_INFO(SRE_STATE* state, SRE_CODE* pattern) {
SRE_CHAR* end = state-&gt;end;
SRE_CHAR* ptr = state-&gt;ptr;
Py_ssize_t i;
if (pattern[3] &amp;&amp; (end - ptr) &lt; pattern[3])
return 0;
if (pattern[2] &amp; SRE_INFO_PREFIX &amp;&amp; pattern[5] &gt; 1) {
for (i = 0; i &lt; pattern[5]; i++)
if ((SRE_CODE) ptr[i] != pattern[7 + i])
return 0;
return pattern[0] + 2 * pattern[6];
}
return pattern[0];
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LASTMARK_SAVE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { ctx-&gt;lastmark = state-&gt;lastmark; ctx-&gt;lastindex = state-&gt;lastindex; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LASTMARK_RESTORE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { state-&gt;lastmark = ctx-&gt;lastmark; state-&gt;lastindex = ctx-&gt;lastindex; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ERROR</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { return i; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_FAILURE</name></cpp:macro> <cpp:value>do { ret = 0; goto exit; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_SUCCESS</name></cpp:macro> <cpp:value>do { ret = 1; goto exit; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ON_ERROR</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (i &lt; 0) RETURN_ERROR(i); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ON_SUCCESS</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { RETURN_ON_ERROR(i); if (i &gt; 0) RETURN_SUCCESS; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ON_FAILURE</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { RETURN_ON_ERROR(i); if (i == 0) RETURN_FAILURE; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFY</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_STACK_ALLOC</name><parameter_list>(<param><type><name>state</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>ptr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { alloc_pos = state-&gt;data_stack_base; TRACE(("allocating %s in %d (%d)\n", SFY(type), alloc_pos, sizeof(type))); if (state-&gt;data_stack_size &lt; alloc_pos+sizeof(type)) { int j = data_stack_grow(state, sizeof(type)); if (j &lt; 0) return j; if (ctx_pos != -1) DATA_STACK_LOOKUP_AT(state, SRE_MATCH_CONTEXT, ctx, ctx_pos); } ptr = (type*)(state-&gt;data_stack+alloc_pos); state-&gt;data_stack_base += sizeof(type); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_STACK_LOOKUP_AT</name><parameter_list>(<param><type><name>state</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>ptr</name></type></param>, <param><type><name>pos</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { TRACE(("looking up %s at %d\n", SFY(type), pos)); ptr = (type*)(state-&gt;data_stack+pos); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_STACK_PUSH</name><parameter_list>(<param><type><name>state</name></type></param>, <param><type><name>data</name></type></param>, <param><type><name>size</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { TRACE(("copy data in %p to %d (%d)\n", data, state-&gt;data_stack_base, size)); if (state-&gt;data_stack_size &lt; state-&gt;data_stack_base+size) { int j = data_stack_grow(state, size); if (j &lt; 0) return j; if (ctx_pos != -1) DATA_STACK_LOOKUP_AT(state, SRE_MATCH_CONTEXT, ctx, ctx_pos); } memcpy(state-&gt;data_stack+state-&gt;data_stack_base, data, size); state-&gt;data_stack_base += size; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_STACK_POP</name><parameter_list>(<param><type><name>state</name></type></param>, <param><type><name>data</name></type></param>, <param><type><name>size</name></type></param>, <param><type><name>discard</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { TRACE(("copy data to %p from %d (%d)\n", data, state-&gt;data_stack_base-size, size)); memcpy(data, state-&gt;data_stack+state-&gt;data_stack_base-size, size); if (discard) state-&gt;data_stack_base -= size; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_STACK_POP_DISCARD</name><parameter_list>(<param><type><name>state</name></type></param>, <param><type><name>size</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { TRACE(("discard data from %d (%d)\n", state-&gt;data_stack_base-size, size)); state-&gt;data_stack_base -= size; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_PUSH</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DATA_STACK_PUSH(state, (x), sizeof(*(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_POP</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DATA_STACK_POP(state, (x), sizeof(*(x)), 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_POP_DISCARD</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DATA_STACK_POP_DISCARD(state, sizeof(*(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ALLOC</name><parameter_list>(<param><type><name>t</name></type></param>,<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DATA_STACK_ALLOC(state, t, p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_LOOKUP_AT</name><parameter_list>(<param><type><name>t</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>pos</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DATA_STACK_LOOKUP_AT(state,t,p,pos)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK_PUSH</name><parameter_list>(<param><type><name>lastmark</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do if (lastmark &gt; 0) { i = lastmark; DATA_STACK_PUSH(state, state-&gt;mark, (i+1)*sizeof(void*)); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK_POP</name><parameter_list>(<param><type><name>lastmark</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do if (lastmark &gt; 0) { DATA_STACK_POP(state, state-&gt;mark, (lastmark+1)*sizeof(void*), 1); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK_POP_KEEP</name><parameter_list>(<param><type><name>lastmark</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do if (lastmark &gt; 0) { DATA_STACK_POP(state, state-&gt;mark, (lastmark+1)*sizeof(void*), 0); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK_POP_DISCARD</name><parameter_list>(<param><type><name>lastmark</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do if (lastmark &gt; 0) { DATA_STACK_POP_DISCARD(state, (lastmark+1)*sizeof(void*)); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MAX_UNTIL_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MAX_UNTIL_2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MAX_UNTIL_3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MIN_UNTIL_1</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MIN_UNTIL_2</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MIN_UNTIL_3</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_REPEAT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_REPEAT_ONE_1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_REPEAT_ONE_2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_MIN_REPEAT_ONE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_BRANCH</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_ASSERT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_ASSERT_NOT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_JUMP</name><parameter_list>(<param><type><name>jumpvalue</name></type></param>, <param><type><name>jumplabel</name></type></param>, <param><type><name>nextpattern</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DATA_ALLOC(SRE_MATCH_CONTEXT, nextctx); nextctx-&gt;last_ctx_pos = ctx_pos; nextctx-&gt;jump = jumpvalue; nextctx-&gt;pattern = nextpattern; ctx_pos = alloc_pos; ctx = nextctx; goto entrance; jumplabel: while (0)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>last_ctx_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>jump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name>*</type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastmark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastindex</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>chr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_REPEAT</name>*</type> <name>rep</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>SRE_MATCH_CONTEXT</name>;</typedef>
<macro><name>LOCAL</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>SRE_MATCH</name><argument_list>(<argument>SRE_STATE* state</argument>, <argument>SRE_CODE* pattern</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>end</name> <init>= <expr>(<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>end</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>alloc_pos</name></decl>, <decl><type ref="prev"/><name>ctx_pos</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>jump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sigcount</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_MATCH_CONTEXT</name>*</type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_MATCH_CONTEXT</name>*</type> <name>nextctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|ENTER\n", <name>pattern</name>, <name><name>state</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_ALLOC</name><argument_list>(<argument><expr><name>SRE_MATCH_CONTEXT</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>last_ctx_pos</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>jump</name></name> = <name>JUMP_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx_pos</name> = <name>alloc_pos</name></expr>;</expr_stmt>
<label><name>entrance</name>:</label>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name> = (<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name> == <name>SRE_OP_INFO</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>3</expr>]</index></name> &amp;&amp; (<name>end</name> - <name><name>ctx</name>-&gt;<name>ptr</name></name>) &lt; <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>3</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("reject (got %d chars, need %d)\n",
(<name>end</name> - <name><name>ctx</name>-&gt;<name>ptr</name></name>), <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>3</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> + 1</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr>++<name>sigcount</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(0 == (<name>sigcount</name> &amp; 0xfff)) &amp;&amp; <call><name>PyErr_CheckSignals</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><name>SRE_ERROR_INTERRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr>*<name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>)</condition> <block>{
<case>case <expr><name>SRE_OP_MARK</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|MARK %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &amp; 1</expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lastindex</name></name> = <name>i</name>/2 + 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>i</name> &gt; <name><name>state</name>-&gt;<name>lastmark</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>j</name> <init>= <expr><name><name>state</name>-&gt;<name>lastmark</name></name> + 1</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>j</name> &lt; <name>i</name></expr>)</condition>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lastmark</name></name> = <name>i</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_LITERAL</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|LITERAL %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, *<name><name>ctx</name>-&gt;<name>pattern</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || (<name>SRE_CODE</name>) <name><name>ctx</name>-&gt;<name>ptr</name><index>[<expr>0</expr>]</index></name> != <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_NOT_LITERAL</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|NOT_LITERAL %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, *<name><name>ctx</name>-&gt;<name>pattern</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || (<name>SRE_CODE</name>) <name><name>ctx</name>-&gt;<name>ptr</name><index>[<expr>0</expr>]</index></name> == <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_SUCCESS</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|SUCCESS\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_AT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|AT %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>, *<name><name>ctx</name>-&gt;<name>pattern</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SRE_AT</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>, <argument><expr>*<name><name>ctx</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_CATEGORY</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|CATEGORY %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, *<name><name>ctx</name>-&gt;<name>pattern</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || !<call><name>sre_category</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ANY</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|ANY\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || <call><name>SRE_IS_LINEBREAK</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ANY_ALL</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|ANY_ALL\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_IN</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|IN\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || !<call><name>SRE_CHARSET</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> + 1</expr></argument>, <argument><expr>*<name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_LITERAL_IGNORE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|LITERAL_IGNORE %d\n",
<name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> ||
<call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>)</argument_list></call> != <call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_NOT_LITERAL_IGNORE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|NOT_LITERAL_IGNORE %d\n",
<name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>, *<name><name>ctx</name>-&gt;<name>pattern</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> ||
<call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>)</argument_list></call> == <call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_IN_IGNORE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|IN_IGNORE\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name>
|| !<call><name>SRE_CHARSET</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+1</expr></argument>,
<argument><expr>(<name>SRE_CODE</name>)<call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_JUMP</name></expr>:
</case><case>case <expr><name>SRE_OP_INFO</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_BRANCH</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|BRANCH\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LASTMARK_SAVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name> = <name><name>state</name>-&gt;<name>repeat</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>MARK_PUSH</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init>;</init> <condition><expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</condition> <incr><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> == <name>SRE_OP_LITERAL</name> &amp;&amp;
(<name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> ||
(<name>SRE_CODE</name>) *<name><name>ctx</name>-&gt;<name>ptr</name></name> != <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> == <name>SRE_OP_IN</name> &amp;&amp;
(<name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> ||
!<call><name>SRE_CHARSET</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> + 3</expr></argument>, <argument><expr>(<name>SRE_CODE</name>) *<name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_BRANCH</name></expr></argument>, <argument><expr><name>jump_branch</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>MARK_POP_DISCARD</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>MARK_POP_KEEP</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>LASTMARK_RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>MARK_POP_DISCARD</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_REPEAT_ONE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|REPEAT_ONE %d %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>,
<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> + <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> &gt; <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>SRE_COUNT</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+3</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_LOOKUP_AT</name><argument_list>(<argument><expr><name>SRE_MATCH_CONTEXT</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctx_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name> = <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name> += <name><name>ctx</name>-&gt;<name>count</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &lt; (<name>Py_ssize_t</name>) <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>]</index></name> == <name>SRE_OP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LASTMARK_SAVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>]</index></name> == <name>SRE_OP_LITERAL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>chr</name></name> = <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>+1</expr>]</index></name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<while>while <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &gt;= (<name>Py_ssize_t</name>) <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> &amp;&amp;
(<name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || *<name><name>ctx</name>-&gt;<name>ptr</name></name> != <name><name>ctx</name>-&gt;<name>u</name>.<name>chr</name></name>)</expr>)</condition> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name>--</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &lt; (<name>Py_ssize_t</name>) <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_REPEAT_ONE_1</name></expr></argument>, <argument><expr><name>jump_repeat_one_1</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LASTMARK_RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name>--</expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &gt;= (<name>Py_ssize_t</name>) <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_REPEAT_ONE_2</name></expr></argument>, <argument><expr><name>jump_repeat_one_2</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>LASTMARK_RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_MIN_REPEAT_ONE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|MIN_REPEAT_ONE %d %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>,
<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> + <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> &gt; <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>ret</name> = <call><name>SRE_COUNT</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+3</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_LOOKUP_AT</name><argument_list>(<argument><expr><name>SRE_MATCH_CONTEXT</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctx_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> &lt; (<name>Py_ssize_t</name>) <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name> = <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name> += <name><name>ctx</name>-&gt;<name>count</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr><name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>]</index></name> == <name>SRE_OP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>LASTMARK_SAVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>Py_ssize_t</name>)<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name> == 65535
|| <name><name>ctx</name>-&gt;<name>count</name></name> &lt;= (<name>Py_ssize_t</name>)<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MIN_REPEAT_ONE</name></expr></argument>,<argument><expr><name>jump_min_repeat_one</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>SRE_COUNT</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+3</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_LOOKUP_AT</name><argument_list>(<argument><expr><name>SRE_MATCH_CONTEXT</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctx_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>LASTMARK_RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_REPEAT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|REPEAT %d %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>,
<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name> = (<name>SRE_REPEAT</name>*) <call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name></name> = <name><name>ctx</name>-&gt;<name>pattern</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>prev</name></name> = <name><name>state</name>-&gt;<name>repeat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>last_ptr</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_REPEAT</name></expr></argument>, <argument><expr><name>jump_repeat</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_MAX_UNTIL</name></expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name> = <name><name>state</name>-&gt;<name>repeat</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><name>SRE_ERROR_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name>+1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|MAX_UNTIL %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>count</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &lt; <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MAX_UNTIL_1</name></expr></argument>, <argument><expr><name>jump_max_until_1</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name></name>+3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name>-1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>count</name></name> &lt; <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name> ||
<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name> == 65535) &amp;&amp;
<name><name>state</name>-&gt;<name>ptr</name></name> != <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>last_ptr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LASTMARK_SAVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MARK_PUSH</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_PUSH</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>last_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>last_ptr</name></name> = <name><name>state</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MAX_UNTIL_2</name></expr></argument>, <argument><expr><name>jump_max_until_2</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name></name>+3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_POP</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>last_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MARK_POP_DISCARD</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>MARK_POP</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lastmark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LASTMARK_RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name>-1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MAX_UNTIL_3</name></expr></argument>, <argument><expr><name>jump_max_until_3</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ON_SUCCESS</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_MIN_UNTIL</name></expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name> = <name><name>state</name>-&gt;<name>repeat</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><name>SRE_ERROR_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name>+1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|MIN_UNTIL %d %p\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>count</name></name>, <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &lt; <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MIN_UNTIL_1</name></expr></argument>, <argument><expr><name>jump_min_until_1</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name></name>+3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name>-1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LASTMARK_SAVE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MIN_UNTIL_2</name></expr></argument>, <argument><expr><name>jump_min_until_2</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LASTMARK_RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>count</name></name> &gt;= <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name>
&amp;&amp; <name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name><index>[<expr>2</expr>]</index></name> != 65535</expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_MIN_UNTIL_3</name></expr></argument>,<argument><expr><name>jump_min_until_3</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>pattern</name></name>+3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>u</name>.<name>rep</name>-&gt;<name>count</name></name> = <name><name>ctx</name>-&gt;<name>count</name></name>-1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><case>case <expr><name>SRE_OP_GROUPREF</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|GROUPREF %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>groupref</name> <init>= <expr><name>i</name>+<name>i</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>groupref</name> &gt;= <name><name>state</name>-&gt;<name>lastmark</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>p</name> <init>= <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>groupref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>e</name> <init>= <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>groupref</name>+1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>p</name> || !<name>e</name> || <name>e</name> &lt; <name>p</name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr><name>p</name> &lt; <name>e</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> || *<name><name>ctx</name>-&gt;<name>ptr</name></name> != *<name>p</name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
}</block></while>
}</block></else></if>
}</block>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_GROUPREF_IGNORE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|GROUPREF_IGNORE %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>groupref</name> <init>= <expr><name>i</name>+<name>i</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>groupref</name> &gt;= <name><name>state</name>-&gt;<name>lastmark</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>p</name> <init>= <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>groupref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>e</name> <init>= <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>groupref</name>+1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>p</name> || !<name>e</name> || <name>e</name> &lt; <name>p</name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr><name>p</name> &lt; <name>e</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>ptr</name></name> &gt;= <name>end</name> ||
<call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name><name>ctx</name>-&gt;<name>ptr</name></name></expr></argument>)</argument_list></call> != <call><name><name>state</name>-&gt;<name>lower</name></name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ptr</name></name>++</expr>;</expr_stmt>
}</block></while>
}</block></else></if>
}</block>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_GROUPREF_EXISTS</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|GROUPREF_EXISTS %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>groupref</name> <init>= <expr><name>i</name>+<name>i</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>groupref</name> &gt;= <name><name>state</name>-&gt;<name>lastmark</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>p</name> <init>= <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>groupref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>e</name> <init>= <expr>(<name>SRE_CHAR</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>groupref</name>+1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>p</name> || !<name>e</name> || <name>e</name> &lt; <name>p</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></else></if>
}</block>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ASSERT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|ASSERT %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name> - <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>ptr</name></name> &lt; <name><name>state</name>-&gt;<name>beginning</name></name></expr>)</condition><then>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_ASSERT</name></expr></argument>, <argument><expr><name>jump_assert</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ON_FAILURE</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ASSERT_NOT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|ASSERT_NOT %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>,
<name><name>ctx</name>-&gt;<name>ptr</name></name>, <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>ctx</name>-&gt;<name>ptr</name></name> - <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>ptr</name></name> &gt;= <name><name>state</name>-&gt;<name>beginning</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DO_JUMP</name><argument_list>(<argument><expr><name>JUMP_ASSERT_NOT</name></expr></argument>, <argument><expr><name>jump_assert_not</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattern</name></name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RETURN_ON_ERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattern</name></name> += <name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_FAILURE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|FAILURE\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RETURN_FAILURE</name></expr>;</expr_stmt>
</case><default>default:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|UNKNOWN %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>,
<name><name>ctx</name>-&gt;<name>pattern</name><index>[<expr>-1</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_ERROR</name><argument_list>(<argument><expr><name>SRE_ERROR_ILLEGAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></for>
<label><name>exit</name>:</label>
<expr_stmt><expr><name>ctx_pos</name> = <name><name>ctx</name>-&gt;<name>last_ctx_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>jump</name> = <name><name>ctx</name>-&gt;<name>jump</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATA_POP_DISCARD</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ctx_pos</name> == -1</expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>DATA_LOOKUP_AT</name><argument_list>(<argument><expr><name>SRE_MATCH_CONTEXT</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ctx_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>jump</name></expr>)</condition> <block>{
<case>case <expr><name>JUMP_MAX_UNTIL_2</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MAX_UNTIL_2\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_max_until_2</name>;</goto>
</case><case>case <expr><name>JUMP_MAX_UNTIL_3</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MAX_UNTIL_3\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_max_until_3</name>;</goto>
</case><case>case <expr><name>JUMP_MIN_UNTIL_2</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MIN_UNTIL_2\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_min_until_2</name>;</goto>
</case><case>case <expr><name>JUMP_MIN_UNTIL_3</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MIN_UNTIL_3\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_min_until_3</name>;</goto>
</case><case>case <expr><name>JUMP_BRANCH</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_BRANCH\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_branch</name>;</goto>
</case><case>case <expr><name>JUMP_MAX_UNTIL_1</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MAX_UNTIL_1\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_max_until_1</name>;</goto>
</case><case>case <expr><name>JUMP_MIN_UNTIL_1</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MIN_UNTIL_1\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_min_until_1</name>;</goto>
</case><case>case <expr><name>JUMP_REPEAT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_REPEAT\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_repeat</name>;</goto>
</case><case>case <expr><name>JUMP_REPEAT_ONE_1</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_REPEAT_ONE_1\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_repeat_one_1</name>;</goto>
</case><case>case <expr><name>JUMP_REPEAT_ONE_2</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_REPEAT_ONE_2\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_repeat_one_2</name>;</goto>
</case><case>case <expr><name>JUMP_MIN_REPEAT_ONE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_MIN_REPEAT_ONE\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_min_repeat_one</name>;</goto>
</case><case>case <expr><name>JUMP_ASSERT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_ASSERT\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_assert</name>;</goto>
</case><case>case <expr><name>JUMP_ASSERT_NOT</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|JUMP_ASSERT_NOT\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>jump_assert_not</name>;</goto>
</case><case>case <expr><name>JUMP_NONE</name></expr>:
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|RETURN %d\n", <name><name>ctx</name>-&gt;<name>pattern</name></name>, <name><name>ctx</name>-&gt;<name>ptr</name></name>, <name>ret</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
}</block>
<macro><name>LOCAL</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro>
<macro><name>SRE_SEARCH</name><argument_list>(<argument>SRE_STATE* state</argument>, <argument>SRE_CODE* pattern</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>ptr</name> <init>= <expr>(<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CHAR</name>*</type> <name>end</name> <init>= <expr>(<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>end</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>status</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>prefix_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>prefix_skip</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name>*</type> <name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name>*</type> <name>charset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name>*</type> <name>overlap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name> == <name>SRE_OP_INFO</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> = <name><name>pattern</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pattern</name><index>[<expr>3</expr>]</index></name> &gt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> -= <name><name>pattern</name><index>[<expr>3</expr>]</index></name>-1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>end</name> &lt;= <name>ptr</name></expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>ptr</name>+1</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_INFO_PREFIX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prefix_len</name> = <name><name>pattern</name><index>[<expr>5</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_skip</name> = <name><name>pattern</name><index>[<expr>6</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> = <name>pattern</name> + 7</expr>;</expr_stmt>
<expr_stmt><expr><name>overlap</name> = <name>prefix</name> + <name>prefix_len</name> - 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_INFO_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>charset</name> = <name>pattern</name> + 5</expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>pattern</name> += 1 + <name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("prefix = %p %d %d\n", <name>prefix</name>, <name>prefix_len</name>, <name>prefix_skip</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("charset = %p\n", <name>charset</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FAST_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>prefix_len</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> = (<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name></expr>)</condition> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr>(<name>SRE_CODE</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name> != <name><name>prefix</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>i</name></expr>)</condition><then>
<break>break;</break></then>
<else>else
<expr_stmt><expr><name>i</name> = <name><name>overlap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>++<name>i</name> == <name>prefix_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|SEARCH SCAN\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <name>ptr</name> + 1 - <name>prefix_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name>ptr</name> + 1 - <name>prefix_len</name> + <name>prefix_skip</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_INFO_LITERAL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>status</name> = <call><name>SRE_MATCH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pattern</name> + 2*<name>prefix_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<return>return <expr><name>status</name></expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = <name><name>overlap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></else></if>
}</block></for>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>pattern</name><index>[<expr>0</expr>]</index></name> == <name>SRE_OP_LITERAL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>chr</name> <init>= <expr><name><name>pattern</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> = (<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; (<name>SRE_CODE</name>) <name><name>ptr</name><index>[<expr>0</expr>]</index></name> != <name>chr</name></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>ptr</name> &gt;= <name>end</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|SEARCH LITERAL\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = ++<name>ptr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_INFO_LITERAL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>status</name> = <call><name>SRE_MATCH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pattern</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr><name>charset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> = (<name>SRE_CHAR</name> *)<name><name>state</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<while>while <condition>(<expr><name>ptr</name> &lt; <name>end</name> &amp;&amp; !<call><name>SRE_CHARSET</name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>ptr</name> &gt;= <name>end</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|SEARCH CHARSET\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>SRE_MATCH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else
<while>while <condition>(<expr><name>ptr</name> &lt;= <name>end</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|SEARCH\n", <name>pattern</name>, <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <name><name>state</name>-&gt;<name>ptr</name></name> = <name>ptr</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>SRE_MATCH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<break>break;</break></then></if>
}</block></while></else></if></else></if>
<return>return <expr><name>status</name></expr>;</return>
}</block>
<macro><name>LOCAL</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>SRE_LITERAL_TEMPLATE</name><argument_list>(<argument>SRE_CHAR* ptr</argument>, <argument>Py_ssize_t len</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>len</name>-- &gt; 0</expr>)</condition>
<if>if <condition>(<expr>*<name>ptr</name>++ == '\\'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if></while>
<return>return <expr>1</expr>;</return>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SRE_RECURSIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type><name>pattern_new_match</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type></decl></param>, <param><decl><type><name>SRE_STATE</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name>*</type><name>pattern_scanner</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type></decl></param>, <param><decl><type><name>PyObject</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sre_codesize</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sre_getlower</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>character</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii"</expr></argument>, <argument><expr>&amp;<name>character</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_FLAG_LOCALE</name></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><call><name>sre_lower_locale</name><argument_list>(<argument><expr><name>character</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_FLAG_UNICODE</name></expr>)</condition><then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><call><name>sre_lower_unicode</name><argument_list>(<argument><expr><name>character</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><call><name>sre_lower_locale</name><argument_list>(<argument><expr><name>character</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><call><name>sre_lower</name><argument_list>(<argument><expr><name>character</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>LOCAL</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>state_reset</name><argument_list>(<argument>SRE_STATE* state</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name><name>state</name>-&gt;<name>lastmark</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lastindex</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>repeat</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>data_stack_dealloc</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>void</name>*</type>
<name>getstring</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>string</name></decl></param>, <param><decl><type><name>Py_ssize_t</name>*</type> <name>p_length</name></decl></param>, <param><decl><type><name>int</name>*</type> <name>p_charsize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>charsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>ptr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ptr</name> = (<name>void</name>*) <call><name>PyUnicode_AS_DATA</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> = <call><name>PyUnicode_GET_DATA_SIZE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>charsize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>buffer</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call>-&gt;<name>tp_as_buffer</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>buffer</name> || !<name><name>buffer</name>-&gt;<name>bf_getreadbuffer</name></name> || !<name><name>buffer</name>-&gt;<name>bf_getsegcount</name></name> ||
<call><name><name>buffer</name>-&gt;<name>bf_getsegcount</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"expected string or buffer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bytes</name> = <call><name><name>buffer</name>-&gt;<name>bf_getreadbuffer</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bytes</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer has negative size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x01060000</expr></cpp:if>
<expr_stmt><expr><name>size</name> = <call><name>PyObject_Size</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>size</name> = <call><name>PyObject_Length</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> || <name>bytes</name> == <name>size</name></expr>)</condition><then>
<expr_stmt><expr><name>charsize</name> = 1</expr>;</expr_stmt></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name>bytes</name> == <call>(<name>Py_ssize_t</name>) <argument_list>(<argument><expr><name>size</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>charsize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"buffer size mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>p_length</name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p_charsize</name> = <name>charsize</name></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
}</block></function>
<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>state_init</name><argument_list>(<argument>SRE_STATE* state</argument>, <argument>PatternObject* pattern</argument>, <argument>PyObject* string</argument>,
<argument>Py_ssize_t start</argument>, <argument>Py_ssize_t end</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>charsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRE_STATE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lastmark</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lastindex</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> = <call><name>getstring</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr>&amp;<name>charsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ptr</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>start</name> &gt; <name>length</name></expr>)</condition><then>
<expr_stmt><expr><name>start</name> = <name>length</name></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>end</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>end</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>end</name> &gt; <name>length</name></expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>length</name></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>charsize</name></name> = <name>charsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>beginning</name></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name>ptr</name> + <name>start</name> * <name><name>state</name>-&gt;<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>end</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name>ptr</name> + <name>end</name> * <name><name>state</name>-&gt;<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>string</name></name> = <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>pos</name></name> = <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>endpos</name></name> = <name>end</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pattern</name>-&gt;<name>flags</name></name> &amp; <name>SRE_FLAG_LOCALE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lower</name></name> = <name>sre_lower_locale</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>pattern</name>-&gt;<name>flags</name></name> &amp; <name>SRE_FLAG_UNICODE</name></expr>)</condition><then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lower</name></name> = <name>sre_lower_unicode</name></expr>;</expr_stmt></then></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lower</name></name> = <name>sre_lower_locale</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<expr_stmt><expr><name><name>state</name>-&gt;<name>lower</name></name> = <name>sre_lower</name></expr>;</expr_stmt></else>
<return>return <expr><name>string</name></expr>;</return>
}</block>
<macro><name>LOCAL</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>state_fini</name><argument_list>(<argument>SRE_STATE* state</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>data_stack_dealloc</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_OFFSET</name><parameter_list>(<param><type><name>state</name></type></param>, <param><type><name>member</name></type></param>)</parameter_list></cpp:macro><cpp:value>(((char*)(member) - (char*)(state)-&gt;beginning) / (state)-&gt;charsize)</cpp:value></cpp:define>
<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>state_getslice</name><argument_list>(<argument>SRE_STATE* state</argument>, <argument>Py_ssize_t index</argument>, <argument>PyObject* string</argument>, <argument>int empty</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>index</name> = (<name>index</name> - 1) * 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name>string</name> == <name>Py_None</name> || <name>index</name> &gt;= <name><name>state</name>-&gt;<name>lastmark</name></name> || !<name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>index</name></expr>]</index></name> || !<name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>index</name>+1</expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>empty</name></expr>)</condition><then>
<expr_stmt><expr><name>i</name> = <name>j</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>i</name> = <call><name>STATE_OFFSET</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> = <call><name>STATE_OFFSET</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>index</name>+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pattern_error</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_ERROR_RECURSION_LIMIT</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"maximum recursion limit exceeded"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_ERROR_MEMORY</name></expr>:
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_ERROR_INTERRUPTED</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"internal error in regular expression engine"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pattern_dealloc</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>weakreflist</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>groupindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>indexgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_match</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>end</name> <init>= <expr><name>PY_SSIZE_T_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"pattern"</expr>, <expr>"pos"</expr>, <expr>"endpos"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"O|nn:match"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>string</name> = <call><name>state_init</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>string</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>state</name>.<name>ptr</name></name> = <name><name>state</name>.<name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|MATCH\n", <call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>, <name><name>state</name>.<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>.<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_match</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_umatch</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|END\n", <call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>, <name><name>state</name>.<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pattern_new_match</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_search</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>end</name> <init>= <expr><name>PY_SSIZE_T_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"pattern"</expr>, <expr>"pos"</expr>, <expr>"endpos"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"O|nn:search"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>string</name> = <call><name>state_init</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>string</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|SEARCH\n", <call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>, <name><name>state</name>.<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>.<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_search</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_usearch</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("|%p|%p|END\n", <call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>, <name><name>state</name>.<name>ptr</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>pattern_new_match</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>call</name><parameter_list>(<param><decl><type><name>char</name>*</type> <name>module</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>function</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>args</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>name</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>mod</name> = <call><name>PyImport_Import</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mod</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>func</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>func</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BUILTIN_COPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>deepcopy</name><parameter_list>(<param><decl><type><name>PyObject</name>**</type> <name>object</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>memo</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>copy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy</name> = <call><name>call</name><argument_list>(
<argument><expr>"copy"</expr></argument>, <argument><expr>"deepcopy"</expr></argument>,
<argument><expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>*<name>object</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>*<name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>object</name> = <name>copy</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>join_list</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>list</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>string</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>joiner</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x01060000</expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>joiner</name> = <call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>joiner</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>joiner</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x01060000</expr></cpp:if>
<expr_stmt><expr><name>function</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>, <argument><expr>"join"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>function</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>args</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> = <call><name>call</name><argument_list>(
<argument><expr>"string"</expr></argument>, <argument><expr>"join"</expr></argument>,
<argument><expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>joiner</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>joiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_findall</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>end</name> <init>= <expr><name>PY_SSIZE_T_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"source"</expr>, <expr>"pos"</expr>, <expr>"endpos"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"O|nn:findall"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>string</name> = <call><name>state_init</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>string</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name><name>state</name>.<name>start</name></name> &lt;= <name><name>state</name>.<name>end</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>state_reset</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>ptr</name></name> = <name><name>state</name>.<name>start</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>.<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_search</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_usearch</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<if>if <condition>(<expr><name>status</name> &lt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>pattern_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>self</name>-&gt;<name>groups</name></name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>b</name> = <call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>state</name>.<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>state</name>.<name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><name>item</name> = <call><name>state_getslice</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>item</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>groups</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>o</name> <init>= <expr><call><name>state_getslice</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>state</name>.<name>ptr</name></name> == <name><name>state</name>.<name>start</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>.<name>start</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name><name>state</name>.<name>ptr</name></name> + <name><name>state</name>.<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>state</name>.<name>start</name></name> = <name><name>state</name>.<name>ptr</name></name></expr>;</expr_stmt></else></if>
}</block></while>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x02020000</expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_finditer</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>pattern</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>scanner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>iterator</name></decl>;</decl_stmt>
<expr_stmt><expr><name>scanner</name> = <call><name>pattern_scanner</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>scanner</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>search</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr>"search"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>search</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>iterator</name> = <call><name>PyCallIter_New</name><argument_list>(<argument><expr><name>search</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>iterator</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_split</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>maxsplit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"source"</expr>, <expr>"maxsplit"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"O|n:split"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>maxsplit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>string</name> = <call><name>state_init</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>PY_SSIZE_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>string</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> = <name><name>state</name>.<name>start</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>maxsplit</name> || <name>n</name> &lt; <name>maxsplit</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>state_reset</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>ptr</name></name> = <name><name>state</name>.<name>start</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>.<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_search</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_usearch</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<if>if <condition>(<expr><name>status</name> &lt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>pattern_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name><name>state</name>.<name>start</name></name> == <name><name>state</name>.<name>ptr</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>last</name> == <name><name>state</name>.<name>end</name></name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name><name>state</name>.<name>start</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name><name>state</name>.<name>ptr</name></name> + <name><name>state</name>.<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>item</name> = <call><name>PySequence_GetSlice</name><argument_list>(
<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>state</name>.<name>start</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>self</name>-&gt;<name>groups</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>item</name> = <call><name>state_getslice</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
}</block></for>
<expr_stmt><expr><name>n</name> = <name>n</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> = <name><name>state</name>.<name>start</name></name> = <name><name>state</name>.<name>ptr</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>item</name> = <call><name>PySequence_GetSlice</name><argument_list>(
<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name>.<name>endpos</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>list</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_subx</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>ptemplate</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>string</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>subn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_is_callable</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>ptemplate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>filter</name> = <name>ptemplate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_is_callable</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>literal</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> = <call><name>getstring</name><argument_list>(<argument><expr><name>ptemplate</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>bint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <name>bint</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ptr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>b</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>literal</name> = <call><name>sre_literal_template</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)<name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>literal</name> = <call><name>sre_uliteral_template</name><argument_list>(<argument><expr>(<name>Py_UNICODE</name> *)<name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>literal</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>literal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>filter</name> = <name>ptemplate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_is_callable</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>filter</name> = <call><name>call</name><argument_list>(
<argument><expr><name>SRE_PY_MODULE</name></expr></argument>, <argument><expr>"_subx"</expr></argument>,
<argument><expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>ptemplate</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>filter</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>filter_is_callable</name> = <call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<expr_stmt><expr><name>string</name> = <call><name>state_init</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>PY_SSIZE_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>string</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>count</name> || <name>n</name> &lt; <name>count</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>state_reset</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>ptr</name></name> = <name><name>state</name>.<name>start</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>.<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_search</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_usearch</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<if>if <condition>(<expr><name>status</name> &lt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>pattern_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>b</name> = <call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>state</name>.<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>STATE_OFFSET</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>state</name>.<name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; <name>b</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>item</name> = <call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>i</name> == <name>b</name> &amp;&amp; <name>i</name> == <name>e</name> &amp;&amp; <name>n</name> &gt; 0</expr>)</condition><then>
<goto>goto <name>next</name>;</goto></then></if></else></if>
<if>if <condition>(<expr><name>filter_is_callable</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>match</name> = <call><name>pattern_new_match</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>match</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>args</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>item</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>item</name> = <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>item</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>n</name> + 1</expr>;</expr_stmt>
<label><name>next</name>:</label>
<if>if <condition>(<expr><name><name>state</name>.<name>ptr</name></name> == <name><name>state</name>.<name>start</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>.<name>start</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name><name>state</name>.<name>ptr</name></name> + <name><name>state</name>.<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>state</name>.<name>start</name></name> = <name><name>state</name>.<name>ptr</name></name></expr>;</expr_stmt></else></if>
}</block></while>
<if>if <condition>(<expr><name>i</name> &lt; <name><name>state</name>.<name>endpos</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>item</name> = <call><name>PySequence_GetSlice</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>state</name>.<name>endpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>join_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>subn</name></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"Ni"</expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>item</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_sub</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>ptemplate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"repl"</expr>, <expr>"string"</expr>, <expr>"count"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"OO|n:sub"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>ptemplate</name></expr></argument>, <argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>pattern_subx</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ptemplate</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_subn</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>ptemplate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"repl"</expr>, <expr>"string"</expr>, <expr>"count"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"OO|n:subn"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>ptemplate</name></expr></argument>, <argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>pattern_subx</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ptemplate</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_copy</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BUILTIN_COPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PatternObject</name>*</type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy</name> = <call><name>PyObject_NEW_VAR</name><argument_list>(<argument><expr><name>PatternObject</name></expr></argument>, <argument><expr>&amp;<name>Pattern_Type</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>offset</name> = <call><name>offsetof</name><argument_list>(<argument><expr><name>PatternObject</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>groupindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>indexgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name>*) <name>copy</name> + <name>offset</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>self</name> + <name>offset</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PatternObject</name></expr></argument>)</argument_list></sizeof> + <name><name>self</name>-&gt;<name>codesize</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof> - <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>copy</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"cannot copy this pattern object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_deepcopy</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>memo</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BUILTIN_COPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PatternObject</name>*</type> <name>copy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy</name> = (<name>PatternObject</name>*) <call><name>pattern_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>deepcopy</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>groupindex</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call> ||
!<call><name>deepcopy</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>indexgroup</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call> ||
!<call><name>deepcopy</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>pattern</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"cannot deepcopy this pattern object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_match_doc</name></expr></argument>,
<argument><expr>"match(string[, pos[, endpos]]) --&gt; match object or None.\n\
Matches zero or more characters at the beginning of the string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_search_doc</name></expr></argument>,
<argument><expr>"search(string[, pos[, endpos]]) --&gt; match object or None.\n\
Scan through string looking for a match, and return a corresponding\n\
MatchObject instance. Return None if no position in the string matches."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_split_doc</name></expr></argument>,
<argument><expr>"split(string[, maxsplit = 0]) --&gt; list.\n\
Split string by the occurrences of pattern."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_findall_doc</name></expr></argument>,
<argument><expr>"findall(string[, pos[, endpos]]) --&gt; list.\n\
Return a list of all non-overlapping matches of pattern in string."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_finditer_doc</name></expr></argument>,
<argument><expr>"finditer(string[, pos[, endpos]]) --&gt; iterator.\n\
Return an iterator over all non-overlapping matches for the \n\
RE pattern in string. For each match, the iterator returns a\n\
match object."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_sub_doc</name></expr></argument>,
<argument><expr>"sub(repl, string[, count = 0]) --&gt; newstring\n\
Return the string obtained by replacing the leftmost non-overlapping\n\
occurrences of pattern in string by the replacement repl."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_subn_doc</name></expr></argument>,
<argument><expr>"subn(repl, string[, count = 0]) --&gt; (newstring, number of subs)\n\
Return the tuple (new_string, number_of_subs_made) found by replacing\n\
the leftmost non-overlapping occurrences of pattern with the\n\
replacement repl."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pattern_doc</name></expr></argument>, <argument><expr>"Compiled regular expression objects"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>pattern_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"match"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_match</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>,
<expr><name>pattern_match_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"search"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_search</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>,
<expr><name>pattern_search_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"sub"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_sub</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>,
<expr><name>pattern_sub_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"subn"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_subn</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>,
<expr><name>pattern_subn_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"split"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_split</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>,
<expr><name>pattern_split_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"findall"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_findall</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>,
<expr><name>pattern_findall_doc</name></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &gt;= 0x02020000</expr></cpp:if>
<expr><block>{
<expr>"finditer"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_finditer</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>pattern_finditer_doc</name></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"scanner"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_scanner</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"__copy__"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_copy</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"__deepcopy__"</expr>, <expr>(<name>PyCFunction</name>) <name>pattern_deepcopy</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_getattr</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>pattern_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then>
<return>return <expr><name>res</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"pattern"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>pattern</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"flags"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"groups"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>groups</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"groupindex"</expr></argument>)</argument_list></call> &amp;&amp; <name><name>self</name>-&gt;<name>groupindex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>groupindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>groupindex</name></name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>Pattern_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>, <expr>"_" <name>SRE_MODULE</name> ".SRE_Pattern"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PatternObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>(<name>destructor</name>)<name>pattern_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>pattern_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,
<expr><name>pattern_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PatternObject</name></expr></argument>, <argument><expr><name>weakreflist</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_validate</name><parameter_list>(<param><decl><type><name>PatternObject</name> *</type><name>self</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>_compile</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self_</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PatternObject</name>*</type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>groups</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>groupindex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>indexgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OiO!|nOO"</expr></argument>, <argument><expr>&amp;<name>pattern</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>PyList_Type</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr>&amp;<name>groups</name></expr></argument>,
<argument><expr>&amp;<name>groupindex</name></expr></argument>, <argument><expr>&amp;<name>indexgroup</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>n</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW_VAR</name><argument_list>(<argument><expr><name>PatternObject</name></expr></argument>, <argument><expr>&amp;<name>Pattern_Type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>self</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>codesize</name></name> = <name>n</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name> <init>= <expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name> <init>= <expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> ? (<name>unsigned</name> <name>long</name>)<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call>
: <call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>code</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>SRE_CODE</name>) <name>value</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>unsigned</name> <name>long</name>) <name><name>self</name>-&gt;<name>code</name><index>[<expr><name>i</name></expr>]</index></name> != <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"regular expression code size limit exceeded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>groups</name></name> = <name>groups</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>groupindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>groupindex</name></name> = <name>groupindex</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>indexgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>indexgroup</name></name> = <name>indexgroup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>_validate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name>*) <name>self</name></expr>;</return>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VVERBOSE</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VVERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTRACE</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>printf v</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTRACE</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL</name></cpp:macro> <cpp:value>do { VTRACE(("FAIL: %d\n", __LINE__)); return 0; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OP</name></cpp:macro> <cpp:value>do { VTRACE(("%p: ", code)); if (code &gt;= end) FAIL; op = *code++; VTRACE(("%lu (op)\n", (unsigned long)op)); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ARG</name></cpp:macro> <cpp:value>do { VTRACE(("%p= ", code)); if (code &gt;= end) FAIL; arg = *code++; VTRACE(("%lu (arg)\n", (unsigned long)arg)); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SKIP_ADJ</name><parameter_list>(<param><type><name>adj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { VTRACE(("%p= ", code)); if (code &gt;= end) FAIL; skip = *code; VTRACE(("%lu (skip to %p)\n", (unsigned long)skip, code+skip)); if (code+skip-adj &lt; code || code+skip-adj &gt; end)FAIL; code++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SKIP</name></cpp:macro> <cpp:value>GET_SKIP_ADJ(0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_validate_charset</name><parameter_list>(<param><decl><type><name>SRE_CODE</name> *</type><name>code</name></decl></param>, <param><decl><type><name>SRE_CODE</name> *</type><name>end</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>code</name> &lt; <name>end</name></expr>)</condition> <block>{
<expr_stmt><expr><name>GET_OP</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_OP_NEGATE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>SRE_OP_LITERAL</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_RANGE</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_CHARSET</name></expr>:
<expr_stmt><expr><name>offset</name> = 32/<sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name>+<name>offset</name> &lt; <name>code</name> || <name>code</name>+<name>offset</name> &gt; <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_BIGCHARSET</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = 256/<sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name>+<name>offset</name> &lt; <name>code</name> || <name>code</name>+<name>offset</name> &gt; <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>((<name>unsigned</name> <name>char</name> *)<name>code</name>)<index>[<expr><name>i</name></expr>]</index> &gt;= <name>arg</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>code</name> += <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = <name>arg</name> * 32/<sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name>+<name>offset</name> &lt; <name>code</name> || <name>code</name>+<name>offset</name> &gt; <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_CATEGORY</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>arg</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_CATEGORY_DIGIT</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_NOT_DIGIT</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_SPACE</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_NOT_SPACE</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_WORD</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_NOT_WORD</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_LINEBREAK</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_NOT_LINEBREAK</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_LOC_WORD</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_LOC_NOT_WORD</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_DIGIT</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_DIGIT</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_SPACE</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_SPACE</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_WORD</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_WORD</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_LINEBREAK</name></expr>:
</case><case>case <expr><name>SRE_CATEGORY_UNI_NOT_LINEBREAK</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt>
</default>}</block></switch>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt>
</default>}</block></switch>
}</block></while>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_validate_inner</name><parameter_list>(<param><decl><type><name>SRE_CODE</name> *</type><name>code</name></decl></param>, <param><decl><type><name>SRE_CODE</name> *</type><name>end</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>groups</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>skip</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("code=%p, end=%p\n", <name>code</name>, <name>end</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> &gt; <name>end</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr><name>code</name> &lt; <name>end</name></expr>)</condition> <block>{
<expr_stmt><expr><name>GET_OP</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_OP_MARK</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> &gt; 2*<name>groups</name>+1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("arg=%d, groups=%d\n", (<name>int</name>)<name>arg</name>, (<name>int</name>)<name>groups</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_LITERAL</name></expr>:
</case><case>case <expr><name>SRE_OP_NOT_LITERAL</name></expr>:
</case><case>case <expr><name>SRE_OP_LITERAL_IGNORE</name></expr>:
</case><case>case <expr><name>SRE_OP_NOT_LITERAL_IGNORE</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_SUCCESS</name></expr>:
</case><case>case <expr><name>SRE_OP_FAILURE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>SRE_OP_AT</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>arg</name></expr>)</condition> <block>{
<case>case <expr><name>SRE_AT_BEGINNING</name></expr>:
</case><case>case <expr><name>SRE_AT_BEGINNING_STRING</name></expr>:
</case><case>case <expr><name>SRE_AT_BEGINNING_LINE</name></expr>:
</case><case>case <expr><name>SRE_AT_END</name></expr>:
</case><case>case <expr><name>SRE_AT_END_LINE</name></expr>:
</case><case>case <expr><name>SRE_AT_END_STRING</name></expr>:
</case><case>case <expr><name>SRE_AT_BOUNDARY</name></expr>:
</case><case>case <expr><name>SRE_AT_NON_BOUNDARY</name></expr>:
</case><case>case <expr><name>SRE_AT_LOC_BOUNDARY</name></expr>:
</case><case>case <expr><name>SRE_AT_LOC_NON_BOUNDARY</name></expr>:
</case><case>case <expr><name>SRE_AT_UNI_BOUNDARY</name></expr>:
</case><case>case <expr><name>SRE_AT_UNI_NON_BOUNDARY</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt>
</default>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ANY</name></expr>:
</case><case>case <expr><name>SRE_OP_ANY_ALL</name></expr>:
<break>break;</break>
</case><case>case <expr><name>SRE_OP_IN</name></expr>:
</case><case>case <expr><name>SRE_OP_IN_IGNORE</name></expr>:
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>_validate_charset</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-2</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>code</name><index>[<expr><name>skip</name>-2</expr>]</index></name> != <name>SRE_OP_FAILURE</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_INFO</name></expr>: <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name> *</type><name>newcode</name></decl>;</decl_stmt>
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newcode</name> = <name>code</name>+<name>skip</name>-1</expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> = <name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>flags</name> &amp; ~(<name>SRE_INFO_PREFIX</name> |
<name>SRE_INFO_LITERAL</name> |
<name>SRE_INFO_CHARSET</name>)) != 0</expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>flags</name> &amp; <name>SRE_INFO_PREFIX</name>) &amp;&amp;
(<name>flags</name> &amp; <name>SRE_INFO_CHARSET</name>)</expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>flags</name> &amp; <name>SRE_INFO_LITERAL</name>) &amp;&amp;
!(<name>flags</name> &amp; <name>SRE_INFO_PREFIX</name>)</expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_INFO_PREFIX</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>prefix_len</name></decl>, <decl><type ref="prev"/><name>prefix_skip</name></decl>;</decl_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_len</name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_skip</name> = <name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name>+<name>prefix_len</name> &lt; <name>code</name> || <name>code</name>+<name>prefix_len</name> &gt; <name>newcode</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>prefix_len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name>+<name>prefix_len</name> &lt; <name>code</name> || <name>code</name>+<name>prefix_len</name> &gt; <name>newcode</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>prefix_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>code</name><index>[<expr><name>i</name></expr>]</index></name> &gt;= <name>prefix_len</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>code</name> += <name>prefix_len</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>SRE_INFO_CHARSET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>_validate_charset</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>newcode</name>-1</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>newcode</name><index>[<expr>-1</expr>]</index></name> != <name>SRE_OP_FAILURE</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> = <name>newcode</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>code</name> != <name>newcode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("code=%p, newcode=%p\n", <name>code</name>, <name>newcode</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_BRANCH</name></expr>: <block>{
<decl_stmt><decl><type><name>SRE_CODE</name> *</type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>skip</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-3</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-3</expr>;</expr_stmt>
<expr_stmt><expr><name>GET_OP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> != <name>SRE_OP_JUMP</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>target</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>target</name> = <name>code</name>+<name>skip</name>-1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>code</name>+<name>skip</name>-1 != <name>target</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if></else></if>
}</block></for>
}</block>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_REPEAT_ONE</name></expr>:
</case><case>case <expr><name>SRE_OP_MIN_REPEAT_ONE</name></expr>: <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> = <name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>min</name> &gt; <name>max</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>max</name> &gt; 65535</expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-4</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-4</expr>;</expr_stmt>
<expr_stmt><expr><name>GET_OP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> != <name>SRE_OP_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_REPEAT</name></expr>: <block>{
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> = <name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>min</name> &gt; <name>max</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>max</name> &gt; 65535</expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-3</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-3</expr>;</expr_stmt>
<expr_stmt><expr><name>GET_OP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> != <name>SRE_OP_MAX_UNTIL</name> &amp;&amp; <name>op</name> != <name>SRE_OP_MIN_UNTIL</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_GROUPREF</name></expr>:
</case><case>case <expr><name>SRE_OP_GROUPREF_IGNORE</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> &gt;= <name>groups</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_GROUPREF_EXISTS</name></expr>:
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> &gt;= <name>groups</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>GET_SKIP_ADJ</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name>--</expr>;</expr_stmt>
<if>if <condition>(<expr><name>skip</name> &gt;= 3 &amp;&amp; <name>code</name>+<name>skip</name>-3 &gt;= <name>code</name> &amp;&amp;
<name><name>code</name><index>[<expr><name>skip</name>-3</expr>]</index></name> == <name>SRE_OP_JUMP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("both then and else parts present\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name>+1</expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-3</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-2</expr>;</expr_stmt>
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-1</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("only a then part present\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name>+1</expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-1</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-1</expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>SRE_OP_ASSERT</name></expr>:
</case><case>case <expr><name>SRE_OP_ASSERT_NOT</name></expr>:
<expr_stmt><expr><name>GET_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GET_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name>--</expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> &amp; 0x80000000</expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name>+1</expr></argument>, <argument><expr><name>code</name>+<name>skip</name>-2</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>code</name> += <name>skip</name>-2</expr>;</expr_stmt>
<expr_stmt><expr><name>GET_OP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> != <name>SRE_OP_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt>
</default>}</block></switch>
}</block></while>
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("okay\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_validate_outer</name><parameter_list>(<param><decl><type><name>SRE_CODE</name> *</type><name>code</name></decl></param>, <param><decl><type><name>SRE_CODE</name> *</type><name>end</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>groups</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>groups</name> &lt; 0 || <name>groups</name> &gt; 100 || <name>code</name> &gt;= <name>end</name> || <name><name>end</name><index>[<expr>-1</expr>]</index></name> != <name>SRE_OP_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>FAIL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>groups</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>groups</name> = 100</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>_validate_inner</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>end</name>-1</expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_validate</name><parameter_list>(<param><decl><type><name>PatternObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>_validate_outer</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>code</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>code</name></name>+<name><name>self</name>-&gt;<name>codesize</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>groups</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"invalid SRE code"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else
<expr_stmt><expr><call><name>VTRACE</name><argument_list>(<argument><expr>("Success!\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>match_dealloc</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_getslice_by_index</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>def</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <name><name>self</name>-&gt;<name>groups</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"no such group"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>index</name> *= 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>string</name></name> == <name>Py_None</name> || <name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>def</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PySequence_GetSlice</name><argument_list>(
<argument><expr><name><name>self</name>-&gt;<name>string</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>+1</expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>match_getindex</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>index</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>groupindex</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>index</name> = <call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>groupindex</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>index</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>i</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<return>return <expr><name>i</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_getslice</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>index</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>def</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>match_getslice_by_index</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>match_getindex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_expand</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>ptemplate</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>call</name><argument_list>(
<argument><expr><name>SRE_PY_MODULE</name></expr></argument>, <argument><expr>"_expand"</expr></argument>,
<argument><expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>ptemplate</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_group</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>result</name> = <call><name>match_getslice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Py_False</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><name>result</name> = <call><name>match_getslice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name> <init>= <expr><call><name>match_getslice</name><argument_list>(
<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_groups</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>def</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"default"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|O:groups"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>def</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>groups</name></name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>index</name> = 1</expr>;</init> <condition><expr><name>index</name> &lt; <name><name>self</name>-&gt;<name>groups</name></name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> = <call><name>match_getslice_by_index</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name>-1</expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_groupdict</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>def</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>*</type> <name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{ <expr>"default"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|O:groupdict"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>def</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name> || !<name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>groupindex</name></name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<expr_stmt><expr><name>keys</name> = <call><name>PyMapping_Keys</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>groupindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>keys</name></expr>)</condition><then>
<goto>goto <name>failed</name>;</goto></then></if>
<for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition><expr><name>index</name> &lt; <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>key</name></expr>)</condition><then>
<goto>goto <name>failed</name>;</goto></then></if>
<expr_stmt><expr><name>value</name> = <call><name>match_getslice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<goto>goto <name>failed</name>;</goto></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_start</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>index_</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"start"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>index_</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>index</name> = <call><name>match_getindex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>index_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <name><name>self</name>-&gt;<name>groups</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"no such group"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>*2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_end</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>index_</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"end"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>index_</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>index</name> = <call><name>match_getindex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>index_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <name><name>self</name>-&gt;<name>groups</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"no such group"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>*2+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>LOCAL</name><argument_list>(<argument>PyObject*</argument>)</argument_list></macro>
<macro><name>_pair</name><argument_list>(<argument>Py_ssize_t i1</argument>, <argument>Py_ssize_t i2</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pair</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>pair</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>item</name> = <call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
<goto>goto <name>error</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pair</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_span</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>index_</name> <init>= <expr><name>Py_False</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"span"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>index_</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>index</name> = <call><name>match_getindex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>index_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <name><name>self</name>-&gt;<name>groups</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"no such group"</expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>_pair</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>*2</expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>*2+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_regs</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name>regs</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>regs</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition><expr><name>index</name> &lt; <name><name>self</name>-&gt;<name>groups</name></name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>item</name> = <call><name>_pair</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>*2</expr>]</index></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>mark</name><index>[<expr><name>index</name>*2+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>item</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>regs</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>regs</name></name> = <name>regs</name></expr>;</expr_stmt>
<return>return <expr><name>regs</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_copy</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BUILTIN_COPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>MatchObject</name>*</type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>slots</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>slots</name> = 2 * (<name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>groups</name></name>+1)</expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = <call><name>PyObject_NEW_VAR</name><argument_list>(<argument><expr><name>MatchObject</name></expr></argument>, <argument><expr>&amp;<name>Match_Type</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>offset</name> = <call><name>offsetof</name><argument_list>(<argument><expr><name>MatchObject</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name>*) <name>copy</name> + <name>offset</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>self</name> + <name>offset</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MatchObject</name></expr></argument>)</argument_list></sizeof> + <name>slots</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></sizeof> - <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>copy</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"cannot copy this match object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_deepcopy</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>memo</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BUILTIN_COPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>MatchObject</name>*</type> <name>copy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy</name> = (<name>MatchObject</name>*) <call><name>match_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>deepcopy</name><argument_list>(<argument><expr>(<name>PyObject</name>**) &amp;<name><name>copy</name>-&gt;<name>pattern</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call> ||
!<call><name>deepcopy</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>string</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call> ||
!<call><name>deepcopy</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>regs</name></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"cannot deepcopy this match object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>match_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"group"</expr>, <expr>(<name>PyCFunction</name>) <name>match_group</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"start"</expr>, <expr>(<name>PyCFunction</name>) <name>match_start</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"end"</expr>, <expr>(<name>PyCFunction</name>) <name>match_end</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"span"</expr>, <expr>(<name>PyCFunction</name>) <name>match_span</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"groups"</expr>, <expr>(<name>PyCFunction</name>) <name>match_groups</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<expr><block>{<expr>"groupdict"</expr>, <expr>(<name>PyCFunction</name>) <name>match_groupdict</name></expr>, <expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>}</block></expr>,
<expr><block>{<expr>"expand"</expr>, <expr>(<name>PyCFunction</name>) <name>match_expand</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{<expr>"__copy__"</expr>, <expr>(<name>PyCFunction</name>) <name>match_copy</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"__deepcopy__"</expr>, <expr>(<name>PyCFunction</name>) <name>match_deepcopy</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>match_getattr</name><parameter_list>(<param><decl><type><name>MatchObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>match_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then>
<return>return <expr><name>res</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"lastindex"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>lastindex</name></name> &gt;= 0</expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>lastindex</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"lastgroup"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>indexgroup</name></name> &amp;&amp; <name><name>self</name>-&gt;<name>lastindex</name></name> &gt;= 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(
<argument><expr><name><name>self</name>-&gt;<name>pattern</name>-&gt;<name>indexgroup</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>lastindex</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"string"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>string</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>string</name></name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"regs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>regs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>regs</name></name></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>match_regs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"re"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name><name>self</name>-&gt;<name>pattern</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"pos"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pos</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"endpos"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>endpos</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>Match_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>, <expr>"_" <name>SRE_MODULE</name> ".SRE_Match"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MatchObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>(<name>destructor</name>)<name>match_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>match_getattr</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_new_match</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>pattern</name></decl></param>, <param><decl><type><name>SRE_STATE</name>*</type> <name>state</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MatchObject</name>*</type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>match</name> = <call><name>PyObject_NEW_VAR</name><argument_list>(<argument><expr><name>MatchObject</name></expr></argument>, <argument><expr>&amp;<name>Match_Type</name></expr></argument>,
<argument><expr>2*(<name><name>pattern</name>-&gt;<name>groups</name></name>+1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>match</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>string</name></name> = <name><name>state</name>-&gt;<name>string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>regs</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>groups</name></name> = <name><name>pattern</name>-&gt;<name>groups</name></name>+1</expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> = (<name>char</name>*) <name><name>state</name>-&gt;<name>beginning</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name><name>state</name>-&gt;<name>charsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>mark</name><index>[<expr>0</expr>]</index></name> = ((<name>char</name>*) <name><name>state</name>-&gt;<name>start</name></name> - <name>base</name>) / <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>mark</name><index>[<expr>1</expr>]</index></name> = ((<name>char</name>*) <name><name>state</name>-&gt;<name>ptr</name></name> - <name>base</name>) / <name>n</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>pattern</name>-&gt;<name>groups</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>+=2</expr></incr>)
<if>if <condition>(<expr><name>j</name>+1 &lt;= <name><name>state</name>-&gt;<name>lastmark</name></name> &amp;&amp; <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>j</name></expr>]</index></name> &amp;&amp; <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>j</name>+1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>match</name>-&gt;<name>mark</name><index>[<expr><name>j</name>+2</expr>]</index></name> = ((<name>char</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>j</name></expr>]</index></name> - <name>base</name>) / <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>mark</name><index>[<expr><name>j</name>+3</expr>]</index></name> = ((<name>char</name>*) <name><name>state</name>-&gt;<name>mark</name><index>[<expr><name>j</name>+1</expr>]</index></name> - <name>base</name>) / <name>n</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>match</name>-&gt;<name>mark</name><index>[<expr><name>j</name>+2</expr>]</index></name> = <name><name>match</name>-&gt;<name>mark</name><index>[<expr><name>j</name>+3</expr>]</index></name> = -1</expr>;</expr_stmt></else></if></for>
<expr_stmt><expr><name><name>match</name>-&gt;<name>pos</name></name> = <name><name>state</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>endpos</name></name> = <name><name>state</name>-&gt;<name>endpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>lastindex</name></name> = <name><name>state</name>-&gt;<name>lastindex</name></name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>match</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>pattern_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>scanner_dealloc</name><parameter_list>(<param><decl><type><name>ScannerObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>state_fini</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>scanner_match</name><parameter_list>(<param><decl><type><name>ScannerObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name>*</type> <name>state</name> <init>= <expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>state_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>state</name>-&gt;<name>start</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_match</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_umatch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>match</name> = <call><name>pattern_new_match</name><argument_list>(<argument><expr>(<name>PatternObject</name>*) <name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>,
<argument><expr><name>state</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0 || <name><name>state</name>-&gt;<name>ptr</name></name> == <name><name>state</name>-&gt;<name>start</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name><name>state</name>-&gt;<name>ptr</name></name> + <name><name>state</name>-&gt;<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <name><name>state</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt></else></if>
<return>return <expr><name>match</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>scanner_search</name><parameter_list>(<param><decl><type><name>ScannerObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SRE_STATE</name>*</type> <name>state</name> <init>= <expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>state_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ptr</name></name> = <name><name>state</name>-&gt;<name>start</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>charsize</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>sre_search</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>sre_usearch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>PatternObject_GetCode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>match</name> = <call><name>pattern_new_match</name><argument_list>(<argument><expr>(<name>PatternObject</name>*) <name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>,
<argument><expr><name>state</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0 || <name><name>state</name>-&gt;<name>ptr</name></name> == <name><name>state</name>-&gt;<name>start</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <call>(<name>void</name>*) <argument_list>(<argument><expr>(<name>char</name>*) <name><name>state</name>-&gt;<name>ptr</name></name> + <name><name>state</name>-&gt;<name>charsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>state</name>-&gt;<name>start</name></name> = <name><name>state</name>-&gt;<name>ptr</name></name></expr>;</expr_stmt></else></if>
<return>return <expr><name>match</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>scanner_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"match"</expr>, <expr>(<name>PyCFunction</name>) <name>scanner_match</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"search"</expr>, <expr>(<name>PyCFunction</name>) <name>scanner_search</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>scanner_getattr</name><parameter_list>(<param><decl><type><name>ScannerObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>scanner_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name>*) <name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then>
<return>return <expr><name>res</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"pattern"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>pattern</name></name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>Scanner_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>, <expr>"_" <name>SRE_MODULE</name> ".SRE_Scanner"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScannerObject</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
<expr>(<name>destructor</name>)<name>scanner_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>scanner_getattr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>pattern_scanner</name><parameter_list>(<param><decl><type><name>PatternObject</name>*</type> <name>pattern</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ScannerObject</name>*</type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>end</name> <init>= <expr><name>PY_SSIZE_T_MAX</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|nn:scanner"</expr></argument>, <argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>ScannerObject</name></expr></argument>, <argument><expr>&amp;<name>Scanner_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>self</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>string</name> = <call><name>state_init</name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>string</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pattern</name></name> = (<name>PyObject</name>*) <name>pattern</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*) <name>self</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>_functions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"compile"</expr>, <expr><name>_compile</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getcodesize"</expr>, <expr><name>sre_codesize</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getlower"</expr>, <expr><name>sre_getlower</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_VERSION_HEX</name> &lt; 0x02030000</expr></cpp:if>
<macro><name>DL_EXPORT</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>init_sre</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>PyMODINIT_FUNC</name></type> <name>init_sre</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Pattern_Type</name>.<name>ob_type</name></name> = <name><name>Match_Type</name>.<name>ob_type</name></name> =
<name><name>Scanner_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_" <name>SRE_MODULE</name></expr></argument>, <argument><expr><name>_functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>SRE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"MAGIC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRE_CODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CODESIZE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>x</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>copyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"copyright"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
