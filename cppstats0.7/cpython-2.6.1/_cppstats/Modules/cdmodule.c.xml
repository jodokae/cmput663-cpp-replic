<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/cdmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cdaudio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCALLBACKS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>CDPLAYER</name> *</type><name>ob_cdplayer</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdplayerobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>CdError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_allowremoval</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":allowremoval"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CDallowremoval</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_preventremoval</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":preventremoval"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CDpreventremoval</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_bestreadsize</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":bestreadsize"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <call><name>CDbestreadsize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_close</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":close"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDclose</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_eject</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":eject"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDeject</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"eject failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_getstatus</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":getstatus"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ii(iii)(iii)(iii)iiii)"</expr></argument>, <argument><expr><name><name>status</name>.<name>state</name></name></expr></argument>,
<argument><expr><name><name>status</name>.<name>track</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>min</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>sec</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>frame</name></name></expr></argument>,
<argument><expr><name><name>status</name>.<name>abs_min</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>abs_sec</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>abs_frame</name></name></expr></argument>,
<argument><expr><name><name>status</name>.<name>total_min</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>total_sec</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>total_frame</name></name></expr></argument>,
<argument><expr><name><name>status</name>.<name>first</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>last</name></name></expr></argument>, <argument><expr><name><name>status</name>.<name>scsi_audio</name></name></expr></argument>,
<argument><expr><name><name>status</name>.<name>cur_block</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_gettrackinfo</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDTRACKINFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:gettrackinfo"</expr></argument>, <argument><expr>&amp;<name>track</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDgettrackinfo</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"gettrackinfo failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"((iii)(iii))"</expr></argument>,
<argument><expr><name><name>info</name>.<name>start_min</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>start_sec</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>start_frame</name></name></expr></argument>,
<argument><expr><name><name>info</name>.<name>total_min</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>total_sec</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>total_frame</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_msftoblock</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>, <decl><type ref="prev"/><name>frame</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii:msftoblock"</expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>, <argument><expr>&amp;<name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <call><name>CDmsftoblock</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>,
<argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_play</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii:play"</expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDplay</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"play failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_playabs</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>, <decl><type ref="prev"/><name>frame</name></decl>, <decl><type ref="prev"/><name>play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiii:playabs"</expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>, <argument><expr>&amp;<name>frame</name></expr></argument>, <argument><expr>&amp;<name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDplayabs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"playabs failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_playtrack</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii:playtrack"</expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDplaytrack</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"playtrack failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_playtrackabs</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>track</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>, <decl><type ref="prev"/><name>frame</name></decl>, <decl><type ref="prev"/><name>play</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiiii:playtrackabs"</expr></argument>, <argument><expr>&amp;<name>track</name></expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>,
<argument><expr>&amp;<name>frame</name></expr></argument>, <argument><expr>&amp;<name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDplaytrackabs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>play</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"playtrackabs failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_readda</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>numframes</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:readda"</expr></argument>, <argument><expr>&amp;<name>numframes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>numframes</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>CDFRAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>n</name> = <call><name>CDreadda</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>,
<argument><expr>(<name>CDFRAME</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numframes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &lt; <name>numframes</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>n</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>CDFRAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_seek</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>, <decl><type ref="prev"/><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>PyTryBlock</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii:seek"</expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>, <argument><expr>&amp;<name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>PyTryBlock</name> = <call><name>CDseek</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>PyTryBlock</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>PyTryBlock</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_seektrack</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>PyTryBlock</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:seektrack"</expr></argument>, <argument><expr>&amp;<name>track</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>PyTryBlock</name> = <call><name>CDseektrack</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>PyTryBlock</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>PyTryBlock</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_seekblock</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>PyTryBlock</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l:seekblock"</expr></argument>, <argument><expr>&amp;<name>PyTryBlock</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>PyTryBlock</name> = <call><name>CDseekblock</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr><name>PyTryBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>PyTryBlock</name> == (<name>unsigned</name> <name>long</name>) -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>PyTryBlock</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_stop</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":stop"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDstop</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"stop failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_togglepause</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>CDSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":togglepause"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>CDtogglepause</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>CDgetstatus</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>status</name>.<name>state</name></name> == <name>CD_NODISC</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"no disc in player"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"togglepause failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>cdplayer_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"allowremoval"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_allowremoval</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bestreadsize"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_bestreadsize</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_close</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"eject"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_eject</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getstatus"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_getstatus</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gettrackinfo"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_gettrackinfo</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"msftoblock"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_msftoblock</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"play"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_play</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"playabs"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_playabs</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"playtrack"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_playtrack</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"playtrackabs"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_playtrackabs</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"preventremoval"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_preventremoval</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"readda"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_readda</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"seek"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_seek</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"seekblock"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_seekblock</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"seektrack"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_seektrack</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"stop"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_stop</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"togglepause"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_togglepause</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cdplayer_dealloc</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>CDclose</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cdplayer_getattr</name><parameter_list>(<param><decl><type><name>cdplayerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_cdplayer</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"no player active"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>cdplayer_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>CdPlayertype</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"cd.cdplayer"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdplayerobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>cdplayer_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>cdplayer_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newcdplayerobject</name><parameter_list>(<param><decl><type><name>CDPLAYER</name> *</type><name>cdp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cdplayerobject</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>cdplayerobject</name></expr></argument>, <argument><expr>&amp;<name>CdPlayertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_cdplayer</name></name> = <name>cdp</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *) <name>p</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_open</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>dev</name></decl>, *<decl><type ref="prev"/><name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDPLAYER</name> *</type><name>cdp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dev</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>direction</name> = "r"</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|zs:open"</expr></argument>, <argument><expr>&amp;<name>dev</name></expr></argument>, <argument><expr>&amp;<name>direction</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>cdp</name> = <call><name>CDopen</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cdp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>newcdplayerobject</name><argument_list>(<argument><expr><name>cdp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>CDPARSER</name> *</type><name>ob_cdparser</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_cdcallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_cdcallbackarg</name></decl>;</decl_stmt>
}</block> <decl><name><name>ob_cdcallbacks</name><index>[<expr><name>NCALLBACKS</name></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>cdparserobject</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CD_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>CDDATATYPES</name></type> <name>type</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>args</name></decl>, *<decl><type ref="prev"/><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdparserobject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = (<name>cdparserobject</name> *) <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallbackarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallbackarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>cd_audio</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CDDA_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>cd_pnum</name></expr>:
</case><case>case <expr><name>cd_index</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>((<name>CDPROGNUM</name> *) <name>data</name>)-&gt;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>cd_ptime</name></expr>:
</case><case>case <expr><name>cd_atime</name></expr>:
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr</name></cpp:macro> <cpp:value>((struct cdtimecode *) data)</cpp:value></cpp:define>
<expr_stmt><expr><name>v</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iii)"</expr></argument>,
<argument><expr><name><name>ptr</name>-&gt;<name>mhi</name></name> * 10 + <name><name>ptr</name>-&gt;<name>mlo</name></name></expr></argument>,
<argument><expr><name><name>ptr</name>-&gt;<name>shi</name></name> * 10 + <name><name>ptr</name>-&gt;<name>slo</name></name></expr></argument>,
<argument><expr><name><name>ptr</name>-&gt;<name>fhi</name></name> * 10 + <name><name>ptr</name>-&gt;<name>flo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ptr</name></cpp:undef>
<break>break;</break>
</case><case>case <expr><name>cd_catalog</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>13</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 13</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr>*<name>p</name>++ = ((<name>char</name> *) <name>data</name>)<index>[<expr><name>i</name></expr>]</index> + '0'</expr>;</expr_stmt></for>
<break>break;</break>
</case><case>case <expr><name>cd_ident</name></expr>:
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ptr</name></cpp:macro> <cpp:value>((struct cdident *) data)</cpp:value></cpp:define>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDsbtoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>country</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDsbtoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ptr</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += 3</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>year</name><index>[<expr>0</expr>]</index></name> + '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>year</name><index>[<expr>1</expr>]</index></name> + '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>serial</name><index>[<expr>0</expr>]</index></name> + '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>serial</name><index>[<expr>1</expr>]</index></name> + '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>serial</name><index>[<expr>2</expr>]</index></name> + '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>serial</name><index>[<expr>3</expr>]</index></name> + '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>ptr</name>-&gt;<name>serial</name><index>[<expr>4</expr>]</index></name> + '0'</expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ptr</name></cpp:undef>
<break>break;</break>
</case><case>case <expr><name>cd_control</name></expr>:
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) *((<name>unchar</name> *) <name>data</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyEval_CallObject</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallback</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_deleteparser</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":deleteparser"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CDdeleteparser</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCALLBACKS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallback</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallbackarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallbackarg</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_parseframe</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cdfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDFRAME</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:parseframe"</expr></argument>, <argument><expr>&amp;<name>cdfp</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>length</name> % <sizeof>sizeof<argument_list>(<argument><expr><name>CDFRAME</name></expr></argument>)</argument_list></sizeof> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bad length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = (<name>CDFRAME</name> *) <name>cdfp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>length</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><call><name>CDparseframe</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> -= <sizeof>sizeof<argument_list>(<argument><expr><name>CDFRAME</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></while>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_removecallback</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:removecallback"</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>type</name> &lt; 0 || <name>type</name> &gt;= <name>NCALLBACKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bad type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>CDremovecallback</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>, <argument><expr>(<name>CDDATATYPES</name>) <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallback</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallbackarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallbackarg</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_resetparser</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":resetparser"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CDresetparser</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_addcallback</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>func</name></decl>, *<decl><type ref="prev"/><name>funcarg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iOO:addcallback"</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>func</name></expr></argument>, <argument><expr>&amp;<name>funcarg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>type</name> &lt; 0 || <name>type</name> &gt;= <name>NCALLBACKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDsetcallback</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CDaddcallback</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>, <argument><expr>(<name>CDDATATYPES</name>) <name>type</name></expr></argument>, <argument><expr><name>CD_callback</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>CDsetcallback</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>, <argument><expr>(<name>CDDATATYPES</name>) <name>type</name></expr></argument>, <argument><expr><name>CD_callback</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallback</name> = <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallbackarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>funcarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>type</name></expr>]</index></name>.<name>ob_cdcallbackarg</name> = <name>funcarg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>cdparser_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"addcallback"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_addcallback</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"deleteparser"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_deleteparser</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"parseframe"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_parseframe</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"removecallback"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_removecallback</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"resetparser"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_resetparser</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setcallback"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_addcallback</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cdparser_dealloc</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCALLBACKS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallback</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallbackarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallbackarg</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>CDdeleteparser</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cdparser_getattr</name><parameter_list>(<param><decl><type><name>cdparserobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_cdparser</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"no parser active"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>cdparser_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>CdParsertype</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"cd.cdparser"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdparserobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>cdparser_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>cdparser_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newcdparserobject</name><parameter_list>(<param><decl><type><name>CDPARSER</name> *</type><name>cdp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cdparserobject</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>cdparserobject</name></expr></argument>, <argument><expr>&amp;<name>CdParsertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_cdparser</name></name> = <name>cdp</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCALLBACKS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallback</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>ob_cdcallbacks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ob_cdcallbackarg</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr>(<name>PyObject</name> *) <name>p</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_createparser</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>CDPARSER</name> *</type><name>cdp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":createparser"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>cdp</name> = <call><name>CDcreateparser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cdp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>CdError</name></expr></argument>, <argument><expr>"createparser failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>newcdparserobject</name><argument_list>(<argument><expr><name>cdp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>CD_msftoframe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>, <decl><type ref="prev"/><name>frame</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii:msftoframe"</expr></argument>, <argument><expr>&amp;<name>min</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>, <argument><expr>&amp;<name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <call><name>CDmsftoframe</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>CD_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"open"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_open</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"createparser"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_createparser</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"msftoframe"</expr>, <expr>(<name>PyCFunction</name>)<name>CD_msftoframe</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>initcd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the cd module has been removed in "
"Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"cd"</expr></argument>, <argument><expr><name>CD_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CdError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"cd.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>CdError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"audio"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_audio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"pnum"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_pnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"index"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ptime"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_ptime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"atime"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_atime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"catalog"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_catalog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ident"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_ident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"control"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>cd_control</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"DATASIZE"</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CDDA_DATASIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"BLOCKSIZE"</expr></argument>,
<argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CDDA_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ERROR"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"NODISC"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_NODISC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"READY"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PLAYING"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_PLAYING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"PAUSED"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_PAUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"STILL"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_STILL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CD_CDROM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CDROM"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>CD_CDROM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
