<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/errnomodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>errno_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_inscode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>d</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>de</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>code</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>u</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>u</name> &amp;&amp; <name>v</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>de</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>errno__doc__</name></expr></argument>,
<argument><expr>"This module makes available standard errno system symbols.\n\
\n\
The value of each symbol is the corresponding integer value,\n\
e.g., on most systems, errno.ENOENT equals the integer 2.\n\
\n\
The dictionary errno.errorcode maps numeric codes to symbol names,\n\
e.g., errno.errorcode[2] could be the string 'ENOENT'.\n\
\n\
Symbols that are not relevant to the underlying system are not defined.\n\
\n\
To map error codes to error messages, use the function os.strerror(),\n\
e.g. os.strerror(2) could return 'No such file or directory'."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initerrno</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>de</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"errno"</expr></argument>, <argument><expr><name>errno_methods</name></expr></argument>, <argument><expr><name>errno__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>d</name> || !<name>de</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"errorcode"</expr></argument>, <argument><expr><name>de</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inscode</name><parameter_list>(<param><type><name>d</name></type></param>, <param><type><name>ds</name></type></param>, <param><type><name>de</name></type></param>, <param><type><name>name</name></type></param>, <param><type><name>code</name></type></param>, <param><type><name>comment</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_inscode(d, de, name, code)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENODEV"</expr></argument>, <argument><expr><name>ENODEV</name></expr></argument>, <argument><expr>"No such device"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOCSI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOCSI"</expr></argument>, <argument><expr><name>ENOCSI</name></expr></argument>, <argument><expr>"No CSI structure available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EHOSTUNREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EHOSTUNREACH"</expr></argument>, <argument><expr><name>EHOSTUNREACH</name></expr></argument>, <argument><expr>"No route to host"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEHOSTUNREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EHOSTUNREACH"</expr></argument>, <argument><expr><name>WSAEHOSTUNREACH</name></expr></argument>, <argument><expr>"No route to host"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOMSG"</expr></argument>, <argument><expr><name>ENOMSG</name></expr></argument>, <argument><expr>"No message of desired type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EUCLEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EUCLEAN"</expr></argument>, <argument><expr><name>EUCLEAN</name></expr></argument>, <argument><expr>"Structure needs cleaning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EL2NSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EL2NSYNC"</expr></argument>, <argument><expr><name>EL2NSYNC</name></expr></argument>, <argument><expr>"Level 2 not synchronized"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EL2HLT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EL2HLT"</expr></argument>, <argument><expr><name>EL2HLT</name></expr></argument>, <argument><expr>"Level 2 halted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENODATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENODATA"</expr></argument>, <argument><expr><name>ENODATA</name></expr></argument>, <argument><expr>"No data available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTBLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTBLK"</expr></argument>, <argument><expr><name>ENOTBLK</name></expr></argument>, <argument><expr>"Block device required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOSYS"</expr></argument>, <argument><expr><name>ENOSYS</name></expr></argument>, <argument><expr>"Function not implemented"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPIPE"</expr></argument>, <argument><expr><name>EPIPE</name></expr></argument>, <argument><expr>"Broken pipe"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EINVAL"</expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr>"Invalid argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEINVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EINVAL"</expr></argument>, <argument><expr><name>WSAEINVAL</name></expr></argument>, <argument><expr>"Invalid argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EOVERFLOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EOVERFLOW"</expr></argument>, <argument><expr><name>EOVERFLOW</name></expr></argument>, <argument><expr>"Value too large for defined data type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EADV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EADV"</expr></argument>, <argument><expr><name>EADV</name></expr></argument>, <argument><expr>"Advertise error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EINTR"</expr></argument>, <argument><expr><name>EINTR</name></expr></argument>, <argument><expr>"Interrupted system call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EINTR"</expr></argument>, <argument><expr><name>WSAEINTR</name></expr></argument>, <argument><expr>"Interrupted system call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EUSERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EUSERS"</expr></argument>, <argument><expr><name>EUSERS</name></expr></argument>, <argument><expr>"Too many users"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEUSERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EUSERS"</expr></argument>, <argument><expr><name>WSAEUSERS</name></expr></argument>, <argument><expr>"Too many users"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTEMPTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTEMPTY"</expr></argument>, <argument><expr><name>ENOTEMPTY</name></expr></argument>, <argument><expr>"Directory not empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOTEMPTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTEMPTY"</expr></argument>, <argument><expr><name>WSAENOTEMPTY</name></expr></argument>, <argument><expr>"Directory not empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOBUFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOBUFS"</expr></argument>, <argument><expr><name>ENOBUFS</name></expr></argument>, <argument><expr>"No buffer space available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOBUFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOBUFS"</expr></argument>, <argument><expr><name>WSAENOBUFS</name></expr></argument>, <argument><expr>"No buffer space available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPROTO"</expr></argument>, <argument><expr><name>EPROTO</name></expr></argument>, <argument><expr>"Protocol error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EREMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EREMOTE"</expr></argument>, <argument><expr><name>EREMOTE</name></expr></argument>, <argument><expr>"Object is remote"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEREMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EREMOTE"</expr></argument>, <argument><expr><name>WSAEREMOTE</name></expr></argument>, <argument><expr>"Object is remote"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENAVAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENAVAIL"</expr></argument>, <argument><expr><name>ENAVAIL</name></expr></argument>, <argument><expr>"No XENIX semaphores available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECHILD"</expr></argument>, <argument><expr><name>ECHILD</name></expr></argument>, <argument><expr>"No child processes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELOOP"</expr></argument>, <argument><expr><name>ELOOP</name></expr></argument>, <argument><expr>"Too many symbolic links encountered"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAELOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELOOP"</expr></argument>, <argument><expr><name>WSAELOOP</name></expr></argument>, <argument><expr>"Too many symbolic links encountered"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXDEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EXDEV"</expr></argument>, <argument><expr><name>EXDEV</name></expr></argument>, <argument><expr>"Cross-device link"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>E2BIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"E2BIG"</expr></argument>, <argument><expr><name>E2BIG</name></expr></argument>, <argument><expr>"Arg list too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESRCH"</expr></argument>, <argument><expr><name>ESRCH</name></expr></argument>, <argument><expr>"No such process"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EMSGSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EMSGSIZE"</expr></argument>, <argument><expr><name>EMSGSIZE</name></expr></argument>, <argument><expr>"Message too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEMSGSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EMSGSIZE"</expr></argument>, <argument><expr><name>WSAEMSGSIZE</name></expr></argument>, <argument><expr>"Message too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EAFNOSUPPORT"</expr></argument>, <argument><expr><name>EAFNOSUPPORT</name></expr></argument>, <argument><expr>"Address family not supported by protocol"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EAFNOSUPPORT"</expr></argument>, <argument><expr><name>WSAEAFNOSUPPORT</name></expr></argument>, <argument><expr>"Address family not supported by protocol"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADR"</expr></argument>, <argument><expr><name>EBADR</name></expr></argument>, <argument><expr>"Invalid request descriptor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EHOSTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EHOSTDOWN"</expr></argument>, <argument><expr><name>EHOSTDOWN</name></expr></argument>, <argument><expr>"Host is down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEHOSTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EHOSTDOWN"</expr></argument>, <argument><expr><name>WSAEHOSTDOWN</name></expr></argument>, <argument><expr>"Host is down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPFNOSUPPORT"</expr></argument>, <argument><expr><name>EPFNOSUPPORT</name></expr></argument>, <argument><expr>"Protocol family not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPFNOSUPPORT"</expr></argument>, <argument><expr><name>WSAEPFNOSUPPORT</name></expr></argument>, <argument><expr>"Protocol family not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOPROTOOPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOPROTOOPT"</expr></argument>, <argument><expr><name>ENOPROTOOPT</name></expr></argument>, <argument><expr>"Protocol not available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOPROTOOPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOPROTOOPT"</expr></argument>, <argument><expr><name>WSAENOPROTOOPT</name></expr></argument>, <argument><expr>"Protocol not available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBUSY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBUSY"</expr></argument>, <argument><expr><name>EBUSY</name></expr></argument>, <argument><expr>"Device or resource busy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EWOULDBLOCK"</expr></argument>, <argument><expr><name>EWOULDBLOCK</name></expr></argument>, <argument><expr>"Operation would block"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EWOULDBLOCK"</expr></argument>, <argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>, <argument><expr>"Operation would block"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADFD"</expr></argument>, <argument><expr><name>EBADFD</name></expr></argument>, <argument><expr>"File descriptor in bad state"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDOTDOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDOTDOT"</expr></argument>, <argument><expr><name>EDOTDOT</name></expr></argument>, <argument><expr>"RFS specific error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EISCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EISCONN"</expr></argument>, <argument><expr><name>EISCONN</name></expr></argument>, <argument><expr>"Transport endpoint is already connected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEISCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EISCONN"</expr></argument>, <argument><expr><name>WSAEISCONN</name></expr></argument>, <argument><expr>"Transport endpoint is already connected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOANO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOANO"</expr></argument>, <argument><expr><name>ENOANO</name></expr></argument>, <argument><expr>"No anode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESHUTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESHUTDOWN"</expr></argument>, <argument><expr><name>ESHUTDOWN</name></expr></argument>, <argument><expr>"Cannot send after transport endpoint shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAESHUTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESHUTDOWN"</expr></argument>, <argument><expr><name>WSAESHUTDOWN</name></expr></argument>, <argument><expr>"Cannot send after transport endpoint shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECHRNG"</expr></argument>, <argument><expr><name>ECHRNG</name></expr></argument>, <argument><expr>"Channel number out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELIBBAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELIBBAD"</expr></argument>, <argument><expr><name>ELIBBAD</name></expr></argument>, <argument><expr>"Accessing a corrupted shared library"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENONET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENONET"</expr></argument>, <argument><expr><name>ENONET</name></expr></argument>, <argument><expr>"Machine is not on the network"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADE"</expr></argument>, <argument><expr><name>EBADE</name></expr></argument>, <argument><expr>"Invalid exchange"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADF"</expr></argument>, <argument><expr><name>EBADF</name></expr></argument>, <argument><expr>"Bad file number"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEBADF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADF"</expr></argument>, <argument><expr><name>WSAEBADF</name></expr></argument>, <argument><expr>"Bad file number"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EMULTIHOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EMULTIHOP"</expr></argument>, <argument><expr><name>EMULTIHOP</name></expr></argument>, <argument><expr>"Multihop attempted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EIO"</expr></argument>, <argument><expr><name>EIO</name></expr></argument>, <argument><expr>"I/O error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EUNATCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EUNATCH"</expr></argument>, <argument><expr><name>EUNATCH</name></expr></argument>, <argument><expr>"Protocol driver not attached"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPROTOTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPROTOTYPE"</expr></argument>, <argument><expr><name>EPROTOTYPE</name></expr></argument>, <argument><expr>"Protocol wrong type for socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPROTOTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPROTOTYPE"</expr></argument>, <argument><expr><name>WSAEPROTOTYPE</name></expr></argument>, <argument><expr>"Protocol wrong type for socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOSPC"</expr></argument>, <argument><expr><name>ENOSPC</name></expr></argument>, <argument><expr>"No space left on device"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOEXEC"</expr></argument>, <argument><expr><name>ENOEXEC</name></expr></argument>, <argument><expr>"Exec format error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EALREADY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EALREADY"</expr></argument>, <argument><expr><name>EALREADY</name></expr></argument>, <argument><expr>"Operation already in progress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEALREADY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EALREADY"</expr></argument>, <argument><expr><name>WSAEALREADY</name></expr></argument>, <argument><expr>"Operation already in progress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENETDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENETDOWN"</expr></argument>, <argument><expr><name>ENETDOWN</name></expr></argument>, <argument><expr>"Network is down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENETDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENETDOWN"</expr></argument>, <argument><expr><name>WSAENETDOWN</name></expr></argument>, <argument><expr>"Network is down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTNAM"</expr></argument>, <argument><expr><name>ENOTNAM</name></expr></argument>, <argument><expr>"Not a XENIX named type file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EACCES"</expr></argument>, <argument><expr><name>EACCES</name></expr></argument>, <argument><expr>"Permission denied"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEACCES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EACCES"</expr></argument>, <argument><expr><name>WSAEACCES</name></expr></argument>, <argument><expr>"Permission denied"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELNRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELNRNG"</expr></argument>, <argument><expr><name>ELNRNG</name></expr></argument>, <argument><expr>"Link number out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EILSEQ"</expr></argument>, <argument><expr><name>EILSEQ</name></expr></argument>, <argument><expr>"Illegal byte sequence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTDIR"</expr></argument>, <argument><expr><name>ENOTDIR</name></expr></argument>, <argument><expr>"Not a directory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTUNIQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTUNIQ"</expr></argument>, <argument><expr><name>ENOTUNIQ</name></expr></argument>, <argument><expr>"Name not unique on network"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPERM"</expr></argument>, <argument><expr><name>EPERM</name></expr></argument>, <argument><expr>"Operation not permitted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDOM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDOM"</expr></argument>, <argument><expr><name>EDOM</name></expr></argument>, <argument><expr>"Math argument out of domain of func"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXFULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EXFULL"</expr></argument>, <argument><expr><name>EXFULL</name></expr></argument>, <argument><expr>"Exchange full"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECONNREFUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECONNREFUSED"</expr></argument>, <argument><expr><name>ECONNREFUSED</name></expr></argument>, <argument><expr>"Connection refused"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAECONNREFUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECONNREFUSED"</expr></argument>, <argument><expr><name>WSAECONNREFUSED</name></expr></argument>, <argument><expr>"Connection refused"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EISDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EISDIR"</expr></argument>, <argument><expr><name>EISDIR</name></expr></argument>, <argument><expr>"Is a directory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPROTONOSUPPORT"</expr></argument>, <argument><expr><name>EPROTONOSUPPORT</name></expr></argument>, <argument><expr>"Protocol not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EPROTONOSUPPORT"</expr></argument>, <argument><expr><name>WSAEPROTONOSUPPORT</name></expr></argument>, <argument><expr>"Protocol not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EROFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EROFS"</expr></argument>, <argument><expr><name>EROFS</name></expr></argument>, <argument><expr>"Read-only file system"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EADDRNOTAVAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EADDRNOTAVAIL"</expr></argument>, <argument><expr><name>EADDRNOTAVAIL</name></expr></argument>, <argument><expr>"Cannot assign requested address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEADDRNOTAVAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EADDRNOTAVAIL"</expr></argument>, <argument><expr><name>WSAEADDRNOTAVAIL</name></expr></argument>, <argument><expr>"Cannot assign requested address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIDRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EIDRM"</expr></argument>, <argument><expr><name>EIDRM</name></expr></argument>, <argument><expr>"Identifier removed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECOMM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECOMM"</expr></argument>, <argument><expr><name>ECOMM</name></expr></argument>, <argument><expr>"Communication error on send"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESRMNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESRMNT"</expr></argument>, <argument><expr><name>ESRMNT</name></expr></argument>, <argument><expr>"Srmount error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EREMOTEIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EREMOTEIO"</expr></argument>, <argument><expr><name>EREMOTEIO</name></expr></argument>, <argument><expr>"Remote I/O error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EL3RST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EL3RST"</expr></argument>, <argument><expr><name>EL3RST</name></expr></argument>, <argument><expr>"Level 3 reset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADMSG"</expr></argument>, <argument><expr><name>EBADMSG</name></expr></argument>, <argument><expr>"Not a data message"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENFILE"</expr></argument>, <argument><expr><name>ENFILE</name></expr></argument>, <argument><expr>"File table overflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELIBMAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELIBMAX"</expr></argument>, <argument><expr><name>ELIBMAX</name></expr></argument>, <argument><expr>"Attempting to link in too many shared libraries"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESPIPE"</expr></argument>, <argument><expr><name>ESPIPE</name></expr></argument>, <argument><expr>"Illegal seek"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOLINK"</expr></argument>, <argument><expr><name>ENOLINK</name></expr></argument>, <argument><expr>"Link has been severed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENETRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENETRESET"</expr></argument>, <argument><expr><name>ENETRESET</name></expr></argument>, <argument><expr>"Network dropped connection because of reset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENETRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENETRESET"</expr></argument>, <argument><expr><name>WSAENETRESET</name></expr></argument>, <argument><expr>"Network dropped connection because of reset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ETIMEDOUT"</expr></argument>, <argument><expr><name>ETIMEDOUT</name></expr></argument>, <argument><expr>"Connection timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ETIMEDOUT"</expr></argument>, <argument><expr><name>WSAETIMEDOUT</name></expr></argument>, <argument><expr>"Connection timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOENT"</expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>, <argument><expr>"No such file or directory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EEXIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EEXIST"</expr></argument>, <argument><expr><name>EEXIST</name></expr></argument>, <argument><expr>"File exists"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDQUOT"</expr></argument>, <argument><expr><name>EDQUOT</name></expr></argument>, <argument><expr>"Quota exceeded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEDQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDQUOT"</expr></argument>, <argument><expr><name>WSAEDQUOT</name></expr></argument>, <argument><expr>"Quota exceeded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOSTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOSTR"</expr></argument>, <argument><expr><name>ENOSTR</name></expr></argument>, <argument><expr>"Device not a stream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADSLT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADSLT"</expr></argument>, <argument><expr><name>EBADSLT</name></expr></argument>, <argument><expr>"Invalid slot"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADRQC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBADRQC"</expr></argument>, <argument><expr><name>EBADRQC</name></expr></argument>, <argument><expr>"Invalid request code"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELIBACC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELIBACC"</expr></argument>, <argument><expr><name>ELIBACC</name></expr></argument>, <argument><expr>"Can not access a needed shared library"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EFAULT"</expr></argument>, <argument><expr><name>EFAULT</name></expr></argument>, <argument><expr>"Bad address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EFAULT"</expr></argument>, <argument><expr><name>WSAEFAULT</name></expr></argument>, <argument><expr>"Bad address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EFBIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EFBIG"</expr></argument>, <argument><expr><name>EFBIG</name></expr></argument>, <argument><expr>"File too large"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDEADLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDEADLK"</expr></argument>, <argument><expr><name>EDEADLK</name></expr></argument>, <argument><expr>"Resource deadlock would occur"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTCONN"</expr></argument>, <argument><expr><name>ENOTCONN</name></expr></argument>, <argument><expr>"Transport endpoint is not connected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOTCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTCONN"</expr></argument>, <argument><expr><name>WSAENOTCONN</name></expr></argument>, <argument><expr>"Transport endpoint is not connected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDESTADDRREQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDESTADDRREQ"</expr></argument>, <argument><expr><name>EDESTADDRREQ</name></expr></argument>, <argument><expr>"Destination address required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEDESTADDRREQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDESTADDRREQ"</expr></argument>, <argument><expr><name>WSAEDESTADDRREQ</name></expr></argument>, <argument><expr>"Destination address required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELIBSCN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELIBSCN"</expr></argument>, <argument><expr><name>ELIBSCN</name></expr></argument>, <argument><expr>".lib section in a.out corrupted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOLCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOLCK"</expr></argument>, <argument><expr><name>ENOLCK</name></expr></argument>, <argument><expr>"No record locks available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EISNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EISNAM"</expr></argument>, <argument><expr><name>EISNAM</name></expr></argument>, <argument><expr>"Is a named type file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECONNABORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECONNABORTED"</expr></argument>, <argument><expr><name>ECONNABORTED</name></expr></argument>, <argument><expr>"Software caused connection abort"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAECONNABORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECONNABORTED"</expr></argument>, <argument><expr><name>WSAECONNABORTED</name></expr></argument>, <argument><expr>"Software caused connection abort"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENETUNREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENETUNREACH"</expr></argument>, <argument><expr><name>ENETUNREACH</name></expr></argument>, <argument><expr>"Network is unreachable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENETUNREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENETUNREACH"</expr></argument>, <argument><expr><name>WSAENETUNREACH</name></expr></argument>, <argument><expr>"Network is unreachable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESTALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESTALE"</expr></argument>, <argument><expr><name>ESTALE</name></expr></argument>, <argument><expr>"Stale NFS file handle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAESTALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESTALE"</expr></argument>, <argument><expr><name>WSAESTALE</name></expr></argument>, <argument><expr>"Stale NFS file handle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOSR"</expr></argument>, <argument><expr><name>ENOSR</name></expr></argument>, <argument><expr>"Out of streams resources"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOMEM"</expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr>"Out of memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTSOCK"</expr></argument>, <argument><expr><name>ENOTSOCK</name></expr></argument>, <argument><expr>"Socket operation on non-socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOTSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTSOCK"</expr></argument>, <argument><expr><name>WSAENOTSOCK</name></expr></argument>, <argument><expr>"Socket operation on non-socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESTRPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESTRPIPE"</expr></argument>, <argument><expr><name>ESTRPIPE</name></expr></argument>, <argument><expr>"Streams pipe error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EMLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EMLINK"</expr></argument>, <argument><expr><name>EMLINK</name></expr></argument>, <argument><expr>"Too many links"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ERANGE"</expr></argument>, <argument><expr><name>ERANGE</name></expr></argument>, <argument><expr>"Math result not representable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELIBEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ELIBEXEC"</expr></argument>, <argument><expr><name>ELIBEXEC</name></expr></argument>, <argument><expr>"Cannot exec a shared library directly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EL3HLT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EL3HLT"</expr></argument>, <argument><expr><name>EL3HLT</name></expr></argument>, <argument><expr>"Level 3 halted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECONNRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECONNRESET"</expr></argument>, <argument><expr><name>ECONNRESET</name></expr></argument>, <argument><expr>"Connection reset by peer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAECONNRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ECONNRESET"</expr></argument>, <argument><expr><name>WSAECONNRESET</name></expr></argument>, <argument><expr>"Connection reset by peer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EADDRINUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EADDRINUSE"</expr></argument>, <argument><expr><name>EADDRINUSE</name></expr></argument>, <argument><expr>"Address already in use"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEADDRINUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EADDRINUSE"</expr></argument>, <argument><expr><name>WSAEADDRINUSE</name></expr></argument>, <argument><expr>"Address already in use"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EOPNOTSUPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EOPNOTSUPP"</expr></argument>, <argument><expr><name>EOPNOTSUPP</name></expr></argument>, <argument><expr>"Operation not supported on transport endpoint"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEOPNOTSUPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EOPNOTSUPP"</expr></argument>, <argument><expr><name>WSAEOPNOTSUPP</name></expr></argument>, <argument><expr>"Operation not supported on transport endpoint"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EREMCHG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EREMCHG"</expr></argument>, <argument><expr><name>EREMCHG</name></expr></argument>, <argument><expr>"Remote address changed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EAGAIN"</expr></argument>, <argument><expr><name>EAGAIN</name></expr></argument>, <argument><expr>"Try again"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENAMETOOLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENAMETOOLONG"</expr></argument>, <argument><expr><name>ENAMETOOLONG</name></expr></argument>, <argument><expr>"File name too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENAMETOOLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENAMETOOLONG"</expr></argument>, <argument><expr><name>WSAENAMETOOLONG</name></expr></argument>, <argument><expr>"File name too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOTTY"</expr></argument>, <argument><expr><name>ENOTTY</name></expr></argument>, <argument><expr>"Not a typewriter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERESTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ERESTART"</expr></argument>, <argument><expr><name>ERESTART</name></expr></argument>, <argument><expr>"Interrupted system call should be restarted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESOCKTNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESOCKTNOSUPPORT"</expr></argument>, <argument><expr><name>ESOCKTNOSUPPORT</name></expr></argument>, <argument><expr>"Socket type not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAESOCKTNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ESOCKTNOSUPPORT"</expr></argument>, <argument><expr><name>WSAESOCKTNOSUPPORT</name></expr></argument>, <argument><expr>"Socket type not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ETIME"</expr></argument>, <argument><expr><name>ETIME</name></expr></argument>, <argument><expr>"Timer expired"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBFONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EBFONT"</expr></argument>, <argument><expr><name>EBFONT</name></expr></argument>, <argument><expr>"Bad font file format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDEADLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EDEADLOCK"</expr></argument>, <argument><expr><name>EDEADLOCK</name></expr></argument>, <argument><expr>"Error EDEADLOCK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETOOMANYREFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ETOOMANYREFS"</expr></argument>, <argument><expr><name>ETOOMANYREFS</name></expr></argument>, <argument><expr>"Too many references: cannot splice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAETOOMANYREFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ETOOMANYREFS"</expr></argument>, <argument><expr><name>WSAETOOMANYREFS</name></expr></argument>, <argument><expr>"Too many references: cannot splice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EMFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EMFILE"</expr></argument>, <argument><expr><name>EMFILE</name></expr></argument>, <argument><expr>"Too many open files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEMFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EMFILE"</expr></argument>, <argument><expr><name>WSAEMFILE</name></expr></argument>, <argument><expr>"Too many open files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETXTBSY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ETXTBSY"</expr></argument>, <argument><expr><name>ETXTBSY</name></expr></argument>, <argument><expr>"Text file busy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINPROGRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EINPROGRESS"</expr></argument>, <argument><expr><name>EINPROGRESS</name></expr></argument>, <argument><expr>"Operation now in progress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEINPROGRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"EINPROGRESS"</expr></argument>, <argument><expr><name>WSAEINPROGRESS</name></expr></argument>, <argument><expr>"Operation now in progress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENXIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENXIO"</expr></argument>, <argument><expr><name>ENXIO</name></expr></argument>, <argument><expr>"No such device or address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOPKG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"ENOPKG"</expr></argument>, <argument><expr><name>ENOPKG</name></expr></argument>, <argument><expr>"Package not installed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSASY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSASY"</expr></argument>, <argument><expr><name>WSASY</name></expr></argument>, <argument><expr>"Error WSASY"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEHOSTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEHOSTDOWN"</expr></argument>, <argument><expr><name>WSAEHOSTDOWN</name></expr></argument>, <argument><expr>"Host is down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENETDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENETDOWN"</expr></argument>, <argument><expr><name>WSAENETDOWN</name></expr></argument>, <argument><expr>"Network is down"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOTSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENOTSOCK"</expr></argument>, <argument><expr><name>WSAENOTSOCK</name></expr></argument>, <argument><expr>"Socket operation on non-socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEHOSTUNREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEHOSTUNREACH"</expr></argument>, <argument><expr><name>WSAEHOSTUNREACH</name></expr></argument>, <argument><expr>"No route to host"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAELOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAELOOP"</expr></argument>, <argument><expr><name>WSAELOOP</name></expr></argument>, <argument><expr>"Too many symbolic links encountered"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEMFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEMFILE"</expr></argument>, <argument><expr><name>WSAEMFILE</name></expr></argument>, <argument><expr>"Too many open files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAESTALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAESTALE"</expr></argument>, <argument><expr><name>WSAESTALE</name></expr></argument>, <argument><expr>"Stale NFS file handle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAVERNOTSUPPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAVERNOTSUPPORTED"</expr></argument>, <argument><expr><name>WSAVERNOTSUPPORTED</name></expr></argument>, <argument><expr>"Error WSAVERNOTSUPPORTED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENETUNREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENETUNREACH"</expr></argument>, <argument><expr><name>WSAENETUNREACH</name></expr></argument>, <argument><expr>"Network is unreachable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPROCLIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEPROCLIM"</expr></argument>, <argument><expr><name>WSAEPROCLIM</name></expr></argument>, <argument><expr>"Error WSAEPROCLIM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEFAULT"</expr></argument>, <argument><expr><name>WSAEFAULT</name></expr></argument>, <argument><expr>"Bad address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSANOTINITIALISED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSANOTINITIALISED"</expr></argument>, <argument><expr><name>WSANOTINITIALISED</name></expr></argument>, <argument><expr>"Error WSANOTINITIALISED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEUSERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEUSERS"</expr></argument>, <argument><expr><name>WSAEUSERS</name></expr></argument>, <argument><expr>"Too many users"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAMAKEASYNCREPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAMAKEASYNCREPL"</expr></argument>, <argument><expr><name>WSAMAKEASYNCREPL</name></expr></argument>, <argument><expr>"Error WSAMAKEASYNCREPL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOPROTOOPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENOPROTOOPT"</expr></argument>, <argument><expr><name>WSAENOPROTOOPT</name></expr></argument>, <argument><expr>"Protocol not available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAECONNABORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAECONNABORTED"</expr></argument>, <argument><expr><name>WSAECONNABORTED</name></expr></argument>, <argument><expr>"Software caused connection abort"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENAMETOOLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENAMETOOLONG"</expr></argument>, <argument><expr><name>WSAENAMETOOLONG</name></expr></argument>, <argument><expr>"File name too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOTEMPTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENOTEMPTY"</expr></argument>, <argument><expr><name>WSAENOTEMPTY</name></expr></argument>, <argument><expr>"Directory not empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAESHUTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAESHUTDOWN"</expr></argument>, <argument><expr><name>WSAESHUTDOWN</name></expr></argument>, <argument><expr>"Cannot send after transport endpoint shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEAFNOSUPPORT"</expr></argument>, <argument><expr><name>WSAEAFNOSUPPORT</name></expr></argument>, <argument><expr>"Address family not supported by protocol"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAETOOMANYREFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAETOOMANYREFS"</expr></argument>, <argument><expr><name>WSAETOOMANYREFS</name></expr></argument>, <argument><expr>"Too many references: cannot splice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEACCES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEACCES"</expr></argument>, <argument><expr><name>WSAEACCES</name></expr></argument>, <argument><expr>"Permission denied"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSATR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSATR"</expr></argument>, <argument><expr><name>WSATR</name></expr></argument>, <argument><expr>"Error WSATR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSABASEERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSABASEERR"</expr></argument>, <argument><expr><name>WSABASEERR</name></expr></argument>, <argument><expr>"Error WSABASEERR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSADESCRIPTIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSADESCRIPTIO"</expr></argument>, <argument><expr><name>WSADESCRIPTIO</name></expr></argument>, <argument><expr>"Error WSADESCRIPTIO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEMSGSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEMSGSIZE"</expr></argument>, <argument><expr><name>WSAEMSGSIZE</name></expr></argument>, <argument><expr>"Message too long"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEBADF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEBADF"</expr></argument>, <argument><expr><name>WSAEBADF</name></expr></argument>, <argument><expr>"Bad file number"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAECONNRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAECONNRESET"</expr></argument>, <argument><expr><name>WSAECONNRESET</name></expr></argument>, <argument><expr>"Connection reset by peer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAGETSELECTERRO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAGETSELECTERRO"</expr></argument>, <argument><expr><name>WSAGETSELECTERRO</name></expr></argument>, <argument><expr>"Error WSAGETSELECTERRO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAETIMEDOUT"</expr></argument>, <argument><expr><name>WSAETIMEDOUT</name></expr></argument>, <argument><expr>"Connection timed out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOBUFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENOBUFS"</expr></argument>, <argument><expr><name>WSAENOBUFS</name></expr></argument>, <argument><expr>"No buffer space available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEDISCON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEDISCON"</expr></argument>, <argument><expr><name>WSAEDISCON</name></expr></argument>, <argument><expr>"Error WSAEDISCON"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEINTR"</expr></argument>, <argument><expr><name>WSAEINTR</name></expr></argument>, <argument><expr>"Interrupted system call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPROTOTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEPROTOTYPE"</expr></argument>, <argument><expr><name>WSAEPROTOTYPE</name></expr></argument>, <argument><expr>"Protocol wrong type for socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAHOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAHOS"</expr></argument>, <argument><expr><name>WSAHOS</name></expr></argument>, <argument><expr>"Error WSAHOS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEADDRINUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEADDRINUSE"</expr></argument>, <argument><expr><name>WSAEADDRINUSE</name></expr></argument>, <argument><expr>"Address already in use"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEADDRNOTAVAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEADDRNOTAVAIL"</expr></argument>, <argument><expr><name>WSAEADDRNOTAVAIL</name></expr></argument>, <argument><expr>"Cannot assign requested address"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEALREADY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEALREADY"</expr></argument>, <argument><expr><name>WSAEALREADY</name></expr></argument>, <argument><expr>"Operation already in progress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEPROTONOSUPPORT"</expr></argument>, <argument><expr><name>WSAEPROTONOSUPPORT</name></expr></argument>, <argument><expr>"Protocol not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSASYSNOTREADY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSASYSNOTREADY"</expr></argument>, <argument><expr><name>WSASYSNOTREADY</name></expr></argument>, <argument><expr>"Error WSASYSNOTREADY"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEWOULDBLOCK"</expr></argument>, <argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>, <argument><expr>"Operation would block"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEPFNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEPFNOSUPPORT"</expr></argument>, <argument><expr><name>WSAEPFNOSUPPORT</name></expr></argument>, <argument><expr>"Protocol family not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEOPNOTSUPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEOPNOTSUPP"</expr></argument>, <argument><expr><name>WSAEOPNOTSUPP</name></expr></argument>, <argument><expr>"Operation not supported on transport endpoint"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEISCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEISCONN"</expr></argument>, <argument><expr><name>WSAEISCONN</name></expr></argument>, <argument><expr>"Transport endpoint is already connected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEDQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEDQUOT"</expr></argument>, <argument><expr><name>WSAEDQUOT</name></expr></argument>, <argument><expr>"Quota exceeded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENOTCONN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENOTCONN"</expr></argument>, <argument><expr><name>WSAENOTCONN</name></expr></argument>, <argument><expr>"Transport endpoint is not connected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEREMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEREMOTE"</expr></argument>, <argument><expr><name>WSAEREMOTE</name></expr></argument>, <argument><expr>"Object is remote"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEINVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEINVAL"</expr></argument>, <argument><expr><name>WSAEINVAL</name></expr></argument>, <argument><expr>"Invalid argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEINPROGRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEINPROGRESS"</expr></argument>, <argument><expr><name>WSAEINPROGRESS</name></expr></argument>, <argument><expr>"Operation now in progress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAGETSELECTEVEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAGETSELECTEVEN"</expr></argument>, <argument><expr><name>WSAGETSELECTEVEN</name></expr></argument>, <argument><expr>"Error WSAGETSELECTEVEN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAESOCKTNOSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAESOCKTNOSUPPORT"</expr></argument>, <argument><expr><name>WSAESOCKTNOSUPPORT</name></expr></argument>, <argument><expr>"Socket type not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAGETASYNCERRO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAGETASYNCERRO"</expr></argument>, <argument><expr><name>WSAGETASYNCERRO</name></expr></argument>, <argument><expr>"Error WSAGETASYNCERRO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAMAKESELECTREPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAMAKESELECTREPL"</expr></argument>, <argument><expr><name>WSAMAKESELECTREPL</name></expr></argument>, <argument><expr>"Error WSAMAKESELECTREPL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAGETASYNCBUFLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAGETASYNCBUFLE"</expr></argument>, <argument><expr><name>WSAGETASYNCBUFLE</name></expr></argument>, <argument><expr>"Error WSAGETASYNCBUFLE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEDESTADDRREQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAEDESTADDRREQ"</expr></argument>, <argument><expr><name>WSAEDESTADDRREQ</name></expr></argument>, <argument><expr>"Destination address required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAECONNREFUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAECONNREFUSED"</expr></argument>, <argument><expr><name>WSAECONNREFUSED</name></expr></argument>, <argument><expr>"Connection refused"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAENETRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAENETRESET"</expr></argument>, <argument><expr><name>WSAENETRESET</name></expr></argument>, <argument><expr>"Network dropped connection because of reset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inscode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>de</name></expr></argument>, <argument><expr>"WSAN"</expr></argument>, <argument><expr><name>WSAN</name></expr></argument>, <argument><expr>"Error WSAN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
