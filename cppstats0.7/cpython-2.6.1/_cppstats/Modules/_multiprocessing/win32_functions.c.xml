<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_multiprocessing/win32_functions.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiprocessing.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_FUNCTION</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{#func, (PyCFunction)win32_ ##func, METH_VARARGS | METH_STATIC, ""}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_CONSTANT</name><parameter_list>(<param><type><name>fmt</name></type></param>, <param><type><name>con</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyDict_SetItemString(Win32Type.tp_dict, #con, Py_BuildValue(fmt, con))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_CloseHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hObject</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>F_HANDLE</name></expr></argument>, <argument><expr>&amp;<name>hObject</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>success</name> <init>= <expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_ConnectNamedPipe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hNamedPipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPOVERLAPPED</name></type> <name>lpOverlapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<macro><name>PyArg_ParseTuple</name><argument_list>(<argument>args</argument>, <argument>F_HANDLE F_POINTER</argument>,
<argument>&amp;hNamedPipe</argument>, <argument>&amp;lpOverlapped</argument>)</argument_list></macro></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>success</name> <init>= <expr><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><name>hNamedPipe</name></expr></argument>, <argument><expr><name>lpOverlapped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_CreateFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPCTSTR</name></type> <name>lpFileName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDesiredAccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwShareMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPSECURITY_ATTRIBUTES</name></type> <name>lpSecurityAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCreationDisposition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlagsAndAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hTemplateFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<macro><name>PyArg_ParseTuple</name><argument_list>(<argument>args</argument>, <argument>"s" F_DWORD F_DWORD F_POINTER
F_DWORD F_DWORD F_HANDLE</argument>,
<argument>&amp;lpFileName</argument>, <argument>&amp;dwDesiredAccess</argument>, <argument>&amp;dwShareMode</argument>,
<argument>&amp;lpSecurityAttributes</argument>, <argument>&amp;dwCreationDisposition</argument>,
<argument>&amp;dwFlagsAndAttributes</argument>, <argument>&amp;hTemplateFile</argument>)</argument_list></macro></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>handle</name> <init>= <expr><call><name>CreateFile</name><argument_list>(<argument><expr><name>lpFileName</name></expr></argument>, <argument><expr><name>dwDesiredAccess</name></expr></argument>,
<argument><expr><name>dwShareMode</name></expr></argument>, <argument><expr><name>lpSecurityAttributes</name></expr></argument>,
<argument><expr><name>dwCreationDisposition</name></expr></argument>,
<argument><expr><name>dwFlagsAndAttributes</name></expr></argument>, <argument><expr><name>hTemplateFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>handle</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>F_HANDLE</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_CreateNamedPipe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPCTSTR</name></type> <name>lpName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwOpenMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPipeMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nMaxInstances</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nOutBufferSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nInBufferSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nDefaultTimeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPSECURITY_ATTRIBUTES</name></type> <name>lpSecurityAttributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<macro><name>PyArg_ParseTuple</name><argument_list>(<argument>args</argument>, <argument>"s" F_DWORD F_DWORD F_DWORD
F_DWORD F_DWORD F_DWORD F_POINTER</argument>,
<argument>&amp;lpName</argument>, <argument>&amp;dwOpenMode</argument>, <argument>&amp;dwPipeMode</argument>,
<argument>&amp;nMaxInstances</argument>, <argument>&amp;nOutBufferSize</argument>,
<argument>&amp;nInBufferSize</argument>, <argument>&amp;nDefaultTimeOut</argument>,
<argument>&amp;lpSecurityAttributes</argument>)</argument_list></macro></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>handle</name> <init>= <expr><call><name>CreateNamedPipe</name><argument_list>(<argument><expr><name>lpName</name></expr></argument>, <argument><expr><name>dwOpenMode</name></expr></argument>, <argument><expr><name>dwPipeMode</name></expr></argument>,
<argument><expr><name>nMaxInstances</name></expr></argument>, <argument><expr><name>nOutBufferSize</name></expr></argument>,
<argument><expr><name>nInBufferSize</name></expr></argument>, <argument><expr><name>nDefaultTimeOut</name></expr></argument>,
<argument><expr><name>lpSecurityAttributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>handle</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>F_HANDLE</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_ExitProcess</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>UINT</name></type> <name>uExitCode</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"I"</expr></argument>, <argument><expr>&amp;<name>uExitCode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ExitProcess</name><argument_list>(<argument><expr><name>uExitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_GetLastError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_OpenProcess</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDesiredAccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bInheritHandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwProcessId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>F_DWORD</name> "i" <name>F_DWORD</name></expr></argument>,
<argument><expr>&amp;<name>dwDesiredAccess</name></expr></argument>, <argument><expr>&amp;<name>bInheritHandle</name></expr></argument>, <argument><expr>&amp;<name>dwProcessId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>handle</name> = <call><name>OpenProcess</name><argument_list>(<argument><expr><name>dwDesiredAccess</name></expr></argument>, <argument><expr><name>bInheritHandle</name></expr></argument>, <argument><expr><name>dwProcessId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>handle</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>F_HANDLE</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_SetNamedPipeHandleState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hNamedPipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name><name>oArgs</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name><name>dwArgs</name><index>[<expr>3</expr>]</index></name></decl>, *<decl><type ref="prev"/><name><name>pArgs</name><index>[<expr>3</expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>F_HANDLE</name> "OOO"</expr></argument>,
<argument><expr>&amp;<name>hNamedPipe</name></expr></argument>, <argument><expr>&amp;<name><name>oArgs</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>oArgs</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>oArgs</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr> ;</init> <condition><expr><name>i</name> &lt; 3</expr> ;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>oArgs</name><index>[<expr><name>i</name></expr>]</index></name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dwArgs</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>PyInt_AsUnsignedLongMask</name><argument_list>(<argument><expr><name><name>oArgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>pArgs</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>dwArgs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<call><name>SetNamedPipeHandleState</name><argument_list>(<argument><expr><name>hNamedPipe</name></expr></argument>, <argument><expr><name><name>pArgs</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>pArgs</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>pArgs</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>win32_WaitNamedPipe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPCTSTR</name></type> <name>lpNamedPipeName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nTimeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s" <name>F_DWORD</name></expr></argument>, <argument><expr>&amp;<name>lpNamedPipeName</name></expr></argument>, <argument><expr>&amp;<name>nTimeOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>success</name> <init>= <expr><call><name>WaitNamedPipe</name><argument_list>(<argument><expr><name>lpNamedPipeName</name></expr></argument>, <argument><expr><name>nTimeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>win32_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>CloseHandle</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>GetLastError</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>OpenProcess</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>ExitProcess</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>ConnectNamedPipe</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>CreateFile</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>CreateNamedPipe</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>SetNamedPipeHandleState</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>WIN32_FUNCTION</name><argument_list>(<argument><expr><name>WaitNamedPipe</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Win32Type</name> <init>= <expr><block>{
<macro><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument>NULL</argument>, <argument>0</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>create_win32_namespace</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>Win32Type</name>.<name>tp_name</name></name> = "_multiprocessing.win32"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>Win32Type</name>.<name>tp_methods</name></name> = <name>win32_methods</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Win32Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Win32Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>ERROR_ALREADY_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>ERROR_PIPE_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>ERROR_PIPE_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>ERROR_SEM_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>NMPWAIT_WAIT_FOREVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_DUPLEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_INBOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PIPE_READMODE_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PIPE_TYPE_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PIPE_UNLIMITED_INSTANCES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PIPE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr><name>F_DWORD</name></expr></argument>, <argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32_CONSTANT</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)&amp;<name>Win32Type</name></expr>;</return>
}</block></function>
</unit>
