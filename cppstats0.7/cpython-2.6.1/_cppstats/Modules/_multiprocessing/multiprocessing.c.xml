<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_multiprocessing/multiprocessing.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiprocessing.h"</cpp:file></cpp:include>
<function_decl><type><name>PyObject</name> *</type><name>create_win32_namespace</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pickle_dumps</name></decl>, *<decl><type ref="prev"/><name>pickle_loads</name></decl>, *<decl><type ref="prev"/><name>pickle_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ProcessError</name></decl>, *<decl><type ref="prev"/><name>BufferTooShort</name></decl>;</decl_stmt>
<function><type><name>PyObject</name> *</type>
<name>mp_SetError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>Type</name></decl></param>, <param><decl><type><name>int</name></type> <name>num</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>num</name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MP_STANDARD_ERROR</name></expr>:
<if>if <condition>(<expr><name>Type</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>Type</name> = <name>PyExc_WindowsError</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyErr_SetExcFromWindowsErr</name><argument_list>(<argument><expr><name>Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MP_SOCKET_ERROR</name></expr>:
<if>if <condition>(<expr><name>Type</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>Type</name> = <name>PyExc_WindowsError</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyErr_SetExcFromWindowsErr</name><argument_list>(<argument><expr><name>Type</name></expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
</case><case>case <expr><name>MP_STANDARD_ERROR</name></expr>:
</case><case>case <expr><name>MP_SOCKET_ERROR</name></expr>:
<if>if <condition>(<expr><name>Type</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>Type</name> = <name>PyExc_OSError</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>MP_MEMORY_ERROR</name></expr>:
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MP_END_OF_FILE</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MP_EARLY_END_OF_FILE</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>,
<argument><expr>"got end of file during message"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MP_BAD_MESSAGE_LENGTH</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>, <argument><expr>"bad message length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MP_EXCEPTION_HAS_BEEN_SET</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"unkown error number %d"</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>sigint_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type>
<name>ProcessingCtrlHandler</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>sigint_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FD_TRANSFER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>multiprocessing_sendfd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>conn</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dummy_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>msghdr</name></type> <name>msg</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name>dummy_iov</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cmsghdr</name> *</type><name>cmsg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii"</expr></argument>, <argument><expr>&amp;<name>conn</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>dummy_iov</name>.<name>iov_base</name></name> = &amp;<name>dummy_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy_iov</name>.<name>iov_len</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_control</name></name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_controllen</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_iov</name></name> = &amp;<name>dummy_iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_iovlen</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cmsg</name> = <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name>-&gt;<name>cmsg_level</name></name> = <name>SOL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name>-&gt;<name>cmsg_type</name></name> = <name>SCM_RIGHTS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name>-&gt;<name>cmsg_len</name></name> = <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_controllen</name></name> = <name><name>cmsg</name>-&gt;<name>cmsg_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>int</name>*)<call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call> = <name>fd</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>res</name> <init>= <expr><call><name>sendmsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr>&amp;<name>msg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>multiprocessing_recvfd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>conn</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>dummy_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>msghdr</name></type> <name>msg</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name>dummy_iov</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cmsghdr</name> *</type><name>cmsg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>dummy_iov</name>.<name>iov_base</name></name> = &amp;<name>dummy_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy_iov</name>.<name>iov_len</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_control</name></name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_controllen</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_iov</name></name> = &amp;<name>dummy_iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_iovlen</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>cmsg</name> = <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name>-&gt;<name>cmsg_level</name></name> = <name>SOL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name>-&gt;<name>cmsg_type</name></name> = <name>SCM_RIGHTS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmsg</name>-&gt;<name>cmsg_len</name></name> = <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name>.<name>msg_controllen</name></name> = <name><name>cmsg</name>-&gt;<name>cmsg_len</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>res</name> <init>= <expr><call><name>recvmsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr>&amp;<name>msg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>fd</name> = *(<name>int</name>*)<call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>multiprocessing_address_of_buffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>buffer_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyObject_AsWriteBuffer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr>&amp;<name>buffer_len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"N" <name>F_PY_SSIZE_T</name></expr></argument>,
<argument><expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>module_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"address_of_buffer"</expr>, <expr><name>multiprocessing_address_of_buffer</name></expr>, <expr><name>METH_O</name></expr>,
<expr>"address_of_buffer(obj) -&gt; int\n"
"Return address of obj assuming obj supports buffer inteface"</expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FD_TRANSFER</name></expr></cpp:if>
<expr><block>{
<expr>"sendfd"</expr>, <expr><name>multiprocessing_sendfd</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr>"sendfd(sockfd, fd) -&gt; None\n"
"Send file descriptor given by fd over the unix domain socket\n"
"whose file decriptor is sockfd"</expr>
}</block></expr>,
<expr><block>{
<expr>"recvfd"</expr>, <expr><name>multiprocessing_recvfd</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr>"recvfd(sockfd) -&gt; fd\n"
"Receive a file descriptor over a unix domain socket\n"
"whose file decriptor is sockfd"</expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_multiprocessing</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module</name></decl>, *<decl><type ref="prev"/><name>temp</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>module</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_multiprocessing"</expr></argument>, <argument><expr><name>module_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>module</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>temp</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><name>PICKLE_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>temp</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>pickle_dumps</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"dumps"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pickle_loads</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"loads"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pickle_protocol</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"HIGHEST_PROTOCOL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>"multiprocessing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>temp</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>BufferTooShort</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"BufferTooShort"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>ConnectionType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>ConnectionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr>"Connection"</expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>ConnectionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call> || <name>HAVE_SEM_OPEN</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>SemLockType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SemLockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name><name>SemLockType</name>.<name>tp_dict</name></name></expr></argument>, <argument><expr>"SEM_VALUE_MAX"</expr></argument>,
<argument><expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><name>SEM_VALUE_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr>"SemLock"</expr></argument>, <argument><expr>(<name>PyObject</name>*)&amp;<name>SemLockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>PipeConnectionType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PipeConnectionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr>"PipeConnection"</expr></argument>,
<argument><expr>(<name>PyObject</name>*)&amp;<name>PipeConnectionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>create_win32_namespace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>temp</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr>"win32"</expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sigint_event</name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sigint_event</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ProcessingCtrlHandler</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>temp</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>temp</name></expr>)</condition><then>
<return>return;</return></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_FLAG</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>value = Py_BuildValue("i", name); if (value == NULL) { Py_DECREF(temp); return; } if (PyDict_SetItemString(temp, #name, value) &lt; 0) { Py_DECREF(temp); Py_DECREF(value); return; } Py_DECREF(value)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEM_OPEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_FLAG</name><argument_list>(<argument><expr><name>HAVE_SEM_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEM_TIMEDWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_FLAG</name><argument_list>(<argument><expr><name>HAVE_SEM_TIMEDWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FD_TRANSFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_FLAG</name><argument_list>(<argument><expr><name>HAVE_FD_TRANSFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROKEN_SEM_GETVALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_FLAG</name><argument_list>(<argument><expr><name>HAVE_BROKEN_SEM_GETVALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROKEN_SEM_UNLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ADD_FLAG</name><argument_list>(<argument><expr><name>HAVE_BROKEN_SEM_UNLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr>"flags"</expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
}</block></function>
</unit>
