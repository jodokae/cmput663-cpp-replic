<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/zlib/compress.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>compress2</name> <parameter_list>(<param><decl><type><name>dest</name></type></decl></param>, <param><decl><type><name>destLen</name></type></decl></param>, <param><decl><type><name>source</name></type></decl></param>, <param><decl><type><name>sourceLen</name></type></decl></param>, <param><decl><type><name>level</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Bytef</name> *</type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLongf</name> *</type><name>destLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>sourceLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>z_stream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>.<name>next_in</name></name> = (<name>Bytef</name>*)<name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>sourceLen</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAXSEG_64K</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>uLong</name>)<name><name>stream</name>.<name>avail_in</name></name> != <name>sourceLen</name></expr>)</condition><then> <return>return <expr><name>Z_BUF_ERROR</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>stream</name>.<name>next_out</name></name> = <name>dest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)*<name>destLen</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>uLong</name>)<name><name>stream</name>.<name>avail_out</name></name> != *<name>destLen</name></expr>)</condition><then> <return>return <expr><name>Z_BUF_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateInit</name><argument_list>(<argument><expr>&amp;<name>stream</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>Z_OK</name></expr>)</condition><then> <return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name> == <name>Z_OK</name> ? <name>Z_BUF_ERROR</name> : <name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>destLen</name> = <name><name>stream</name>.<name>total_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>compress</name> <parameter_list>(<param><decl><type><name>dest</name></type></decl></param>, <param><decl><type><name>destLen</name></type></decl></param>, <param><decl><type><name>source</name></type></decl></param>, <param><decl><type><name>sourceLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Bytef</name> *</type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLongf</name> *</type><name>destLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>sourceLen</name></decl>;</decl_stmt>
<block>{
<return>return <expr><call><name>compress2</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>destLen</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceLen</name></expr></argument>, <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>compressBound</name> <parameter_list>(<param><decl><type><name>sourceLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>uLong</name></type> <name>sourceLen</name></decl>;</decl_stmt>
<block>{
<return>return <expr><name>sourceLen</name> + (<name>sourceLen</name> &gt;&gt; 12) + (<name>sourceLen</name> &gt;&gt; 14) + 11</expr>;</return>
}</block></function>
</unit>
