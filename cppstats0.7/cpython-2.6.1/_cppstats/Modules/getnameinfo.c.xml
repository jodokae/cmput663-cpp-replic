<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/getnameinfo.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/nameser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;resolv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"addrinfo.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct <name>gni_afd</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a_af</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_socklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_off</name></decl>;</decl_stmt>
}</block> <decl><name><name>gni_afdl</name> <index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><name>PF_INET6</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>, <expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>,
<macro><name>offsetof</name><argument_list>(<argument>struct sockaddr_in6</argument>, <argument>sin6_addr</argument>)</argument_list></macro>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr><name>PF_INET</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>, <expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>,
<macro><name>offsetof</name><argument_list>(<argument>struct sockaddr_in</argument>, <argument>sin_addr</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr>,
}</block></expr></init></decl>;</struct>
<struct>struct <name>gni_sockinet</name> <block>{
<decl_stmt><decl><type><name>u_char</name></type> <name>si_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>si_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>si_port</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_NOSOCKET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_NOSERVNAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_NOHOSTNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_MEMORY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_SYSTEM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_FAMILY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_SALEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name> <name>getnameinfo</name></type> <name>Py_PROTO</name><argument_list>(<argument><expr>(const struct <name>sockaddr</name> *, <name>size_t</name>, <name>char</name> *, <name>size_t</name>,
<name>char</name> *, <name>size_t</name>, <name>int</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>getnameinfo</name><parameter_list>(<param><decl><type><name>sa</name></type></decl></param>, <param><decl><type><name>salen</name></type></decl></param>, <param><decl><type><name>host</name></type></decl></param>, <param><decl><type><name>hostlen</name></type></decl></param>, <param><decl><type><name>serv</name></type></decl></param>, <param><decl><type><name>servlen</name></type></decl></param>, <param><decl><type><name>flags</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>sockaddr</name> *</type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>salen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hostlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>serv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>servlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type>struct <name>gni_afd</name> *</type><name>gni_afd</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>servent</name> *</type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>hostent</name> *</type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>v4a</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_char</name></type> <name>pfx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>h_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>numserv</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>numaddr</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sa</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>ENI_NOSOCKET</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> = <name><name>sa</name>-&gt;<name>sa_len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> != <name>salen</name></expr>)</condition><then> <return>return <expr><name>ENI_SALEN</name></expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>len</name> = <name>salen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>family</name> = <name><name>sa</name>-&gt;<name>sa_family</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>gni_afdl</name><index>[<expr><name>i</name></expr>]</index></name>.<name>a_af</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>gni_afdl</name><index>[<expr><name>i</name></expr>]</index></name>.<name>a_af</name> == <name>family</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>gni_afd</name> = &amp;<name><name>gni_afdl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
}</block></then></if></for>
<return>return <expr><name>ENI_FAMILY</name></expr>;</return>
<label><name>found</name>:</label>
<if>if <condition>(<expr><name>len</name> != <name><name>gni_afd</name>-&gt;<name>a_socklen</name></name></expr>)</condition><then> <return>return <expr><name>ENI_SALEN</name></expr>;</return></then></if>
<expr_stmt><expr><name>port</name> = ((struct <name>gni_sockinet</name> *)<name>sa</name>)-&gt;<name>si_port</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> = (<name>char</name> *)<name>sa</name> + <name><name>gni_afd</name>-&gt;<name>a_off</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serv</name> == <name>NULL</name> || <name>servlen</name> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>flags</name> &amp; <name>NI_NUMERICSERV</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>numserv</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>numserv</name></expr></argument>)</argument_list></call> &gt; <name>servlen</name></expr>)</condition><then>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name>numserv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sp</name> = <call><name>getservbyport</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr>(<name>flags</name> &amp; <name>NI_DGRAM</name>) ? "udp" : "tcp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sp</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sp</name>-&gt;<name>s_name</name></name></expr></argument>)</argument_list></call> &gt; <name>servlen</name></expr>)</condition><then>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name><name>sp</name>-&gt;<name>s_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>ENI_NOSERVNAME</name></expr>;</return></else></if>
}</block></else></if></else></if>
<switch>switch <condition>(<expr><name><name>sa</name>-&gt;<name>sa_family</name></name></expr>)</condition> <block>{
<case>case <expr><name>AF_INET</name></expr>:
<expr_stmt><expr><name>v4a</name> = ((struct <name>sockaddr_in</name> *)<name>sa</name>)-&gt;<name><name>sin_addr</name>.<name>s_addr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>IN_MULTICAST</name><argument_list>(<argument><expr><name>v4a</name></expr></argument>)</argument_list></call> || <call><name>IN_EXPERIMENTAL</name><argument_list>(<argument><expr><name>v4a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>NI_NUMERICHOST</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>v4a</name> &gt;&gt;= <name>IN_CLASSA_NSHIFT</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v4a</name> == 0 || <name>v4a</name> == <name>IN_LOOPBACKNET</name></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>NI_NUMERICHOST</name></expr>;</expr_stmt></then></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>AF_INET6</name></expr>:
<expr_stmt><expr><name>pfx</name> = ((struct <name>sockaddr_in6</name> *)<name>sa</name>)-&gt;<name><name>sin6_addr</name>.<name>s6_addr8</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pfx</name> == 0 || <name>pfx</name> == 0xfe || <name>pfx</name> == 0xff</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>NI_NUMERICHOST</name></expr>;</expr_stmt></then></if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case>}</block></switch>
<if>if <condition>(<expr><name>host</name> == <name>NULL</name> || <name>hostlen</name> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>flags</name> &amp; <name>NI_NUMERICHOST</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>gni_afd</name>-&gt;<name>a_af</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
== <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>ENI_SYSTEM</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></call> &gt; <name>hostlen</name></expr>)</condition><then>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>hp</name> = <call><name>getipnodebyaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>gni_afd</name>-&gt;<name>a_addrlen</name></name></expr></argument>, <argument><expr><name><name>gni_afd</name>-&gt;<name>a_af</name></name></expr></argument>, <argument><expr>&amp;<name>h_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>hp</name> = <call><name>gethostbyaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>gni_afd</name>-&gt;<name>a_addrlen</name></name></expr></argument>, <argument><expr><name><name>gni_afd</name>-&gt;<name>a_af</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h_error</name> = <name>h_errno</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>hp</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>NI_NOFQDN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>hp</name>-&gt;<name>h_name</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>hp</name>-&gt;<name>h_name</name></name></expr></argument>)</argument_list></call> &gt; <name>hostlen</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>hp</name>-&gt;<name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>NI_NAMEREQD</name></expr>)</condition><then>
<return>return <expr><name>ENI_NOHOSTNAME</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>gni_afd</name>-&gt;<name>a_af</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
== <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>ENI_NOHOSTNAME</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></call> &gt; <name>hostlen</name></expr>)</condition><then>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if>
<return>return <expr><name>SUCCESS</name></expr>;</return>
}</block></function>
</unit>
