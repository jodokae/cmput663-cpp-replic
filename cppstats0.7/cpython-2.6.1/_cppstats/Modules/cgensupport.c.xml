<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/cgensupport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cgensupport.h"</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>PyArg_GetObject</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> **</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>nargs</name> != 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>args</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> ||
<name>nargs</name> != <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> ||
<name>i</name> &lt; 0 || <name>i</name> &gt;= <name>nargs</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_arg</name> = <name>args</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetLong</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>long</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>nargs</name> != 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>args</name> == <name>NULL</name> || !<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> ||
<name>nargs</name> != <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> ||
<name>i</name> &lt; 0 || <name>i</name> &gt;= <name>nargs</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name> || !<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetShort</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>short</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr>*<name>p_arg</name> = (<name>short</name>) <name>x</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>extractdouble</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>double</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyFloat_AS_DOUBLE</name><argument_list>(<argument><expr>(<name>PyFloatObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyLong_AsDouble</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if></else></if></else></if></else></if>
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>extractfloat</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>float</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = (<name>float</name>) <call><name>PyFloat_AS_DOUBLE</name><argument_list>(<argument><expr>(<name>PyFloatObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = (<name>float</name>) <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = (<name>float</name>) <call><name>PyLong_AsDouble</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if></else></if></else></if></else></if>
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetFloat</name><parameter_list>(<param><decl><type><name>register</name> <name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>float</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>extractfloat</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr>*<name>p_arg</name> = <name>x</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>string</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetChar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>char</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>string</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetString</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>x</name><index>[<expr>0</expr>]</index></name> == '\0' || <name><name>x</name><index>[<expr>1</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_arg</name> = <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetLongArraySize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>long</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_arg</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetShortArraySize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>short</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetLongArraySize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr>*<name>p_arg</name> = (<name>short</name>) <name>x</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetLongArray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>long</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetShortArray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>short</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>short</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>short</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetDoubleArray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>double</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>extractdouble</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>extractdouble</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><name>int</name></type>
<name>PyArg_GetFloatArray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>nargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>float</name> *</type><name>p_arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>extractfloat</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>extractfloat</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name><name>p_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></function>
</unit>
