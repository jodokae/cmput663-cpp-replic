<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/termios.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInit_termios</name></cpp:macro> <cpp:value>inittermios</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((c)&amp;037)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_MODEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/modem.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_BSDTTY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/bsdtty.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios__doc__</name></expr></argument>,
<argument><expr>"This module provides an interface to the Posix calls for tty I/O control.\n\
For a complete description of these calls, see the Posix or Unix manual\n\
pages. It is only available for those Unix versions that support Posix\n\
termios style tty I/O control.\n\
\n\
All functions in this module take a file descriptor fd as their first\n\
argument. This can be an integer file descriptor, such as returned by\n\
sys.stdin.fileno(), or a file object, such as sys.stdin itself."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TermiosError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fdconv</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fd</name> = <call><name>PyObject_AsFileDescriptor</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fd</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>int</name>*)<name>p</name> = <name>fd</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios_tcgetattr__doc__</name></expr></argument>,
<argument><expr>"tcgetattr(fd) -&gt; list_of_attrs\n\
\n\
Get the tty attributes for file descriptor fd, as follows:\n\
[iflag, oflag, cflag, lflag, ispeed, ospeed, cc] where cc is a list\n\
of the tty special characters (each a string of length 1, except the items\n\
with indices VMIN and VTIME, which are integers when these fields are\n\
defined). The interpretation of the flags and the speeds as well as the\n\
indexing in the cc array must be done using the symbolic constants defined\n\
in this module."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>termios_tcgetattr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>termios</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>speed_t</name></type> <name>ispeed</name></decl>, <decl><type ref="prev"/><name>ospeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;:tcgetattr"</expr></argument>,
<argument><expr><name>fdconv</name></expr></argument>, <argument><expr>(<name>void</name>*)&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>ispeed</name> = <call><name>cfgetispeed</name><argument_list>(<argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ospeed</name> = <call><name>cfgetospeed</name><argument_list>(<argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>NCCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cc</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCCS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ch</name> = (<name>char</name>)<name><name>mode</name>.<name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>(<name><name>mode</name>.<name>c_lflag</name></name> &amp; <name>ICANON</name>) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>mode</name>.<name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>VMIN</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>mode</name>.<name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>VTIME</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>mode</name>.<name>c_iflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>mode</name>.<name>c_oflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>mode</name>.<name>c_cflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>mode</name>.<name>c_lflag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>ispeed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>ospeed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
<return>return <expr><name>v</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios_tcsetattr__doc__</name></expr></argument>,
<argument><expr>"tcsetattr(fd, when, attributes) -&gt; None\n\
\n\
Set the tty attributes for file descriptor fd.\n\
The attributes to be set are taken from the attributes argument, which\n\
is a list like the one returned by tcgetattr(). The when argument\n\
determines when the attributes are changed: termios.TCSANOW to\n\
change immediately, termios.TCSADRAIN to change after transmitting all\n\
queued output, or termios.TCSAFLUSH to change after transmitting all\n\
queued output and discarding all queued input. "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>termios_tcsetattr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>when</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>termios</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>speed_t</name></type> <name>ispeed</name></decl>, <decl><type ref="prev"/><name>ospeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>term</name></decl>, *<decl><type ref="prev"/><name>cc</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;iO:tcsetattr"</expr></argument>,
<argument><expr><name>fdconv</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>when</name></expr></argument>, <argument><expr>&amp;<name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> || <call><name>PyList_Size</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> != 7</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"tcsetattr, arg 3: must be 7 element list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>mode</name>.<name>c_iflag</name></name> = (<name>tcflag_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name>.<name>c_oflag</name></name> = (<name>tcflag_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name>.<name>c_cflag</name></name> = (<name>tcflag_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode</name>.<name>c_lflag</name></name> = (<name>tcflag_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ispeed</name> = (<name>speed_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ospeed</name> = (<name>speed_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> || <call><name>PyList_Size</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> != <name>NCCS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"tcsetattr: attributes[6] must be %d element list"</expr></argument>,
<argument><expr><name>NCCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCCS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>v</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyString_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then>
<expr_stmt><expr><name><name>mode</name>.<name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>cc_t</name>) * <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>mode</name>.<name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>cc_t</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"tcsetattr: elements of attributes must be characters or integers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><call><name>cfsetispeed</name><argument_list>(<argument><expr>&amp;<name>mode</name></expr></argument>, <argument><expr>(<name>speed_t</name>) <name>ispeed</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>cfsetospeed</name><argument_list>(<argument><expr>&amp;<name>mode</name></expr></argument>, <argument><expr>(<name>speed_t</name>) <name>ospeed</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>when</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios_tcsendbreak__doc__</name></expr></argument>,
<argument><expr>"tcsendbreak(fd, duration) -&gt; None\n\
\n\
Send a break on file descriptor fd.\n\
A zero duration sends a break for 0.25-0.5 seconds; a nonzero duration\n\
has a system dependent meaning."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>termios_tcsendbreak</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;i:tcsendbreak"</expr></argument>,
<argument><expr><name>fdconv</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>tcsendbreak</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios_tcdrain__doc__</name></expr></argument>,
<argument><expr>"tcdrain(fd) -&gt; None\n\
\n\
Wait until all output written to file descriptor fd has been transmitted."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>termios_tcdrain</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;:tcdrain"</expr></argument>,
<argument><expr><name>fdconv</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>tcdrain</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios_tcflush__doc__</name></expr></argument>,
<argument><expr>"tcflush(fd, queue) -&gt; None\n\
\n\
Discard queued data on file descriptor fd.\n\
The queue selector specifies which queue: termios.TCIFLUSH for the input\n\
queue, termios.TCOFLUSH for the output queue, or termios.TCIOFLUSH for\n\
both queues. "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>termios_tcflush</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>queue</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;i:tcflush"</expr></argument>,
<argument><expr><name>fdconv</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>queue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>tcflush</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>termios_tcflow__doc__</name></expr></argument>,
<argument><expr>"tcflow(fd, action) -&gt; None\n\
\n\
Suspend or resume input or output on file descriptor fd.\n\
The action argument can be termios.TCOOFF to suspend output,\n\
termios.TCOON to restart output, termios.TCIOFF to suspend input,\n\
or termios.TCION to restart input."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>termios_tcflow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>action</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;i:tcflow"</expr></argument>,
<argument><expr><name>fdconv</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>action</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>tcflow</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>termios_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"tcgetattr"</expr>, <expr><name>termios_tcgetattr</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>termios_tcgetattr__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tcsetattr"</expr>, <expr><name>termios_tcsetattr</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>termios_tcsetattr__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tcsendbreak"</expr>, <expr><name>termios_tcsendbreak</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>termios_tcsendbreak__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tcdrain"</expr>, <expr><name>termios_tcdrain</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>termios_tcdrain__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tcflush"</expr>, <expr><name>termios_tcflush</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>termios_tcflush__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tcflow"</expr>, <expr><name>termios_tcflow</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>termios_tcflow__doc__</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTCH</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>VSWTC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSWTC</name></cpp:macro> <cpp:value>VSWTCH</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTC</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>VSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSWTCH</name></cpp:macro> <cpp:value>VSWTC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct><specifier>static</specifier> struct <name>constant</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name><name>termios_constants</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"B0"</expr>, <expr><name>B0</name></expr>}</block></expr>,
<expr><block>{<expr>"B50"</expr>, <expr><name>B50</name></expr>}</block></expr>,
<expr><block>{<expr>"B75"</expr>, <expr><name>B75</name></expr>}</block></expr>,
<expr><block>{<expr>"B110"</expr>, <expr><name>B110</name></expr>}</block></expr>,
<expr><block>{<expr>"B134"</expr>, <expr><name>B134</name></expr>}</block></expr>,
<expr><block>{<expr>"B150"</expr>, <expr><name>B150</name></expr>}</block></expr>,
<expr><block>{<expr>"B200"</expr>, <expr><name>B200</name></expr>}</block></expr>,
<expr><block>{<expr>"B300"</expr>, <expr><name>B300</name></expr>}</block></expr>,
<expr><block>{<expr>"B600"</expr>, <expr><name>B600</name></expr>}</block></expr>,
<expr><block>{<expr>"B1200"</expr>, <expr><name>B1200</name></expr>}</block></expr>,
<expr><block>{<expr>"B1800"</expr>, <expr><name>B1800</name></expr>}</block></expr>,
<expr><block>{<expr>"B2400"</expr>, <expr><name>B2400</name></expr>}</block></expr>,
<expr><block>{<expr>"B4800"</expr>, <expr><name>B4800</name></expr>}</block></expr>,
<expr><block>{<expr>"B9600"</expr>, <expr><name>B9600</name></expr>}</block></expr>,
<expr><block>{<expr>"B19200"</expr>, <expr><name>B19200</name></expr>}</block></expr>,
<expr><block>{<expr>"B38400"</expr>, <expr><name>B38400</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B57600</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"B57600"</expr>, <expr><name>B57600</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B115200</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"B115200"</expr>, <expr><name>B115200</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B230400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"B230400"</expr>, <expr><name>B230400</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CBAUDEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CBAUDEX"</expr>, <expr><name>CBAUDEX</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"TCSANOW"</expr>, <expr><name>TCSANOW</name></expr>}</block></expr>,
<expr><block>{<expr>"TCSADRAIN"</expr>, <expr><name>TCSADRAIN</name></expr>}</block></expr>,
<expr><block>{<expr>"TCSAFLUSH"</expr>, <expr><name>TCSAFLUSH</name></expr>}</block></expr>,
<expr><block>{<expr>"TCIFLUSH"</expr>, <expr><name>TCIFLUSH</name></expr>}</block></expr>,
<expr><block>{<expr>"TCOFLUSH"</expr>, <expr><name>TCOFLUSH</name></expr>}</block></expr>,
<expr><block>{<expr>"TCIOFLUSH"</expr>, <expr><name>TCIOFLUSH</name></expr>}</block></expr>,
<expr><block>{<expr>"TCOOFF"</expr>, <expr><name>TCOOFF</name></expr>}</block></expr>,
<expr><block>{<expr>"TCOON"</expr>, <expr><name>TCOON</name></expr>}</block></expr>,
<expr><block>{<expr>"TCIOFF"</expr>, <expr><name>TCIOFF</name></expr>}</block></expr>,
<expr><block>{<expr>"TCION"</expr>, <expr><name>TCION</name></expr>}</block></expr>,
<expr><block>{<expr>"IGNBRK"</expr>, <expr><name>IGNBRK</name></expr>}</block></expr>,
<expr><block>{<expr>"BRKINT"</expr>, <expr><name>BRKINT</name></expr>}</block></expr>,
<expr><block>{<expr>"IGNPAR"</expr>, <expr><name>IGNPAR</name></expr>}</block></expr>,
<expr><block>{<expr>"PARMRK"</expr>, <expr><name>PARMRK</name></expr>}</block></expr>,
<expr><block>{<expr>"INPCK"</expr>, <expr><name>INPCK</name></expr>}</block></expr>,
<expr><block>{<expr>"ISTRIP"</expr>, <expr><name>ISTRIP</name></expr>}</block></expr>,
<expr><block>{<expr>"INLCR"</expr>, <expr><name>INLCR</name></expr>}</block></expr>,
<expr><block>{<expr>"IGNCR"</expr>, <expr><name>IGNCR</name></expr>}</block></expr>,
<expr><block>{<expr>"ICRNL"</expr>, <expr><name>ICRNL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IUCLC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"IUCLC"</expr>, <expr><name>IUCLC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"IXON"</expr>, <expr><name>IXON</name></expr>}</block></expr>,
<expr><block>{<expr>"IXANY"</expr>, <expr><name>IXANY</name></expr>}</block></expr>,
<expr><block>{<expr>"IXOFF"</expr>, <expr><name>IXOFF</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IMAXBEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"IMAXBEL"</expr>, <expr><name>IMAXBEL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"OPOST"</expr>, <expr><name>OPOST</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OLCUC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"OLCUC"</expr>, <expr><name>OLCUC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ONLCR"</expr>, <expr><name>ONLCR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OCRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"OCRNL"</expr>, <expr><name>OCRNL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONOCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ONOCR"</expr>, <expr><name>ONOCR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ONLRET"</expr>, <expr><name>ONLRET</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OFILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"OFILL"</expr>, <expr><name>OFILL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OFDEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"OFDEL"</expr>, <expr><name>OFDEL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NLDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"NLDLY"</expr>, <expr><name>NLDLY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CRDLY"</expr>, <expr><name>CRDLY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TABDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TABDLY"</expr>, <expr><name>TABDLY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"BSDLY"</expr>, <expr><name>BSDLY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VTDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VTDLY"</expr>, <expr><name>VTDLY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFDLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FFDLY"</expr>, <expr><name>FFDLY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NL0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"NL0"</expr>, <expr><name>NL0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NL1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"NL1"</expr>, <expr><name>NL1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CR0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CR0"</expr>, <expr><name>CR0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CR1"</expr>, <expr><name>CR1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CR2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CR2"</expr>, <expr><name>CR2</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CR3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CR3"</expr>, <expr><name>CR3</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAB0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TAB0"</expr>, <expr><name>TAB0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAB1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TAB1"</expr>, <expr><name>TAB1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAB2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TAB2"</expr>, <expr><name>TAB2</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAB3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TAB3"</expr>, <expr><name>TAB3</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"XTABS"</expr>, <expr><name>XTABS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BS0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"BS0"</expr>, <expr><name>BS0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BS1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"BS1"</expr>, <expr><name>BS1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VT0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VT0"</expr>, <expr><name>VT0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VT1"</expr>, <expr><name>VT1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FF0"</expr>, <expr><name>FF0</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FF1"</expr>, <expr><name>FF1</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"CSIZE"</expr>, <expr><name>CSIZE</name></expr>}</block></expr>,
<expr><block>{<expr>"CSTOPB"</expr>, <expr><name>CSTOPB</name></expr>}</block></expr>,
<expr><block>{<expr>"CREAD"</expr>, <expr><name>CREAD</name></expr>}</block></expr>,
<expr><block>{<expr>"PARENB"</expr>, <expr><name>PARENB</name></expr>}</block></expr>,
<expr><block>{<expr>"PARODD"</expr>, <expr><name>PARODD</name></expr>}</block></expr>,
<expr><block>{<expr>"HUPCL"</expr>, <expr><name>HUPCL</name></expr>}</block></expr>,
<expr><block>{<expr>"CLOCAL"</expr>, <expr><name>CLOCAL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CIBAUD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CIBAUD"</expr>, <expr><name>CIBAUD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRTSCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CRTSCTS"</expr>, <expr>(<name>long</name>)<name>CRTSCTS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"CS5"</expr>, <expr><name>CS5</name></expr>}</block></expr>,
<expr><block>{<expr>"CS6"</expr>, <expr><name>CS6</name></expr>}</block></expr>,
<expr><block>{<expr>"CS7"</expr>, <expr><name>CS7</name></expr>}</block></expr>,
<expr><block>{<expr>"CS8"</expr>, <expr><name>CS8</name></expr>}</block></expr>,
<expr><block>{<expr>"ISIG"</expr>, <expr><name>ISIG</name></expr>}</block></expr>,
<expr><block>{<expr>"ICANON"</expr>, <expr><name>ICANON</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XCASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"XCASE"</expr>, <expr><name>XCASE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"ECHO"</expr>, <expr><name>ECHO</name></expr>}</block></expr>,
<expr><block>{<expr>"ECHOE"</expr>, <expr><name>ECHOE</name></expr>}</block></expr>,
<expr><block>{<expr>"ECHOK"</expr>, <expr><name>ECHOK</name></expr>}</block></expr>,
<expr><block>{<expr>"ECHONL"</expr>, <expr><name>ECHONL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ECHOCTL"</expr>, <expr><name>ECHOCTL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOPRT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ECHOPRT"</expr>, <expr><name>ECHOPRT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"ECHOKE"</expr>, <expr><name>ECHOKE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLUSHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FLUSHO"</expr>, <expr><name>FLUSHO</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"NOFLSH"</expr>, <expr><name>NOFLSH</name></expr>}</block></expr>,
<expr><block>{<expr>"TOSTOP"</expr>, <expr><name>TOSTOP</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PENDIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"PENDIN"</expr>, <expr><name>PENDIN</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"IEXTEN"</expr>, <expr><name>IEXTEN</name></expr>}</block></expr>,
<expr><block>{<expr>"VINTR"</expr>, <expr><name>VINTR</name></expr>}</block></expr>,
<expr><block>{<expr>"VQUIT"</expr>, <expr><name>VQUIT</name></expr>}</block></expr>,
<expr><block>{<expr>"VERASE"</expr>, <expr><name>VERASE</name></expr>}</block></expr>,
<expr><block>{<expr>"VKILL"</expr>, <expr><name>VKILL</name></expr>}</block></expr>,
<expr><block>{<expr>"VEOF"</expr>, <expr><name>VEOF</name></expr>}</block></expr>,
<expr><block>{<expr>"VTIME"</expr>, <expr><name>VTIME</name></expr>}</block></expr>,
<expr><block>{<expr>"VMIN"</expr>, <expr><name>VMIN</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSWTC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VSWTC"</expr>, <expr><name>VSWTC</name></expr>}</block></expr>,
<expr><block>{<expr>"VSWTCH"</expr>, <expr><name>VSWTCH</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"VSTART"</expr>, <expr><name>VSTART</name></expr>}</block></expr>,
<expr><block>{<expr>"VSTOP"</expr>, <expr><name>VSTOP</name></expr>}</block></expr>,
<expr><block>{<expr>"VSUSP"</expr>, <expr><name>VSUSP</name></expr>}</block></expr>,
<expr><block>{<expr>"VEOL"</expr>, <expr><name>VEOL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VREPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VREPRINT"</expr>, <expr><name>VREPRINT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISCARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VDISCARD"</expr>, <expr><name>VDISCARD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VWERASE"</expr>, <expr><name>VWERASE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VLNEXT"</expr>, <expr><name>VLNEXT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VEOL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"VEOL2"</expr>, <expr><name>VEOL2</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B460800</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"B460800"</expr>, <expr><name>B460800</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CBAUD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CBAUD"</expr>, <expr><name>CBAUD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CDEL"</expr>, <expr><name>CDEL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CDSUSP"</expr>, <expr><name>CDSUSP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CEOF"</expr>, <expr><name>CEOF</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CEOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CEOL"</expr>, <expr><name>CEOL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CEOL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CEOL2"</expr>, <expr><name>CEOL2</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CEOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CEOT"</expr>, <expr><name>CEOT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CERASE"</expr>, <expr><name>CERASE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CESC"</expr>, <expr><name>CESC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CFLUSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CFLUSH"</expr>, <expr><name>CFLUSH</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CINTR"</expr>, <expr><name>CINTR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CKILL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CKILL"</expr>, <expr><name>CKILL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CLNEXT"</expr>, <expr><name>CLNEXT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CNUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CNUL"</expr>, <expr><name>CNUL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"COMMON"</expr>, <expr><name>COMMON</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CQUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CQUIT"</expr>, <expr><name>CQUIT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRPRNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CRPRNT"</expr>, <expr><name>CRPRNT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSTART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CSTART"</expr>, <expr><name>CSTART</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CSTOP"</expr>, <expr><name>CSTOP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CSUSP"</expr>, <expr><name>CSUSP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CSWTCH"</expr>, <expr><name>CSWTCH</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"CWERASE"</expr>, <expr><name>CWERASE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"EXTA"</expr>, <expr><name>EXTA</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"EXTB"</expr>, <expr><name>EXTB</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIOASYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FIOASYNC"</expr>, <expr><name>FIOASYNC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIOCLEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FIOCLEX"</expr>, <expr><name>FIOCLEX</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONBIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FIONBIO"</expr>, <expr><name>FIONBIO</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONCLEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FIONCLEX"</expr>, <expr><name>FIONCLEX</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"FIONREAD"</expr>, <expr><name>FIONREAD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBSHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"IBSHIFT"</expr>, <expr><name>IBSHIFT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INIT_C_CC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"INIT_C_CC"</expr>, <expr><name>INIT_C_CC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IOCSIZE_MASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"IOCSIZE_MASK"</expr>, <expr><name>IOCSIZE_MASK</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IOCSIZE_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"IOCSIZE_SHIFT"</expr>, <expr><name>IOCSIZE_SHIFT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"NCC"</expr>, <expr><name>NCC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCCS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"NCCS"</expr>, <expr><name>NCCS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NSWTCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"NSWTCH"</expr>, <expr><name>NSWTCH</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_MOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"N_MOUSE"</expr>, <expr><name>N_MOUSE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_PPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"N_PPP"</expr>, <expr><name>N_PPP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_SLIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"N_SLIP"</expr>, <expr><name>N_SLIP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_STRIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"N_STRIP"</expr>, <expr><name>N_STRIP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"N_TTY"</expr>, <expr><name>N_TTY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCFLSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCFLSH"</expr>, <expr><name>TCFLSH</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCGETA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCGETA"</expr>, <expr><name>TCGETA</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCGETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCGETS"</expr>, <expr><name>TCGETS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSBRK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSBRK"</expr>, <expr><name>TCSBRK</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSBRKP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSBRKP"</expr>, <expr><name>TCSBRKP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSETA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSETA"</expr>, <expr><name>TCSETA</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSETAF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSETAF"</expr>, <expr><name>TCSETAF</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSETAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSETAW"</expr>, <expr><name>TCSETAW</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSETS"</expr>, <expr><name>TCSETS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSETSF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSETSF"</expr>, <expr><name>TCSETSF</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCSETSW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCSETSW"</expr>, <expr><name>TCSETSW</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCXONC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TCXONC"</expr>, <expr><name>TCXONC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCCONS"</expr>, <expr><name>TIOCCONS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCEXCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCEXCL"</expr>, <expr><name>TIOCEXCL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGETD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGETD"</expr>, <expr><name>TIOCGETD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGICOUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGICOUNT"</expr>, <expr><name>TIOCGICOUNT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGLCKTRMIOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGLCKTRMIOS"</expr>, <expr><name>TIOCGLCKTRMIOS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGPGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGPGRP"</expr>, <expr><name>TIOCGPGRP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGSERIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGSERIAL"</expr>, <expr><name>TIOCGSERIAL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGSOFTCAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGSOFTCAR"</expr>, <expr><name>TIOCGSOFTCAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCGWINSZ"</expr>, <expr><name>TIOCGWINSZ</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCINQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCINQ"</expr>, <expr><name>TIOCINQ</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCLINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCLINUX"</expr>, <expr><name>TIOCLINUX</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCMBIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCMBIC"</expr>, <expr><name>TIOCMBIC</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCMBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCMBIS"</expr>, <expr><name>TIOCMBIS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCMGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCMGET"</expr>, <expr><name>TIOCMGET</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCMIWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCMIWAIT"</expr>, <expr><name>TIOCMIWAIT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCMSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCMSET"</expr>, <expr><name>TIOCMSET</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_CAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_CAR"</expr>, <expr><name>TIOCM_CAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_CD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_CD"</expr>, <expr><name>TIOCM_CD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_CTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_CTS"</expr>, <expr><name>TIOCM_CTS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_DSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_DSR"</expr>, <expr><name>TIOCM_DSR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_DTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_DTR"</expr>, <expr><name>TIOCM_DTR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_LE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_LE"</expr>, <expr><name>TIOCM_LE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_RI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_RI"</expr>, <expr><name>TIOCM_RI</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_RNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_RNG"</expr>, <expr><name>TIOCM_RNG</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_RTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_RTS"</expr>, <expr><name>TIOCM_RTS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_SR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_SR"</expr>, <expr><name>TIOCM_SR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCM_ST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCM_ST"</expr>, <expr><name>TIOCM_ST</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCNOTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCNOTTY"</expr>, <expr><name>TIOCNOTTY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCNXCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCNXCL"</expr>, <expr><name>TIOCNXCL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCOUTQ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCOUTQ"</expr>, <expr><name>TIOCOUTQ</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT"</expr>, <expr><name>TIOCPKT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_DATA"</expr>, <expr><name>TIOCPKT_DATA</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_DOSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_DOSTOP"</expr>, <expr><name>TIOCPKT_DOSTOP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_FLUSHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_FLUSHREAD"</expr>, <expr><name>TIOCPKT_FLUSHREAD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_FLUSHWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_FLUSHWRITE"</expr>, <expr><name>TIOCPKT_FLUSHWRITE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_NOSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_NOSTOP"</expr>, <expr><name>TIOCPKT_NOSTOP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_START</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_START"</expr>, <expr><name>TIOCPKT_START</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCPKT_STOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCPKT_STOP"</expr>, <expr><name>TIOCPKT_STOP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSCTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSCTTY"</expr>, <expr><name>TIOCSCTTY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERCONFIG"</expr>, <expr><name>TIOCSERCONFIG</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERGETLSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERGETLSR"</expr>, <expr><name>TIOCSERGETLSR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERGETMULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERGETMULTI"</expr>, <expr><name>TIOCSERGETMULTI</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERGSTRUCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERGSTRUCT"</expr>, <expr><name>TIOCSERGSTRUCT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERGWILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERGWILD"</expr>, <expr><name>TIOCSERGWILD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERSETMULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERSETMULTI"</expr>, <expr><name>TIOCSERSETMULTI</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSERSWILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSERSWILD"</expr>, <expr><name>TIOCSERSWILD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSER_TEMT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSER_TEMT"</expr>, <expr><name>TIOCSER_TEMT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSETD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSETD"</expr>, <expr><name>TIOCSETD</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSLCKTRMIOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSLCKTRMIOS"</expr>, <expr><name>TIOCSLCKTRMIOS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSPGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSPGRP"</expr>, <expr><name>TIOCSPGRP</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSSERIAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSSERIAL"</expr>, <expr><name>TIOCSSERIAL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSSOFTCAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSSOFTCAR"</expr>, <expr><name>TIOCSSOFTCAR</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSTI"</expr>, <expr><name>TIOCSTI</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCSWINSZ"</expr>, <expr><name>TIOCSWINSZ</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCTTYGSTRUCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"TIOCTTYGSTRUCT"</expr>, <expr><name>TIOCTTYGSTRUCT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>PyInit_termios</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>constant</name> *</type><name>constant</name> <init>= <expr><name>termios_constants</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"termios"</expr></argument>, <argument><expr><name>termios_methods</name></expr></argument>, <argument><expr><name>termios__doc__</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>TermiosError</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>TermiosError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"termios.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>TermiosError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>constant</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>constant</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>constant</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>constant</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
</unit>
