<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/sunaudiodev.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_AUDIOIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOLARIS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stropts.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/audioio.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sun/audioio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>int</name></type> <name>x_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_icount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_ocount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_isctl</name></decl>;</decl_stmt>
}</block></struct></type> <name>sadobject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>audio_info_t</name></type> <name>ai</name></decl>;</decl_stmt>
}</block></struct></type> <name>sadstatusobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Sadtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Sadstatustype</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>sadstatusobject</name> *</type><name>sads_alloc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SunAudioError</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_sadobject</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(v) == &amp;Sadtype)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_sadstatusobject</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(v) == &amp;Sadstatustype)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>sadobject</name> *</type>
<name>newsadobject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sadobject</name> *</type><name>xp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>basedev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>ctldev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>opendev</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>imode</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>imode</name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr>"rw"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>imode</name> = 2</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr>"control"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>imode</name> = -1</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>,
<argument><expr>"Mode should be one of 'r', 'w', 'rw' or 'control'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>basedev</name> = <call><name>getenv</name><argument_list>(<argument><expr>"AUDIODEV"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>basedev</name></expr>)</condition><then>
<expr_stmt><expr><name>basedev</name> = "/dev/audio"</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ctldev</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>basedev</name></expr></argument>)</argument_list></call> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ctldev</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ctldev</name></expr></argument>, <argument><expr><name>basedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>ctldev</name></expr></argument>, <argument><expr>"ctl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>imode</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>opendev</name> = <name>ctldev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> = <call><name>open</name><argument_list>(<argument><expr><name>ctldev</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>opendev</name> = <name>basedev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> = <call><name>open</name><argument_list>(<argument><expr><name>basedev</name></expr></argument>, <argument><expr><name>imode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>fd</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrnoWithFilename</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>, <argument><expr><name>opendev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>ctldev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>ctldev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>sadobject</name></expr></argument>, <argument><expr>&amp;<name>Sadtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_fd</name></name> = <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_icount</name></name> = <name><name>xp</name>-&gt;<name>x_ocount</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_isctl</name></name> = (<name>imode</name> &lt; 0)</expr>;</expr_stmt>
<return>return <expr><name>xp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sad_dealloc</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>xp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>xp</name>-&gt;<name>x_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_read</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:read"</expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!(<name>cp</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>count</name> = <call><name>read</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
if (count != size)
printf("sunaudio: funny read rv %d wtd %d\n", count, size);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>self</name>-&gt;<name>x_icount</name></name> += <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_write</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:write"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>count</name> = <call><name>write</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
if (count != size)
printf("sunaudio: funny write rv %d wanted %d\n", count, size);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>self</name>-&gt;<name>x_ocount</name></name> += <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_getinfo</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sadstatusobject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>rv</name> = <call><name>sads_alloc</name><argument_list>()</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>AUDIO_GETINFO</name></expr></argument>, <argument><expr>&amp;<name><name>rv</name>-&gt;<name>ai</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_setinfo</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>sadstatusobject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>is_sadstatusobject</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"Must be sun audio status object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>AUDIO_SETINFO</name></expr></argument>, <argument><expr>&amp;<name><name>arg</name>-&gt;<name>ai</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_ibufcount</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>audio_info_t</name></type> <name>ai</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>AUDIO_GETINFO</name></expr></argument>, <argument><expr>&amp;<name>ai</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>ai</name>.<name>record</name>.<name>samples</name></name> - <name><name>self</name>-&gt;<name>x_icount</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_obufcount</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>audio_info_t</name></type> <name>ai</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>AUDIO_GETINFO</name></expr></argument>, <argument><expr>&amp;<name>ai</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_ocount</name></name> / (<name><name>ai</name>.<name>play</name>.<name>channels</name></name> *
<name><name>ai</name>.<name>play</name>.<name>precision</name></name> / 8) -
<name><name>ai</name>.<name>play</name>.<name>samples</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_drain</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>AUDIO_DRAIN</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_getdev</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>audio_device</name></type> <name>ad</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>AUDIO_GETDEV</name></expr></argument>, <argument><expr>&amp;<name>ad</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(sss)"</expr></argument>, <argument><expr><name><name>ad</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>ad</name>.<name>version</name></name></expr></argument>, <argument><expr><name><name>ad</name>.<name>config</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_flush</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>I_FLUSH</name></expr></argument>, <argument><expr><name>FLUSHW</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_close</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>x_fd</name></name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>x_fd</name></name> = -1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_fileno</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>sad_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"read"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_read</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"write"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_write</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"ibufcount"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_ibufcount</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"obufcount"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_obufcount</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTL_METHODS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<expr><block>{ <expr>"getinfo"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_getinfo</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"setinfo"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_setinfo</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{ <expr>"drain"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_drain</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"flush"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_flush</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr>"getdev"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_getdev</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_close</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"fileno"</expr>, <expr>(<name>PyCFunction</name>)<name>sad_fileno</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sad_getattr</name><parameter_list>(<param><decl><type><name>sadobject</name> *</type><name>xp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>xp</name>-&gt;<name>x_isctl</name></name></expr>)</condition><then>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>sad_methods</name>+<name>CTL_METHODS</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>xp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>sad_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>xp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>sadstatusobject</name> *</type>
<name>sads_alloc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_New</name><argument_list>(<argument><expr><name>sadstatusobject</name></expr></argument>, <argument><expr>&amp;<name>Sadstatustype</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sads_dealloc</name><parameter_list>(<param><decl><type><name>sadstatusobject</name> *</type><name>xp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(audio_info_t,x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>memberlist</name></type> <name><name>sads_ml</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"i_sample_rate"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.sample_rate</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_channels"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.channels</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_precision"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.precision</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_encoding"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.encoding</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_gain"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.gain</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_port"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.port</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_samples"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.samples</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_eof"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.eof</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_pause"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.pause</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_error"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.error</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_waiting"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.waiting</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_open"</expr>, <expr><name>T_UBYTE</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name><name>record</name>.<name>open</name></name></expr></argument>)</argument_list></call></expr> , <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{ <expr>"i_active"</expr>, <expr><name>T_UBYTE</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name><name>record</name>.<name>active</name></name></expr></argument>)</argument_list></call></expr> , <expr><name>RO</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr>"i_buffer_size"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.buffer_size</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_balance"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.balance</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"i_avail_ports"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>record.avail_ports</argument>)</argument_list></macro> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"o_sample_rate"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.sample_rate</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_channels"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.channels</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_precision"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.precision</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_encoding"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.encoding</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_gain"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.gain</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_port"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.port</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_samples"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.samples</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_eof"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.eof</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_pause"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.pause</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_error"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.error</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_waiting"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.waiting</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_open"</expr>, <expr><name>T_UBYTE</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name><name>play</name>.<name>open</name></name></expr></argument>)</argument_list></call></expr> , <expr><name>RO</name></expr>}</block></expr>,
<expr><block>{ <expr>"o_active"</expr>, <expr><name>T_UBYTE</name></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name><name>play</name>.<name>active</name></name></expr></argument>)</argument_list></call></expr> , <expr><name>RO</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr>"o_buffer_size"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.buffer_size</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_balance"</expr>, <expr><name>T_UBYTE</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.balance</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr>"o_avail_ports"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>play.avail_ports</argument>)</argument_list></macro> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"monitor_gain"</expr>, <expr><name>T_UINT</name></expr>, <macro><name>OFF</name><argument_list>(<argument>monitor_gain</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr>0</expr>, <expr>0</expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sads_getattr</name><parameter_list>(<param><decl><type><name>sadstatusobject</name> *</type><name>xp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyMember_Get</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>xp</name>-&gt;<name>ai</name></name></expr></argument>, <argument><expr><name>sads_ml</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>sads_setattr</name><parameter_list>(<param><decl><type><name>sadstatusobject</name> *</type><name>xp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't delete sun audio status attributes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyMember_Set</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name><name>xp</name>-&gt;<name>ai</name></name></expr></argument>, <argument><expr><name>sads_ml</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Sadtype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"sunaudiodev.sun_audio_device"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>sadobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>sad_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>sad_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Sadstatustype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"sunaudiodev.sun_audio_device_status"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>sadstatusobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>sads_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>sads_getattr</name></expr>,
<expr>(<name>setattrfunc</name>)<name>sads_setattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>sadopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>PyObject</name> *)<call><name>newsadobject</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>sunaudiodev_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"open"</expr>, <expr><name>sadopen</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>initsunaudiodev</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the sunaudiodev module has been removed in "
"Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"sunaudiodev"</expr></argument>, <argument><expr><name>sunaudiodev_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SunAudioError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"sunaudiodev.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>SunAudioError</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>SunAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
