<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="PCbuild/kill_python.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> comment(lib, "psapi")</cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_EXE</name></cpp:macro> <cpp:value>(L"python_d.exe")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_EXE_LEN</name></cpp:macro> <cpp:value>(12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILL_PYTHON_EXE</name></cpp:macro> <cpp:value>(L"kill_python_d.exe")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILL_PYTHON_EXE_LEN</name></cpp:macro> <cpp:value>(17)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_EXE</name></cpp:macro> <cpp:value>(L"python.exe")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_EXE_LEN</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILL_PYTHON_EXE</name></cpp:macro> <cpp:value>(L"kill_python.exe")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILL_PYTHON_EXE_LEN</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hp</name></decl>, <decl><type ref="prev"/><name>hsp</name></decl>, <decl><type ref="prev"/><name>hsm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dac</name></decl>, <decl><type ref="prev"/><name>our_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name>+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MODULEENTRY32W</name></type> <name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESSENTRY32W</name></type> <name>pe</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>me</name>.<name>dwSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>MODULEENTRY32W</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name>.<name>dwSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32W</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>MAX_PATH</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>our_pid</name> = <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hsm</name> = <call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPMODULE</name></expr></argument>, <argument><expr><name>our_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hsm</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"CreateToolhelp32Snapshot[1] failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>Module32FirstW</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>, <argument><expr>&amp;<name>me</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Module32FirstW[1] failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<do>do <block>{
<if>if <condition>(<expr><call><name>_wcsnicmp</name><argument_list>(<argument><expr><name><name>me</name>.<name>szModule</name></name></expr></argument>, <argument><expr><name>KILL_PYTHON_EXE</name></expr></argument>, <argument><expr><name>KILL_PYTHON_EXE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>len</name> = <call><name>wcsnlen_s</name><argument_list>(<argument><expr><name><name>me</name>.<name>szExePath</name></name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call> - <name>KILL_PYTHON_EXE_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcsncpy_s</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name>+1</expr></argument>, <argument><expr><name><name>me</name>.<name>szExePath</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block> while <condition>(<expr><call><name>Module32NextW</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>, <argument><expr>&amp;<name>me</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"failed to discern directory of running process\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>hsp</name> = <call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hsp</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"CreateToolhelp32Snapshot[2] failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>Process32FirstW</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>, <argument><expr>&amp;<name>pe</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Process32FirstW failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dac</name> = <name>PROCESS_QUERY_INFORMATION</name> | <name>PROCESS_VM_READ</name> | <name>PROCESS_TERMINATE</name></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><call><name>_wcsnicmp</name><argument_list>(<argument><expr><name><name>pe</name>.<name>szExeFile</name></name></expr></argument>, <argument><expr><name>PYTHON_EXE</name></expr></argument>, <argument><expr><name>PYTHON_EXE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>hsm</name> = <call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPMODULE</name></expr></argument>, <argument><expr><name><name>pe</name>.<name>th32ProcessID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hsm</name> == <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>!<call><name>Module32FirstW</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>, <argument><expr>&amp;<name>me</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Module32FirstW[2] failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<do>do <block>{
<if>if <condition>(<expr><call><name>_wcsnicmp</name><argument_list>(<argument><expr><name><name>me</name>.<name>szModule</name></name></expr></argument>, <argument><expr><name>PYTHON_EXE</name></expr></argument>, <argument><expr><name>PYTHON_EXE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><call><name>_wcsnicmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>me</name>.<name>szExePath</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>hp</name> = <call><name>OpenProcess</name><argument_list>(<argument><expr><name>dac</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>pe</name>.<name>th32ProcessID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"OpenProcess failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>TerminateProcess</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"TerminateProcess failed: %d\n"</expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block> while <condition>(<expr><call><name>Module32NextW</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>, <argument><expr>&amp;<name>me</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>Process32NextW</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>, <argument><expr>&amp;<name>pe</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
