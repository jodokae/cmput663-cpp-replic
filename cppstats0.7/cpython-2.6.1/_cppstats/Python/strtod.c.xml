<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/strtod.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pyconfig.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>MDMINEXPT</name> <init>= <expr>-323</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>MDMINFRAC</name><index>[]</index></name> <init>= <expr>"494065645841246544"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>ZERO</name> <init>= <expr>0.0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>MDMAXEXPT</name> <init>= <expr>309</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>MDMAXFRAC</name><index>[]</index></name> <init>= <expr>"17976931348623157"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>HUGE</name> <init>= <expr>1.7976931348623157e308</expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>double</name></type> <name>atof</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>
<function><type><name>double</name></type> <name>strtod</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>dotseen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esign</name></decl>, <decl><type ref="prev"/><name>expt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>sp</name></decl>, *<decl><type ref="prev"/><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buforg</name></decl>, *<decl><type ref="prev"/><name>buflim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>sp</name> = <name>str</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>sp</name> == ' '</expr>)</condition> <expr_stmt><expr><name>sp</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name>sign</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>sp</name> == '-'</expr>)</condition><then> <expr_stmt><expr><name>sign</name> -= 2</expr>, <expr><name>sp</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>dotseen</name> = 0</expr>, <expr><name>scale</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> = <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dp</name>++ = '0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>dp</name>++ = '.'</expr>;</expr_stmt>
<expr_stmt><expr><name>buforg</name> = <name>dp</name></expr>, <expr><name>buflim</name> = <name>buffer</name>+48</expr>;</expr_stmt>
<for>for (<init><expr><name>save</name> = <name>sp</name></expr>;</init> <condition><expr><name>c</name> = *<name>sp</name></expr>;</condition> <incr><expr><name>sp</name>++</expr></incr>)
<if>if <condition>(<expr><name>c</name> == '.'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>dotseen</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name>dotseen</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>c</name>-'0'</expr></argument>)</argument_list></call> &gt; <call>(<name>unsigned</name>)<argument_list>(<argument><expr>'9'-'0'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == '0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>dp</name> != <name>buforg</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>dp</name> &lt; <name>buflim</name></expr>)</condition><then> <expr_stmt><expr>*<name>dp</name>++ = <name>c</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>dotseen</name></expr>)</condition><then> <expr_stmt><expr><name>scale</name>++</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>dotseen</name></expr>)</condition><then> <expr_stmt><expr><name>scale</name>--</expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>dp</name> &lt; <name>buflim</name></expr>)</condition><then> <expr_stmt><expr>*<name>dp</name>++ = <name>c</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>dotseen</name></expr>)</condition><then> <expr_stmt><expr><name>scale</name>++</expr>;</expr_stmt></then></if>
}</block></else></if></else></if></else></if></for>
<if>if <condition>(<expr><name>sp</name> == <name>save</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ptr</name></expr>)</condition><then> <expr_stmt><expr>*<name>ptr</name> = <name>str</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>errno</name> = <name>EDOM</name></expr>;</expr_stmt>
<return>return <expr><name>ZERO</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>dp</name> &gt; <name>buforg</name> &amp;&amp; <name><name>dp</name><index>[<expr>-1</expr>]</index></name> == '0'</expr>)</condition> <expr_stmt><expr>--<name>dp</name></expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>dp</name> == <name>buforg</name></expr>)</condition><then> <expr_stmt><expr>*<name>dp</name>++ = '0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>dp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> = <name>sp</name></expr>, <expr><name>expt</name> = 0</expr>, <expr><name>esign</name> = 1</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>c</name> = *<name>sp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> != 'e' &amp;&amp; <name>c</name> != 'E'</expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name>c</name> = *<name>sp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '-'</expr>)</condition><then> <expr_stmt><expr><name>esign</name> -= 2</expr>, <expr><name>c</name> = *<name>sp</name>++</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> == '+'</expr> )</condition><then> <expr_stmt><expr><name>c</name> = *<name>sp</name>++</expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>c</name>-'0'</expr></argument>)</argument_list></call> &gt; <call>(<name>unsigned</name>)<argument_list>(<argument><expr>'9'-'0'</expr></argument>)</argument_list></call></expr>)</condition><then> <break>break;</break></then></if>
<while>while <condition>(<expr><name>c</name> == '0'</expr>)</condition> <expr_stmt><expr><name>c</name> = *<name>sp</name>++</expr>;</expr_stmt></while>
<for>for (<init>;</init> <condition><expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>c</name>-'0'</expr></argument>)</argument_list></call> &lt;= <call>(<name>unsigned</name>)<argument_list>(<argument><expr>'9'-'0'</expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> = *<name>sp</name>++</expr></incr>)
<expr_stmt><expr><name>expt</name> = <name>expt</name>*10 + <name>c</name>-'0'</expr>;</expr_stmt></for>
<if>if <condition>(<expr><name>esign</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>expt</name> = -<name>expt</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>save</name> = <name>sp</name>-1</expr>;</expr_stmt>
}</block> while <condition>(<expr>0</expr>)</condition>;</do>
<if>if <condition>(<expr><name>ptr</name></expr>)</condition><then> <expr_stmt><expr>*<name>ptr</name> = <name>save</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>expt</name> += <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = <name>ERANGE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expt</name> &gt; <name>MDMAXEXPT</name></expr>)</condition><then> <block>{
<return>return <expr><name>HUGE</name>*<name>sign</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>expt</name> == <name>MDMAXEXPT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buforg</name></expr></argument>, <argument><expr><name>MDMAXFRAC</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <return>return <expr><name>HUGE</name>*<name>sign</name></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>expt</name> &lt; <name>MDMINEXPT</name></expr>)</condition><then> <block>{
<return>return <expr><name>ZERO</name>*<name>sign</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>expt</name> == <name>MDMINEXPT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buforg</name></expr></argument>, <argument><expr><name>MDMINFRAC</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr><name>ZERO</name>*<name>sign</name></expr>;</return></then></if>
}</block></then></if></else></if></else></if></else></if>
<expr_stmt><expr>(<name>void</name>) <call><name>sprintf</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr>"E%d"</expr></argument>, <argument><expr><name>expt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>atof</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>*<name>sign</name></expr>;</return>
}</block></function>
</unit>
