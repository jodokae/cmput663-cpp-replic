<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/thread_atheos.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atheos/threads.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atheos/semaphore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atheos/atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTLOCK</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>fastmutex</name> <block>{
<decl_stmt><decl><type><name>sem_id</name></type> <name>sem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>fastmutex_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_destroy</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_lock</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_timedlock</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>, <param><decl><type><name>bigtime_t</name></type> <name>timeout</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_unlock</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>count</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mutex</name>-&gt;<name>sem</name></name> = <call><name>create_semaphore</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name><name>mutex</name>-&gt;<name>sem</name></name> &lt; 0) ? -1 : 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_destroy</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>fastmutex_timedlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0 || <name>errno</name> == <name>EWOULDBLOCK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>delete_semaphore</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>sem</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_lock</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>atomic_t</name></type> <name>prev</name> <init>= <expr><call><name>atomic_add</name><argument_list>(<argument><expr>&amp;<name><name>mutex</name>-&gt;<name>count</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prev</name> &gt; 0</expr>)</condition><then>
<return>return <expr><call><name>lock_semaphore</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>sem</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_timedlock</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>, <param><decl><type><name>bigtime_t</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>atomic_t</name></type> <name>prev</name> <init>= <expr><call><name>atomic_add</name><argument_list>(<argument><expr>&amp;<name><name>mutex</name>-&gt;<name>count</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prev</name> &gt; 0</expr>)</condition><then>
<return>return <expr><call><name>lock_semaphore_x</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>sem</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fastmutex_unlock</name><parameter_list>(<param><decl><type><name>fastmutex_t</name> *</type> <name>mutex</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>atomic_t</name></type> <name>prev</name> <init>= <expr><call><name>atomic_add</name><argument_list>(<argument><expr>&amp;<name><name>mutex</name>-&gt;<name>count</name></name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prev</name> &gt; 1</expr>)</condition><then>
<return>return <expr><call><name>unlock_semaphore</name><argument_list>(<argument><expr><name><name>mutex</name>-&gt;<name>sem</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PyThread__init_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_t</name></type> <name>thread_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><name>long</name></type> <name>PyThread_start_new_thread</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>func</name>) <parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>status_t</name></type> <name>success</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>thread_id</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>OS_NAME_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_t</name></type> <name>this_thread</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_thread</name> = <call><name>atomic_add</name><argument_list>(<argument><expr>&amp;<name>thread_count</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"python thread (%d)"</expr></argument>, <argument><expr><name>this_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tid</name> = <call><name>spawn_thread</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>NORMAL_PRIORITY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tid</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread spawn_thread failed: %s\n", <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>success</name> = <call><name>resume_thread</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>success</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_start_new_thread resume_thread failed: %s\n", <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr>(<name>success</name> &lt; 0 ? -1 : <name>tid</name>)</expr>;</return>
}</block></function>
<function><type><name>long</name></type> <name>PyThread_get_thread_ident</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_thread_id</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_thread called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>atomic_add</name><argument_list>(<argument><expr>&amp;<name>thread_count</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>PyThread__exit_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_thread</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_EXIT_PROG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_cleanup</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_exit_prog(%d) called\n", <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>no_cleanup</name></expr>)</condition><then>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>PyThread__exit_prog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>do_PyThread_exit_prog</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_t</name></type> <name>lock_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><name>PyThread_type_lock</name></type> <name>PyThread_allocate_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>fastmutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>sem_id</name></type> <name>sema</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>OS_NAME_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_t</name></type> <name>this_lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock called\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lock</name> = (<name>fastmutex_t</name> *) <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fastmutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lock</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock failed: out of memory\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>) <name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>this_lock</name> = <call><name>atomic_add</name><argument_list>(<argument><expr>&amp;<name>lock_count</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"python lock (%d)"</expr></argument>, <argument><expr><name>this_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>fastmutex_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock failed: %s\n",
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock()-&gt; %p\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>) <name>lock</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>sema</name> = <call><name>create_semaphore</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sema</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock failed: %s\n",
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sema</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_allocate_lock()-&gt; %p\n", <name>sema</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyThread_type_lock</name>) <name>sema</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_free_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>fastmutex_destroy</name><argument_list>(<argument><expr>(<name>fastmutex_t</name> *) <name>lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) failed: %s\n", <name>lock</name>,
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><call><name>delete_semaphore</name><argument_list>(<argument><expr>(<name>sem_id</name>) <name>lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_free_lock(%p) failed: %s\n", <name>lock</name>,
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>int</name></type> <name>PyThread_acquire_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>, <param><decl><type><name>int</name></type> <name>waitflag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) called\n", <name>lock</name>,
<name>waitflag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then>
<expr_stmt><expr><name>retval</name> = <call><name>fastmutex_lock</name><argument_list>(<argument><expr>(<name>fastmutex_t</name> *) <name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>retval</name> = <call><name>fastmutex_timedlock</name><argument_list>(<argument><expr>(<name>fastmutex_t</name> *) <name>lock</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>waitflag</name></expr>)</condition><then>
<expr_stmt><expr><name>retval</name> = <call><name>lock_semaphore</name><argument_list>(<argument><expr>(<name>sem_id</name>) <name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>retval</name> = <call><name>lock_semaphore_x</name><argument_list>(<argument><expr>(<name>sem_id</name>) <name>lock</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>retval</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d) failed: %s\n",
<name>lock</name>, <name>waitflag</name>, <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_acquire_lock(%p, %d)-&gt; %d\n", <name>lock</name>, <name>waitflag</name>,
<name>retval</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name> &lt; 0 ? 0 : 1</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>PyThread_type_lock</name></type> <name>lock</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) called\n", <name>lock</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>fastmutex_unlock</name><argument_list>(<argument><expr>(<name>fastmutex_t</name> *) <name>lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) failed: %s\n", <name>lock</name>,
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><call><name>unlock_semaphore</name><argument_list>(<argument><expr>(<name>sem_id</name>) <name>lock</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr>("PyThread_release_lock(%p) failed: %s\n", <name>lock</name>,
<call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
