<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Python/dynload_aix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"importdl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ldr.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AIX_GENUINE_CPLUSPLUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"/usr/lpp/xlC/include/load.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aix_load</name></cpp:macro> <cpp:value>loadAndInit</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aix_load</name></cpp:macro> <cpp:value>load</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>char</name> *</type><name>Py_GetProgramName</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>Module</name> <block>{
<decl_stmt><decl><type>struct <name>Module</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>entry</name></decl>;</decl_stmt>
}</block></struct></type> <name>Module</name>, *<name>ModulePtr</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>filedescr</name></type> <name><name>_PyImport_DynLoadFiletab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>".so"</expr>, <expr>"rb"</expr>, <expr><name>C_EXTENSION</name></expr>}</block></expr>,
<expr><block>{<expr>"module.so"</expr>, <expr>"rb"</expr>, <expr><name>C_EXTENSION</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>aix_getoldmodules</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>modlistptr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>ModulePtr</name></type> <name>modptr</name></decl>, <decl><type ref="prev"/><name>prevmodptr</name></decl>;</decl_stmt>
<macro><name>register</name></macro> <decl_stmt><decl><type>struct <name>ld_info</name> *</type><name>ldiptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>ldibuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>errflag</name></decl>, <decl><type ref="prev"/><name>bufsize</name> <init>= <expr>1024</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>progname</name> <init>= <expr><call><name>Py_GetProgramName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ldibuf</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<name>errflag</name> = <call><name>loadquery</name><argument_list>(<argument><expr><name>L_GETINFO</name></expr></argument>, <argument><expr><name>ldibuf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call>) == -1
&amp;&amp; <name>errno</name> == <name>ENOMEM</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ldibuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufsize</name> += 1024</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>ldibuf</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>errflag</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ldiptr</name> = (struct <name>ld_info</name> *)<name>ldibuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevmodptr</name> = <name>NULL</name></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>ldiptr</name>-&gt;<name>ldinfo_filename</name></name></expr></argument>)</argument_list></call> == <name>NULL</name> &amp;&amp;
<call><name>strstr</name><argument_list>(<argument><expr><name><name>ldiptr</name>-&gt;<name>ldinfo_filename</name></name></expr></argument>, <argument><expr>"python"</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>offset</name> = (<name>unsigned</name> <name>int</name>)<name><name>ldiptr</name>-&gt;<name>ldinfo_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ldiptr</name> = (struct <name>ld_info</name> *)((<name>char</name>*)<name>ldiptr</name> + <name>offset</name>)</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>(<name>modptr</name> = (<name>ModulePtr</name>)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Module</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>modlistptr</name></expr>)</condition> <block>{
<expr_stmt><expr><name>modptr</name> = (<name>ModulePtr</name>)*<name>modlistptr</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>modlistptr</name> = (<name>void</name> *)<name><name>modptr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>modptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>modptr</name>-&gt;<name>entry</name></name> = <name><name>ldiptr</name>-&gt;<name>ldinfo_dataorg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modptr</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prevmodptr</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>modlistptr</name> = (<name>void</name> *)<name>modptr</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>prevmodptr</name>-&gt;<name>next</name></name> = <name>modptr</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>prevmodptr</name> = <name>modptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = (<name>unsigned</name> <name>int</name>)<name><name>ldiptr</name>-&gt;<name>ldinfo_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ldiptr</name> = (struct <name>ld_info</name> *)((<name>char</name>*)<name>ldiptr</name> + <name>offset</name>)</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>offset</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ldibuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>aix_loaderror</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name><name>message</name><index>[<expr>1024</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>errbuf</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<struct>struct <name>errtab</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errNo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errstr</name></decl>;</decl_stmt>
}</block> <decl><name><name>load_errtab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>L_ERROR_TOOMANY</name></expr>, <expr>"too many errors, rest skipped."</expr>}</block></expr>,
<expr><block>{<expr><name>L_ERROR_NOLIB</name></expr>, <expr>"can't load library:"</expr>}</block></expr>,
<expr><block>{<expr><name>L_ERROR_UNDEF</name></expr>, <expr>"can't find symbol in library:"</expr>}</block></expr>,
<expr><block>{
<expr><name>L_ERROR_RLDBAD</name></expr>,
<expr>"RLD index out of range or bad relocation type:"</expr>
}</block></expr>,
<expr><block>{<expr><name>L_ERROR_FORMAT</name></expr>, <expr>"not a valid, executable xcoff file:"</expr>}</block></expr>,
<expr><block>{
<expr><name>L_ERROR_MEMBER</name></expr>,
<expr>"file not an archive or does not contain requested member:"</expr>
}</block></expr>,
<expr><block>{<expr><name>L_ERROR_TYPE</name></expr>, <expr>"symbol table mismatch:"</expr>}</block></expr>,
<expr><block>{<expr><name>L_ERROR_ALIGN</name></expr>, <expr>"text alignment in file is wrong."</expr>}</block></expr>,
<expr><block>{<expr><name>L_ERROR_SYSTEM</name></expr>, <expr>"System error:"</expr>}</block></expr>,
<expr><block>{<expr><name>L_ERROR_ERRNO</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_ERRTAB_LEN</name></cpp:macro> <cpp:value>(sizeof(load_errtab)/sizeof(load_errtab[0]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRBUF_APPEND</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strncat(errbuf, s, sizeof(errbuf)-strlen(errbuf)-1)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"from module %.200s "</expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>loadquery</name><argument_list>(<argument><expr><name>L_GETMESSAGES</name></expr></argument>, <argument><expr>&amp;<name><name>message</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ERRBUF_APPEND</name><argument_list>(<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERRBUF_APPEND</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for(<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>message</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; *<name><name>message</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nerr</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>message</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>LOAD_ERRTAB_LEN</name></expr> ;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>nerr</name> == <name><name>load_errtab</name><index>[<expr><name>j</name></expr>]</index></name>.<name>errNo</name> &amp;&amp; <name><name>load_errtab</name><index>[<expr><name>j</name></expr>]</index></name>.<name>errstr</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ERRBUF_APPEND</name><argument_list>(<argument><expr><name><name>load_errtab</name><index>[<expr><name>j</name></expr>]</index></name>.<name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>Py_CHARMASK</name><argument_list>(<argument><expr>*<name><name>message</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><name><name>message</name><index>[<expr><name>i</name></expr>]</index></name>++</expr> ;</expr_stmt></while>
<expr_stmt><expr><call><name>ERRBUF_APPEND</name><argument_list>(<argument><expr><name><name>message</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERRBUF_APPEND</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>errbuf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ImportError</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><name>dl_funcptr</name></type> <name>_PyImport_GetDynLoadFunc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fqname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>shortname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dl_funcptr</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> *</type><name>staticmodlistptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>staticmodlistptr</name></expr>)</condition><then>
<if>if <condition>(<expr><call><name>aix_getoldmodules</name><argument_list>(<argument><expr>&amp;<name>staticmodlistptr</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></then></if>
<expr_stmt><expr><name>p</name> = (<name>dl_funcptr</name>) <call><name>aix_load</name><argument_list>(<argument><expr>(<name>char</name> *)<name>pathname</name></expr></argument>, <argument><expr><name>L_NOAUTODEFER</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>aix_loaderror</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>p</name></expr>;</return>
}</block></function>
</unit>
