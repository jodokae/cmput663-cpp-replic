<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Parser/tokenizer.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_TOKENIZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TOKENIZER_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXINDENT</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<struct>struct <name>tok_state</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>indstack</name><index>[<expr><name>MAXINDENT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pendin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>prompt</name></decl>, *<decl><type ref="prev"/><name>nextprompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>altwarning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alterror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alttabsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>altindstack</name><index>[<expr><name>MAXINDENT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decoding_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decoding_erred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_coding_spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cont_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>line_start</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>decoding_readline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>decoding_buffer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>str</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><specifier>extern</specifier> struct <name>tok_state</name> *</type><name>PyTokenizer_FromString</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> struct <name>tok_state</name> *</type><name>PyTokenizer_FromFile</name><parameter_list>(<param><decl><type><name>FILE</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>PyTokenizer_Free</name><parameter_list>(<param><decl><type>struct</type> <name>tok_state</name> *</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>PyTokenizer_Get</name><parameter_list>(<param><decl><type>struct</type> <name>tok_state</name> *</decl></param>, <param><decl><type><name>char</name> **</type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PGEN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>char</name> *</type> <name>PyTokenizer_RestoreEncoding</name><parameter_list>(<param><decl><type>struct <name>tok_state</name>*</type> <name>tok</name></decl></param>,
<param><decl><type><name>int</name></type> <name>len</name></decl></param>, <param><decl><type><name>int</name> *</type><name>offset</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
