<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Parser/acceler.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgenheaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"grammar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fixdfa</name><parameter_list>(<param><decl><type><name>grammar</name> *</type></decl></param>, <param><decl><type><name>dfa</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fixstate</name><parameter_list>(<param><decl><type><name>grammar</name> *</type></decl></param>, <param><decl><type><name>state</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>PyGrammar_AddAccelerators</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dfa</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> = <name><name>g</name>-&gt;<name>g_dfa</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>g</name>-&gt;<name>g_ndfas</name></name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>d</name>++</expr></incr>)
<expr_stmt><expr><call><name>fixdfa</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>g</name>-&gt;<name>g_accel</name></name> = 1</expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>PyGrammar_RemoveAccelerators</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dfa</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name>-&gt;<name>g_accel</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>g</name>-&gt;<name>g_dfa</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>g</name>-&gt;<name>g_ndfas</name></name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>d</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>state</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <name><name>d</name>-&gt;<name>d_state</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>d</name>-&gt;<name>d_nstates</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr>, <expr><name>s</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>s_accel</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>s_accel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_accel</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fixdfa</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>dfa</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>state</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <name><name>d</name>-&gt;<name>d_state</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>d</name>-&gt;<name>d_nstates</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr>, <expr><name>s</name>++</expr></incr>)
<expr_stmt><expr><call><name>fixstate</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fixstate</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>state</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arc</name> *</type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>accel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><name><name>g</name>-&gt;<name>g_ll</name>.<name>ll_nlabels</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_accept</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>accel</name> = (<name>int</name> *) <call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><name>nl</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>accel</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"no mem to build parser accelerators\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>k</name> = 0</expr>;</init> <condition><expr><name>k</name> &lt; <name>nl</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>)
<expr_stmt><expr><name><name>accel</name><index>[<expr><name>k</name></expr>]</index></name> = -1</expr>;</expr_stmt></for>
<expr_stmt><expr><name>a</name> = <name><name>s</name>-&gt;<name>s_arc</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>k</name> = <name><name>s</name>-&gt;<name>s_narcs</name></name></expr>;</init> <condition><expr>--<name>k</name> &gt;= 0</expr>;</condition> <incr><expr><name>a</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lbl</name> <init>= <expr><name><name>a</name>-&gt;<name>a_lbl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>label</name> *</type><name>l</name> <init>= <expr>&amp;<name><name>g</name>-&gt;<name>g_ll</name>.<name>ll_label</name><index>[<expr><name>lbl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>l</name>-&gt;<name>lb_type</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>a_arrow</name></name> &gt;= (1 &lt;&lt; 7)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"XXX too many states!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>ISNONTERMINAL</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dfa</name> *</type><name>d1</name> <init>= <expr><call><name>PyGrammar_FindDFA</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ibit</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name> - <name>NT_OFFSET</name> &gt;= (1 &lt;&lt; 7)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"XXX too high nonterminal number!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<for>for (<init><expr><name>ibit</name> = 0</expr>;</init> <condition><expr><name>ibit</name> &lt; <name><name>g</name>-&gt;<name>g_ll</name>.<name>ll_nlabels</name></name></expr>;</condition> <incr><expr><name>ibit</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>testbit</name><argument_list>(<argument><expr><name><name>d1</name>-&gt;<name>d_first</name></name></expr></argument>, <argument><expr><name>ibit</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>accel</name><index>[<expr><name>ibit</name></expr>]</index></name> != -1</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"XXX ambiguity!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>accel</name><index>[<expr><name>ibit</name></expr>]</index></name> = <name><name>a</name>-&gt;<name>a_arrow</name></name> | (1 &lt;&lt; 7) |
((<name>type</name> - <name>NT_OFFSET</name>) &lt;&lt; 8)</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr><name>lbl</name> == <name>EMPTY</name></expr>)</condition><then>
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_accept</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>lbl</name> &gt;= 0 &amp;&amp; <name>lbl</name> &lt; <name>nl</name></expr>)</condition><then>
<expr_stmt><expr><name><name>accel</name><index>[<expr><name>lbl</name></expr>]</index></name> = <name><name>a</name>-&gt;<name>a_arrow</name></name></expr>;</expr_stmt></then></if></else></if></else></if>
}</block></for>
<while>while <condition>(<expr><name>nl</name> &gt; 0 &amp;&amp; <name><name>accel</name><index>[<expr><name>nl</name>-1</expr>]</index></name> == -1</expr>)</condition>
<expr_stmt><expr><name>nl</name>--</expr>;</expr_stmt></while>
<for>for (<init><expr><name>k</name> = 0</expr>;</init> <condition><expr><name>k</name> &lt; <name>nl</name> &amp;&amp; <name><name>accel</name><index>[<expr><name>k</name></expr>]</index></name> == -1</expr>;</condition><incr/>)
<expr_stmt><expr><name>k</name>++</expr>;</expr_stmt></for>
<if>if <condition>(<expr><name>k</name> &lt; <name>nl</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_accel</name></name> = (<name>int</name> *) <call><name>PyObject_MALLOC</name><argument_list>(<argument><expr>(<name>nl</name>-<name>k</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>s_accel</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"no mem to add parser accelerators\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_lower</name></name> = <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_upper</name></name> = <name>nl</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>k</name> &lt; <name>nl</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>k</name>++</expr></incr>)
<expr_stmt><expr><name><name>s</name>-&gt;<name>s_accel</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>accel</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></for>
}</block></then></if>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name>accel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
