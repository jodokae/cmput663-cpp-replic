<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Parser/node.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errcode.h"</cpp:file></cpp:include>
<function><type><name>node</name> *</type>
<name>PyNode_New</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node</name> *</type><name>n</name> <init>= <expr>(<name>node</name> *) <call><name>PyObject_MALLOC</name><argument_list>(<argument><expr>1 * <sizeof>sizeof<argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>n</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_str</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_lineno</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_nchildren</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_child</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fancy_roundup</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> &gt; 128</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>result</name> &lt; <name>n</name></expr>)</condition> <block>{
<expr_stmt><expr><name>result</name> &lt;&lt;= 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></while>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXXROUNDUP</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((n) &lt;= 1 ? (n) : (n) &lt;= 128 ? (((n) + 3) &amp; ~3) : fancy_roundup(n))</cpp:value></cpp:define>
<function><type><name>int</name></type>
<name>PyNode_AddChild</name><parameter_list>(<param><decl><type><name>register</name> <name>node</name> *</type><name>n1</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nch</name> <init>= <expr><name><name>n1</name>-&gt;<name>n_nchildren</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>required_capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node</name> *</type><name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nch</name> == <name>INT_MAX</name> || <name>nch</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>E_OVERFLOW</name></expr>;</return></then></if>
<expr_stmt><expr><name>current_capacity</name> = <call><name>XXXROUNDUP</name><argument_list>(<argument><expr><name>nch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>required_capacity</name> = <call><name>XXXROUNDUP</name><argument_list>(<argument><expr><name>nch</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>current_capacity</name> &lt; 0 || <name>required_capacity</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>E_OVERFLOW</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>current_capacity</name> &lt; <name>required_capacity</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>required_capacity</name> &gt; <name>PY_SIZE_MAX</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<return>return <expr><name>E_NOMEM</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <name><name>n1</name>-&gt;<name>n_child</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = (<name>node</name> *) <call><name>PyObject_REALLOC</name><argument_list>(<argument><expr><name>n</name></expr></argument>,
<argument><expr><name>required_capacity</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>E_NOMEM</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>n1</name>-&gt;<name>n_child</name></name> = <name>n</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>n</name> = &amp;<name><name>n1</name>-&gt;<name>n_child</name><index>[<expr><name><name>n1</name>-&gt;<name>n_nchildren</name></name>++</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_str</name></name> = <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_col_offset</name></name> = <name>col_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_nchildren</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name>-&gt;<name>n_child</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freechildren</name><parameter_list>(<param><decl><type><name>node</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>PyNode_Free</name><parameter_list>(<param><decl><type><name>node</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>n</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>freechildren</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>freechildren</name><parameter_list>(<param><decl><type><name>node</name> *</type><name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <call><name>NCH</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr/>)
<expr_stmt><expr><call><name>freechildren</name><argument_list>(<argument><expr><call><name>CHILD</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>n_child</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>n_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>STR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
