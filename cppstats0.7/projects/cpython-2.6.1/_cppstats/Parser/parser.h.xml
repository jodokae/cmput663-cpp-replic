<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Parser/parser.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_PARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PARSER_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSTACK</name></cpp:macro> <cpp:value>1500</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dfa</name> *</type><name>s_dfa</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_node</name> *</type><name>s_parent</name></decl>;</decl_stmt>
}</block></struct></type> <name>stackentry</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>stackentry</name> *</type><name>s_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stackentry</name></type> <name><name>s_base</name><index>[<expr><name>MAXSTACK</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>stack</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>stack</name></type> <name>p_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>grammar</name> *</type><name>p_grammar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node</name> *</type><name>p_tree</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_PARSER_REQUIRES_FUTURE_KEYWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>p_flags</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>parser_state</name>;</typedef>
<function_decl><type><name>parser_state</name> *</type><name>PyParser_New</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PyParser_Delete</name><parameter_list>(<param><decl><type><name>parser_state</name> *</type><name>ps</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>PyParser_AddToken</name><parameter_list>(<param><decl><type><name>parser_state</name> *</type><name>ps</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>expected_ret</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>PyGrammar_AddAccelerators</name><parameter_list>(<param><decl><type><name>grammar</name> *</type><name>g</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
