<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Misc/setuid-prog.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FULL_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "You must define FULL_PATH somewhere"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UMASK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMASK</name></cpp:macro> <cpp:value>077</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>environ</name></cpp:macro> <cpp:value>_environ</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>def_IFS</name><index>[]</index></name> <init>= <expr>"IFS= \t\n"</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>def_PATH</name><index>[]</index></name> <init>= <expr>"PATH=/usr/bsd:/usr/bin:/bin:/usr/local/bin:/usr/sbin"</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>def_PATH</name><index>[]</index></name> <init>= <expr>"PATH=/usr/ucb:/usr/bin:/bin:/usr/local/bin"</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>def_CDPATH</name><index>[]</index></name> <init>= <expr>"CDPATH=."</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>def_ENV</name><index>[]</index></name> <init>= <expr>"ENV=:"</expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>clean_environ</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> **</type><name>environ</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name>environ</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>, <argument><expr>"LD_"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>**<name>p</name> = 'X'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>, <argument><expr>"_RLD"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>**<name>p</name> = 'X'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>, <argument><expr>"PYTHON"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>**<name>p</name> = 'X'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>, <argument><expr>"IFS="</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = <name>def_IFS</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>, <argument><expr>"CDPATH="</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = <name>def_CDPATH</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>, <argument><expr>"ENV="</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = <name>def_ENV</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><name>def_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>stat</name></type> <name>statb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>egid</name> <init>= <expr><call><name>getegid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>euid</name> <init>= <expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>FULL_PATH</name><index>[<expr>0</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: %s is not a full path name\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>FULL_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"You can only use this wrapper if you\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"compile it with an absolute path.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>FULL_PATH</name></expr></argument>, <argument><expr>&amp;<name>statb</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"stat"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>statb</name>.<name>st_uid</name></name> != 0 &amp;&amp; <name><name>statb</name>.<name>st_uid</name></name> != <name>euid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: %s has the wrong owner\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>FULL_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"The script should be owned by root,\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"and shouldn't be writeable by anyone.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>setregid</name><argument_list>(<argument><expr><name>egid</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"setregid"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>setreuid</name><argument_list>(<argument><expr><name>euid</name></expr></argument>, <argument><expr><name>euid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"setreuid"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>clean_environ</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name>UMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>**<name>argv</name> == '-'</expr>)</condition>
<expr_stmt><expr>(*<name>argv</name>)++</expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>execv</name><argument_list>(<argument><expr><name>FULL_PATH</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: could not execute the script\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
