<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Tools/msi/msisupport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msiquery.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>UINT</name></type> <name>debug</name><parameter_list>(<param><decl><type><name>MSIHANDLE</name></type> <name>hInstall</name></decl></param>, <param><decl><type><name>LPCSTR</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MSIHANDLE</name></type> <name>hRec</name> <init>= <expr><call><name>MsiCreateRecord</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>hRec</name> || <call><name>MsiRecordSetStringA</name><argument_list>(<argument><expr><name>hRec</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>ERROR_INSTALL_FAILURE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>MsiProcessMessage</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr><name>INSTALLMESSAGE_INFO</name></expr></argument>, <argument><expr><name>hRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MsiCloseHandle</name><argument_list>(<argument><expr><name>hRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERROR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>UINT</name></type> <name>__declspec</name><argument_list>(<argument><expr><name>dllexport</name></expr></argument>)</argument_list> <name>__stdcall</name> <name>CheckDir</name><argument_list>(<argument><expr><name>MSIHANDLE</name> <name>hInstall</name></expr></argument>)</argument_list> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wpath</name><index>[<expr><name>PSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><name>PSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attributes</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>MsiGetPropertyW</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr>L"TARGETDIR"</expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>wpath</name><index>[<expr><name>size</name></expr>]</index></name> = L'\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>size</name></expr>]</index></name> = L'\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>attributes</name> = <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>attributes</name> == <name>INVALID_FILE_ATTRIBUTES</name> ||
!(<name>attributes</name> &amp; <name>FILE_ATTRIBUTE_DIRECTORY</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>MsiSetPropertyA</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr>"TargetExists"</expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>MsiSetPropertyA</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr>"TargetExists"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>__declspec</name><argument_list>(<argument><expr><name>dllexport</name></expr></argument>)</argument_list> <name>__stdcall</name> <name>UpdateEditIDLE</name><argument_list>(<argument><expr><name>MSIHANDLE</name> <name>hInstall</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>INSTALLSTATE</name></type> <name>ext_old</name></decl>, <decl><type ref="prev"/><name>ext_new</name></decl>, <decl><type ref="prev"/><name>tcl_old</name></decl>, <decl><type ref="prev"/><name>tcl_new</name></decl>, <decl><type ref="prev"/><name>reg_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>MsiGetFeatureStateA</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr>"Extensions"</expr></argument>, <argument><expr>&amp;<name>ext_old</name></expr></argument>, <argument><expr>&amp;<name>ext_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>MsiGetFeatureStateA</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr>"TclTk"</expr></argument>, <argument><expr>&amp;<name>tcl_old</name></expr></argument>, <argument><expr>&amp;<name>tcl_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>ext_new</name> == <name>INSTALLSTATE_UNKNOWN</name></expr>)</condition><then>
<expr_stmt><expr><name>ext_new</name> = <name>ext_old</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>tcl_new</name> == <name>INSTALLSTATE_UNKNOWN</name></expr>)</condition><then>
<expr_stmt><expr><name>tcl_new</name> = <name>tcl_old</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>((<name>tcl_new</name> == <name>INSTALLSTATE_LOCAL</name>) ||
(<name>tcl_new</name> == <name>INSTALLSTATE_SOURCE</name>) ||
(<name>tcl_new</name> == <name>INSTALLSTATE_DEFAULT</name>)) &amp;&amp;
((<name>ext_new</name> == <name>INSTALLSTATE_LOCAL</name>) ||
(<name>ext_new</name> == <name>INSTALLSTATE_SOURCE</name>) ||
(<name>ext_new</name> == <name>INSTALLSTATE_DEFAULT</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>reg_new</name> = <name>INSTALLSTATE_SOURCE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>reg_new</name> = <name>INSTALLSTATE_ABSENT</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>result</name> = <call><name>MsiSetComponentStateA</name><argument_list>(<argument><expr><name>hInstall</name></expr></argument>, <argument><expr>"REGISTRY.tcl"</expr></argument>, <argument><expr><name>reg_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></decl></decl_stmt>
<function><type><name>BOOL</name> <name>APIENTRY</name></type> <name>DllMain</name><parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hModule</name></decl></param>,
<param><decl><type><name>DWORD</name></type> <name>ul_reason_for_call</name></decl></param>,
<param><decl><type><name>LPVOID</name></type> <name>lpReserved</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
</unit>
