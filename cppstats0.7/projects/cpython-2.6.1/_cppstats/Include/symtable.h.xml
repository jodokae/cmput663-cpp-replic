<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/symtable.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_SYMTABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_SYMTABLE_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <name>_block_type</name> <block>{ <decl><name>FunctionBlock</name></decl>, <decl><name>ClassBlock</name></decl>, <decl><name>ModuleBlock</name></decl> }</block></enum></type>
<name>_Py_block_ty</name>;</typedef>
<struct_decl>struct <name>_symtable_entry</name>;</struct_decl>
<struct>struct <name>symtable</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>st_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_symtable_entry</name> *</type><name>st_cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_symtable_entry</name> *</type><name>st_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>st_symbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>st_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>st_global</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st_nblocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>st_private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st_tmpname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyFutureFeatures</name> *</type><name>st_future</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <name>_symtable_entry</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>ste_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ste_symbols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ste_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ste_varnames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ste_children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Py_block_ty</name></type> <name>ste_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ste_unoptimized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ste_nested</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>ste_free</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>ste_child_free</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>ste_generator</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>ste_varargs</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>ste_varkeywords</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>ste_returns_value</name> : 1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ste_lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ste_opt_lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ste_tmpname</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>symtable</name> *</type><name>ste_table</name></decl>;</decl_stmt>
}</block></struct></type> <name>PySTEntryObject</name>;</typedef>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PySTEntry_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySTEntry_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PySTEntry_Type)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyST_GetScope</name><argument_list>(<argument><expr><name>PySTEntryObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>struct symtable *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySymtable_Build</name><argument_list>(<argument><expr><name>mod_ty</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>,
<argument><expr><name>PyFutureFeatures</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PySTEntryObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySymtable_Lookup</name><argument_list>(<argument>struct <expr><name>symtable</name> *</expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySymtable_Free</name><argument_list>(<argument>struct <expr><name>symtable</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_GLOBAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_LOCAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_PARAM</name></cpp:macro> <cpp:value>2&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE</name></cpp:macro> <cpp:value>2&lt;&lt;2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_STAR</name></cpp:macro> <cpp:value>2&lt;&lt;3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_DOUBLESTAR</name></cpp:macro> <cpp:value>2&lt;&lt;4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_INTUPLE</name></cpp:macro> <cpp:value>2&lt;&lt;5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FREE</name></cpp:macro> <cpp:value>2&lt;&lt;6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FREE_GLOBAL</name></cpp:macro> <cpp:value>2&lt;&lt;7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_FREE_CLASS</name></cpp:macro> <cpp:value>2&lt;&lt;8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_IMPORT</name></cpp:macro> <cpp:value>2&lt;&lt;9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_BOUND</name></cpp:macro> <cpp:value>(DEF_LOCAL | DEF_PARAM | DEF_IMPORT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCOPE_OFF</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCOPE_MASK</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL_EXPLICIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL_IMPLICIT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_IMPORT_STAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EXEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BARE_EXEC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_TOPLEVEL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATOR_EXPRESSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
