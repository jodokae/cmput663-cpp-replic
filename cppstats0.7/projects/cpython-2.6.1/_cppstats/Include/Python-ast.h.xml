<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/Python-ast.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asdl.h"</cpp:file></cpp:include>
<typedef>typedef <type>struct <name>_mod</name> *</type><name>mod_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_stmt</name> *</type><name>stmt_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_expr</name> *</type><name>expr_ty</name>;</typedef>
<typedef>typedef <type><enum>enum <name>_expr_context</name> <block>{ <decl><name>Load</name><init>=<expr>1</expr></init></decl>, <decl><name>Store</name><init>=<expr>2</expr></init></decl>, <decl><name>Del</name><init>=<expr>3</expr></init></decl>, <decl><name>AugLoad</name><init>=<expr>4</expr></init></decl>, <decl><name>AugStore</name><init>=<expr>5</expr></init></decl>,
<decl><name>Param</name><init>=<expr>6</expr></init></decl>
}</block></enum></type> <name>expr_context_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_slice</name> *</type><name>slice_ty</name>;</typedef>
<typedef>typedef <type><enum>enum <name>_boolop</name> <block>{ <decl><name>And</name><init>=<expr>1</expr></init></decl>, <decl><name>Or</name><init>=<expr>2</expr></init></decl> }</block></enum></type> <name>boolop_ty</name>;</typedef>
<typedef>typedef <type><enum>enum <name>_operator</name> <block>{ <decl><name>Add</name><init>=<expr>1</expr></init></decl>, <decl><name>Sub</name><init>=<expr>2</expr></init></decl>, <decl><name>Mult</name><init>=<expr>3</expr></init></decl>, <decl><name>Div</name><init>=<expr>4</expr></init></decl>, <decl><name>Mod</name><init>=<expr>5</expr></init></decl>, <decl><name>Pow</name><init>=<expr>6</expr></init></decl>, <decl><name>LShift</name><init>=<expr>7</expr></init></decl>,
<decl><name>RShift</name><init>=<expr>8</expr></init></decl>, <decl><name>BitOr</name><init>=<expr>9</expr></init></decl>, <decl><name>BitXor</name><init>=<expr>10</expr></init></decl>, <decl><name>BitAnd</name><init>=<expr>11</expr></init></decl>, <decl><name>FloorDiv</name><init>=<expr>12</expr></init></decl>
}</block></enum></type>
<name>operator_ty</name>;</typedef>
<typedef>typedef <type><enum>enum <name>_unaryop</name> <block>{ <decl><name>Invert</name><init>=<expr>1</expr></init></decl>, <decl><name>Not</name><init>=<expr>2</expr></init></decl>, <decl><name>UAdd</name><init>=<expr>3</expr></init></decl>, <decl><name>USub</name><init>=<expr>4</expr></init></decl> }</block></enum></type> <name>unaryop_ty</name>;</typedef>
<typedef>typedef <type><enum>enum <name>_cmpop</name> <block>{ <decl><name>Eq</name><init>=<expr>1</expr></init></decl>, <decl><name>NotEq</name><init>=<expr>2</expr></init></decl>, <decl><name>Lt</name><init>=<expr>3</expr></init></decl>, <decl><name>LtE</name><init>=<expr>4</expr></init></decl>, <decl><name>Gt</name><init>=<expr>5</expr></init></decl>, <decl><name>GtE</name><init>=<expr>6</expr></init></decl>, <decl><name>Is</name><init>=<expr>7</expr></init></decl>, <decl><name>IsNot</name><init>=<expr>8</expr></init></decl>,
<decl><name>In</name><init>=<expr>9</expr></init></decl>, <decl><name>NotIn</name><init>=<expr>10</expr></init></decl>
}</block></enum></type> <name>cmpop_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_comprehension</name> *</type><name>comprehension_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_excepthandler</name> *</type><name>excepthandler_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_arguments</name> *</type><name>arguments_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_keyword</name> *</type><name>keyword_ty</name>;</typedef>
<typedef>typedef <type>struct <name>_alias</name> *</type><name>alias_ty</name>;</typedef>
<enum>enum <name>_mod_kind</name> <block>{<decl><name>Module_kind</name><init>=<expr>1</expr></init></decl>, <decl><name>Interactive_kind</name><init>=<expr>2</expr></init></decl>, <decl><name>Expression_kind</name><init>=<expr>3</expr></init></decl>,
<decl><name>Suite_kind</name><init>=<expr>4</expr></init></decl>
}</block>;</enum>
<struct>struct <name>_mod</name> <block>{
<enum>enum <name>_mod_kind</name> <name>kind</name>;</enum>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
}</block> <decl><name>Module</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
}</block> <decl><name>Interactive</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>
}</block> <decl><name>Expression</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
}</block> <decl><name>Suite</name></decl>;</struct>
}</block> <decl><name>v</name></decl>;</union>
}</block>;</struct>
<enum>enum <name>_stmt_kind</name> <block>{<decl><name>FunctionDef_kind</name><init>=<expr>1</expr></init></decl>, <decl><name>ClassDef_kind</name><init>=<expr>2</expr></init></decl>, <decl><name>Return_kind</name><init>=<expr>3</expr></init></decl>,
<decl><name>Delete_kind</name><init>=<expr>4</expr></init></decl>, <decl><name>Assign_kind</name><init>=<expr>5</expr></init></decl>, <decl><name>AugAssign_kind</name><init>=<expr>6</expr></init></decl>, <decl><name>Print_kind</name><init>=<expr>7</expr></init></decl>,
<decl><name>For_kind</name><init>=<expr>8</expr></init></decl>, <decl><name>While_kind</name><init>=<expr>9</expr></init></decl>, <decl><name>If_kind</name><init>=<expr>10</expr></init></decl>, <decl><name>With_kind</name><init>=<expr>11</expr></init></decl>,
<decl><name>Raise_kind</name><init>=<expr>12</expr></init></decl>, <decl><name>TryExcept_kind</name><init>=<expr>13</expr></init></decl>, <decl><name>TryFinally_kind</name><init>=<expr>14</expr></init></decl>,
<decl><name>Assert_kind</name><init>=<expr>15</expr></init></decl>, <decl><name>Import_kind</name><init>=<expr>16</expr></init></decl>, <decl><name>ImportFrom_kind</name><init>=<expr>17</expr></init></decl>,
<decl><name>Exec_kind</name><init>=<expr>18</expr></init></decl>, <decl><name>Global_kind</name><init>=<expr>19</expr></init></decl>, <decl><name>Expr_kind</name><init>=<expr>20</expr></init></decl>, <decl><name>Pass_kind</name><init>=<expr>21</expr></init></decl>,
<decl><name>Break_kind</name><init>=<expr>22</expr></init></decl>, <decl><name>Continue_kind</name><init>=<expr>23</expr></init></decl>
}</block>;</enum>
<struct>struct <name>_stmt</name> <block>{
<enum>enum <name>_stmt_kind</name> <name>kind</name>;</enum>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>identifier</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arguments_ty</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>decorator_list</name></decl>;</decl_stmt>
}</block> <decl><name>FunctionDef</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>identifier</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>bases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>decorator_list</name></decl>;</decl_stmt>
}</block> <decl><name>ClassDef</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>Return</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>targets</name></decl>;</decl_stmt>
}</block> <decl><name>Delete</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>Assign</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>operator_ty</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>AugAssign</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nl</name></decl>;</decl_stmt>
}</block> <decl><name>Print</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>orelse</name></decl>;</decl_stmt>
}</block> <decl><name>For</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>orelse</name></decl>;</decl_stmt>
}</block> <decl><name>While</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>orelse</name></decl>;</decl_stmt>
}</block> <decl><name>If</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>context_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>optional_vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
}</block> <decl><name>With</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>inst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>tback</name></decl>;</decl_stmt>
}</block> <decl><name>Raise</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>handlers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>orelse</name></decl>;</decl_stmt>
}</block> <decl><name>TryExcept</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>finalbody</name></decl>;</decl_stmt>
}</block> <decl><name>TryFinally</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>msg</name></decl>;</decl_stmt>
}</block> <decl><name>Assert</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>names</name></decl>;</decl_stmt>
}</block> <decl><name>Import</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>identifier</name></type> <name>module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
}</block> <decl><name>ImportFrom</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>globals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>locals</name></decl>;</decl_stmt>
}</block> <decl><name>Exec</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>names</name></decl>;</decl_stmt>
}</block> <decl><name>Global</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>Expr</name></decl>;</struct>
}</block> <decl><name>v</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col_offset</name></decl>;</decl_stmt>
}</block>;</struct>
<enum>enum <name>_expr_kind</name> <block>{<decl><name>BoolOp_kind</name><init>=<expr>1</expr></init></decl>, <decl><name>BinOp_kind</name><init>=<expr>2</expr></init></decl>, <decl><name>UnaryOp_kind</name><init>=<expr>3</expr></init></decl>, <decl><name>Lambda_kind</name><init>=<expr>4</expr></init></decl>,
<decl><name>IfExp_kind</name><init>=<expr>5</expr></init></decl>, <decl><name>Dict_kind</name><init>=<expr>6</expr></init></decl>, <decl><name>ListComp_kind</name><init>=<expr>7</expr></init></decl>,
<decl><name>GeneratorExp_kind</name><init>=<expr>8</expr></init></decl>, <decl><name>Yield_kind</name><init>=<expr>9</expr></init></decl>, <decl><name>Compare_kind</name><init>=<expr>10</expr></init></decl>,
<decl><name>Call_kind</name><init>=<expr>11</expr></init></decl>, <decl><name>Repr_kind</name><init>=<expr>12</expr></init></decl>, <decl><name>Num_kind</name><init>=<expr>13</expr></init></decl>, <decl><name>Str_kind</name><init>=<expr>14</expr></init></decl>,
<decl><name>Attribute_kind</name><init>=<expr>15</expr></init></decl>, <decl><name>Subscript_kind</name><init>=<expr>16</expr></init></decl>, <decl><name>Name_kind</name><init>=<expr>17</expr></init></decl>,
<decl><name>List_kind</name><init>=<expr>18</expr></init></decl>, <decl><name>Tuple_kind</name><init>=<expr>19</expr></init></decl>
}</block>;</enum>
<struct>struct <name>_expr</name> <block>{
<enum>enum <name>_expr_kind</name> <name>kind</name>;</enum>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>boolop_ty</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>values</name></decl>;</decl_stmt>
}</block> <decl><name>BoolOp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>operator_ty</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>right</name></decl>;</decl_stmt>
}</block> <decl><name>BinOp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>unaryop_ty</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>operand</name></decl>;</decl_stmt>
}</block> <decl><name>UnaryOp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>arguments_ty</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>
}</block> <decl><name>Lambda</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>orelse</name></decl>;</decl_stmt>
}</block> <decl><name>IfExp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>values</name></decl>;</decl_stmt>
}</block> <decl><name>Dict</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>generators</name></decl>;</decl_stmt>
}</block> <decl><name>ListComp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>generators</name></decl>;</decl_stmt>
}</block> <decl><name>GeneratorExp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>Yield</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_int_seq</name> *</type><name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>comparators</name></decl>;</decl_stmt>
}</block> <decl><name>Compare</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>keywords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>starargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>kwargs</name></decl>;</decl_stmt>
}</block> <decl><name>Call</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>Repr</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>object</name></type> <name>n</name></decl>;</decl_stmt>
}</block> <decl><name>Num</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
}</block> <decl><name>Str</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>identifier</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block> <decl><name>Attribute</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slice_ty</name></type> <name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block> <decl><name>Subscript</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>identifier</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block> <decl><name>Name</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block> <decl><name>List</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl>;</decl_stmt>
}</block> <decl><name>Tuple</name></decl>;</struct>
}</block> <decl><name>v</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col_offset</name></decl>;</decl_stmt>
}</block>;</struct>
<enum>enum <name>_slice_kind</name> <block>{<decl><name>Ellipsis_kind</name><init>=<expr>1</expr></init></decl>, <decl><name>Slice_kind</name><init>=<expr>2</expr></init></decl>, <decl><name>ExtSlice_kind</name><init>=<expr>3</expr></init></decl>, <decl><name>Index_kind</name><init>=<expr>4</expr></init></decl>}</block>;</enum>
<struct>struct <name>_slice</name> <block>{
<enum>enum <name>_slice_kind</name> <name>kind</name>;</enum>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>lower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>upper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>step</name></decl>;</decl_stmt>
}</block> <decl><name>Slice</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>dims</name></decl>;</decl_stmt>
}</block> <decl><name>ExtSlice</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name>Index</name></decl>;</struct>
}</block> <decl><name>v</name></decl>;</union>
}</block>;</struct>
<struct>struct <name>_comprehension</name> <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>ifs</name></decl>;</decl_stmt>
}</block>;</struct>
<enum>enum <name>_excepthandler_kind</name> <block>{<decl><name>ExceptHandler_kind</name><init>=<expr>1</expr></init></decl>}</block>;</enum>
<struct>struct <name>_excepthandler</name> <block>{
<enum>enum <name>_excepthandler_kind</name> <name>kind</name>;</enum>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>expr_ty</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>body</name></decl>;</decl_stmt>
}</block> <decl><name>ExceptHandler</name></decl>;</struct>
}</block> <decl><name>v</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col_offset</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>_arguments</name> <block>{
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>identifier</name></type> <name>vararg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>identifier</name></type> <name>kwarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asdl_seq</name> *</type><name>defaults</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>_keyword</name> <block>{
<decl_stmt><decl><type><name>identifier</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expr_ty</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>_alias</name> <block>{
<decl_stmt><decl><type><name>identifier</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>identifier</name></type> <name>asname</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Module</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Module(a0, a1)</cpp:value></cpp:define>
<function_decl><type><name>mod_ty</name></type> <name>_Py_Module</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Interactive</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Interactive(a0, a1)</cpp:value></cpp:define>
<function_decl><type><name>mod_ty</name></type> <name>_Py_Interactive</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Expression</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Expression(a0, a1)</cpp:value></cpp:define>
<function_decl><type><name>mod_ty</name></type> <name>_Py_Expression</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Suite</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Suite(a0, a1)</cpp:value></cpp:define>
<function_decl><type><name>mod_ty</name></type> <name>_Py_Suite</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FunctionDef</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>, <param><type><name>a6</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_FunctionDef(a0, a1, a2, a3, a4, a5, a6)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_FunctionDef</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>name</name></decl></param>, <param><decl><type><name>arguments_ty</name></type> <name>args</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>,
<param><decl><type><name>asdl_seq</name> *</type> <name>decorator_list</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ClassDef</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>, <param><type><name>a6</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_ClassDef(a0, a1, a2, a3, a4, a5, a6)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_ClassDef</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>name</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>bases</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>,
<param><decl><type><name>asdl_seq</name> *</type> <name>decorator_list</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Return</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Return(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Return</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Delete</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Delete(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Delete</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>targets</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
*</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Assign</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Assign(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Assign</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>targets</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AugAssign</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_AugAssign(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_AugAssign</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>target</name></decl></param>, <param><decl><type><name>operator_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type>
<name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Print</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Print(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Print</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>dest</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>values</name></decl></param>, <param><decl><type><name>bool</name></type> <name>nl</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>, <param><type><name>a6</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_For(a0, a1, a2, a3, a4, a5, a6)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_For</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>target</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>iter</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type>
<name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>While</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_While(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_While</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
<param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>If</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_If(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_If</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>,
<param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>With</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_With(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_With</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>context_expr</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>optional_vars</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>,
<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Raise</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Raise(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Raise</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>type</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>inst</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>tback</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TryExcept</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_TryExcept(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_TryExcept</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>handlers</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>orelse</name></decl></param>,
<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TryFinally</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_TryFinally(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_TryFinally</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>finalbody</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Assert</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Assert(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Assert</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>msg</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Import</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Import(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Import</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>names</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
*</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ImportFrom</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_ImportFrom(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_ImportFrom</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>module</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>names</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>int</name></type>
<name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exec</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Exec(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Exec</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>globals</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>locals</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Global</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Global(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Global</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>names</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
*</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Expr</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Expr(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Expr</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pass</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Pass(a0, a1, a2)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Pass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Break</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Break(a0, a1, a2)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Break</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Continue</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Continue(a0, a1, a2)</cpp:value></cpp:define>
<function_decl><type><name>stmt_ty</name></type> <name>_Py_Continue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BoolOp</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_BoolOp(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_BoolOp</name><parameter_list>(<param><decl><type><name>boolop_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>values</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BinOp</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_BinOp(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_BinOp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>left</name></decl></param>, <param><decl><type><name>operator_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>right</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UnaryOp</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_UnaryOp(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_UnaryOp</name><parameter_list>(<param><decl><type><name>unaryop_ty</name></type> <name>op</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>operand</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Lambda</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Lambda(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Lambda</name><parameter_list>(<param><decl><type><name>arguments_ty</name></type> <name>args</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>,
<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IfExp</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_IfExp(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_IfExp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>test</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>body</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>orelse</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dict</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Dict(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Dict</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>keys</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>values</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ListComp</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_ListComp(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_ListComp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>elt</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>generators</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GeneratorExp</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_GeneratorExp(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_GeneratorExp</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>elt</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>generators</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Yield</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Yield(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Yield</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Compare</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Compare(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Compare</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>left</name></decl></param>, <param><decl><type><name>asdl_int_seq</name> *</type> <name>ops</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>comparators</name></decl></param>,
<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Call</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>, <param><type><name>a6</name></type></param>, <param><type><name>a7</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Call(a0, a1, a2, a3, a4, a5, a6, a7)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Call</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>func</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>args</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>keywords</name></decl></param>, <param><decl><type><name>expr_ty</name></type>
<name>starargs</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>kwargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name>
*</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Repr</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Repr(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Repr</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Num</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Num(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Num</name><parameter_list>(<param><decl><type><name>object</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Str</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Str(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Str</name><parameter_list>(<param><decl><type><name>string</name></type> <name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Attribute</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Attribute(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Attribute</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>attr</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type>
<name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Subscript</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Subscript(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Subscript</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>slice_ty</name></type> <name>slice</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type>
<name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Name</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Name(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Name</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>id</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>List</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_List(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_List</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>elts</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tuple</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Tuple(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>expr_ty</name></type> <name>_Py_Tuple</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>elts</name></decl></param>, <param><decl><type><name>expr_context_ty</name></type> <name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type>
<name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ellipsis</name><parameter_list>(<param><type><name>a0</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Ellipsis(a0)</cpp:value></cpp:define>
<function_decl><type><name>slice_ty</name></type> <name>_Py_Ellipsis</name><parameter_list>(<param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Slice</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Slice(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>slice_ty</name></type> <name>_Py_Slice</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>lower</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>upper</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>step</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ExtSlice</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_ExtSlice(a0, a1)</cpp:value></cpp:define>
<function_decl><type><name>slice_ty</name></type> <name>_Py_ExtSlice</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>dims</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Index</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_Index(a0, a1)</cpp:value></cpp:define>
<function_decl><type><name>slice_ty</name></type> <name>_Py_Index</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>comprehension</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_comprehension(a0, a1, a2, a3)</cpp:value></cpp:define>
<function_decl><type><name>comprehension_ty</name></type> <name>_Py_comprehension</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>target</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>iter</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type>
<name>ifs</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ExceptHandler</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>, <param><type><name>a5</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_ExceptHandler(a0, a1, a2, a3, a4, a5)</cpp:value></cpp:define>
<function_decl><type><name>excepthandler_ty</name></type> <name>_Py_ExceptHandler</name><parameter_list>(<param><decl><type><name>expr_ty</name></type> <name>type</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>name</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>body</name></decl></param>,
<param><decl><type><name>int</name></type> <name>lineno</name></decl></param>, <param><decl><type><name>int</name></type> <name>col_offset</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arguments</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>, <param><type><name>a3</name></type></param>, <param><type><name>a4</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_arguments(a0, a1, a2, a3, a4)</cpp:value></cpp:define>
<function_decl><type><name>arguments_ty</name></type> <name>_Py_arguments</name><parameter_list>(<param><decl><type><name>asdl_seq</name> *</type> <name>args</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>vararg</name></decl></param>, <param><decl><type><name>identifier</name></type>
<name>kwarg</name></decl></param>, <param><decl><type><name>asdl_seq</name> *</type> <name>defaults</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>keyword</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_keyword(a0, a1, a2)</cpp:value></cpp:define>
<function_decl><type><name>keyword_ty</name></type> <name>_Py_keyword</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>arg</name></decl></param>, <param><decl><type><name>expr_ty</name></type> <name>value</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alias</name><parameter_list>(<param><type><name>a0</name></type></param>, <param><type><name>a1</name></type></param>, <param><type><name>a2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_alias(a0, a1, a2)</cpp:value></cpp:define>
<function_decl><type><name>alias_ty</name></type> <name>_Py_alias</name><parameter_list>(<param><decl><type><name>identifier</name></type> <name>name</name></decl></param>, <param><decl><type><name>identifier</name></type> <name>asname</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name>*</type> <name>PyAST_mod2obj</name><parameter_list>(<param><decl><type><name>mod_ty</name></type> <name>t</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>mod_ty</name></type> <name>PyAST_obj2mod</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>ast</name></decl></param>, <param><decl><type><name>PyArena</name>*</type> <name>arena</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>PyAST_Check</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>obj</name></decl></param>)</parameter_list>;</function_decl>
</unit>
