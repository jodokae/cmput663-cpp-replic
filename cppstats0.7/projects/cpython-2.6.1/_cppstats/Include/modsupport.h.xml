<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/modsupport.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_MODSUPPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_MODSUPPORT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_SSIZE_T_CLEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_Parse</name></cpp:macro> <cpp:value>_PyArg_Parse_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_ParseTuple</name></cpp:macro> <cpp:value>_PyArg_ParseTuple_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_ParseTupleAndKeywords</name></cpp:macro> <cpp:value>_PyArg_ParseTupleAndKeywords_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_VaParse</name></cpp:macro> <cpp:value>_PyArg_VaParse_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_VaParseTupleAndKeywords</name></cpp:macro> <cpp:value>_PyArg_VaParseTupleAndKeywords_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BuildValue</name></cpp:macro> <cpp:value>_Py_BuildValue_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_VaBuildValue</name></cpp:macro> <cpp:value>_Py_VaBuildValue_SizeT</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_VaBuildValue_SizeT</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyArg_ParseTuple</name><argument_list>(<argument>PyObject *</argument>, <argument>const char *</argument>, <argument>...</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_FORMAT_PARSETUPLE</name><argument_list>(<argument><expr><name>PyArg_ParseTuple</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>char</name> **</expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_BuildValue_SizeT</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyArg_NoKeywords</name><argument_list>(<argument><expr>const <name>char</name> *<name>funcname</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyArg_VaParse</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyArg_VaParseTupleAndKeywords</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>char</name> **</expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_VaBuildValue</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyModule_AddStringConstant</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_AddIntMacro</name><parameter_list>(<param><type><name>m</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyModule_AddIntConstant(m, #c, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_AddStringMacro</name><parameter_list>(<param><type><name>m</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyModule_AddStringConstant(m, #c, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_API_VERSION</name></cpp:macro> <cpp:value>1013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_API_STRING</name></cpp:macro> <cpp:value>"1013"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> != <name>SIZEOF_INT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_InitModule4</name></cpp:macro> <cpp:value>Py_InitModule4_64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_TRACE_REFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> != <name>SIZEOF_INT</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Py_InitModule4</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_InitModule4</name></cpp:macro> <cpp:value>Py_InitModule4TraceRefs_64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_InitModule4</name></cpp:macro> <cpp:value>Py_InitModule4TraceRefs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>Py_InitModule4</name><argument_list>(<argument>const char *name</argument>, <argument>PyMethodDef *methods</argument>,
<argument>const char *doc</argument>, <argument>PyObject *self</argument>,
<argument>int apiver</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_InitModule</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>methods</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_InitModule4(name, methods, (char *)NULL, (PyObject *)NULL, PYTHON_API_VERSION)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_InitModule3</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>methods</name></type></param>, <param><type><name>doc</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_InitModule4(name, methods, doc, (PyObject *)NULL, PYTHON_API_VERSION)</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>_Py_PackageContext</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
