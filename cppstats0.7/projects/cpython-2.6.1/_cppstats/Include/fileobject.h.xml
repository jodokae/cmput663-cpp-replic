<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/fileobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_FILEOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_FILEOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>FILE</name> *</type><name>f_fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_mode</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (*<name>f_close</name>)<parameter_list>(<param><decl><type><name>FILE</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>f_softspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_binary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>f_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>f_bufend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>f_bufptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>f_setbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_univ_newline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_newlinetypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_skipnextlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>weakreflist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unlocked_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyFileObject</name>;</typedef>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyFile_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFile_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyFile_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFile_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyFile_Type)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_FromString</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_SetBufSize</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_SetEncoding</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_SetEncodingAndErrors</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>char</name> *<name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_FromFile</name><argument_list>(<argument><expr><name>FILE</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>,
<argument><expr><call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>FILE</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>FILE *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_IncUseCount</name><argument_list>(<argument><expr><name>PyFileObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_DecUseCount</name><argument_list>(<argument><expr><name>PyFileObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_Name</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_GetLine</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_WriteObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_SoftSpace</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFile_WriteString</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_AsFileDescriptor</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><name>Py_FileSystemDefaultEncoding</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_STDIOTEXTMODE</name></cpp:macro> <cpp:value>"b"</cpp:value></cpp:define>
<function_decl><type><name>char</name> *</type><name>Py_UniversalNewlineFgets</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>FILE</name>*</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>Py_UniversalNewlineFread</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>size_t</name></type></decl></param>, <param><decl><type><name>FILE</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_PyFile_SanitizeMode</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>mode</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
