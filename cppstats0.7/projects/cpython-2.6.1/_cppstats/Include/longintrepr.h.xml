<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/longintrepr.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_LONGINTREPR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LONGINTREPR_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>digit</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>wdigit</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_TWODIGITS_TYPE</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>BASE_TWODIGITS_TYPE</name></type> <name>twodigits</name>;</typedef>
<typedef>typedef <type><name>BASE_TWODIGITS_TYPE</name></type> <name>stwodigits</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_SHIFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_BASE</name></cpp:macro> <cpp:value>((digit)1 &lt;&lt; PyLong_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_MASK</name></cpp:macro> <cpp:value>((int)(PyLong_BASE - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT</name></cpp:macro> <cpp:value>PyLong_SHIFT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>PyLong_BASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name></cpp:macro> <cpp:value>PyLong_MASK</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PyLong_SHIFT</name> % 5 != 0</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "longobject.c requires that PyLong_SHIFT be divisible by 5"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>_longobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
<name>digit</name></type> <name><name>ob_digit</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyLongObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_New</name><argument_list>(<argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_Copy</name><argument_list>(<argument><expr><name>PyLongObject</name> *<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
