<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/asdl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_ASDL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ASDL_H</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>PyObject</name> *</type> <name>identifier</name>;</typedef>
<typedef>typedef <type><name>PyObject</name> *</type> <name>string</name>;</typedef>
<typedef>typedef <type><name>PyObject</name> *</type> <name>object</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{<decl><name>false</name></decl>, <decl><name>true</name></decl>}</block></enum></type> <name>bool</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name><name>elements</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>asdl_seq</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>elements</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>asdl_int_seq</name>;</typedef>
<function_decl><type><name>asdl_seq</name> *</type><name>asdl_seq_new</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>asdl_int_seq</name> *</type><name>asdl_int_seq_new</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>, <param><decl><type><name>PyArena</name> *</type><name>arena</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asdl_seq_GET</name><parameter_list>(<param><type><name>S</name></type></param>, <param><type><name>I</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(S)-&gt;elements[(I)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asdl_seq_LEN</name><parameter_list>(<param><type><name>S</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((S) == NULL ? 0 : (S)-&gt;size)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asdl_seq_SET</name><parameter_list>(<param><type><name>S</name></type></param>, <param><type><name>I</name></type></param>, <param><type><name>V</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ int _asdl_i = (I); assert((S) &amp;&amp; _asdl_i &lt; (S)-&gt;size); (S)-&gt;elements[_asdl_i] = (V); }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asdl_seq_SET</name><parameter_list>(<param><type><name>S</name></type></param>, <param><type><name>I</name></type></param>, <param><type><name>V</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(S)-&gt;elements[I] = (V)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
