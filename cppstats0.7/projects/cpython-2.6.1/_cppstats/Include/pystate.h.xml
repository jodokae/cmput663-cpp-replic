<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/pystate.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_PYSTATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PYSTATE_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct_decl>struct <name>_ts</name>;</struct_decl>
<struct_decl>struct <name>_is</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>_is</name> <block>{
<decl_stmt><decl><type>struct <name>_is</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_ts</name> *</type><name>tstate_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>modules</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>sysdict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>builtins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>modules_reloading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>codec_search_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>codec_search_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>codec_error_registry</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLOPEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>dlopenflags</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_TSC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tscdump</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>PyInterpreterState</name>;</typedef>
<struct_decl>struct <name>_frame</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>Py_tracefunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type>struct</type> <name>_frame</name> *</decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_CALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_EXCEPTION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_LINE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_RETURN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_C_CALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_C_EXCEPTION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrace_C_RETURN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_ts</name> <block>{
<decl_stmt><decl><type>struct <name>_ts</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyInterpreterState</name> *</type><name>interp</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_frame</name> *</type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recursion_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tracing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_tracing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_tracefunc</name></type> <name>c_profilefunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_tracefunc</name></type> <name>c_tracefunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>c_profileobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>c_traceobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>curexc_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>curexc_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>curexc_traceback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_traceback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tick_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gilstate_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>async_exc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>thread_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyThreadState</name>;</typedef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyInterpreterState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_New</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Clear</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Delete</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_New</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Clear</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Delete</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_DeleteCurrent</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Get</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Swap</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_GetDict</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_SetAsyncExc</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyThreadState_Current</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyThreadState_GET</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyThreadState_Get()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyThreadState_GET</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_PyThreadState_Current)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef
<type><enum>enum <block>{<decl><name>PyGILState_LOCKED</name></decl>, <decl><name>PyGILState_UNLOCKED</name></decl>}</block></enum></type>
<name>PyGILState_STATE</name>;</typedef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyGILState_STATE</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGILState_Ensure</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGILState_Release</name><argument_list>(<argument><expr><name>PyGILState_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyGILState_GetThisThreadState</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyThread_CurrentFrames</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyInterpreterState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Head</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyInterpreterState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_Next</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyInterpreterState_ThreadHead</name><argument_list>(<argument><expr><name>PyInterpreterState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyThreadState *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyThreadState_Next</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <function_decl><type>struct <name>_frame</name> *</type>(*<name>PyThreadFrameGetter</name>)<parameter_list>(<param><decl><type><name>PyThreadState</name> *</type><name>self_</name></decl></param>)</parameter_list>;</function_decl></typedef>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyThreadFrameGetter</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyThreadState_GetFrame</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
