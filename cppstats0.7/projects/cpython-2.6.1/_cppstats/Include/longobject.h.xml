<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Include/longobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_LONGOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LONGOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>_longobject</name></type> <name>PyLongObject</name>;</typedef>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyLong_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyLong_Type)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyLong_FromUnsignedLong</name><argument_list>(<argument>unsigned long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromDouble</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromSize_t</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromSsize_t</name><argument_list>(<argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLongMask</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsSsize_t</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyLong_AsSsize_t</name></cpp:macro> <cpp:value>PyLong_AsSsize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyLong_FromSize_t</name></cpp:macro> <cpp:value>PyLong_FromSize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyLong_FromSsize_t</name></cpp:macro> <cpp:value>PyLong_FromSsize_t</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name><name>_PyLong_DigitValue</name><index>[<expr>256</expr>]</index></name></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_AsScaledDouble</name><argument_list>(<argument><expr><name>PyObject</name> *<name>vv</name></expr></argument>, <argument><expr><name>int</name> *<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>double</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsDouble</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsVoidPtr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>PY_LONG_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument>unsigned PY_LONG_LONG</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PY_LONG_LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsLongLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned PY_LONG_LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLongLong</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned PY_LONG_LONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_AsUnsignedLongLongMask</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromString</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>char</name> **</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyLong_FromUnicode</name><argument_list>(<argument><expr><name>Py_UNICODE</name>*</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_Sign</name><argument_list>(<argument><expr><name>PyObject</name> *<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>size_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyLong_NumBits</name><argument_list>(<argument><expr><name>PyObject</name> *<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyLong_FromByteArray</name><argument_list>(
<argument>const unsigned char* bytes</argument>, <argument>size_t n</argument>,
<argument>int little_endian</argument>, <argument>int is_signed</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyLong_AsByteArray</name><argument_list>(<argument>PyLongObject* v</argument>,
<argument>unsigned char* bytes</argument>, <argument>size_t n</argument>,
<argument>int little_endian</argument>, <argument>int is_signed</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyLong_Format</name><argument_list>(<argument>PyObject *aa</argument>, <argument>int base</argument>, <argument>int addL</argument>, <argument>int newstyle</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyLong_FormatAdvanced</name><argument_list>(<argument>PyObject *obj</argument>,
<argument>char *format_spec</argument>,
<argument>Py_ssize_t format_spec_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
