<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/dictobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_DICTOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_DICTOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_MINSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>me_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>me_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>me_value</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyDictEntry</name>;</typedef>
<typedef>typedef <type>struct <name>_dictobject</name></type> <name>PyDictObject</name>;</typedef>
<struct>struct <name>_dictobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Py_ssize_t</name></type> <name>ma_fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>ma_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>ma_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDictEntry</name> *</type><name>ma_table</name></decl>;</decl_stmt>
<function_decl><type><name>PyDictEntry</name> *</type>(*<name>ma_lookup</name>)<parameter_list>(<param><decl><type><name>PyDictObject</name> *</type><name>mp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>hash</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>PyDictEntry</name></type> <name><name>ma_smalltable</name><index>[<expr><name>PyDict_MINSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyDict_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyDict_Type)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_New</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_DelItem</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Clear</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Next</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>Py_ssize_t</name> *<name>pos</name></expr></argument>, <argument><expr><name>PyObject</name> **<name>key</name></expr></argument>, <argument><expr><name>PyObject</name> **<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyDict_Next</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>Py_ssize_t</name> *<name>pos</name></expr></argument>, <argument><expr><name>PyObject</name> **<name>key</name></expr></argument>, <argument><expr><name>PyObject</name> **<name>value</name></expr></argument>, <argument><expr><name>long</name> *<name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Values</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Items</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Size</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Copy</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Contains</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>_PyDict_Contains</name><argument_list>(<argument>PyObject *mp</argument>, <argument>PyObject *key</argument>, <argument>long hash</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>_PyDict_NewPresized</name><argument_list>(<argument>Py_ssize_t minused</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_Update</name><argument_list>(<argument><expr><name>PyObject</name> *<name>mp</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyDict_Merge</name><argument_list>(<argument>PyObject *mp</argument>,
<argument>PyObject *other</argument>,
<argument>int override</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyDict_MergeFromSeq2</name><argument_list>(<argument>PyObject *d</argument>,
<argument>PyObject *seq2</argument>,
<argument>int override</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>dp</name></expr></argument>, <argument><expr>const <name>char</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>dp</name></expr></argument>, <argument><expr>const <name>char</name> *<name>key</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyDict_DelItemString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>dp</name></expr></argument>, <argument><expr>const <name>char</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
