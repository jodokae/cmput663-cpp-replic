<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Include/cStringIO.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_CSTRINGIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CSTRINGIO_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PycString_IMPORT</name></cpp:macro> <cpp:value>PycStringIO = (struct PycStringIO_CAPI*)PyCObject_Import("cStringIO", "cStringIO_CAPI")</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct <name>PycStringIO_CAPI</name> <block>{
<function_decl><type><name>int</name></type>(*<name>cread</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>(*<name>creadline</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>(*<name>cwrite</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name> *</type>(*<name>cgetvalue</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name> *</type>(*<name>NewOutput</name>)<parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>PyObject</name> *</type>(*<name>NewInput</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>InputType</name></decl>, *<decl><type ref="prev"/><name>OutputType</name></decl>;</decl_stmt>
}</block> <decl>*<name>PycStringIO</name></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PycStringIO_InputCheck</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(O)==PycStringIO-&gt;InputType)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PycStringIO_OutputCheck</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(O)==PycStringIO-&gt;OutputType)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
