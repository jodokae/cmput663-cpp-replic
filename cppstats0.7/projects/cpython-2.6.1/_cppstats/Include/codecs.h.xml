<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/codecs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_CODECREGISTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CODECREGISTRY_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_Register</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>search_function</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyCodec_Lookup</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_Encode</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>object</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_Decode</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>object</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_Encoder</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_Decoder</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_IncrementalEncoder</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_IncrementalDecoder</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_StreamReader</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>stream</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_StreamWriter</name><argument_list>(
<argument><expr>const <name>char</name> *<name>encoding</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>stream</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>errors</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_RegisterError</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_LookupError</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_StrictErrors</name><argument_list>(<argument><expr><name>PyObject</name> *<name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_IgnoreErrors</name><argument_list>(<argument><expr><name>PyObject</name> *<name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_ReplaceErrors</name><argument_list>(<argument><expr><name>PyObject</name> *<name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_XMLCharRefReplaceErrors</name><argument_list>(<argument><expr><name>PyObject</name> *<name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCodec_BackslashReplaceErrors</name><argument_list>(<argument><expr><name>PyObject</name> *<name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
