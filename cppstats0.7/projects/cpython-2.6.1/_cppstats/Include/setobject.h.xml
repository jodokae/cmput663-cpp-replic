<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/setobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_SETOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_SETOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySet_MINSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>setentry</name>;</typedef>
<typedef>typedef <type>struct <name>_setobject</name></type> <name>PySetObject</name>;</typedef>
<struct>struct <name>_setobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Py_ssize_t</name></type> <name>fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>setentry</name> *</type><name>table</name></decl>;</decl_stmt>
<function_decl><type><name>setentry</name> *</type>(*<name>lookup</name>)<parameter_list>(<param><decl><type><name>PySetObject</name> *</type><name>so</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>long</name></type> <name>hash</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>setentry</name></type> <name><name>smalltable</name><index>[<expr><name>PySet_MINSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>weakreflist</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PySet_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyFrozenSet_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrozenSet_CheckExact</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(ob) == &amp;PyFrozenSet_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyAnySet_CheckExact</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(ob) == &amp;PySet_Type || Py_TYPE(ob) == &amp;PyFrozenSet_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyAnySet_Check</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(ob) == &amp;PySet_Type || Py_TYPE(ob) == &amp;PyFrozenSet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PySet_Type) || PyType_IsSubtype(Py_TYPE(ob), &amp;PyFrozenSet_Type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySet_Check</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(ob) == &amp;PySet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PySet_Type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrozenSet_Check</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(ob) == &amp;PyFrozenSet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PyFrozenSet_Type))</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrozenSet_New</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_Size</name><argument_list>(<argument><expr><name>PyObject</name> *<name>anyset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySet_GET_SIZE</name><parameter_list>(<param><type><name>so</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PySetObject *)(so))-&gt;used)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_Clear</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_Contains</name><argument_list>(<argument><expr><name>PyObject</name> *<name>anyset</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_Discard</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_Add</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PySet_Next</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>, <argument><expr><name>Py_ssize_t</name> *<name>pos</name></expr></argument>, <argument><expr><name>PyObject</name> **<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PySet_NextEntry</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>, <argument><expr><name>Py_ssize_t</name> *<name>pos</name></expr></argument>, <argument><expr><name>PyObject</name> **<name>key</name></expr></argument>, <argument><expr><name>long</name> *<name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySet_Pop</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PySet_Update</name><argument_list>(<argument><expr><name>PyObject</name> *<name>set</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>iterable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
