<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/object.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_OBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_OBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>Py_TRACE_REFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TRACE_REFS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_TRACE_REFS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>Py_REF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_REF_DEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_TRACE_REFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_HEAD_EXTRA</name></cpp:macro> <cpp:value>struct _object *_ob_next; struct _object *_ob_prev;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_EXTRA_INIT</name></cpp:macro> <cpp:value>0, 0,</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_HEAD_EXTRA</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_EXTRA_INIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_HEAD</name></cpp:macro> <cpp:value>_PyObject_HEAD_EXTRA Py_ssize_t ob_refcnt; struct _typeobject *ob_type;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_HEAD_INIT</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_PyObject_EXTRA_INIT 1, type,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyVarObject_HEAD_INIT</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>size</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_HEAD_INIT(type) size,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_VAR_HEAD</name></cpp:macro> <cpp:value>PyObject_HEAD Py_ssize_t ob_size;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_INVALID_SIZE</name></cpp:macro> <cpp:value>(Py_ssize_t)-1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_object</name> <block>{
<expr_stmt><expr><name>PyObject_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>PyObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>PyObject_VAR_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>PyVarObject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_REFCNT</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyObject*)(ob))-&gt;ob_refcnt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TYPE</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyObject*)(ob))-&gt;ob_type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_SIZE</name><parameter_list>(<param><type><name>ob</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyVarObject*)(ob))-&gt;ob_size)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type> (*<name>unaryfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type> (*<name>binaryfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type> (*<name>ternaryfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>inquiry</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>lenfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>coercion</name>)<parameter_list>(<param><decl><type><name>PyObject</name> **</type></decl></param>, <param><decl><type><name>PyObject</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>intargfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list> Py_DEPRECATED<parameter_list>(</parameter_list>2.5</function_decl>);</typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>intintargfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list> Py_DEPRECATED<parameter_list>(</parameter_list>2.5</function_decl>);</typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>ssizeargfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>ssizessizeargfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>(*<name>intobjargproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>(*<name>intintobjargproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>(*<name>ssizeobjargproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>(*<name>ssizessizeobjargproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>(*<name>objobjargproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>getreadbufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>getwritebufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>getsegcountproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>getcharbufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>readbufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>writebufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>segcountproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>charbufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>bufferinfo</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>itemsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>readonly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ndim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name> *</type><name>shape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name> *</type><name>strides</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name> *</type><name>suboffsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>internal</name></decl>;</decl_stmt>
}</block></struct></type> <name>Py_buffer</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>getbufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_buffer</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>releasebufferproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Py_buffer</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_SIMPLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_WRITABLE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_WRITEABLE</name></cpp:macro> <cpp:value>PyBUF_WRITABLE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_FORMAT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_ND</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_STRIDES</name></cpp:macro> <cpp:value>(0x0010 | PyBUF_ND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_C_CONTIGUOUS</name></cpp:macro> <cpp:value>(0x0020 | PyBUF_STRIDES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_F_CONTIGUOUS</name></cpp:macro> <cpp:value>(0x0040 | PyBUF_STRIDES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_ANY_CONTIGUOUS</name></cpp:macro> <cpp:value>(0x0080 | PyBUF_STRIDES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_INDIRECT</name></cpp:macro> <cpp:value>(0x0100 | PyBUF_STRIDES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_CONTIG</name></cpp:macro> <cpp:value>(PyBUF_ND | PyBUF_WRITABLE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_CONTIG_RO</name></cpp:macro> <cpp:value>(PyBUF_ND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_STRIDED</name></cpp:macro> <cpp:value>(PyBUF_STRIDES | PyBUF_WRITABLE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_STRIDED_RO</name></cpp:macro> <cpp:value>(PyBUF_STRIDES)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_RECORDS</name></cpp:macro> <cpp:value>(PyBUF_STRIDES | PyBUF_WRITABLE | PyBUF_FORMAT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_RECORDS_RO</name></cpp:macro> <cpp:value>(PyBUF_STRIDES | PyBUF_FORMAT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_FULL</name></cpp:macro> <cpp:value>(PyBUF_INDIRECT | PyBUF_WRITABLE | PyBUF_FORMAT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_FULL_RO</name></cpp:macro> <cpp:value>(PyBUF_INDIRECT | PyBUF_FORMAT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_READ</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_WRITE</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBUF_SHADOW</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>objobjproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>visitproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>traverseproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>visitproc</name></type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_subtract</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_multiply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_remainder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_divmod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ternaryfunc</name></type> <name>nb_power</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_negative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_positive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_absolute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>inquiry</name></type> <name>nb_nonzero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_invert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_and</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_xor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_or</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>coercion</name></type> <name>nb_coerce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_long</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_oct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_hex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_subtract</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_multiply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_remainder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ternaryfunc</name></type> <name>nb_inplace_power</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_lshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_rshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_and</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_xor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_or</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_floor_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_true_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_floor_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>nb_inplace_true_divide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unaryfunc</name></type> <name>nb_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyNumberMethods</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>lenfunc</name></type> <name>sq_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>sq_concat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssizeargfunc</name></type> <name>sq_repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssizeargfunc</name></type> <name>sq_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssizessizeargfunc</name></type> <name>sq_slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssizeobjargproc</name></type> <name>sq_ass_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssizessizeobjargproc</name></type> <name>sq_ass_slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>objobjproc</name></type> <name>sq_contains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>sq_inplace_concat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssizeargfunc</name></type> <name>sq_inplace_repeat</name></decl>;</decl_stmt>
}</block></struct></type> <name>PySequenceMethods</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>lenfunc</name></type> <name>mp_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>binaryfunc</name></type> <name>mp_subscript</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>objobjargproc</name></type> <name>mp_ass_subscript</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyMappingMethods</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>readbufferproc</name></type> <name>bf_getreadbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>writebufferproc</name></type> <name>bf_getwritebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>segcountproc</name></type> <name>bf_getsegcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>charbufferproc</name></type> <name>bf_getcharbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getbufferproc</name></type> <name>bf_getbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>releasebufferproc</name></type> <name>bf_releasebuffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyBufferProcs</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>freefunc</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>destructor</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>printfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>FILE</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>getattrfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>getattrofunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>setattrfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>setattrofunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>cmpfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>reprfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>long</name></type> (*<name>hashfunc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>richcmpfunc</name>) <parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>getiterfunc</name>) <parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>iternextfunc</name>) <parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>descrgetfunc</name>) <parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>descrsetfunc</name>) <parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>initproc</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>newfunc</name>)<parameter_list>(<param><decl><type>struct</type> <name>_typeobject</name> *</decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>allocfunc</name>)<parameter_list>(<param><decl><type>struct</type> <name>_typeobject</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>_typeobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
<specifier>const</specifier> <name>char</name> *</type><name>tp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tp_basicsize</name></decl>, <name>tp_itemsize</name>;</decl_stmt>
<decl_stmt><decl><type><name>destructor</name></type> <name>tp_dealloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>printfunc</name></type> <name>tp_print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getattrfunc</name></type> <name>tp_getattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>setattrfunc</name></type> <name>tp_setattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmpfunc</name></type> <name>tp_compare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reprfunc</name></type> <name>tp_repr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyNumberMethods</name> *</type><name>tp_as_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PySequenceMethods</name> *</type><name>tp_as_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyMappingMethods</name> *</type><name>tp_as_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashfunc</name></type> <name>tp_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ternaryfunc</name></type> <name>tp_call</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>reprfunc</name></type> <name>tp_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getattrofunc</name></type> <name>tp_getattro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>setattrofunc</name></type> <name>tp_setattro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBufferProcs</name> *</type><name>tp_as_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tp_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tp_doc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>traverseproc</name></type> <name>tp_traverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>inquiry</name></type> <name>tp_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>richcmpfunc</name></type> <name>tp_richcompare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tp_weaklistoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getiterfunc</name></type> <name>tp_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iternextfunc</name></type> <name>tp_iternext</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>PyMethodDef</name> *</type><name>tp_methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>PyMemberDef</name> *</type><name>tp_members</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>PyGetSetDef</name> *</type><name>tp_getset</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_typeobject</name> *</type><name>tp_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp_dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>descrgetfunc</name></type> <name>tp_descr_get</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>descrsetfunc</name></type> <name>tp_descr_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tp_dictoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>initproc</name></type> <name>tp_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allocfunc</name></type> <name>tp_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>newfunc</name></type> <name>tp_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>freefunc</name></type> <name>tp_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>inquiry</name></type> <name>tp_is_gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp_bases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp_mro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp_subclasses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp_weaklist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>destructor</name></type> <name>tp_del</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_version_tag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COUNT_ALLOCS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tp_allocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tp_frees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>tp_maxalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_typeobject</name> *</type><name>tp_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_typeobject</name> *</type><name>tp_next</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>PyTypeObject</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_heaptypeobject</name> <block>{
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>ht_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyNumberMethods</name></type> <name>as_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyMappingMethods</name></type> <name>as_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PySequenceMethods</name></type> <name>as_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyBufferProcs</name></type> <name>as_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ht_name</name></decl>, *<name>ht_slots</name>;</decl_stmt>
}</block></struct></type> <name>PyHeapTypeObject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyHeapType_GET_MEMBERS</name><parameter_list>(<param><type><name>etype</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((PyMemberDef *)(((char *)etype) + Py_TYPE(etype)-&gt;tp_basicsize))</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>, <argument><expr><name>PyTypeObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_TypeCheck</name><parameter_list>(<param><type><name>ob</name></type></param>, <param><type><name>tp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyType_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyBaseObject_Type</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PySuper_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyType_Type)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyType_GenericAlloc</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyType_GenericNew</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>,
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyType_Lookup</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>unsigned int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyType_ClearCache</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyType_Modified</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Print</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>FILE</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_Dump</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_Str</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Bytes</name></cpp:macro> <cpp:value>PyObject_Str</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Unicode</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_SetAttr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_HasAttr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject **</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_GetDictPtr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_SelfIter</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_GenericGetAttr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_GenericSetAttr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>,
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_HashNotImplemented</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Not</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Coerce</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>PyObject</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_CoerceEx</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>PyObject</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_PyObject_SlotCompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Dir</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_ReprEnter</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_ReprLeave</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_HashDouble</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_HashPointer</name><argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_REPR</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyString_AS_STRING(PyObject_Repr(obj))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_PRINT_RAW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_GETCHARBUFFER</name></cpp:macro> <cpp:value>(1L&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_SEQUENCE_IN</name></cpp:macro> <cpp:value>(1L&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_GC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_INPLACEOPS</name></cpp:macro> <cpp:value>(1L&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_CHECKTYPES</name></cpp:macro> <cpp:value>(1L&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_RICHCOMPARE</name></cpp:macro> <cpp:value>(1L&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_WEAKREFS</name></cpp:macro> <cpp:value>(1L&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_ITER</name></cpp:macro> <cpp:value>(1L&lt;&lt;7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_CLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HEAPTYPE</name></cpp:macro> <cpp:value>(1L&lt;&lt;9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_BASETYPE</name></cpp:macro> <cpp:value>(1L&lt;&lt;10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_READY</name></cpp:macro> <cpp:value>(1L&lt;&lt;12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_READYING</name></cpp:macro> <cpp:value>(1L&lt;&lt;13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_GC</name></cpp:macro> <cpp:value>(1L&lt;&lt;14)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STACKLESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_STACKLESS_EXTENSION</name></cpp:macro> <cpp:value>(3L&lt;&lt;15)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_STACKLESS_EXTENSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_INDEX</name></cpp:macro> <cpp:value>(1L&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_VERSION_TAG</name></cpp:macro> <cpp:value>(1L&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_VALID_VERSION_TAG</name></cpp:macro> <cpp:value>(1L&lt;&lt;19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_IS_ABSTRACT</name></cpp:macro> <cpp:value>(1L&lt;&lt;20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_HAVE_NEWBUFFER</name></cpp:macro> <cpp:value>(1L&lt;&lt;21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_INT_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_LONG_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_LIST_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_TUPLE_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_STRING_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;27)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_UNICODE_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_DICT_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_BASE_EXC_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_TYPE_SUBCLASS</name></cpp:macro> <cpp:value>(1L&lt;&lt;31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_DEFAULT_EXTERNAL</name></cpp:macro> <cpp:value>( Py_TPFLAGS_HAVE_GETCHARBUFFER | Py_TPFLAGS_HAVE_SEQUENCE_IN | Py_TPFLAGS_HAVE_INPLACEOPS | Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_WEAKREFS | Py_TPFLAGS_HAVE_ITER | Py_TPFLAGS_HAVE_CLASS | Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | Py_TPFLAGS_HAVE_INDEX | 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_DEFAULT_CORE</name></cpp:macro> <cpp:value>(Py_TPFLAGS_DEFAULT_EXTERNAL | Py_TPFLAGS_HAVE_VERSION_TAG)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_BUILD_CORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_DEFAULT</name></cpp:macro> <cpp:value>Py_TPFLAGS_DEFAULT_CORE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TPFLAGS_DEFAULT</name></cpp:macro> <cpp:value>Py_TPFLAGS_DEFAULT_EXTERNAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_HasFeature</name><parameter_list>(<param><type><name>t</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((t)-&gt;tp_flags &amp; (f)) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_FastSubclass</name><parameter_list>(<param><type><name>t</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyType_HasFeature(t,f)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_REF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><name>_Py_RefTotal</name></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>_Py_NegativeRefcount</name><argument_list>(<argument>const char *fname</argument>,
<argument>int lineno</argument>, <argument>PyObject *op</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyDict_Dummy</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PySet_Dummy</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_GetRefTotal</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_INC_REFTOTAL</name></cpp:macro> <cpp:value>_Py_RefTotal++</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_DEC_REFTOTAL</name></cpp:macro> <cpp:value>_Py_RefTotal--</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_REF_DEBUG_COMMA</name></cpp:macro> <cpp:value>,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_CHECK_REFCNT</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if (((PyObject*)OP)-&gt;ob_refcnt &lt; 0) _Py_NegativeRefcount(__FILE__, __LINE__, (PyObject *)(OP)); }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_INC_REFTOTAL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_DEC_REFTOTAL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_REF_DEBUG_COMMA</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_CHECK_REFCNT</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COUNT_ALLOCS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>inc_count</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dec_count</name><argument_list>(<argument><expr><name>PyTypeObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_INC_TPALLOCS</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro> <cpp:value>inc_count(Py_TYPE(OP))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_INC_TPFREES</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro> <cpp:value>dec_count(Py_TYPE(OP))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_DEC_TPFREES</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_TYPE(OP)-&gt;tp_frees--</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_COUNT_ALLOCS_COMMA</name></cpp:macro> <cpp:value>,</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_INC_TPALLOCS</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_INC_TPFREES</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_DEC_TPFREES</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_COUNT_ALLOCS_COMMA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_TRACE_REFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_NewReference</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_ForgetReference</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_Dealloc</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_PrintReferences</name><argument_list>(<argument><expr><name>FILE</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_Py_PrintReferenceAddresses</name><argument_list>(<argument><expr><name>FILE</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>_Py_AddToAllObjects</name><argument_list>(<argument>PyObject *</argument>, <argument>int force</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_NewReference</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( _Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA _Py_INC_REFTOTAL _Py_REF_DEBUG_COMMA Py_REFCNT(op) = 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_ForgetReference</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_Py_INC_TPFREES(op)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_Dealloc</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA (*Py_TYPE(op)-&gt;tp_dealloc)((PyObject *)(op)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_INCREF</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( _Py_INC_REFTOTAL _Py_REF_DEBUG_COMMA ((PyObject*)(op))-&gt;ob_refcnt++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_DECREF</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (_Py_DEC_REFTOTAL _Py_REF_DEBUG_COMMA --((PyObject*)(op))-&gt;ob_refcnt != 0) _Py_CHECK_REFCNT(op) else _Py_Dealloc((PyObject *)(op))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CLEAR</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (op) { PyObject *_py_tmp = (PyObject *)(op); (op) = NULL; Py_DECREF(_py_tmp); } } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_XINCREF</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if ((op) == NULL) ; else Py_INCREF(op)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_XDECREF</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if ((op) == NULL) ; else Py_DECREF(op)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_IncRef</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_DecRef</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject</argument>)</argument_list></macro> <expr_stmt><expr><name>_Py_NoneStruct</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_None</name></cpp:macro> <cpp:value>(&amp;_Py_NoneStruct)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_RETURN_NONE</name></cpp:macro> <cpp:value>return Py_INCREF(Py_None), Py_None</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject</argument>)</argument_list></macro> <expr_stmt><expr><name>_Py_NotImplementedStruct</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NotImplemented</name></cpp:macro> <cpp:value>(&amp;_Py_NotImplementedStruct)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_LE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_EQ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_GT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_GE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name><name>_Py_SwappedOp</name><index>[]</index></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>staticforward</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>statichere</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyTrash_deposit_object</name><argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyTrash_destroy_chain</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyTrash_delete_nesting</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>_PyTrash_delete_later</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTrash_UNWIND_LEVEL</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TRASHCAN_SAFE_BEGIN</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (_PyTrash_delete_nesting &lt; PyTrash_UNWIND_LEVEL) { ++_PyTrash_delete_nesting;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_TRASHCAN_SAFE_END</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>--_PyTrash_delete_nesting; if (_PyTrash_delete_later &amp;&amp; _PyTrash_delete_nesting &lt;= 0) _PyTrash_destroy_chain(); } else _PyTrash_deposit_object((PyObject*)op);</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
