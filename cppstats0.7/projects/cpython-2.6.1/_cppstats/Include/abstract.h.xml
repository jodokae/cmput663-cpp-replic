<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/abstract.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_ABSTRACTOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ABSTRACTOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_SSIZE_T_CLEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallFunction</name></cpp:macro> <cpp:value>_PyObject_CallFunction_SizeT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallMethod</name></cpp:macro> <cpp:value>_PyObject_CallMethod_SizeT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_DelAttrString</name><parameter_list>(<param><type><name>O</name></type></param>,<param><type><name>A</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_SetAttrString((O),(A),NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_DelAttr</name><parameter_list>(<param><type><name>O</name></type></param>,<param><type><name>A</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_SetAttr((O),(A),NULL)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Cmp</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>, <argument><expr><name>int</name> *<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Call</name><argument_list>(<argument><expr><name>PyObject</name> *<name>callable_object</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>args</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>PyObject</name> *<name>callable_object</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>PyObject</name> *<name>callable_object</name></expr></argument>,
<argument><expr><name>char</name> *<name>format</name></expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>char</name> *<name>m</name></expr></argument>,
<argument><expr><name>char</name> *<name>format</name></expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_CallFunction_SizeT</name><argument_list>(<argument><expr><name>PyObject</name> *<name>callable</name></expr></argument>,
<argument><expr><name>char</name> *<name>format</name></expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_CallMethod_SizeT</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>,
<argument><expr><name>char</name> *<name>name</name></expr></argument>,
<argument><expr><name>char</name> *<name>format</name></expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>PyObject</name> *<name>callable</name></expr></argument>,
<argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CallMethodObjArgs</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>m</name></expr></argument>, <argument>...<expr/></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Type</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Size</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyObject_Length</name></cpp:undef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Length</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Length</name></cpp:macro> <cpp:value>PyObject_Size</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_LengthHint</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_DelItemString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>char</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_DelItem</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_AsCharBuffer</name><argument_list>(<argument><expr><name>PyObject</name> *<name>obj</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>buffer</name></expr></argument>,
<argument><expr><name>Py_ssize_t</name> *<name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CheckReadBuffer</name><argument_list>(<argument><expr><name>PyObject</name> *<name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_AsReadBuffer</name><argument_list>(<argument><expr><name>PyObject</name> *<name>obj</name></expr></argument>,
<argument><expr>const <name>void</name> **<name>buffer</name></expr></argument>,
<argument><expr><name>Py_ssize_t</name> *<name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_AsWriteBuffer</name><argument_list>(<argument><expr><name>PyObject</name> *<name>obj</name></expr></argument>,
<argument><expr><name>void</name> **<name>buffer</name></expr></argument>,
<argument><expr><name>Py_ssize_t</name> *<name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CheckBuffer</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((obj)-&gt;ob_type-&gt;tp_as_buffer != NULL) &amp;&amp; (PyType_HasFeature((obj)-&gt;ob_type, Py_TPFLAGS_HAVE_NEWBUFFER)) &amp;&amp; ((obj)-&gt;ob_type-&gt;tp_as_buffer-&gt;bf_getbuffer != NULL))</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyObject_GetBuffer</name><argument_list>(<argument>PyObject *obj</argument>, <argument>Py_buffer *view</argument>,
<argument>int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyBuffer_GetPointer</name><argument_list>(<argument><expr><name>Py_buffer</name> *<name>view</name></expr></argument>, <argument><expr><name>Py_ssize_t</name> *<name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyBuffer_SizeFromFormat</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyBuffer_ToContiguous</name><argument_list>(<argument>void *buf</argument>, <argument>Py_buffer *view</argument>,
<argument>Py_ssize_t len</argument>, <argument>char fort</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyBuffer_FromContiguous</name><argument_list>(<argument>Py_buffer *view</argument>, <argument>void *buf</argument>,
<argument>Py_ssize_t len</argument>, <argument>char fort</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_CopyData</name><argument_list>(<argument><expr><name>PyObject</name> *<name>dest</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyBuffer_IsContiguous</name><argument_list>(<argument>Py_buffer *view</argument>, <argument>char fort</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>PyBuffer_FillContiguousStrides</name><argument_list>(<argument>int ndims</argument>,
<argument>Py_ssize_t *shape</argument>,
<argument>Py_ssize_t *strides</argument>,
<argument>int itemsize</argument>,
<argument>char fort</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyBuffer_FillInfo</name><argument_list>(<argument>Py_buffer *view</argument>, <argument>PyObject *o</argument>, <argument>void *buf</argument>,
<argument>Py_ssize_t len</argument>, <argument>int readonly</argument>,
<argument>int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr><name>Py_buffer</name> *<name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_Format</name><argument_list>(<argument><expr><name>PyObject</name>* <name>obj</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>format_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIter_Check</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyType_HasFeature((obj)-&gt;ob_type, Py_TPFLAGS_HAVE_ITER) &amp;&amp; (obj)-&gt;ob_type-&gt;tp_iternext != NULL)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyIter_Next</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Check</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Subtract</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Multiply</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Divide</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_FloorDivide</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_TrueDivide</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Remainder</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Divmod</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Power</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>o3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Negative</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Positive</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Absolute</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Invert</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Lshift</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Rshift</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_And</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Xor</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Or</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIndex_Check</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((obj)-&gt;ob_type-&gt;tp_as_number != NULL &amp;&amp; PyType_HasFeature((obj)-&gt;ob_type, Py_TPFLAGS_HAVE_INDEX) &amp;&amp; (obj)-&gt;ob_type-&gt;tp_as_number-&gt;nb_index != NULL)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Index</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_AsSsize_t</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyNumber_ConvertIntegralToInt</name><argument_list>(
<argument><expr><name>PyObject</name> *<name>integral</name></expr></argument>,
<argument><expr>const <name>char</name>* <name>error_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Int</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Long</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_Float</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceAdd</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceSubtract</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceMultiply</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceDivide</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceFloorDivide</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceTrueDivide</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceRemainder</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlacePower</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>o3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceLshift</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceRshift</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceAnd</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceXor</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyNumber_InPlaceOr</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyNumber_ToBase</name><argument_list>(<argument>PyObject *n</argument>, <argument>int base</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Size</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PySequence_Length</name></cpp:undef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Length</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Length</name></cpp:macro> <cpp:value>PySequence_Size</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Concat</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PySequence_Repeat</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t count</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PySequence_GetItem</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PySequence_GetSlice</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t i1</argument>, <argument>Py_ssize_t i2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PySequence_SetItem</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t i</argument>, <argument>PyObject *v</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PySequence_DelItem</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PySequence_SetSlice</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t i1</argument>, <argument>Py_ssize_t i2</argument>,
<argument>PyObject *v</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PySequence_DelSlice</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t i1</argument>, <argument>Py_ssize_t i2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Tuple</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_List</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Fast</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr>const <name>char</name>* <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Fast_GET_SIZE</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyList_Check(o) ? PyList_GET_SIZE(o) : PyTuple_GET_SIZE(o))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Fast_GET_ITEM</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>i</name></type></param>)</parameter_list></cpp:macro><cpp:value>(PyList_Check(o) ? PyList_GET_ITEM(o, i) : PyTuple_GET_ITEM(o, i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_ITEM</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>i</name></type></param>)</parameter_list></cpp:macro><cpp:value>( Py_TYPE(o)-&gt;tp_as_sequence-&gt;sq_item(o, i) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Fast_ITEMS</name><parameter_list>(<param><type><name>sf</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyList_Check(sf) ? ((PyListObject *)(sf))-&gt;ob_item : ((PyTupleObject *)(sf))-&gt;ob_item)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Count</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Contains</name><argument_list>(<argument><expr><name>PyObject</name> *<name>seq</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_ITERSEARCH_COUNT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_ITERSEARCH_INDEX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_ITERSEARCH_CONTAINS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <macro><name>_PySequence_IterSearch</name><argument_list>(<argument>PyObject *seq</argument>,
<argument>PyObject *obj</argument>, <argument>int operation</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PySequence_In</name></cpp:undef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_In</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_In</name></cpp:macro> <cpp:value>PySequence_Contains</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_Index</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PySequence_InPlaceConcat</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o1</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PySequence_InPlaceRepeat</name><argument_list>(<argument>PyObject *o</argument>, <argument>Py_ssize_t count</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_Size</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyMapping_Length</name></cpp:undef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>Py_ssize_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_Length</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_Length</name></cpp:macro> <cpp:value>PyMapping_Size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_DelItemString</name><parameter_list>(<param><type><name>O</name></type></param>,<param><type><name>K</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_DelItemString((O),(K))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_DelItem</name><parameter_list>(<param><type><name>O</name></type></param>,<param><type><name>K</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_DelItem((O),(K))</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_HasKeyString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>char</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_HasKey</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_Keys</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_CallMethod(O,"keys",NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_Values</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_CallMethod(O,"values",NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_Items</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_CallMethod(O,"items",NULL)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_GetItemString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>char</name> *<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyMapping_SetItemString</name><argument_list>(<argument><expr><name>PyObject</name> *<name>o</name></expr></argument>, <argument><expr><name>char</name> *<name>key</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_IsInstance</name><argument_list>(<argument><expr><name>PyObject</name> *<name>object</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>typeorclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyObject_IsSubclass</name><argument_list>(<argument><expr><name>PyObject</name> *<name>object</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>typeorclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_RealIsInstance</name><argument_list>(<argument><expr><name>PyObject</name> *<name>inst</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>_PyObject_RealIsSubclass</name><argument_list>(<argument><expr><name>PyObject</name> *<name>derived</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
