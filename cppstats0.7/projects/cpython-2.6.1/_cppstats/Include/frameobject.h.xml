<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Include/frameobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_FRAMEOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_FRAMEOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>b_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_level</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyTryBlock</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_frame</name> <block>{
<macro><name>PyObject_VAR_HEAD</name></macro>
<decl_stmt><decl><type>struct <name>_frame</name> *</type><name>f_back</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCodeObject</name> *</type><name>f_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_builtins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_globals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_locals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>f_valuestack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>f_stacktop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_trace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f_exc_type</name></decl>, *<name>f_exc_value</name>, *<name>f_exc_traceback</name>;</decl_stmt>
<decl_stmt><decl><type><name>PyThreadState</name> *</type><name>f_tstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_lasti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f_iblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTryBlock</name></type> <name><name>f_blockstack</name><index>[<expr><name>CO_MAXBLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name><name>f_localsplus</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>PyFrameObject</name>;</typedef>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyFrame_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrame_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;PyFrame_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFrame_IsRestricted</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;f_builtins != (f)-&gt;f_tstate-&gt;interp-&gt;builtins)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyFrameObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_New</name><argument_list>(<argument><expr><name>PyThreadState</name> *</expr></argument>, <argument><expr><name>PyCodeObject</name> *</expr></argument>,
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_BlockSetup</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyTryBlock *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_BlockPop</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject **</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_ExtendStack</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_LocalsToFast</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_FastToLocals</name><argument_list>(<argument><expr><name>PyFrameObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyFrame_ClearFreeList</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
