<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/pyerrors.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_ERRORS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ERRORS_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyBaseExceptionObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>print_file_and_line</name></decl>;</decl_stmt>
}</block></struct></type> <name>PySyntaxErrorObject</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>reason</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyUnicodeErrorObject</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>code</name></decl>;</decl_stmt>
}</block></struct></type> <name>PySystemExitObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>myerrno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>strerror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyEnvironmentErrorObject</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>myerrno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>strerror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>winerror</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyWindowsErrorObject</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_Occurred</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>PyObject</name> **</expr></argument>, <argument><expr><name>PyObject</name> **</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyErr_OCCURRED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PyErr_Occurred()</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyErr_OCCURRED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(_PyThreadState_Current-&gt;curexc_type)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_GivenExceptionMatches</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_NormalizeException</name><argument_list>(<argument><expr><name>PyObject</name>**</expr></argument>, <argument><expr><name>PyObject</name>**</expr></argument>, <argument><expr><name>PyObject</name>**</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExceptionClass_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyClass_Check((x)) || (PyType_Check((x)) &amp;&amp; PyType_FastSubclass((PyTypeObject*)(x), Py_TPFLAGS_BASE_EXC_SUBCLASS)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExceptionInstance_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyInstance_Check((x)) || PyType_FastSubclass((x)-&gt;ob_type, Py_TPFLAGS_BASE_EXC_SUBCLASS))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExceptionClass_Name</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyClass_Check((x)) ? PyString_AS_STRING(((PyClassObject*)(x))-&gt;cl_name) : (char *)(((PyTypeObject*)(x))-&gt;tp_name))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExceptionInstance_Class</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((PyInstance_Check((x)) ? (PyObject*)((PyInstanceObject*)(x))-&gt;in_class : (PyObject*)((x)-&gt;ob_type)))</cpp:value></cpp:define>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_BaseException</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_Exception</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_StopIteration</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_GeneratorExit</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_StandardError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_ArithmeticError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_LookupError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_AssertionError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_AttributeError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_EOFError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_FloatingPointError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_EnvironmentError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_IOError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_OSError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_ImportError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_IndexError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_KeyError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_KeyboardInterrupt</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_MemoryError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_NameError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_OverflowError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_RuntimeError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_NotImplementedError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_SyntaxError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_IndentationError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_TabError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_ReferenceError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_SystemError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_SystemExit</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_TypeError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UnboundLocalError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UnicodeError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UnicodeEncodeError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UnicodeDecodeError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UnicodeTranslateError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_ValueError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_ZeroDivisionError</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_WindowsError</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_VMSError</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_BufferError</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_MemoryErrorInst</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_RecursionErrorInst</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_Warning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UserWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_DeprecationWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_PendingDeprecationWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_SyntaxWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_RuntimeWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_FutureWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_ImportWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_UnicodeWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><name>PyExc_BytesWarning</name></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromErrnoWithFilenameObject</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromErrnoWithFilename</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_WIN_WIDE_FILENAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromErrnoWithUnicodeFilename</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_UNICODE</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <macro><name>PyErr_Format</name><argument_list>(<argument>PyObject *</argument>, <argument>const char *</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromWindowsErrWithFilenameObject</name><argument_list>(
<argument><expr><name>int</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromWindowsErrWithFilename</name><argument_list>(
<argument><expr><name>int</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_WIN_WIDE_FILENAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromWindowsErrWithUnicodeFilename</name><argument_list>(
<argument><expr><name>int</name></expr></argument>, <argument><expr>const <name>Py_UNICODE</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetFromWindowsErr</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetExcFromWindowsErrWithFilenameObject</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>,<argument><expr><name>int</name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetExcFromWindowsErrWithFilename</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>,<argument><expr><name>int</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_WIN_WIDE_FILENAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetExcFromWindowsErrWithUnicodeFilename</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>,<argument><expr><name>int</name></expr></argument>, <argument><expr>const <name>Py_UNICODE</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetExcFromWindowsErr</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>_PyErr_BadInternalCall</name><argument_list>(<argument>char *filename</argument>, <argument>int lineno</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_BadInternalCall</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_PyErr_BadInternalCall(__FILE__, __LINE__)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_NewException</name><argument_list>(<argument><expr><name>char</name> *<name>name</name></expr></argument>, <argument><expr><name>PyObject</name> *<name>base</name></expr></argument>,
<argument><expr><name>PyObject</name> *<name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_WriteUnraisable</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_CheckSignals</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SetInterrupt</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>int</name></type> <name>PySignal_SetWakeupFd</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_SyntaxLocation</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyErr_ProgramText</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_Create</name><argument_list>(
<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_Create</name><argument_list>(
<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>Py_UNICODE</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_Create</name><argument_list>(
<argument><expr>const <name>Py_UNICODE</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_GetEncoding</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_GetEncoding</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_GetObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_GetObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_GetObject</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_GetStart</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_GetStart</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_GetStart</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_SetStart</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_SetStart</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_SetStart</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_GetEnd</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_GetEnd</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_GetEnd</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_SetEnd</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_SetEnd</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_SetEnd</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_GetReason</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_GetReason</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_GetReason</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeEncodeError_SetReason</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeDecodeError_SetReason</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyUnicodeTranslateError_SetReason</name><argument_list>(
<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SNPRINTF</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsnprintf</name></cpp:macro> <cpp:value>_vsnprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyOS_snprintf</name><argument_list>(<argument>char *str</argument>, <argument>size_t size</argument>, <argument>const char *format</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>PyOS_vsnprintf</name><argument_list>(<argument>char *str</argument>, <argument>size_t size</argument>, <argument>const char *format</argument>, <argument>va_list va</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>Py_GCC_ATTRIBUTE</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
