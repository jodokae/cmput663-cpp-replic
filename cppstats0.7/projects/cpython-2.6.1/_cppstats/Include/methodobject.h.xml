<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Include/methodobject.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_METHODOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_METHODOBJECT_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PyAPI_DATA</name><argument_list>(<argument>PyTypeObject</argument>)</argument_list></macro> <expr_stmt><expr><name>PyCFunction_Type</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;PyCFunction_Type)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>PyCFunction</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>PyCFunctionWithKeywords</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>,
<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PyObject</name> *</type>(*<name>PyNoArgsFunction</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyCFunction</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_GetFunction</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_GetSelf</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_GetFlags</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_GET_FUNCTION</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_meth)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_GET_SELF</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyCFunctionObject *)func) -&gt; m_self)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_GET_FLAGS</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_flags)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_Call</name><argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<struct>struct <name>PyMethodDef</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ml_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCFunction</name></type> <name>ml_meth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ml_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ml_doc</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>PyMethodDef</name></type> <name>PyMethodDef</name>;</typedef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name><name>PyMethodDef</name><index>[]</index></name></expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCFunction_New</name><parameter_list>(<param><type><name>ML</name></type></param>, <param><type><name>SELF</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyCFunction_NewEx((ML), (SELF), NULL)</cpp:value></cpp:define>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_NewEx</name><argument_list>(<argument><expr><name>PyMethodDef</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>,
<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_OLDARGS</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_VARARGS</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_KEYWORDS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_NOARGS</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_O</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_CLASS</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_STATIC</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METH_COEXIST</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>PyMethodChain</name> <block>{
<decl_stmt><decl><type><name>PyMethodDef</name> *</type><name>methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>PyMethodChain</name> *</type><name>link</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyMethodChain</name>;</typedef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>PyObject *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Py_FindMethodInChain</name><argument_list>(<argument><expr><name>PyMethodChain</name> *</expr></argument>, <argument><expr><name>PyObject</name> *</expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyMethodDef</name> *</type><name>m_ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m_module</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyCFunctionObject</name>;</typedef>
<macro><name>PyAPI_FUNC</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>PyCFunction_ClearFreeList</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
