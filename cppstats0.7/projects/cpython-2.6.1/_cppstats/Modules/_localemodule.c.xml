<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_localemodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBINTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RISCOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name> *</type><name>strdup</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>locale__doc__</name></expr></argument>, <argument><expr>"Support for POSIX locales."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>setlocale__doc__</name></expr></argument>,
<argument><expr>"(integer,string=None) -&gt; string. Activates/queries locale processing."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>copy_grouping</name><parameter_list>(<param><decl><type><name>char</name>*</type> <name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>s</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> != '\0' &amp;&amp; <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> != <name>CHAR_MAX</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>result</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>i</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block> while <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> != '\0' &amp;&amp; <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> != <name>CHAR_MAX</name></expr>)</condition>;</do>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fixup_ulcase</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>mods</name></decl>, *<decl><type ref="prev"/><name>strop</name></decl>, *<decl><type ref="prev"/><name>string</name></decl>, *<decl><type ref="prev"/><name>ulo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ul</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mods</name> = <call><name>PyImport_GetModuleDict</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mods</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>string</name> = <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>mods</name></expr></argument>, <argument><expr>"string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>string</name></expr>)</condition><then>
<expr_stmt><expr><name>string</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>strop</name>=<call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>mods</name></expr></argument>, <argument><expr>"strop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strop</name></expr>)</condition><then>
<expr_stmt><expr><name>strop</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>strop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>string</name> &amp;&amp; !<name>strop</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>c</name> = 0</expr>;</init> <condition><expr><name>c</name> &lt; 256</expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>ul</name><index>[<expr><name>n</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>ulo</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>ul</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ulo</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>string</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>"uppercase"</expr></argument>, <argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>strop</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>strop</name></expr></argument>, <argument><expr>"uppercase"</expr></argument>, <argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>c</name> = 0</expr>;</init> <condition><expr><name>c</name> &lt; 256</expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>ul</name><index>[<expr><name>n</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>ulo</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>ul</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ulo</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>string</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>"lowercase"</expr></argument>, <argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>strop</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>strop</name></expr></argument>, <argument><expr>"lowercase"</expr></argument>, <argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>c</name> = 0</expr>;</init> <condition><expr><name>c</name> &lt; 256</expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>ul</name><index>[<expr><name>n</name>++</expr>]</index></name> = <name>c</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>ulo</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>ul</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ulo</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>string</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>"letters"</expr></argument>, <argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_setlocale</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>category</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>locale</name> <init>= <expr><name>NULL</name></expr></init>, *<name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result_object</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i|z:setlocale"</expr></argument>, <argument><expr>&amp;<name>category</name></expr></argument>, <argument><expr>&amp;<name>locale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>locale</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Error</name></expr></argument>, <argument><expr>"unsupported locale setting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result_object</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result_object</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>category</name> == <name>LC_CTYPE</name> || <name>category</name> == <name>LC_ALL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fixup_ulcase</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Error</name></expr></argument>, <argument><expr>"locale query failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result_object</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>result_object</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>localeconv__doc__</name></expr></argument>,
<argument><expr>"() -&gt; dict. Returns numeric and monetary locale-specific parameters."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_localeconv</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>lconv</name> *</type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>l</name> = <call><name>localeconv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT_STRING</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro><cpp:value>x = PyString_FromString(l-&gt;s);if (!x) goto failed;PyDict_SetItemString(result, #s, x);Py_XDECREF(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT_INT</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro><cpp:value>x = PyInt_FromLong(l-&gt;i);if (!x) goto failed;PyDict_SetItemString(result, #i, x);Py_XDECREF(x)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>decimal_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>thousands_sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>copy_grouping</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>grouping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>x</name></expr>)</condition><then>
<goto>goto <name>failed</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"grouping"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>int_curr_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>currency_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>mon_decimal_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>mon_thousands_sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>copy_grouping</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>mon_grouping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>x</name></expr>)</condition><then>
<goto>goto <name>failed</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"mon_grouping"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>positive_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_STRING</name><argument_list>(<argument><expr><name>negative_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>int_frac_digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>frac_digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>p_cs_precedes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>p_sep_by_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>n_cs_precedes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>n_sep_by_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>p_sign_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RESULT_INT</name><argument_list>(<argument><expr><name>n_sign_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>strcoll__doc__</name></expr></argument>,
<argument><expr>"string,string -&gt; int. Compares two strings according to the locale."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_strcoll</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WCSCOLL</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> *</type><name>s1</name></decl>,*<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ss:strcoll"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>&amp;<name>s2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>strcoll</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>os1</name></decl>, *<decl><type ref="prev"/><name>os2</name></decl>, *<decl><type ref="prev"/><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> *</type><name>ws1</name> <init>= <expr><name>NULL</name></expr></init>, *<name>ws2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rel1</name> <init>= <expr>0</expr></init>, <name>rel2</name> <init>= <expr>0</expr></init>, <name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"strcoll"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>os1</name></expr></argument>, <argument><expr>&amp;<name>os2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyString_Check</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>strcoll</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"strcoll arguments must be strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>os1</name> = <call><name>PyUnicode_FromObject</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>os1</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rel1</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>os2</name> = <call><name>PyUnicode_FromObject</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>os2</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rel1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rel2</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>len1</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ws1</name> = <call><name>PyMem_MALLOC</name><argument_list>(<argument><expr><name>len1</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ws1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyUnicode_AsWideChar</name><argument_list>(<argument><expr>(<name>PyUnicodeObject</name>*)<name>os1</name></expr></argument>, <argument><expr><name>ws1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<goto>goto <name>done</name>;</goto></then></if>
<expr_stmt><expr><name><name>ws1</name><index>[<expr><name>len1</name> - 1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ws2</name> = <call><name>PyMem_MALLOC</name><argument_list>(<argument><expr><name>len2</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ws2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyUnicode_AsWideChar</name><argument_list>(<argument><expr>(<name>PyUnicodeObject</name>*)<name>os2</name></expr></argument>, <argument><expr><name>ws2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<goto>goto <name>done</name>;</goto></then></if>
<expr_stmt><expr><name><name>ws2</name><index>[<expr><name>len2</name> - 1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>wcscoll</name><argument_list>(<argument><expr><name>ws1</name></expr></argument>, <argument><expr><name>ws2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
<if>if <condition>(<expr><name>ws1</name></expr>)</condition><then> <expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>ws1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ws2</name></expr>)</condition><then> <expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>ws2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rel1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>os1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rel2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>os2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>strxfrm__doc__</name></expr></argument>,
<argument><expr>"string -&gt; string. Returns a string that behaves for cmp locale-aware."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_strxfrm</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s:strxfrm"</expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>n1</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>buf</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>n2</name> = <call><name>strxfrm</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>n2</name> &gt; <name>n1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <call><name>PyMem_Realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>buf</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>strxfrm</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_getdefaultlocale</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>encoding</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>locale</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"cp%d"</expr></argument>, <argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetLocaleInfo</name><argument_list>(<argument><expr><name>LOCALE_USER_DEFAULT</name></expr></argument>,
<argument><expr><name>LOCALE_SISO639LANGNAME</name></expr></argument>,
<argument><expr><name>locale</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>locale</name><index>[<expr><name>i</name>++</expr>]</index></name> = '_'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetLocaleInfo</name><argument_list>(<argument><expr><name>LOCALE_USER_DEFAULT</name></expr></argument>,
<argument><expr><name>LOCALE_SISO3166CTRYNAME</name></expr></argument>,
<argument><expr><name>locale</name>+<name>i</name></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></sizeof>-<name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ss"</expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>locale</name><index>[<expr>0</expr>]</index></name> = '0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>locale</name><index>[<expr>1</expr>]</index></name> = 'x'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetLocaleInfo</name><argument_list>(<argument><expr><name>LOCALE_USER_DEFAULT</name></expr></argument>, <argument><expr><name>LOCALE_IDEFAULTLANGUAGE</name></expr></argument>,
<argument><expr><name>locale</name>+2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></sizeof>-2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ss"</expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"Os"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>mac_getscript</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>CFStringEncoding</name></type> <name>enc</name> <init>= <expr><call><name>CFStringGetSystemEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>enc</name></expr>)</condition> <block>{
<case>case <expr><name>kCFStringEncodingMacRoman</name></expr>:
<return>return <expr>"mac-roman"</expr>;</return>
</case><case>case <expr><name>kCFStringEncodingMacGreek</name></expr>:
<return>return <expr>"mac-greek"</expr>;</return>
</case><case>case <expr><name>kCFStringEncodingMacCyrillic</name></expr>:
<return>return <expr>"mac-cyrillic"</expr>;</return>
</case><case>case <expr><name>kCFStringEncodingMacTurkish</name></expr>:
<return>return <expr>"mac-turkish"</expr>;</return>
</case><case>case <expr><name>kCFStringEncodingMacIcelandic</name></expr>:
<return>return <expr>"mac-icelandic"</expr>;</return>
</case>}</block></switch>
<if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <call><name>CFStringConvertEncodingToIANACharSetName</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>char</name> *)<call><name>CFStringGetCStringPtr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_getdefaultlocale</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"Os"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr><call><name>mac_getscript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LANGINFO</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{#X, X}</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct <name>langinfo_constant</name> <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name><name>langinfo_constants</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>DAY_7</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABDAY_7</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_7</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_9</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_10</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_11</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>MON_12</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_7</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_9</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_10</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_11</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ABMON_12</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RADIXCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>RADIXCHAR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>THOUSEP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>CRNCYSTR</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>D_T_FMT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>D_FMT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>T_FMT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>AM_STR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>PM_STR</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>T_FMT_AMPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>T_FMT_AMPM</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ERA</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERA_D_FMT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ERA_D_FMT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERA_D_T_FMT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ERA_D_T_FMT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERA_T_FMT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ERA_T_FMT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALT_DIGITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>ALT_DIGITS</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YESEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>YESEXPR</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NOEXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>NOEXPR</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DATE_FMT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>LANGINFO</name><argument_list>(<argument><expr><name>_DATE_FMT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>nl_langinfo__doc__</name></expr></argument>,
<argument><expr>"nl_langinfo(key) -&gt; string\n"
"Return the value for the locale information associated with key."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyLocale_nl_langinfo</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>item</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:nl_langinfo"</expr></argument>, <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>langinfo_constants</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>langinfo_constants</name><index>[<expr><name>i</name></expr>]</index></name>.<name>value</name> == <name>item</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name> <init>= <expr><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>result</name> != <name>NULL</name> ? <name>result</name> : ""</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"unsupported langinfo constant"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBINTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>gettext__doc__</name></expr></argument>,
<argument><expr>"gettext(msg) -&gt; string\n"
"Return translation of msg."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyIntl_gettext</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>in</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>&amp;<name>in</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>gettext</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dgettext__doc__</name></expr></argument>,
<argument><expr>"dgettext(domain, msg) -&gt; string\n"
"Return translation of msg in domain."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyIntl_dgettext</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name></decl>, *<decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"zs"</expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>, <argument><expr>&amp;<name>in</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>dgettext</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dcgettext__doc__</name></expr></argument>,
<argument><expr>"dcgettext(domain, msg, category) -&gt; string\n"
"Return translation of msg in domain and category."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyIntl_dcgettext</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name></decl>, *<decl><type ref="prev"/><name>msgid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>category</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"zsi"</expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>, <argument><expr>&amp;<name>msgid</name></expr></argument>, <argument><expr>&amp;<name>category</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>dcgettext</name><argument_list>(<argument><expr><name>domain</name></expr></argument>,<argument><expr><name>msgid</name></expr></argument>,<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>textdomain__doc__</name></expr></argument>,
<argument><expr>"textdomain(domain) -&gt; string\n"
"Set the C library's textdmain to domain, returning the new domain."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyIntl_textdomain</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z"</expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>domain</name> = <call><name>textdomain</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>domain</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>bindtextdomain__doc__</name></expr></argument>,
<argument><expr>"bindtextdomain(domain, dir) -&gt; string\n"
"Bind the C library's domain to dir."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyIntl_bindtextdomain</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>,<param><decl><type><name>PyObject</name>*</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name></decl>, *<decl><type ref="prev"/><name>dirname</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"sz"</expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>, <argument><expr>&amp;<name>dirname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Error</name></expr></argument>, <argument><expr>"domain must be a non-empty string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dirname</name> = <call><name>bindtextdomain</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dirname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_OSError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BIND_TEXTDOMAIN_CODESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>bind_textdomain_codeset__doc__</name></expr></argument>,
<argument><expr>"bind_textdomain_codeset(domain, codeset) -&gt; string\n"
"Bind the C library's domain to codeset."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>PyIntl_bind_textdomain_codeset</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>,<param><decl><type><name>PyObject</name>*</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>domain</name></decl>,*<decl><type ref="prev"/><name>codeset</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"sz"</expr></argument>, <argument><expr>&amp;<name>domain</name></expr></argument>, <argument><expr>&amp;<name>codeset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>codeset</name> = <call><name>bind_textdomain_codeset</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>codeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>codeset</name></expr>)</condition><then>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>codeset</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>PyLocale_Methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"setlocale"</expr>, <expr>(<name>PyCFunction</name>) <name>PyLocale_setlocale</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>setlocale__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"localeconv"</expr>, <expr>(<name>PyCFunction</name>) <name>PyLocale_localeconv</name></expr>,
<expr><name>METH_NOARGS</name></expr>, <expr><name>localeconv__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"strcoll"</expr>, <expr>(<name>PyCFunction</name>) <name>PyLocale_strcoll</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>strcoll__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"strxfrm"</expr>, <expr>(<name>PyCFunction</name>) <name>PyLocale_strxfrm</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>strxfrm__doc__</name></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MS_WINDOWS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"_getdefaultlocale"</expr>, <expr>(<name>PyCFunction</name>) <name>PyLocale_getdefaultlocale</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"nl_langinfo"</expr>, <expr>(<name>PyCFunction</name>) <name>PyLocale_nl_langinfo</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>nl_langinfo__doc__</name></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBINTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"gettext"</expr>,<expr>(<name>PyCFunction</name>)<name>PyIntl_gettext</name></expr>,<expr><name>METH_VARARGS</name></expr>,
<expr><name>gettext__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"dgettext"</expr>,<expr>(<name>PyCFunction</name>)<name>PyIntl_dgettext</name></expr>,<expr><name>METH_VARARGS</name></expr>,
<expr><name>dgettext__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"dcgettext"</expr>,<expr>(<name>PyCFunction</name>)<name>PyIntl_dcgettext</name></expr>,<expr><name>METH_VARARGS</name></expr>,
<expr><name>dcgettext__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"textdomain"</expr>,<expr>(<name>PyCFunction</name>)<name>PyIntl_textdomain</name></expr>,<expr><name>METH_VARARGS</name></expr>,
<expr><name>textdomain__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"bindtextdomain"</expr>,<expr>(<name>PyCFunction</name>)<name>PyIntl_bindtextdomain</name></expr>,<expr><name>METH_VARARGS</name></expr>,
<expr><name>bindtextdomain__doc__</name></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BIND_TEXTDOMAIN_CODESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"bind_textdomain_codeset"</expr>,<expr>(<name>PyCFunction</name>)<name>PyIntl_bind_textdomain_codeset</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>bind_textdomain_codeset__doc__</name></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_locale</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_locale"</expr></argument>, <argument><expr><name>PyLocale_Methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_CTYPE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_TIME"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_COLLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_COLLATE"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_MONETARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_MONETARY"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_MESSAGES"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_NUMERIC"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"LC_ALL"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"CHAR_MAX"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Error</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"locale.Error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>locale__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"__doc__"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>langinfo_constants</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>langinfo_constants</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
<argument><expr><name><name>langinfo_constants</name><index>[<expr><name>i</name></expr>]</index></name>.<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
