<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/md5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTE_ORDER</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARCH_IS_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>(ARCH_IS_BIG_ENDIAN ? 1 : -1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_ORDER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MASK</name></cpp:macro> <cpp:value>((md5_word_t)~0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T1</name></cpp:macro> <cpp:value>(T_MASK ^ 0x28955b87)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T2</name></cpp:macro> <cpp:value>(T_MASK ^ 0x173848a9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T3</name></cpp:macro> <cpp:value>0x242070db</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T4</name></cpp:macro> <cpp:value>(T_MASK ^ 0x3e423111)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T5</name></cpp:macro> <cpp:value>(T_MASK ^ 0x0a83f050)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T6</name></cpp:macro> <cpp:value>0x4787c62a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T7</name></cpp:macro> <cpp:value>(T_MASK ^ 0x57cfb9ec)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T8</name></cpp:macro> <cpp:value>(T_MASK ^ 0x02b96afe)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T9</name></cpp:macro> <cpp:value>0x698098d8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T10</name></cpp:macro> <cpp:value>(T_MASK ^ 0x74bb0850)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T11</name></cpp:macro> <cpp:value>(T_MASK ^ 0x0000a44e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T12</name></cpp:macro> <cpp:value>(T_MASK ^ 0x76a32841)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T13</name></cpp:macro> <cpp:value>0x6b901122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T14</name></cpp:macro> <cpp:value>(T_MASK ^ 0x02678e6c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T15</name></cpp:macro> <cpp:value>(T_MASK ^ 0x5986bc71)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T16</name></cpp:macro> <cpp:value>0x49b40821</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T17</name></cpp:macro> <cpp:value>(T_MASK ^ 0x09e1da9d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T18</name></cpp:macro> <cpp:value>(T_MASK ^ 0x3fbf4cbf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T19</name></cpp:macro> <cpp:value>0x265e5a51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T20</name></cpp:macro> <cpp:value>(T_MASK ^ 0x16493855)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T21</name></cpp:macro> <cpp:value>(T_MASK ^ 0x29d0efa2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T22</name></cpp:macro> <cpp:value>0x02441453</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T23</name></cpp:macro> <cpp:value>(T_MASK ^ 0x275e197e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T24</name></cpp:macro> <cpp:value>(T_MASK ^ 0x182c0437)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T25</name></cpp:macro> <cpp:value>0x21e1cde6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T26</name></cpp:macro> <cpp:value>(T_MASK ^ 0x3cc8f829)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T27</name></cpp:macro> <cpp:value>(T_MASK ^ 0x0b2af278)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T28</name></cpp:macro> <cpp:value>0x455a14ed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T29</name></cpp:macro> <cpp:value>(T_MASK ^ 0x561c16fa)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T30</name></cpp:macro> <cpp:value>(T_MASK ^ 0x03105c07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T31</name></cpp:macro> <cpp:value>0x676f02d9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T32</name></cpp:macro> <cpp:value>(T_MASK ^ 0x72d5b375)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T33</name></cpp:macro> <cpp:value>(T_MASK ^ 0x0005c6bd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T34</name></cpp:macro> <cpp:value>(T_MASK ^ 0x788e097e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T35</name></cpp:macro> <cpp:value>0x6d9d6122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T36</name></cpp:macro> <cpp:value>(T_MASK ^ 0x021ac7f3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T37</name></cpp:macro> <cpp:value>(T_MASK ^ 0x5b4115bb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T38</name></cpp:macro> <cpp:value>0x4bdecfa9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T39</name></cpp:macro> <cpp:value>(T_MASK ^ 0x0944b49f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T40</name></cpp:macro> <cpp:value>(T_MASK ^ 0x4140438f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T41</name></cpp:macro> <cpp:value>0x289b7ec6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T42</name></cpp:macro> <cpp:value>(T_MASK ^ 0x155ed805)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T43</name></cpp:macro> <cpp:value>(T_MASK ^ 0x2b10cf7a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T44</name></cpp:macro> <cpp:value>0x04881d05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T45</name></cpp:macro> <cpp:value>(T_MASK ^ 0x262b2fc6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T46</name></cpp:macro> <cpp:value>(T_MASK ^ 0x1924661a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T47</name></cpp:macro> <cpp:value>0x1fa27cf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T48</name></cpp:macro> <cpp:value>(T_MASK ^ 0x3b53a99a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T49</name></cpp:macro> <cpp:value>(T_MASK ^ 0x0bd6ddbb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T50</name></cpp:macro> <cpp:value>0x432aff97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T51</name></cpp:macro> <cpp:value>(T_MASK ^ 0x546bdc58)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T52</name></cpp:macro> <cpp:value>(T_MASK ^ 0x036c5fc6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T53</name></cpp:macro> <cpp:value>0x655b59c3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T54</name></cpp:macro> <cpp:value>(T_MASK ^ 0x70f3336d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T55</name></cpp:macro> <cpp:value>(T_MASK ^ 0x00100b82)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T56</name></cpp:macro> <cpp:value>(T_MASK ^ 0x7a7ba22e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T57</name></cpp:macro> <cpp:value>0x6fa87e4f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T58</name></cpp:macro> <cpp:value>(T_MASK ^ 0x01d3191f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T59</name></cpp:macro> <cpp:value>(T_MASK ^ 0x5cfebceb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T60</name></cpp:macro> <cpp:value>0x4e0811a1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T61</name></cpp:macro> <cpp:value>(T_MASK ^ 0x08ac817d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T62</name></cpp:macro> <cpp:value>(T_MASK ^ 0x42c50dca)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T63</name></cpp:macro> <cpp:value>0x2ad7d2bb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T64</name></cpp:macro> <cpp:value>(T_MASK ^ 0x14792c6e)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>md5_process</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>data</name></decl></param> )</parameter_list> <block>{
<decl_stmt><decl><type><name>md5_word_t</name></type>
<name>a</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>0</expr>]</index></name></expr></init>, <name>b</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>1</expr>]</index></name></expr></init>,
<name>c</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>2</expr>]</index></name></expr></init>, <name>d</name> <init>= <expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>md5_word_t</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> &gt; 0</expr></cpp:if>
<decl_stmt><decl><type><name>md5_word_t</name></type> <name><name>X</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>md5_word_t</name></type> <name><name>xbuf</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>md5_word_t</name> *</type><name>X</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> == 0</expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*((const <name>md5_byte_t</name> *)&amp;<name>w</name>)</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> &lt;= 0</expr></cpp:if>
<block>{
<if>if <condition>(<expr>!((<name>data</name> - (const <name>md5_byte_t</name> *)0) &amp; 3)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>X</name> = (const <name>md5_word_t</name> *)<name>data</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xbuf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>64</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> = <name>xbuf</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> == 0</expr></cpp:if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> &gt;= 0</expr></cpp:if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>xp</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTE_ORDER</name> == 0</expr></cpp:if>
<expr_stmt><expr><name>X</name> = <name>xbuf</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xbuf</name></cpp:macro> <cpp:value>X</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr>++<name>i</name></expr>, <expr><name>xp</name> += 4</expr></incr>)
<expr_stmt><expr><name><name>xbuf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>xp</name><index>[<expr>0</expr>]</index></name> + (<name><name>xp</name><index>[<expr>1</expr>]</index></name> &lt;&lt; 8) + (<name><name>xp</name><index>[<expr>2</expr>]</index></name> &lt;&lt; 16) + (<name><name>xp</name><index>[<expr>3</expr>]</index></name> &lt;&lt; 24)</expr>;</expr_stmt></for>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_LEFT</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32 - (n))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (y)) | (~(x) &amp; (z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro><cpp:value>t = a + F(b,c,d) + X[k] + Ti;a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>T2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>17</expr></argument>, <argument><expr><name>T3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>22</expr></argument>, <argument><expr><name>T4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>T5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>T6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>17</expr></argument>, <argument><expr><name>T7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>22</expr></argument>, <argument><expr><name>T8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>T9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>T10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>17</expr></argument>, <argument><expr><name>T11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>22</expr></argument>, <argument><expr><name>T12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>T13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>13</expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>T14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>17</expr></argument>, <argument><expr><name>T15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>22</expr></argument>, <argument><expr><name>T16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (z)) | ((y) &amp; ~(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro><cpp:value>t = a + G(b,c,d) + X[k] + Ti;a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>T17</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>9</expr></argument>, <argument><expr><name>T18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>T21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>9</expr></argument>, <argument><expr><name>T22</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>T25</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>9</expr></argument>, <argument><expr><name>T26</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T27</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T28</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>13</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>T29</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>9</expr></argument>, <argument><expr><name>T30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>14</expr></argument>, <argument><expr><name>T31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>T32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) ^ (y) ^ (z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro><cpp:value>t = a + H(b,c,d) + X[k] + Ti;a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>T33</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T35</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T36</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>T37</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T38</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T39</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T40</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>13</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>T41</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T42</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T43</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T44</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>T45</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>11</expr></argument>, <argument><expr><name>T46</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>T47</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr><name>T48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>, <param><type><name>z</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((y) ^ ((x) | ~(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>, <param><type><name>c</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>k</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>Ti</name></type></param>)</parameter_list></cpp:macro><cpp:value>t = a + I(b,c,d) + X[k] + Ti;a = ROTATE_LEFT(t, s) + b</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>T49</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T50</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T51</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T52</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>T53</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T54</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T55</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T56</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>T57</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>15</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T58</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T59</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>13</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>T61</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>11</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>T62</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>15</expr></argument>, <argument><expr><name>T63</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>9</expr></argument>, <argument><expr>21</expr></argument>, <argument><expr><name>T64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>0</expr>]</index></name> += <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>1</expr>]</index></name> += <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>2</expr>]</index></name> += <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>3</expr>]</index></name> += <name>d</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>md5_init</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> = <name><name>pms</name>-&gt;<name>count</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>0</expr>]</index></name> = 0x67452301</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>1</expr>]</index></name> = <name>T_MASK</name> ^ 0x10325476</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>2</expr>]</index></name> = <name>T_MASK</name> ^ 0x67452301</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr>3</expr>]</index></name> = 0x10325476</expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>md5_append</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>md5_byte_t</name> *</type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 3) &amp; 63</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>md5_word_t</name></type> <name>nbits</name> <init>= <expr><call>(<name>md5_word_t</name>)<argument_list>(<argument><expr><name>nbytes</name> &lt;&lt; 3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nbytes</name> &lt;= 0</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>nbytes</name> &gt; <name>INT_MAX</name> - <name>offset</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>overlap</name></decl>;</decl_stmt>
<expr_stmt><expr><name>overlap</name> = 64 - <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>data</name> + <name>overlap</name></expr></argument>, <argument><expr><name>nbytes</name> - <name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>1</expr>]</index></name> += <name>nbytes</name> &gt;&gt; 29</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> += <name>nbits</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> &lt; <name>nbits</name></expr>)</condition><then>
<expr_stmt><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>offset</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr>(<name>offset</name> + <name>nbytes</name> &gt; 64 ? 64 - <name>offset</name> : <name>nbytes</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>buf</name></name> + <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> + <name>copy</name> &lt; 64</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>p</name> += <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> -= <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>md5_process</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name><name>pms</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>left</name> &gt;= 64</expr>;</condition> <incr><expr><name>p</name> += 64</expr>, <expr><name>left</name> -= 64</expr></incr>)
<expr_stmt><expr><call><name>md5_process</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<if>if <condition>(<expr><name>left</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>md5_finish</name><parameter_list>(<param><decl><type><name>md5_state_t</name> *</type><name>pms</name></decl></param>, <param><decl><type><name>md5_byte_t</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>md5_byte_t</name></type> <name><name>pad</name><index>[<expr>64</expr>]</index></name> <init>= <expr><block>{
<expr>0x80</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>md5_byte_t</name></type> <name><name>data</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 8</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>md5_byte_t</name>)<argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>count</name><index>[<expr><name>i</name> &gt;&gt; 2</expr>]</index></name> &gt;&gt; ((<name>i</name> &amp; 3) &lt;&lt; 3)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr>((55 - (<name><name>pms</name>-&gt;<name>count</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 3)) &amp; 63) + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>md5_append</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>md5_byte_t</name>)<argument_list>(<argument><expr><name><name>pms</name>-&gt;<name>abcd</name><index>[<expr><name>i</name> &gt;&gt; 2</expr>]</index></name> &gt;&gt; ((<name>i</name> &amp; 3) &lt;&lt; 3)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
</unit>
