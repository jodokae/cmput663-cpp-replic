<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_testcapimodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pythread.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TestError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>raiseTestError</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>test_name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>2048</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>test_name</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - 50</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>TestError</name></expr></argument>, <argument><expr>"internal error msg too large"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>test_name</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>TestError</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>sizeof_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>fatname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>typname</name></decl></param>,
<param><decl><type><name>int</name></type> <name>expected</name></decl></param>, <param><decl><type><name>int</name></type> <name>got</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%.200s #define == %d but sizeof(%.200s) == %d"</expr></argument>,
<argument><expr><name>fatname</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>typname</name></expr></argument>, <argument><expr><name>got</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>TestError</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>test_config</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SIZEOF</name><parameter_list>(<param><type><name>FATNAME</name></type></param>, <param><type><name>TYPE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (FATNAME != sizeof(TYPE)) return sizeof_error(#FATNAME, #TYPE, FATNAME, sizeof(TYPE))</cpp:value></cpp:define>
<expr_stmt><expr><call><name>CHECK_SIZEOF</name><argument_list>(<argument><expr><name>SIZEOF_SHORT</name></expr></argument>, <argument><expr><name>short</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_SIZEOF</name><argument_list>(<argument><expr><name>SIZEOF_INT</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_SIZEOF</name><argument_list>(<argument><expr><name>SIZEOF_LONG</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_SIZEOF</name><argument_list>(<argument><expr><name>SIZEOF_VOID_P</name></expr></argument>, <argument><expr><name>void</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_SIZEOF</name><argument_list>(<argument><expr><name>SIZEOF_TIME_T</name></expr></argument>, <argument><expr><name>time_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CHECK_SIZEOF</name><argument_list>(<argument><expr><name>SIZEOF_LONG_LONG</name></expr></argument>, <argument><expr><name>PY_LONG_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_SIZEOF</name></cpp:undef>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>test_list_api</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLIST</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>NLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>list</name> == (<name>PyObject</name>*)<name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>PyObject</name>*)<name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NLIST</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>anint</name> <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>anint</name> == (<name>PyObject</name>*)<name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>anint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>i</name> = <call><name>PyList_Reverse</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NLIST</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>anint</name> <init>= <expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>anint</name></expr></argument>)</argument_list></call> != <name>NLIST</name>-1-<name>i</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>TestError</name></expr></argument>,
<argument><expr>"test_list_api: reverse screwed up"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NLIST</name></cpp:undef>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_dict_inner</name><parameter_list>(<param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name> <init>= <expr>0</expr></init>, <name>iterations</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr><call><name>PyDict_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>&amp;<name>pos</name></expr></argument>, <argument><expr>&amp;<name>k</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name>iterations</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>o</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iterations</name> != <name>count</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>TestError</name></expr></argument>,
<argument><expr>"test_dict_iteration: dict iteration went wrong "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>0</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>test_dict_iteration</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 200</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>test_dict_inner</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNBIND</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_DECREF(X); (X) = NULL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>raise_test_long_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>msg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_long_api"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTNAME</name></cpp:macro> <cpp:value>test_long_api_inner</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPENAME</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_S_TO_PY</name></cpp:macro> <cpp:value>PyLong_FromLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_PY_TO_S</name></cpp:macro> <cpp:value>PyLong_AsLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_U_TO_PY</name></cpp:macro> <cpp:value>PyLong_FromUnsignedLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_PY_TO_U</name></cpp:macro> <cpp:value>PyLong_AsUnsignedLong</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testcapi_long.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_long_api</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>TESTNAME</name><argument_list>(<argument><expr><name>raise_test_long_error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TESTNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_S_TO_PY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_PY_TO_S</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_U_TO_PY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_PY_TO_U</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>raise_test_longlong_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>msg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_longlong_api"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTNAME</name></cpp:macro> <cpp:value>test_longlong_api_inner</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPENAME</name></cpp:macro> <cpp:value>PY_LONG_LONG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_S_TO_PY</name></cpp:macro> <cpp:value>PyLong_FromLongLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_PY_TO_S</name></cpp:macro> <cpp:value>PyLong_AsLongLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_U_TO_PY</name></cpp:macro> <cpp:value>PyLong_FromUnsignedLongLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_PY_TO_U</name></cpp:macro> <cpp:value>PyLong_AsUnsignedLongLong</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testcapi_long.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_longlong_api</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>TESTNAME</name><argument_list>(<argument><expr><name>raise_test_longlong_error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TESTNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_S_TO_PY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_PY_TO_S</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_U_TO_PY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F_PY_TO_U</name></cpp:undef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_L_code</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>, *<decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>num</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr>42</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>"L:test_L_code"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> != 42</expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_L_code"</expr></argument>,
<argument><expr>"L code returned wrong value for long 42"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>42</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>"L:test_L_code"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> != 42</expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_L_code"</expr></argument>,
<argument><expr>"L code returned wrong value for int 42"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_tuple</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i(ii)"</expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iii"</expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>getargs_keywords</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"arg1"</expr>,<expr>"arg2"</expr>,<expr>"arg3"</expr>,<expr>"arg4"</expr>,<expr>"arg5"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>fmt</name><init>=<expr>"(ii)i|(i(ii))(iii)i"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>int_args</name><index>[<expr>10</expr>]</index></name><init>= <expr><block>{<expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>, <expr>-1</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name><name>int_args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>4</expr>]</index></name></expr></argument>,
<argument><expr>&amp;<name><name>int_args</name><index>[<expr>5</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>6</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>7</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>8</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>int_args</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iiiiiiiiii"</expr></argument>,
<argument><expr><name><name>int_args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>4</expr>]</index></name></expr></argument>,
<argument><expr><name><name>int_args</name><index>[<expr>5</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>6</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>7</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>8</expr>]</index></name></expr></argument>, <argument><expr><name><name>int_args</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_b</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"b"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_B</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_H</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_I</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"I"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_k</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_l</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_n</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"n"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_L</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"L"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getargs_K</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>PY_LONG_LONG</name></type> <name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"K"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_k_code</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>, *<decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>num</name> = <call><name>PyLong_FromString</name><argument_list>(<argument><expr>"FFFFFFFFFFFFFFFFFFFFFFFF"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>PyInt_AsUnsignedLongMask</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> != <name>ULONG_MAX</name></expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_k_code"</expr></argument>,
<argument><expr>"PyInt_AsUnsignedLongMask() returned wrong value for long 0xFFF...FFF"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>"k:test_k_code"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> != <name>ULONG_MAX</name></expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_k_code"</expr></argument>,
<argument><expr>"k code returned wrong value for long 0xFFF...FFF"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> = <call><name>PyLong_FromString</name><argument_list>(<argument><expr>"-FFFFFFFF000000000000000042"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>PyInt_AsUnsignedLongMask</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> != (<name>unsigned</name> <name>long</name>)-0x42</expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_k_code"</expr></argument>,
<argument><expr>"PyInt_AsUnsignedLongMask() returned wrong value for long 0xFFF...FFF"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>"k:test_k_code"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> != (<name>unsigned</name> <name>long</name>)-0x42</expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_k_code"</expr></argument>,
<argument><expr>"k code returned wrong value for long -0xFFF..000042"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_u_code</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>, *<decl><type ref="prev"/><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>Py_UNICODE_ISSPACE</name><argument_list>(<argument><expr>25</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>PyUnicode_Decode</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"ascii"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>"u:test_u_code"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> != <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_u_code"</expr></argument>,
<argument><expr>"u code returned wrong value for u'test'"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>"u#:test_u_code"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>value</name> != <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> ||
<name>len</name> != <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_u_code"</expr></argument>,
<argument><expr>"u#code returned wrong values for u'test'"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>codec_incrementalencoder</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>, *<decl><type ref="prev"/><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|s:test_incrementalencoder"</expr></argument>,
<argument><expr>&amp;<name>encoding</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCodec_IncrementalEncoder</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>codec_incrementaldecoder</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>, *<decl><type ref="prev"/><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|s:test_incrementaldecoder"</expr></argument>,
<argument><expr>&amp;<name>encoding</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCodec_IncrementalDecoder</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_long_numbits</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<struct>struct <name>triple</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
}</block> <decl><name><name>testcases</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr>1L</expr>, <expr>1</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-1L</expr>, <expr>1</expr>, <expr>-1</expr>}</block></expr>,
<expr><block>{<expr>2L</expr>, <expr>2</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-2L</expr>, <expr>2</expr>, <expr>-1</expr>}</block></expr>,
<expr><block>{<expr>3L</expr>, <expr>2</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-3L</expr>, <expr>2</expr>, <expr>-1</expr>}</block></expr>,
<expr><block>{<expr>4L</expr>, <expr>3</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-4L</expr>, <expr>3</expr>, <expr>-1</expr>}</block></expr>,
<expr><block>{<expr>0x7fffL</expr>, <expr>15</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-0x7fffL</expr>, <expr>15</expr>, <expr>-1</expr>}</block></expr>,
<expr><block>{<expr>0xffffL</expr>, <expr>16</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-0xffffL</expr>, <expr>16</expr>, <expr>-1</expr>}</block></expr>,
<expr><block>{<expr>0xfffffffL</expr>, <expr>28</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr>-0xfffffffL</expr>, <expr>28</expr>, <expr>-1</expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>testcases</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument>struct <expr><name>triple</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>plong</name> <init>= <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name><name>testcases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name> <init>= <expr><call><name>_PyLong_NumBits</name><argument_list>(<argument><expr><name>plong</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>_PyLong_Sign</name><argument_list>(<argument><expr><name>plong</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>plong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbits</name> != <name><name>testcases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>nbits</name></expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_long_numbits"</expr></argument>,
<argument><expr>"wrong result for _PyLong_NumBits"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>sign</name> != <name><name>testcases</name><index>[<expr><name>i</name></expr>]</index></name>.<name>sign</name></expr>)</condition><then>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_long_numbits"</expr></argument>,
<argument><expr>"wrong result for _PyLong_Sign"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_null_strings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o1</name> <init>= <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init>, *<name>o2</name> <init>= <expr><call><name>PyObject_Unicode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name> <init>= <expr><call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tuple</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>raise_exception</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>exc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>exc_args</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_args</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oi:raise_exception"</expr></argument>,
<argument><expr>&amp;<name>exc</name></expr></argument>, <argument><expr>&amp;<name>num_args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyExceptionClass_Check</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"an exception class is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>exc_args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>num_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>exc_args</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_args</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>v</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>exc_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>exc_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>exc_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>exc_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyThread_type_lock</name></type> <name>thread_done</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_make_call</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>callable</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyGILState_STATE</name></type> <name>s</name> <init>= <expr><call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>callable</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> = (<name>rc</name> != <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyGILState_Release</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>success</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_make_call_from_thread</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>callable</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>_make_call</name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_release_lock</name><argument_list>(<argument><expr><name>thread_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_thread_state</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:test_thread_state"</expr></argument>, <argument><expr>&amp;<name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyCallable_Check</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"'%s' object is not callable"</expr></argument>,
<argument><expr><name><name>fn</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyEval_InitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thread_done</name> = <call><name>PyThread_allocate_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>thread_done</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name>thread_done</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_start_new_thread</name><argument_list>(<argument><expr><name>_make_call_from_thread</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> &amp;= <call><name>_make_call</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_BEGIN_ALLOW_THREADS</name>
<name>success</name> &amp;= <call><name>_make_call</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name>thread_done</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>Py_END_ALLOW_THREADS</name>
<name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>PyThread_start_new_thread</name><parameter_list>(<param><decl><type><name>_make_call_from_thread</name></type></decl></param>, <param><decl><type><name>fn</name></type></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>success</name> &amp;= <call><name>_make_call</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name>thread_done</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>PyThread_release_lock</name><parameter_list>(<param><decl><type><name>thread_done</name></type></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PyThread_free_lock</name><argument_list>(<argument><expr><name>thread_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_string_from_format</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_1_FORMAT</name><parameter_list>(<param><type><name>FORMAT</name></type></param>, <param><type><name>TYPE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>result = PyString_FromFormat(FORMAT, (TYPE)1); if (result == NULL) return NULL; if (strcmp(PyString_AsString(result), "1")) { msg = FORMAT " failed at 1"; goto Fail; } Py_DECREF(result)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>CHECK_1_FORMAT</name><argument_list>(<argument><expr>"%d"</expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_1_FORMAT</name><argument_list>(<argument><expr>"%ld"</expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_1_FORMAT</name><argument_list>(<argument><expr>"%zd"</expr></argument>, <argument><expr><name>Py_ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CHECK_1_FORMAT</name><argument_list>(<argument>"%u"</argument>, <argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>CHECK_1_FORMAT</name><argument_list>(<argument>"%lu"</argument>, <argument>unsigned long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>CHECK_1_FORMAT</name><argument_list>(<argument><expr>"%zu"</expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>raiseTestError</name><argument_list>(<argument><expr>"test_string_from_format"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_1_FORMAT</name></cpp:undef>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_with_docstring</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>traceback_print</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>traceback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"OO:traceback_print"</expr></argument>,
<argument><expr>&amp;<name>traceback</name></expr></argument>, <argument><expr>&amp;<name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyTraceBack_Print</name><argument_list>(<argument><expr><name>traceback</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>TestMethods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"raise_exception"</expr>, <expr><name>raise_exception</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_config"</expr>, <expr>(<name>PyCFunction</name>)<name>test_config</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_list_api"</expr>, <expr>(<name>PyCFunction</name>)<name>test_list_api</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_dict_iteration"</expr>, <expr>(<name>PyCFunction</name>)<name>test_dict_iteration</name></expr>,<expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_long_api"</expr>, <expr>(<name>PyCFunction</name>)<name>test_long_api</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_long_numbits"</expr>, <expr>(<name>PyCFunction</name>)<name>test_long_numbits</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_k_code"</expr>, <expr>(<name>PyCFunction</name>)<name>test_k_code</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_null_strings"</expr>, <expr>(<name>PyCFunction</name>)<name>test_null_strings</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_string_from_format"</expr>, <expr>(<name>PyCFunction</name>)<name>test_string_from_format</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{
<expr>"test_with_docstring"</expr>, <expr>(<name>PyCFunction</name>)<name>test_with_docstring</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"This is a pretty normal docstring."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr>"getargs_tuple"</expr>, <expr><name>getargs_tuple</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{
<expr>"getargs_keywords"</expr>, <expr>(<name>PyCFunction</name>)<name>getargs_keywords</name></expr>,
<expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>
}</block></expr>,
<expr><block>{<expr>"getargs_b"</expr>, <expr><name>getargs_b</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_B"</expr>, <expr><name>getargs_B</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_H"</expr>, <expr><name>getargs_H</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_I"</expr>, <expr><name>getargs_I</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_k"</expr>, <expr><name>getargs_k</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_i"</expr>, <expr><name>getargs_i</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_l"</expr>, <expr><name>getargs_l</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_n"</expr>, <expr><name>getargs_n</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"getargs_L"</expr>, <expr><name>getargs_L</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getargs_K"</expr>, <expr><name>getargs_K</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_longlong_api"</expr>, <expr><name>test_longlong_api</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"test_L_code"</expr>, <expr>(<name>PyCFunction</name>)<name>test_L_code</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{
<expr>"codec_incrementalencoder"</expr>,
<expr>(<name>PyCFunction</name>)<name>codec_incrementalencoder</name></expr>, <expr><name>METH_VARARGS</name></expr>
}</block></expr>,
<expr><block>{
<expr>"codec_incrementaldecoder"</expr>,
<expr>(<name>PyCFunction</name>)<name>codec_incrementaldecoder</name></expr>, <expr><name>METH_VARARGS</name></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"test_u_code"</expr>, <expr>(<name>PyCFunction</name>)<name>test_u_code</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"_test_thread_state"</expr>, <expr><name>test_thread_state</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"traceback_print"</expr>, <expr><name>traceback_print</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AddSym</name><parameter_list>(<param><type><name>d</name></type></param>, <param><type><name>n</name></type></param>, <param><type><name>f</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{PyObject *o = f(v); PyDict_SetItemString(d, n, o); Py_DECREF(o);}</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name>bool_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>byte_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ubyte_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>short_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ushort_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uint_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>long_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulong_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>float_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>double_member</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>longlong_member</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>PY_LONG_LONG</name></type> <name>ulonglong_member</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>all_structmembers</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>all_structmembers</name></type> <name>structmembers</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_structmembers</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMemberDef</name></type> <name><name>test_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"T_BOOL"</expr>, <expr><name>T_BOOL</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>bool_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_BYTE"</expr>, <expr><name>T_BYTE</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>byte_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_UBYTE"</expr>, <expr><name>T_UBYTE</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>ubyte_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_SHORT"</expr>, <expr><name>T_SHORT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>short_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_USHORT"</expr>, <expr><name>T_USHORT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>ushort_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_INT"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>int_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_UINT"</expr>, <expr><name>T_UINT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>uint_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_LONG"</expr>, <expr><name>T_LONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>long_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_ULONG"</expr>, <expr><name>T_ULONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>ulong_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_FLOAT"</expr>, <expr><name>T_FLOAT</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>float_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_DOUBLE"</expr>, <expr><name>T_DOUBLE</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>double_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"T_LONGLONG"</expr>, <expr><name>T_LONGLONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>longlong_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"T_ULONGLONG"</expr>, <expr><name>T_ULONGLONG</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name><name>structmembers</name>.<name>ulonglong_member</name></name></expr></argument>)</argument_list></call></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>test_structmembers_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{
<expr>"T_BOOL"</expr>, <expr>"T_BYTE"</expr>, <expr>"T_UBYTE"</expr>, <expr>"T_SHORT"</expr>, <expr>"T_USHORT"</expr>,
<expr>"T_INT"</expr>, <expr>"T_UINT"</expr>, <expr>"T_LONG"</expr>, <expr>"T_ULONG"</expr>,
<expr>"T_FLOAT"</expr>, <expr>"T_DOUBLE"</expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr>"T_LONGLONG"</expr>, <expr>"T_ULONGLONG"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>fmt</name> <init>= <expr>"|bbBhHiIlkfd"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
"LK"</expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><name>test_structmembers</name> *</type><name>ob</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ob</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ob</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>all_structmembers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>bool_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>byte_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>ubyte_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>short_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>ushort_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>int_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>uint_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>long_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>ulong_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>float_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>double_member</name></name></expr></argument>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>longlong_member</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ob</name>-&gt;<name>structmembers</name>.<name>ulonglong_member</name></name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>ob</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_structmembers_free</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_FREE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>test_structmembersType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"test_structmembersType"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_structmembers</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr><name>test_structmembers_free</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>"Type containing all structmember types"</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>test_members</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>test_structmembers_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_testcapi</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_testcapi"</expr></argument>, <argument><expr><name>TestMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>test_structmembersType</name></expr></argument>)</argument_list></call>=&amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>test_structmembersType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"test_structmembersType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>test_structmembersType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"CHAR_MAX"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CHAR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"CHAR_MIN"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>CHAR_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"UCHAR_MAX"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>UCHAR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SHRT_MAX"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SHRT_MIN"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>SHRT_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"USHRT_MAX"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>USHRT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"INT_MAX"</expr></argument>, <argument><expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"INT_MIN"</expr></argument>, <argument><expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>INT_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"UINT_MAX"</expr></argument>, <argument><expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LONG_MAX"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LONG_MIN"</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LONG_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"ULONG_MAX"</expr></argument>, <argument><expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr><name>ULONG_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FLT_MAX"</expr></argument>, <argument><expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>FLT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"FLT_MIN"</expr></argument>, <argument><expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>FLT_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"DBL_MAX"</expr></argument>, <argument><expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>DBL_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"DBL_MIN"</expr></argument>, <argument><expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>DBL_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LLONG_MAX"</expr></argument>, <argument><expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>PY_LLONG_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LLONG_MIN"</expr></argument>, <argument><expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>PY_LLONG_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"ULLONG_MAX"</expr></argument>, <argument><expr><call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr><name>PY_ULLONG_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"PY_SSIZE_T_MAX"</expr></argument>, <argument><expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>PY_SSIZE_T_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"PY_SSIZE_T_MIN"</expr></argument>, <argument><expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>PY_SSIZE_T_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SIZEOF_PYGC_HEAD"</expr></argument>, <argument><expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyGC_Head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TestError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"_testcapi.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>TestError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>TestError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
