<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/zlib/inffast.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inftrees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inflate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inffast.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ASMINF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSTINC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUP</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>*(a)++</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUP</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>*++(a)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>inflate_fast</name><parameter_list>(<param><decl><type><name>strm</name></type></decl></param>, <param><decl><type><name>start</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>start</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type>struct <name>inflate_state</name> <name>FAR</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>end</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dmax</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name></type> <name>wsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>whave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>code</name> <specifier>const</specifier> <name>FAR</name> *</type><name>lcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>code</name> <specifier>const</specifier> <name>FAR</name> *</type><name>dcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>code</name></type> <name>this</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>from</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = (struct <name>inflate_state</name> <name>FAR</name> *)<name><name>strm</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> = <name><name>strm</name>-&gt;<name>next_in</name></name> - <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> = <name>in</name> + (<name><name>strm</name>-&gt;<name>avail_in</name></name> - 5)</expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> = <name><name>strm</name>-&gt;<name>next_out</name></name> - <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> = <name>out</name> - (<name>start</name> - <name><name>strm</name>-&gt;<name>avail_out</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name>out</name> + (<name><name>strm</name>-&gt;<name>avail_out</name></name> - 257)</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dmax</name> = <name><name>state</name>-&gt;<name>dmax</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>wsize</name> = <name><name>state</name>-&gt;<name>wsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>whave</name> = <name><name>state</name>-&gt;<name>whave</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>write</name> = <name><name>state</name>-&gt;<name>write</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> = <name><name>state</name>-&gt;<name>window</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> = <name><name>state</name>-&gt;<name>hold</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> = <name><name>state</name>-&gt;<name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcode</name> = <name><name>state</name>-&gt;<name>lencode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcode</name> = <name><name>state</name>-&gt;<name>distcode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lmask</name> = (1U &lt;&lt; <name><name>state</name>-&gt;<name>lenbits</name></name>) - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>dmask</name> = (1U &lt;&lt; <name><name>state</name>-&gt;<name>distbits</name></name>) - 1</expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr><name>bits</name> &lt; 15</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>this</name> = <name><name>lcode</name><index>[<expr><name>hold</name> &amp; <name>lmask</name></expr>]</index></name></expr>;</expr_stmt>
<label><name>dolen</name>:</label>
<expr_stmt><expr><name>op</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> &gt;&gt;= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> -= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, <name><name>this</name>.<name>val</name></name> &gt;= 0x20 &amp;&amp; <name><name>this</name>.<name>val</name></name> &lt; 0x7f ?
"inflate: literal '%c'\n" :
"inflate: literal 0x%02x\n", <name><name>this</name>.<name>val</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>op</name> &amp; 16</expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> &amp;= 15</expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>bits</name> &lt; <name>op</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>len</name> += (<name>unsigned</name>)<name>hold</name> &amp; ((1U &lt;&lt; <name>op</name>) - 1)</expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> &gt;&gt;= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> -= <name>op</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: length %u\n", <name>len</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bits</name> &lt; 15</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>this</name> = <name><name>dcode</name><index>[<expr><name>hold</name> &amp; <name>dmask</name></expr>]</index></name></expr>;</expr_stmt>
<label><name>dodist</name>:</label>
<expr_stmt><expr><name>op</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> &gt;&gt;= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> -= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> &amp; 16</expr>)</condition><then> <block>{
<expr_stmt><expr><name>dist</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> &amp;= 15</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bits</name> &lt; <name>op</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bits</name> &lt; <name>op</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hold</name> += <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>PUP</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;&lt; <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>dist</name> += (<name>unsigned</name>)<name>hold</name> &amp; ((1U &lt;&lt; <name>op</name>) - 1)</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFLATE_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>dist</name> &gt; <name>dmax</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid distance too far back"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>hold</name> &gt;&gt;= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> -= <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: distance %u\n", <name>dist</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>out</name> - <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dist</name> &gt; <name>op</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>op</name> = <name>dist</name> - <name>op</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> &gt; <name>whave</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid distance too far back"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>from</name> = <name>window</name> - <name>OFF</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>write</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>from</name> += <name>wsize</name> - <name>op</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> &lt; <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> -= <name>op</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>op</name></expr>)</condition>;</do>
<expr_stmt><expr><name>from</name> = <name>out</name> - <name>dist</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>write</name> &lt; <name>op</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>from</name> += <name>wsize</name> + <name>write</name> - <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> -= <name>write</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> &lt; <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> -= <name>op</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>op</name></expr>)</condition>;</do>
<expr_stmt><expr><name>from</name> = <name>window</name> - <name>OFF</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>write</name> &lt; <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>op</name> = <name>write</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= <name>op</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>op</name></expr>)</condition>;</do>
<expr_stmt><expr><name>from</name> = <name>out</name> - <name>dist</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>from</name> += <name>write</name> - <name>op</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> &lt; <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> -= <name>op</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>op</name></expr>)</condition>;</do>
<expr_stmt><expr><name>from</name> = <name>out</name> - <name>dist</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if></else></if>
<while>while <condition>(<expr><name>len</name> &gt; 2</expr>)</condition> <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 3</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1</expr>)</condition><then>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>from</name> = <name>out</name> - <name>dist</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 3</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>len</name> &gt; 2</expr>)</condition>;</do>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1</expr>)</condition><then>
<expr_stmt><expr><call><name>PUP</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> = <call><name>PUP</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name>op</name> &amp; 64) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>this</name> = <name><name>dcode</name><index>[<expr><name><name>this</name>.<name>val</name></name> + (<name>hold</name> &amp; ((1U &lt;&lt; <name>op</name>) - 1))</expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>dodist</name>;</goto>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid distance code"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name>op</name> &amp; 64) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>this</name> = <name><name>lcode</name><index>[<expr><name><name>this</name>.<name>val</name></name> + (<name>hold</name> &amp; ((1U &lt;&lt; <name>op</name>) - 1))</expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>dolen</name>;</goto>
}</block></then> <else>else <if>if <condition>(<expr><name>op</name> &amp; 32</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: end of block\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>TYPE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid literal/length code"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if></else></if></else></if>
}</block> while <condition>(<expr><name>in</name> &lt; <name>last</name> &amp;&amp; <name>out</name> &lt; <name>end</name></expr>)</condition>;</do>
<expr_stmt><expr><name>len</name> = <name>bits</name> &gt;&gt; 3</expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> -= <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> -= <name>len</name> &lt;&lt; 3</expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> &amp;= (1U &lt;&lt; <name>bits</name>) - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>next_in</name></name> = <name>in</name> + <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>next_out</name></name> = <name>out</name> + <name>OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>avail_in</name></name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>in</name> &lt; <name>last</name> ? 5 + (<name>last</name> - <name>in</name>) : 5 - (<name>in</name> - <name>last</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>avail_out</name></name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>out</name> &lt; <name>end</name> ?
257 + (<name>end</name> - <name>out</name>) : 257 - (<name>out</name> - <name>end</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>hold</name></name> = <name>hold</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>bits</name></name> = <name>bits</name></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
