<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/zlib/infback.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inftrees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inflate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inffast.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>local</name> <name>void</name> <name>fixedtables</name></type> <name>OF</name><argument_list>(<argument><expr>(struct <name>inflate_state</name> <name>FAR</name> *<name>state</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>inflateBackInit_</name><parameter_list>(<param><decl><type><name>strm</name></type></decl></param>, <param><decl><type><name>windowBits</name></type></decl></param>, <param><decl><type><name>window</name></type></decl></param>, <param><decl><type><name>version</name></type></decl></param>, <param><decl><type><name>stream_size</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>windowBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_size</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type>struct <name>inflate_state</name> <name>FAR</name> *</type><name>state</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>version</name> == <name>Z_NULL</name> || <name><name>version</name><index>[<expr>0</expr>]</index></name> != <name><name>ZLIB_VERSION</name><index>[<expr>0</expr>]</index></name> ||
<name>stream_size</name> != <call>(<name>int</name>)<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>Z_VERSION_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>strm</name> == <name>Z_NULL</name> || <name>window</name> == <name>Z_NULL</name> ||
<name>windowBits</name> &lt; 8 || <name>windowBits</name> &gt; 15</expr>)</condition><then>
<return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = <name>Z_NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>strm</name>-&gt;<name>zalloc</name></name> == (<name>alloc_func</name>)0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>zalloc</name></name> = <name>zcalloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>strm</name>-&gt;<name>zfree</name></name> == (<name>free_func</name>)0</expr>)</condition><then> <expr_stmt><expr><name><name>strm</name>-&gt;<name>zfree</name></name> = <name>zcfree</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>state</name> = (struct <name>inflate_state</name> <name>FAR</name> *)<call><name>ZALLOC</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>inflate_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>Z_NULL</name></expr>)</condition><then> <return>return <expr><name>Z_MEM_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: allocated\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>state</name></name> = (struct <name>internal_state</name> <name>FAR</name> *)<name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>dmax</name></name> = 32768U</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>wbits</name></name> = <name>windowBits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>wsize</name></name> = 1U &lt;&lt; <name>windowBits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>window</name></name> = <name>window</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>write</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>whave</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>Z_OK</name></expr>;</return>
}</block></function>
<function><type><name>local</name> <name>void</name></type> <name>fixedtables</name><parameter_list>(<param><decl><type><name>state</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type>struct <name>inflate_state</name> <name>FAR</name> *</type><name>state</name></decl>;</decl_stmt>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILDFIXED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>virgin</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>code</name> *</type><name>lenfix</name></decl>, *<decl><type ref="prev"/><name>distfix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>code</name></type> <name><name>fixed</name><index>[<expr>544</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>virgin</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>sym</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>code</name> *</type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sym</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>sym</name> &lt; 144</expr>)</condition> <expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name>sym</name>++</expr>]</index></name> = 8</expr>;</expr_stmt></while>
<while>while <condition>(<expr><name>sym</name> &lt; 256</expr>)</condition> <expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name>sym</name>++</expr>]</index></name> = 9</expr>;</expr_stmt></while>
<while>while <condition>(<expr><name>sym</name> &lt; 280</expr>)</condition> <expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name>sym</name>++</expr>]</index></name> = 7</expr>;</expr_stmt></while>
<while>while <condition>(<expr><name>sym</name> &lt; 288</expr>)</condition> <expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name>sym</name>++</expr>]</index></name> = 8</expr>;</expr_stmt></while>
<expr_stmt><expr><name>next</name> = <name>fixed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lenfix</name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> = 9</expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflate_table</name><argument_list>(<argument><expr><name>LENS</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>lens</name></name></expr></argument>, <argument><expr>288</expr></argument>, <argument><expr>&amp;(<name>next</name>)</expr></argument>, <argument><expr>&amp;(<name>bits</name>)</expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>sym</name> &lt; 32</expr>)</condition> <expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name>sym</name>++</expr>]</index></name> = 5</expr>;</expr_stmt></while>
<expr_stmt><expr><name>distfix</name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> = 5</expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflate_table</name><argument_list>(<argument><expr><name>DISTS</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>lens</name></name></expr></argument>, <argument><expr>32</expr></argument>, <argument><expr>&amp;(<name>next</name>)</expr></argument>, <argument><expr>&amp;(<name>bits</name>)</expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virgin</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inffixed.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lencode</name></name> = <name>lenfix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lenbits</name></name> = 9</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>distcode</name></name> = <name>distfix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>distbits</name></name> = 5</expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { put = strm-&gt;next_out; left = strm-&gt;avail_out; next = strm-&gt;next_in; have = strm-&gt;avail_in; hold = state-&gt;hold; bits = state-&gt;bits; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTORE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { strm-&gt;next_out = put; strm-&gt;avail_out = left; strm-&gt;next_in = next; strm-&gt;avail_in = have; state-&gt;hold = hold; state-&gt;bits = bits; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITBITS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { hold = 0; bits = 0; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PULL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (have == 0) { have = in(in_desc, &amp;next); if (have == 0) { next = Z_NULL; ret = Z_BUF_ERROR; goto inf_leave; } } } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PULLBYTE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { PULL(); have--; hold += (unsigned long)(*next++) &lt;&lt; bits; bits += 8; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEEDBITS</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { while (bits &lt; (unsigned)(n)) PULLBYTE(); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((unsigned)hold &amp; ((1U &lt;&lt; (n)) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DROPBITS</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { hold &gt;&gt;= (n); bits -= (unsigned)(n); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTEBITS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { hold &gt;&gt;= bits &amp; 7; bits -= bits &amp; 7; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROOM</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (left == 0) { put = state-&gt;window; left = state-&gt;wsize; state-&gt;whave = left; if (out(out_desc, put, left)) { ret = Z_BUF_ERROR; goto inf_leave; } } } while (0)</cpp:value></cpp:define>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>inflateBack</name><parameter_list>(<param><decl><type><name>strm</name></type></decl></param>, <param><decl><type><name>in</name></type></decl></param>, <param><decl><type><name>in_desc</name></type></decl></param>, <param><decl><type><name>out</name></type></decl></param>, <param><decl><type><name>out_desc</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>in_func</name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>FAR</name> *</type><name>in_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>out_func</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>FAR</name> *</type><name>out_desc</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type>struct <name>inflate_state</name> <name>FAR</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>put</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>have</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>code</name></type> <name>this</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>code</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>order</name><index>[<expr>19</expr>]</index></name> <init>=
<expr><block>{<expr>16</expr>, <expr>17</expr>, <expr>18</expr>, <expr>0</expr>, <expr>8</expr>, <expr>7</expr>, <expr>9</expr>, <expr>6</expr>, <expr>10</expr>, <expr>5</expr>, <expr>11</expr>, <expr>4</expr>, <expr>12</expr>, <expr>3</expr>, <expr>13</expr>, <expr>2</expr>, <expr>14</expr>, <expr>1</expr>, <expr>15</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>strm</name> == <name>Z_NULL</name> || <name><name>strm</name>-&gt;<name>state</name></name> == <name>Z_NULL</name></expr>)</condition><then>
<return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>state</name> = (struct <name>inflate_state</name> <name>FAR</name> *)<name><name>strm</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>last</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>whave</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> = <name><name>strm</name>-&gt;<name>next_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>have</name> = <name>next</name> != <name>Z_NULL</name> ? <name><name>strm</name>-&gt;<name>avail_in</name></name> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>put</name> = <name><name>state</name>-&gt;<name>window</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> = <name><name>state</name>-&gt;<name>wsize</name></name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>)
<switch>switch <condition>(<expr><name><name>state</name>-&gt;<name>mode</name></name></expr>)</condition> <block>{
<case>case <expr><name>TYPE</name></expr>:
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>last</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BYTEBITS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>DONE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>last</name></name> = <call><name>BITS</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>BITS</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: stored block%s\n",
<name><name>state</name>-&gt;<name>last</name></name> ? " (last)" : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>STORED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><call><name>fixedtables</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: fixed codes block%s\n",
<name><name>state</name>-&gt;<name>last</name></name> ? " (last)" : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>LEN</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: dynamic codes block%s\n",
<name><name>state</name>-&gt;<name>last</name></name> ? " (last)" : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>TABLE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid block type"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
</case>}</block></switch>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>STORED</name></expr>:
<expr_stmt><expr><call><name>BYTEBITS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr>32</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>hold</name> &amp; 0xffff) != ((<name>hold</name> &gt;&gt; 16) ^ 0xffff)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid stored block lengths"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>length</name></name> = (<name>unsigned</name>)<name>hold</name> &amp; 0xffff</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: stored length %u\n",
<name><name>state</name>-&gt;<name>length</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INITBITS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>state</name>-&gt;<name>length</name></name> != 0</expr>)</condition> <block>{
<expr_stmt><expr><name>copy</name> = <name><name>state</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy</name> &gt; <name>have</name></expr>)</condition><then> <expr_stmt><expr><name>copy</name> = <name>have</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>copy</name> &gt; <name>left</name></expr>)</condition><then> <expr_stmt><expr><name>copy</name> = <name>left</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>zmemcpy</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have</name> -= <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> += <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> -= <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>put</name> += <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>length</name></name> -= <name>copy</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: stored end\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>TYPE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>TABLE</name></expr>:
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>nlen</name></name> = <call><name>BITS</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call> + 257</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ndist</name></name> = <call><name>BITS</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>ncode</name></name> = <call><name>BITS</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call> + 4</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PKZIP_BUG_WORKAROUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>nlen</name></name> &gt; 286 || <name><name>state</name>-&gt;<name>ndist</name></name> &gt; 30</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"too many length or distance symbols"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: table sizes ok\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>have</name></name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>state</name>-&gt;<name>have</name></name> &lt; <name><name>state</name>-&gt;<name>ncode</name></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name><name>order</name><index>[<expr><name><name>state</name>-&gt;<name>have</name></name>++</expr>]</index></name></expr>]</index></name> = (<name>unsigned</name> <name>short</name>)<call><name>BITS</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>state</name>-&gt;<name>have</name></name> &lt; 19</expr>)</condition>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name><name>order</name><index>[<expr><name><name>state</name>-&gt;<name>have</name></name>++</expr>]</index></name></expr>]</index></name> = 0</expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>state</name>-&gt;<name>next</name></name> = <name><name>state</name>-&gt;<name>codes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lencode</name></name> = (<name>code</name> const <name>FAR</name> *)(<name><name>state</name>-&gt;<name>next</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lenbits</name></name> = 7</expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>inflate_table</name><argument_list>(<argument><expr><name>CODES</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>lens</name></name></expr></argument>, <argument><expr>19</expr></argument>, <argument><expr>&amp;(<name><name>state</name>-&gt;<name>next</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>state</name>-&gt;<name>lenbits</name></name>)</expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid code lengths set"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: code lengths ok\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>have</name></name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>state</name>-&gt;<name>have</name></name> &lt; <name><name>state</name>-&gt;<name>nlen</name></name> + <name><name>state</name>-&gt;<name>ndist</name></name></expr>)</condition> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>this</name> = <name><name>state</name>-&gt;<name>lencode</name><index>[<expr><call><name>BITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>lenbits</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call> &lt;= <name>bits</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>PULLBYTE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>this</name>.<name>val</name></name> &lt; 16</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name><name>state</name>-&gt;<name>have</name></name>++</expr>]</index></name> = <name><name>this</name>.<name>val</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>this</name>.<name>val</name></name> == 16</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>have</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid bit length repeat"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name><name>state</name>-&gt;<name>have</name></name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = 3 + <call><name>BITS</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>this</name>.<name>val</name></name> == 17</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name> + 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = 3 + <call><name>BITS</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name> + 7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = 11 + <call><name>BITS</name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>have</name></name> + <name>copy</name> &gt; <name><name>state</name>-&gt;<name>nlen</name></name> + <name><name>state</name>-&gt;<name>ndist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid bit length repeat"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<while>while <condition>(<expr><name>copy</name>--</expr>)</condition>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lens</name><index>[<expr><name><name>state</name>-&gt;<name>have</name></name>++</expr>]</index></name> = (<name>unsigned</name> <name>short</name>)<name>len</name></expr>;</expr_stmt></while>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>mode</name></name> == <name>BAD</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>next</name></name> = <name><name>state</name>-&gt;<name>codes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lencode</name></name> = (<name>code</name> const <name>FAR</name> *)(<name><name>state</name>-&gt;<name>next</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>lenbits</name></name> = 9</expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>inflate_table</name><argument_list>(<argument><expr><name>LENS</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>lens</name></name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>nlen</name></name></expr></argument>, <argument><expr>&amp;(<name><name>state</name>-&gt;<name>next</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>state</name>-&gt;<name>lenbits</name></name>)</expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid literal/lengths set"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>distcode</name></name> = (<name>code</name> const <name>FAR</name> *)(<name><name>state</name>-&gt;<name>next</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>distbits</name></name> = 6</expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>inflate_table</name><argument_list>(<argument><expr><name>DISTS</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>lens</name></name> + <name><name>state</name>-&gt;<name>nlen</name></name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>ndist</name></name></expr></argument>,
<argument><expr>&amp;(<name><name>state</name>-&gt;<name>next</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>state</name>-&gt;<name>distbits</name></name>)</expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid distances set"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: codes ok\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>LEN</name></expr>;</expr_stmt>
</case><case>case <expr><name>LEN</name></expr>:
<if>if <condition>(<expr><name>have</name> &gt;= 6 &amp;&amp; <name>left</name> &gt;= 258</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RESTORE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>whave</name></name> &lt; <name><name>state</name>-&gt;<name>wsize</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>state</name>-&gt;<name>whave</name></name> = <name><name>state</name>-&gt;<name>wsize</name></name> - <name>left</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>inflate_fast</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>wsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>this</name> = <name><name>state</name>-&gt;<name>lencode</name><index>[<expr><call><name>BITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>lenbits</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call> &lt;= <name>bits</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>PULLBYTE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>this</name>.<name>op</name></name> &amp;&amp; (<name><name>this</name>.<name>op</name></name> &amp; 0xf0) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>last</name> = <name>this</name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>this</name> = <name><name>state</name>-&gt;<name>lencode</name><index>[<expr><name><name>last</name>.<name>val</name></name> +
(<call><name>BITS</name><argument_list>(<argument><expr><name><name>last</name>.<name>bits</name></name> + <name><name>last</name>.<name>op</name></name></expr></argument>)</argument_list></call> &gt;&gt; <name><name>last</name>.<name>bits</name></name>)</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>last</name>.<name>bits</name></name> + <name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call> &lt;= <name>bits</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>PULLBYTE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>last</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>length</name></name> = (<name>unsigned</name>)<name><name>this</name>.<name>val</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>this</name>.<name>op</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, <name><name>this</name>.<name>val</name></name> &gt;= 0x20 &amp;&amp; <name><name>this</name>.<name>val</name></name> &lt; 0x7f ?
"inflate: literal '%c'\n" :
"inflate: literal 0x%02x\n", <name><name>this</name>.<name>val</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ROOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>put</name>++ = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name><name>state</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>LEN</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>this</name>.<name>op</name></name> &amp; 32</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: end of block\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>TYPE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>this</name>.<name>op</name></name> &amp; 64</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid literal/length code"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>extra</name></name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>op</name></name></expr></argument>)</argument_list></call> &amp; 15</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>extra</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>length</name></name> += <call><name>BITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: length %u\n", <name><name>state</name>-&gt;<name>length</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>this</name> = <name><name>state</name>-&gt;<name>distcode</name><index>[<expr><call><name>BITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>distbits</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call> &lt;= <name>bits</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>PULLBYTE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>(<name><name>this</name>.<name>op</name></name> &amp; 0xf0) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>last</name> = <name>this</name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>this</name> = <name><name>state</name>-&gt;<name>distcode</name><index>[<expr><name><name>last</name>.<name>val</name></name> +
(<call><name>BITS</name><argument_list>(<argument><expr><name><name>last</name>.<name>bits</name></name> + <name><name>last</name>.<name>op</name></name></expr></argument>)</argument_list></call> &gt;&gt; <name><name>last</name>.<name>bits</name></name>)</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>last</name>.<name>bits</name></name> + <name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call> &lt;= <name>bits</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>PULLBYTE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>last</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>this</name>.<name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>this</name>.<name>op</name></name> &amp; 64</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid distance code"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>offset</name></name> = (<name>unsigned</name>)<name><name>this</name>.<name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>extra</name></name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name><name>this</name>.<name>op</name></name></expr></argument>)</argument_list></call> &amp; 15</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>extra</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>NEEDBITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>offset</name></name> += <call><name>BITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DROPBITS</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>offset</name></name> &gt; <name><name>state</name>-&gt;<name>wsize</name></name> - (<name><name>state</name>-&gt;<name>whave</name></name> &lt; <name><name>state</name>-&gt;<name>wsize</name></name> ?
<name>left</name> : 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>strm</name>-&gt;<name>msg</name></name> = (<name>char</name> *)"invalid distance too far back"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>mode</name></name> = <name>BAD</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>Tracevv</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: distance %u\n", <name><name>state</name>-&gt;<name>offset</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>ROOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = <name><name>state</name>-&gt;<name>wsize</name></name> - <name><name>state</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy</name> &lt; <name>left</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>from</name> = <name>put</name> + <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = <name>left</name> - <name>copy</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>from</name> = <name>put</name> - <name><name>state</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> = <name>left</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>copy</name> &gt; <name><name>state</name>-&gt;<name>length</name></name></expr>)</condition><then> <expr_stmt><expr><name>copy</name> = <name><name>state</name>-&gt;<name>length</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>length</name></name> -= <name>copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> -= <name>copy</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr>*<name>put</name>++ = *<name>from</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>copy</name></expr>)</condition>;</do>
}</block> while <condition>(<expr><name><name>state</name>-&gt;<name>length</name></name> != 0</expr>)</condition>;</do>
<break>break;</break>
</case><case>case <expr><name>DONE</name></expr>:
<expr_stmt><expr><name>ret</name> = <name>Z_STREAM_END</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>left</name> &lt; <name><name>state</name>-&gt;<name>wsize</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>out</name><argument_list>(<argument><expr><name>out_desc</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>window</name></name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>wsize</name></name> - <name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ret</name> = <name>Z_BUF_ERROR</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<goto>goto <name>inf_leave</name>;</goto>
</case><case>case <expr><name>BAD</name></expr>:
<expr_stmt><expr><name>ret</name> = <name>Z_DATA_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>inf_leave</name>;</goto>
</case><default>default:
<expr_stmt><expr><name>ret</name> = <name>Z_STREAM_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>inf_leave</name>;</goto>
</default>}</block></switch></for>
<label><name>inf_leave</name>:</label>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>next_in</name></name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>avail_in</name></name> = <name>have</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name> <name>ZEXPORT</name></type> <name>inflateBackEnd</name><parameter_list>(<param><decl><type><name>strm</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>z_streamp</name></type> <name>strm</name></decl>;</decl_stmt>
<block>{
<if>if <condition>(<expr><name>strm</name> == <name>Z_NULL</name> || <name><name>strm</name>-&gt;<name>state</name></name> == <name>Z_NULL</name> || <name><name>strm</name>-&gt;<name>zfree</name></name> == (<name>free_func</name>)0</expr>)</condition><then>
<return>return <expr><name>Z_STREAM_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ZFREE</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name><name>strm</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strm</name>-&gt;<name>state</name></name> = <name>Z_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tracev</name><argument_list>(<argument><expr>(<name>stderr</name>, "inflate: end\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Z_OK</name></expr>;</return>
}</block></function>
</unit>
