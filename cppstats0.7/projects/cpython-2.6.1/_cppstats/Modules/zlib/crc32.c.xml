<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/zlib/crc32.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_CRC_TABLE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NOBYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYFOUR</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>UINT_MAX</name> == 0xffffffffUL)</expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u4</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>ULONG_MAX</name> == 0xffffffffUL)</expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>u4</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>USHRT_MAX</name> == 0xffffffffUL)</expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>u4</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYFOUR</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>(<param><type><name>w</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((w)&gt;&gt;24)+(((w)&gt;&gt;8)&amp;0xff00)+ (((w)&amp;0xff00)&lt;&lt;8)+(((w)&amp;0xff)&lt;&lt;24))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>crc32_little</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>,
const <name>unsigned</name> <name>char</name> <name>FAR</name> *, <name>unsigned</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>crc32_big</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name>,
const <name>unsigned</name> <name>char</name> <name>FAR</name> *, <name>unsigned</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBLS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBLS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>gf2_matrix_times</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name> *<name>mat</name>,
<name>unsigned</name> <name>long</name> <name>vec</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>void</name> <name>gf2_matrix_square</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>long</name> *<name>square</name>, <name>unsigned</name> <name>long</name> *<name>mat</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>local</name> <specifier>volatile</specifier> <name>int</name></type> <name>crc_table_empty</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>unsigned</name> <name>long</name> <name>FAR</name></type> <name><name>crc_table</name><index>[<expr><name>TBLS</name></expr>]</index><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>local</name> <name>void</name> <name>make_crc_table</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>void</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>local</name> <name>void</name> <name>write_table</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>FILE</name> *, const <name>unsigned</name> <name>long</name> <name>FAR</name> *)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>local</name> <name>void</name></type> <name>make_crc_table</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>poly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>first</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{<expr>0</expr>,<expr>1</expr>,<expr>2</expr>,<expr>4</expr>,<expr>5</expr>,<expr>7</expr>,<expr>8</expr>,<expr>10</expr>,<expr>11</expr>,<expr>12</expr>,<expr>16</expr>,<expr>22</expr>,<expr>23</expr>,<expr>26</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>first</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>poly</name> = 0UL</expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof>/sizeof(<name>unsigned</name> <name>char</name>)</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<expr_stmt><expr><name>poly</name> |= 1UL &lt;&lt; (31 - <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name>)</expr>;</expr_stmt></for>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; 256</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>long</name>)<name>n</name></expr>;</expr_stmt>
<for>for (<init><expr><name>k</name> = 0</expr>;</init> <condition><expr><name>k</name> &lt; 8</expr>;</condition> <incr><expr><name>k</name>++</expr></incr>)
<expr_stmt><expr><name>c</name> = <name>c</name> &amp; 1 ? <name>poly</name> ^ (<name>c</name> &gt;&gt; 1) : <name>c</name> &gt;&gt; 1</expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>crc_table</name><index>[<expr>0</expr>]</index><index>[<expr><name>n</name></expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; 256</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>c</name> = <name><name>crc_table</name><index>[<expr>0</expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_table</name><index>[<expr>4</expr>]</index><index>[<expr><name>n</name></expr>]</index></name> = <call><name>REV</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>k</name> = 1</expr>;</init> <condition><expr><name>k</name> &lt; 4</expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>c</name> = <name><name>crc_table</name><index>[<expr>0</expr>]</index><index>[<expr><name>c</name> &amp; 0xff</expr>]</index></name> ^ (<name>c</name> &gt;&gt; 8)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_table</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crc_table</name><index>[<expr><name>k</name> + 4</expr>]</index><index>[<expr><name>n</name></expr>]</index></name> = <call><name>REV</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>crc_table_empty</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name>crc_table_empty</name></expr>)</condition>
<empty_stmt>;</empty_stmt></while>
}</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><name>out</name> = <call><name>fopen</name><argument_list>(<argument><expr>"crc32.h"</expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> == <name>NULL</name></expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"/* crc32.h -- tables for rapid CRC calculation\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" * Generated automatically by crc32.c\n */\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"local const unsigned long FAR "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"crc_table[TBLS][256] =\n{\n {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_table</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>crc_table</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"#ifdef BYFOUR\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>k</name> = 1</expr>;</init> <condition><expr><name>k</name> &lt; 8</expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" },\n {\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_table</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>crc_table</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"#endif\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" }\n};\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAKECRCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>local</name> <name>void</name></type> <name>write_table</name><parameter_list>(<param><decl><type><name>out</name></type></decl></param>, <param><decl><type><name>table</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>FAR</name> *</type><name>table</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; 256</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"%s0x%08lxUL%s"</expr></argument>, <argument><expr><name>n</name> % 5 ? "" : " "</expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><name>n</name> == 255 ? "\n" : (<name>n</name> % 5 == 4 ? ",\n" : ", ")</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>FAR</name> * <name>ZEXPORT</name></type> <name>get_crc_table</name><parameter_list>()</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>crc_table_empty</name></expr>)</condition><then>
<expr_stmt><expr><call><name>make_crc_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>(const <name>unsigned</name> <name>long</name> <name>FAR</name> *)<name>crc_table</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>crc = crc_table[0][((int)crc ^ (*buf++)) &amp; 0xff] ^ (crc &gt;&gt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO8</name></cpp:macro> <cpp:value>DO1; DO1; DO1; DO1; DO1; DO1; DO1; DO1</cpp:value></cpp:define>
<function><type><name>unsigned</name> <name>long</name> <name>ZEXPORT</name></type> <name>crc32</name><parameter_list>(<param><decl><type><name>crc</name></type></decl></param>, <param><decl><type><name>buf</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<block>{
<if>if <condition>(<expr><name>buf</name> == <name>Z_NULL</name></expr>)</condition><then> <return>return <expr>0UL</expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_CRC_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>crc_table_empty</name></expr>)</condition><then>
<expr_stmt><expr><call><name>make_crc_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> == <sizeof>sizeof<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>u4</name></type> <name>endian</name></decl>;</decl_stmt>
<expr_stmt><expr><name>endian</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>*(<call>(<name>unsigned</name> <name>char</name> *)<argument_list>(<argument><expr>&amp;<name>endian</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>crc32_little</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>crc32_big</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>crc</name> = <name>crc</name> ^ 0xffffffffUL</expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &gt;= 8</expr>)</condition> <block>{
<expr_stmt><expr><name>DO8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 8</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <do>do <block>{
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>len</name></expr>)</condition>;</do></then></if>
<return>return <expr><name>crc</name> ^ 0xffffffffUL</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BYFOUR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOLIT4</name></cpp:macro> <cpp:value>c ^= *buf4++; c = crc_table[3][c &amp; 0xff] ^ crc_table[2][(c &gt;&gt; 8) &amp; 0xff] ^ crc_table[1][(c &gt;&gt; 16) &amp; 0xff] ^ crc_table[0][c &gt;&gt; 24]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOLIT32</name></cpp:macro> <cpp:value>DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4</cpp:value></cpp:define>
<function><type><name>local</name> <name>unsigned</name> <name>long</name></type> <name>crc32_little</name><parameter_list>(<param><decl><type><name>crc</name></type></decl></param>, <param><decl><type><name>buf</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>register</name> <name>u4</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <specifier>const</specifier> <name>u4</name> <name>FAR</name> *</type><name>buf4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> = (<name>u4</name>)<name>crc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = ~<name>c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &amp;&amp; ((<name>ptrdiff_t</name>)<name>buf</name> &amp; 3)</expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> = <name><name>crc_table</name><index>[<expr>0</expr>]</index><index>[<expr>(<name>c</name> ^ *<name>buf</name>++) &amp; 0xff</expr>]</index></name> ^ (<name>c</name> &gt;&gt; 8)</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>buf4</name> = (const <name>u4</name> <name>FAR</name> *)(const <name>void</name> <name>FAR</name> *)<name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &gt;= 32</expr>)</condition> <block>{
<expr_stmt><expr><name>DOLIT32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 32</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>len</name> &gt;= 4</expr>)</condition> <block>{
<expr_stmt><expr><name>DOLIT4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 4</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>buf</name> = (const <name>unsigned</name> <name>char</name> <name>FAR</name> *)<name>buf4</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <do>do <block>{
<expr_stmt><expr><name>c</name> = <name><name>crc_table</name><index>[<expr>0</expr>]</index><index>[<expr>(<name>c</name> ^ *<name>buf</name>++) &amp; 0xff</expr>]</index></name> ^ (<name>c</name> &gt;&gt; 8)</expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>len</name></expr>)</condition>;</do></then></if>
<expr_stmt><expr><name>c</name> = ~<name>c</name></expr>;</expr_stmt>
<return>return <expr>(<name>unsigned</name> <name>long</name>)<name>c</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOBIG4</name></cpp:macro> <cpp:value>c ^= *++buf4; c = crc_table[4][c &amp; 0xff] ^ crc_table[5][(c &gt;&gt; 8) &amp; 0xff] ^ crc_table[6][(c &gt;&gt; 16) &amp; 0xff] ^ crc_table[7][c &gt;&gt; 24]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOBIG32</name></cpp:macro> <cpp:value>DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4</cpp:value></cpp:define>
<function><type><name>local</name> <name>unsigned</name> <name>long</name></type> <name>crc32_big</name><parameter_list>(<param><decl><type><name>crc</name></type></decl></param>, <param><decl><type><name>buf</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name>FAR</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>register</name> <name>u4</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <specifier>const</specifier> <name>u4</name> <name>FAR</name> *</type><name>buf4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> = <call><name>REV</name><argument_list>(<argument><expr>(<name>u4</name>)<name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = ~<name>c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &amp;&amp; ((<name>ptrdiff_t</name>)<name>buf</name> &amp; 3)</expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> = <name><name>crc_table</name><index>[<expr>4</expr>]</index><index>[<expr>(<name>c</name> &gt;&gt; 24) ^ *<name>buf</name>++</expr>]</index></name> ^ (<name>c</name> &lt;&lt; 8)</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>buf4</name> = (const <name>u4</name> <name>FAR</name> *)(const <name>void</name> <name>FAR</name> *)<name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf4</name>--</expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &gt;= 32</expr>)</condition> <block>{
<expr_stmt><expr><name>DOBIG32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 32</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>len</name> &gt;= 4</expr>)</condition> <block>{
<expr_stmt><expr><name>DOBIG4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 4</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>buf4</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = (const <name>unsigned</name> <name>char</name> <name>FAR</name> *)<name>buf4</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <do>do <block>{
<expr_stmt><expr><name>c</name> = <name><name>crc_table</name><index>[<expr>4</expr>]</index><index>[<expr>(<name>c</name> &gt;&gt; 24) ^ *<name>buf</name>++</expr>]</index></name> ^ (<name>c</name> &lt;&lt; 8)</expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>len</name></expr>)</condition>;</do></then></if>
<expr_stmt><expr><name>c</name> = ~<name>c</name></expr>;</expr_stmt>
<return>return <expr><call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr><call><name>REV</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GF2_DIM</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><name>local</name> <name>unsigned</name> <name>long</name></type> <name>gf2_matrix_times</name><parameter_list>(<param><decl><type><name>mat</name></type></decl></param>, <param><decl><type><name>vec</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>vec</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>vec</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>vec</name> &amp; 1</expr>)</condition><then>
<expr_stmt><expr><name>sum</name> ^= *<name>mat</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>vec</name> &gt;&gt;= 1</expr>;</expr_stmt>
<expr_stmt><expr><name>mat</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>sum</name></expr>;</return>
}</block></function>
<function><type><name>local</name> <name>void</name></type> <name>gf2_matrix_square</name><parameter_list>(<param><decl><type><name>square</name></type></decl></param>, <param><decl><type><name>mat</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>square</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>mat</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>GF2_DIM</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<expr_stmt><expr><name><name>square</name><index>[<expr><name>n</name></expr>]</index></name> = <call><name>gf2_matrix_times</name><argument_list>(<argument><expr><name>mat</name></expr></argument>, <argument><expr><name><name>mat</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>crc32_combine</name><parameter_list>(<param><decl><type><name>crc1</name></type></decl></param>, <param><decl><type><name>crc2</name></type></decl></param>, <param><decl><type><name>len2</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>uLong</name></type> <name>crc1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>crc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_off_t</name></type> <name>len2</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>even</name><index>[<expr><name>GF2_DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>odd</name><index>[<expr><name>GF2_DIM</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len2</name> == 0</expr>)</condition><then>
<return>return <expr><name>crc1</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>odd</name><index>[<expr>0</expr>]</index></name> = 0xedb88320L</expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 1</expr>;</init> <condition><expr><name>n</name> &lt; <name>GF2_DIM</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>odd</name><index>[<expr><name>n</name></expr>]</index></name> = <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> &lt;&lt;= 1</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len2</name> &amp; 1</expr>)</condition><then>
<expr_stmt><expr><name>crc1</name> = <call><name>gf2_matrix_times</name><argument_list>(<argument><expr><name>even</name></expr></argument>, <argument><expr><name>crc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>len2</name> &gt;&gt;= 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len2</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>gf2_matrix_square</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len2</name> &amp; 1</expr>)</condition><then>
<expr_stmt><expr><name>crc1</name> = <call><name>gf2_matrix_times</name><argument_list>(<argument><expr><name>odd</name></expr></argument>, <argument><expr><name>crc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>len2</name> &gt;&gt;= 1</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>len2</name> != 0</expr>)</condition>;</do>
<expr_stmt><expr><name>crc1</name> ^= <name>crc2</name></expr>;</expr_stmt>
<return>return <expr><name>crc1</name></expr>;</return>
}</block></function>
</unit>
