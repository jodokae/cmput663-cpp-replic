<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/zlib/example.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RISCOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTFILE</name></cpp:macro> <cpp:value>"foo-gz"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTFILE</name></cpp:macro> <cpp:value>"foo.gz"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ERR</name><parameter_list>(<param><type><name>err</name></type></param>, <param><type><name>msg</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if (err != Z_OK) { fprintf(stderr, "%s error: %d\n", msg, err); exit(1); } }</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>hello</name><index>[]</index></name> <init>= <expr>"hello, hello!"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>dictionary</name><index>[]</index></name> <init>= <expr>"hello"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>dictId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_compress</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_gzio</name></type> <name>OF</name><argument_list>(<argument><expr>(const <name>char</name> *<name>fname</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_deflate</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_inflate</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_large_deflate</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_large_inflate</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_flush</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> *<name>comprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_sync</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_dict_deflate</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>test_dict_inflate</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>Byte</name> *<name>compr</name>, <name>uLong</name> <name>comprLen</name>,
<name>Byte</name> *<name>uncompr</name>, <name>uLong</name> <name>uncomprLen</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> main <name>OF</name><argument_list>(<argument><expr>(<name>int</name> <name>argc</name>, <name>char</name> *<name><name>argv</name><index>[]</index></name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>test_compress</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, <decl><type ref="prev"/>*<name>uncompr</name></decl>;</decl_stmt></function>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>, <decl><type ref="prev"/><name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>len</name> <init>= <expr>(<name>uLong</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>compress</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr>&amp;<name>comprLen</name></expr></argument>, <argument><expr>(const <name>Bytef</name>*)<name>hello</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"compress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>"garbage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>uncompress</name><argument_list>(<argument><expr><name>uncompr</name></expr></argument>, <argument><expr>&amp;<name>uncomprLen</name></expr></argument>, <argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"uncompress"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bad uncompress\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"uncompress(): %s\n"</expr></argument>, <argument><expr>(<name>char</name> *)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<function><type><name>void</name></type> <name>test_gzio</name><parameter_list>(<param><decl><type><name>fname</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Byte</name> *</type><name>uncompr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_GZCOMPRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"NO_GZCOMPRESS -- gz* functions cannot compress\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>(<name>int</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_off_t</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>file</name> = <call><name>gzopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>"wb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzopen error\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>gzputc</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>'h'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>gzputs</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"ello"</expr></argument>)</argument_list></call> != 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzputs err: %s\n"</expr></argument>, <argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>gzprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>", %s!"</expr></argument>, <argument><expr>"hello"</expr></argument>)</argument_list></call> != 8</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzprintf err: %s\n"</expr></argument>, <argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>gzseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>1L</expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> = <call><name>gzopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzopen error\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>"garbage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>gzread</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr>(<name>unsigned</name>)<name>uncomprLen</name></expr></argument>)</argument_list></call> != <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzread err: %s\n"</expr></argument>, <argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bad gzread: %s\n"</expr></argument>, <argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"gzread(): %s\n"</expr></argument>, <argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>pos</name> = <call><name>gzseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>-8L</expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pos</name> != 6 || <call><name>gztell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> != <name>pos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzseek error, pos=%ld, gztell=%ld\n"</expr></argument>,
<argument><expr>(<name>long</name>)<name>pos</name></expr></argument>, <argument><expr>(<name>long</name>)<call><name>gztell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>gzgetc</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> != ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzgetc error\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>gzungetc</name><argument_list>(<argument><expr>' '</expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> != ' '</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzungetc error\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>gzgets</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>(<name>int</name>)<name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>)</argument_list></call> != 7</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"gzgets err after gzseek: %s\n"</expr></argument>, <argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr><name>hello</name> + 6</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bad gzgets after gzseek\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"gzgets() after gzseek: %s\n"</expr></argument>, <argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type> <name>test_deflate</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>z_stream</name></type> <name>c_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>len</name> <init>= <expr>(<name>uLong</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateInit</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_in</name></name> = (<name>Bytef</name>*)<name>hello</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_out</name></name> = <name>compr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>c_stream</name>.<name>total_in</name></name> != <name>len</name> &amp;&amp; <name><name>c_stream</name>.<name>total_out</name></name> &lt; <name>comprLen</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = <name><name>c_stream</name>.<name>avail_out</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_out</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>err</name> = <call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>test_inflate</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, <decl><type ref="prev"/>*<name>uncompr</name></decl>;</decl_stmt></function>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>, <decl><type ref="prev"/><name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>d_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>"garbage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_in</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_in</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_out</name></name> = <name>uncompr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflateInit</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>d_stream</name>.<name>total_out</name></name> &lt; <name>uncomprLen</name> &amp;&amp; <name><name>d_stream</name>.<name>total_in</name></name> &lt; <name>comprLen</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_in</name></name> = <name><name>d_stream</name>.<name>avail_out</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>err</name> = <call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bad inflate\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"inflate(): %s\n"</expr></argument>, <argument><expr>(<name>char</name> *)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<function><type><name>void</name></type> <name>test_large_deflate</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, <decl><type ref="prev"/>*<name>uncompr</name></decl>;</decl_stmt></function>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>, <decl><type ref="prev"/><name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>z_stream</name></type> <name>c_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateInit</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_BEST_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_out</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)<name>comprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_in</name></name> = <name>uncompr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>uncomprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c_stream</name>.<name>avail_in</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"deflate not greedy\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>deflateParams</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_NO_COMPRESSION</name></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_in</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>comprLen</name>/2</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>deflateParams</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_BEST_COMPRESSION</name></expr></argument>, <argument><expr><name>Z_FILTERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_in</name></name> = <name>uncompr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>uncomprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"deflate should report Z_STREAM_END\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><name>void</name></type> <name>test_large_inflate</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, <decl><type ref="prev"/>*<name>uncompr</name></decl>;</decl_stmt></function>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>, <decl><type ref="prev"/><name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>d_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>"garbage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_in</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>comprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflateInit</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name><name>d_stream</name>.<name>next_out</name></name> = <name>uncompr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)<name>uncomprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"large inflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>err</name> = <call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d_stream</name>.<name>total_out</name></name> != 2*<name>uncomprLen</name> + <name>comprLen</name>/2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bad large inflate: %ld\n"</expr></argument>, <argument><expr><name><name>d_stream</name>.<name>total_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"large_inflate(): OK\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<function><type><name>void</name></type> <name>test_flush</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name> *</type><name>comprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>z_stream</name></type> <name>c_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uInt</name></type> <name>len</name> <init>= <expr>(<name>uInt</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateInit</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_in</name></name> = (<name>Bytef</name>*)<name>hello</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_out</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)*<name>comprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_FULL_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>compr</name><index>[<expr>3</expr>]</index></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = <name>len</name> - 3</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>comprLen</name> = <name><name>c_stream</name>.<name>total_out</name></name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>test_sync</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, <decl><type ref="prev"/>*<name>uncompr</name></decl>;</decl_stmt></function>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>, <decl><type ref="prev"/><name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>d_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>"garbage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_in</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_in</name></name> = 2</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflateInit</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_out</name></name> = <name>uncompr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)<name>uncomprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>comprLen</name>-2</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflateSync</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateSync"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>Z_DATA_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"inflate should report DATA_ERROR\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"after inflateSync(): hel%s\n"</expr></argument>, <argument><expr>(<name>char</name> *)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><name>void</name></type> <name>test_dict_deflate</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>z_stream</name></type> <name>c_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateInit</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_BEST_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflateSetDictionary</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>,
<argument><expr>(const <name>Bytef</name>*)<name>dictionary</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictionary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateSetDictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dictId</name> = <name><name>c_stream</name>.<name>adler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_out</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)<name>comprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>next_in</name></name> = (<name>Bytef</name>*)<name>hello</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>)</argument_list></call>+1</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>deflate</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>Z_STREAM_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"deflate should report Z_STREAM_END\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>deflateEnd</name><argument_list>(<argument><expr>&amp;<name>c_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"deflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>test_dict_inflate</name><parameter_list>(<param><decl><type><name>compr</name></type></decl></param>, <param><decl><type><name>comprLen</name></type></decl></param>, <param><decl><type><name>uncompr</name></type></decl></param>, <param><decl><type><name>uncomprLen</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, <decl><type ref="prev"/>*<name>uncompr</name></decl>;</decl_stmt></function>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name></decl>, <decl><type ref="prev"/><name>uncomprLen</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>d_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr>"garbage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zalloc</name></name> = (<name>alloc_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>zfree</name></name> = (<name>free_func</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>opaque</name></name> = (<name>voidpf</name>)0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_in</name></name> = <name>compr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_in</name></name> = (<name>uInt</name>)<name>comprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>inflateInit</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateInit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>next_out</name></name> = <name>uncompr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_stream</name>.<name>avail_out</name></name> = (<name>uInt</name>)<name>uncomprLen</name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>err</name> = <call><name>inflate</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>Z_STREAM_END</name></expr>)</condition><then> <break>break;</break></then></if>
<if>if <condition>(<expr><name>err</name> == <name>Z_NEED_DICT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>d_stream</name>.<name>adler</name></name> != <name>dictId</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"unexpected dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>inflateSetDictionary</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>, <argument><expr>(const <name>Bytef</name>*)<name>dictionary</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictionary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflate with dict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>err</name> = <call><name>inflateEnd</name><argument_list>(<argument><expr>&amp;<name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"inflateEnd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>(<name>char</name>*)<name>uncompr</name></expr></argument>, <argument><expr><name>hello</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bad inflate with dict\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"inflate with dictionary: %s\n"</expr></argument>, <argument><expr>(<name>char</name> *)<name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>argc</name></type></decl></param>, <param><decl><type><name>argv</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>Byte</name> *</type><name>compr</name></decl>, *<decl><type ref="prev"/><name>uncompr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>comprLen</name> <init>= <expr>10000*<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>uncomprLen</name> <init>= <expr><name>comprLen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>myVersion</name> <init>= <expr><name>ZLIB_VERSION</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>zlibVersion</name><argument_list>()</argument_list></call><index>[<expr>0</expr>]</index> != <name><name>myVersion</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"incompatible zlib version\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>zlibVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ZLIB_VERSION</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"warning: different zlib version\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"zlib version %s = 0x%04x, compile flags = 0x%lx\n"</expr></argument>,
<argument><expr><name>ZLIB_VERSION</name></expr></argument>, <argument><expr><name>ZLIB_VERNUM</name></expr></argument>, <argument><expr><call><name>zlibCompileFlags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compr</name> = (<name>Byte</name>*)<call><name>calloc</name><argument_list>(<argument><expr>(<name>uInt</name>)<name>comprLen</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uncompr</name> = (<name>Byte</name>*)<call><name>calloc</name><argument_list>(<argument><expr>(<name>uInt</name>)<name>uncomprLen</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>compr</name> == <name>Z_NULL</name> || <name>uncompr</name> == <name>Z_NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"out of memory\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>test_compress</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_gzio</name><argument_list>(<argument><expr>(<name>argc</name> &gt; 1 ? <name><name>argv</name><index>[<expr>1</expr>]</index></name> : <name>TESTFILE</name>)</expr></argument>,
<argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_deflate</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_inflate</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_large_deflate</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_large_inflate</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_flush</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr>&amp;<name>comprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_sync</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>comprLen</name> = <name>uncomprLen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_dict_deflate</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_dict_inflate</name><argument_list>(<argument><expr><name>compr</name></expr></argument>, <argument><expr><name>comprLen</name></expr></argument>, <argument><expr><name>uncompr</name></expr></argument>, <argument><expr><name>uncomprLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uncompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
