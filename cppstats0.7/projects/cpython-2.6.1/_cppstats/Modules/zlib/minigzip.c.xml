<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/zlib/minigzip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINARY_MODE</name><parameter_list>(<param><type><name>file</name></type></param>)</parameter_list></cpp:macro> <cpp:value>setmode(fileno(file), O_BINARY)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BINARY_MODE</name><parameter_list>(<param><type><name>file</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlink</name></cpp:macro> <cpp:value>delete</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_SUFFIX</name></cpp:macro> <cpp:value>"-gz"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RISCOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unlink</name></cpp:macro> <cpp:value>remove</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_SUFFIX</name></cpp:macro> <cpp:value>"-gz"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fileno</name><parameter_list>(<param><type><name>file</name></type></param>)</parameter_list></cpp:macro> <cpp:value>file-&gt;__file</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MWERKS__</name></expr></argument>)</argument_list></call> &amp;&amp; <name>__dest_os</name> != <name>__be_os</name> &amp;&amp; <name>__dest_os</name> != <name>__win32_os</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unix.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>unlink</name></type> <name>OF</name><argument_list>(<argument><expr>(const <name>char</name> *)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GZ_SUFFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GZ_SUFFIX</name></cpp:macro> <cpp:value>".gz"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUFFIX_LEN</name></cpp:macro> <cpp:value>(sizeof(GZ_SUFFIX)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFLEN</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NAME_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAXSEG_64K</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> *</type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>error</name></type> <name>OF</name><argument_list>(<argument><expr>(const <name>char</name> *<name>msg</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>gz_compress</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>FILE</name> *<name>in</name>, <name>gzFile</name> <name>out</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name> <name>gz_compress_mmap</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>FILE</name> *<name>in</name>, <name>gzFile</name> <name>out</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>void</name> <name>gz_uncompress</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>gzFile</name> <name>in</name>, <name>FILE</name> *<name>out</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>file_compress</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>char</name> *<name>file</name>, <name>char</name> *<name>mode</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>file_uncompress</name></type> <name>OF</name><argument_list>(<argument><expr>(<name>char</name> *<name>file</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> main <name>OF</name><argument_list>(<argument><expr>(<name>int</name> <name>argc</name>, <name>char</name> *<name><name>argv</name><index>[]</index></name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>error</name><parameter_list>(<param><decl><type><name>msg</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: %s\n"</expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>gz_compress</name><parameter_list>(<param><decl><type><name>in</name></type></decl></param>, <param><decl><type><name>out</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>FILE</name> *</type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>out</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>local</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>gz_compress_mmap</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> == <name>Z_OK</name></expr>)</condition><then> <return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>len</name> = (<name>int</name>)<call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"fread"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <break>break;</break></then></if>
<if>if <condition>(<expr><call><name>gzwrite</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>(<name>unsigned</name>)<name>len</name></expr></argument>)</argument_list></call> != <name>len</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>gzclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> != <name>Z_OK</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"failed gzclose"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>gz_compress_mmap</name><parameter_list>(<param><decl><type><name>in</name></type></decl></param>, <param><decl><type><name>out</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>FILE</name> *</type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>out</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ifd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caddr_t</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>buf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>stat</name></type> <name>sb</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr><name>Z_ERRNO</name></expr>;</return></then></if>
<expr_stmt><expr><name>buf_len</name> = <name><name>sb</name>.<name>st_size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buf_len</name> &lt;= 0</expr>)</condition><then> <return>return <expr><name>Z_ERRNO</name></expr>;</return></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>mmap</name><argument_list>(<argument><expr>(<name>caddr_t</name>) 0</expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>ifd</name></expr></argument>, <argument><expr>(<name>off_t</name>)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buf</name> == <call>(<name>caddr_t</name>)<argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>Z_ERRNO</name></expr>;</return></then></if>
<expr_stmt><expr><name>len</name> = <call><name>gzwrite</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>buf</name></expr></argument>, <argument><expr>(<name>unsigned</name>)<name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> != (<name>int</name>)<name>buf_len</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>gzclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call> != <name>Z_OK</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"failed gzclose"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>Z_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>gz_uncompress</name><parameter_list>(<param><decl><type><name>in</name></type></decl></param>, <param><decl><type><name>out</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>gzFile</name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>local</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>len</name> = <call><name>gzread</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><call><name>error</name> <argument_list>(<argument><expr><call><name>gzerror</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <break>break;</break></then></if>
<if>if <condition>(<expr>(<name>int</name>)<call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>unsigned</name>)<name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> != <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"failed fwrite"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"failed fclose"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>gzclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> != <name>Z_OK</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"failed gzclose"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>void</name></type> <name>file_compress</name><parameter_list>(<param><decl><type><name>file</name></type></decl></param>, <param><decl><type><name>mode</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>mode</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>local</name> <name>char</name></type> <name><name>outfile</name><index>[<expr><name>MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>GZ_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>in</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>out</name> = <call><name>gzopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: can't gzopen %s\n"</expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>gz_compress</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>file_uncompress</name><parameter_list>(<param><decl><type><name>file</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>local</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>infile</name></decl>, *<decl><type ref="prev"/><name>outfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uInt</name></type> <name>len</name> <init>= <expr>(<name>uInt</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; <name>SUFFIX_LEN</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>file</name>+<name>len</name>-<name>SUFFIX_LEN</name></expr></argument>, <argument><expr><name>GZ_SUFFIX</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>infile</name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outfile</name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outfile</name><index>[<expr><name>len</name>-3</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>outfile</name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>infile</name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>GZ_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>in</name> = <call><name>gzopen</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>in</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: can't gzopen %s\n"</expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>out</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr>"wb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>gz_uncompress</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>argc</name></type></decl></param>, <param><decl><type><name>argv</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>uncompr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gzFile</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>outmode</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>outmode</name></expr></argument>, <argument><expr>"wb6 "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prog</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr><name>argc</name> &gt; 0</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>, <argument><expr>"-d"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>uncompr</name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>, <argument><expr>"-f"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>outmode</name><index>[<expr>3</expr>]</index></name> = 'f'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>, <argument><expr>"-h"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>outmode</name><index>[<expr>3</expr>]</index></name> = 'h'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>, <argument><expr>"-r"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>outmode</name><index>[<expr>3</expr>]</index></name> = 'R'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>(*<name>argv</name>)<index>[<expr>0</expr>]</index> == '-' &amp;&amp; (*<name>argv</name>)<index>[<expr>1</expr>]</index> &gt;= '1' &amp;&amp; (*<name>argv</name>)<index>[<expr>1</expr>]</index> &lt;= '9' &amp;&amp;
(*<name>argv</name>)<index>[<expr>2</expr>]</index> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>outmode</name><index>[<expr>2</expr>]</index></name> = (*<name>argv</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt></then>
<else>else
<break>break;</break></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>outmode</name><index>[<expr>3</expr>]</index></name> == ' '</expr>)</condition><then>
<expr_stmt><expr><name><name>outmode</name><index>[<expr>3</expr>]</index></name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SET_BINARY_MODE</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_BINARY_MODE</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>uncompr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>file</name> = <call><name>gzdopen</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name> == <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"can't gzdopen stdin"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>gz_uncompress</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>file</name> = <call><name>gzdopen</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name> == <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr>"can't gzdopen stdout"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>gz_compress</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<do>do <block>{
<if>if <condition>(<expr><name>uncompr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>file_uncompress</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>file_compress</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>, <argument><expr><name>outmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block> while <condition>(<expr><name>argv</name>++</expr>, <expr>--<name>argc</name></expr>)</condition>;</do>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
