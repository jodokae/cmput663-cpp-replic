<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/zlib/adler32.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZLIB_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>65521UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMAX</name></cpp:macro> <cpp:value>5552</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name><parameter_list>(<param><type><name>buf</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{adler += (buf)[i]; sum2 += adler;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name><parameter_list>(<param><type><name>buf</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DO1(buf,i); DO1(buf,i+1);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO4</name><parameter_list>(<param><type><name>buf</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DO2(buf,i); DO2(buf,i+2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO8</name><parameter_list>(<param><type><name>buf</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DO4(buf,i); DO4(buf,i+4);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO16</name><parameter_list>(<param><type><name>buf</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DO8(buf,0); DO8(buf,8);</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_DIVIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (a &gt;= (BASE &lt;&lt; 16)) a -= (BASE &lt;&lt; 16); if (a &gt;= (BASE &lt;&lt; 15)) a -= (BASE &lt;&lt; 15); if (a &gt;= (BASE &lt;&lt; 14)) a -= (BASE &lt;&lt; 14); if (a &gt;= (BASE &lt;&lt; 13)) a -= (BASE &lt;&lt; 13); if (a &gt;= (BASE &lt;&lt; 12)) a -= (BASE &lt;&lt; 12); if (a &gt;= (BASE &lt;&lt; 11)) a -= (BASE &lt;&lt; 11); if (a &gt;= (BASE &lt;&lt; 10)) a -= (BASE &lt;&lt; 10); if (a &gt;= (BASE &lt;&lt; 9)) a -= (BASE &lt;&lt; 9); if (a &gt;= (BASE &lt;&lt; 8)) a -= (BASE &lt;&lt; 8); if (a &gt;= (BASE &lt;&lt; 7)) a -= (BASE &lt;&lt; 7); if (a &gt;= (BASE &lt;&lt; 6)) a -= (BASE &lt;&lt; 6); if (a &gt;= (BASE &lt;&lt; 5)) a -= (BASE &lt;&lt; 5); if (a &gt;= (BASE &lt;&lt; 4)) a -= (BASE &lt;&lt; 4); if (a &gt;= (BASE &lt;&lt; 3)) a -= (BASE &lt;&lt; 3); if (a &gt;= (BASE &lt;&lt; 2)) a -= (BASE &lt;&lt; 2); if (a &gt;= (BASE &lt;&lt; 1)) a -= (BASE &lt;&lt; 1); if (a &gt;= BASE) a -= BASE; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD4</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (a &gt;= (BASE &lt;&lt; 4)) a -= (BASE &lt;&lt; 4); if (a &gt;= (BASE &lt;&lt; 3)) a -= (BASE &lt;&lt; 3); if (a &gt;= (BASE &lt;&lt; 2)) a -= (BASE &lt;&lt; 2); if (a &gt;= (BASE &lt;&lt; 1)) a -= (BASE &lt;&lt; 1); if (a &gt;= BASE) a -= BASE; } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>a %= BASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD4</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>a %= BASE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>adler32</name><parameter_list>(<param><decl><type><name>adler</name></type></decl></param>, <param><decl><type><name>buf</name></type></decl></param>, <param><decl><type><name>len</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>uLong</name></type> <name>adler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uInt</name></type> <name>len</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sum2</name> = (<name>adler</name> &gt;&gt; 16) &amp; 0xffff</expr>;</expr_stmt>
<expr_stmt><expr><name>adler</name> &amp;= 0xffff</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>adler</name> += <name><name>buf</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>adler</name> &gt;= <name>BASE</name></expr>)</condition><then>
<expr_stmt><expr><name>adler</name> -= <name>BASE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>sum2</name> += <name>adler</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sum2</name> &gt;= <name>BASE</name></expr>)</condition><then>
<expr_stmt><expr><name>sum2</name> -= <name>BASE</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>adler</name> | (<name>sum2</name> &lt;&lt; 16)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>buf</name> == <name>Z_NULL</name></expr>)</condition><then>
<return>return <expr>1L</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 16</expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>len</name>--</expr>)</condition> <block>{
<expr_stmt><expr><name>adler</name> += *<name>buf</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> += <name>adler</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>adler</name> &gt;= <name>BASE</name></expr>)</condition><then>
<expr_stmt><expr><name>adler</name> -= <name>BASE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>MOD4</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>adler</name> | (<name>sum2</name> &lt;&lt; 16)</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>len</name> &gt;= <name>NMAX</name></expr>)</condition> <block>{
<expr_stmt><expr><name>len</name> -= <name>NMAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>NMAX</name> / 16</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>DO16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += 16</expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>n</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>adler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>len</name> &gt;= 16</expr>)</condition> <block>{
<expr_stmt><expr><name>len</name> -= 16</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += 16</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>len</name>--</expr>)</condition> <block>{
<expr_stmt><expr><name>adler</name> += *<name>buf</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> += <name>adler</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>adler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>adler</name> | (<name>sum2</name> &lt;&lt; 16)</expr>;</return>
}</block></function>
<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>adler32_combine</name><parameter_list>(<param><decl><type><name>adler1</name></type></decl></param>, <param><decl><type><name>adler2</name></type></decl></param>, <param><decl><type><name>len2</name></type></decl></param>)</parameter_list>
<decl_stmt><decl><type><name>uLong</name></type> <name>adler1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uLong</name></type> <name>adler2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_off_t</name></type> <name>len2</name></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rem</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rem</name> = <call>(<name>unsigned</name>)<argument_list>(<argument><expr><name>len2</name> % <name>BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1</name> = <name>adler1</name> &amp; 0xffff</expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> = <name>rem</name> * <name>sum1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1</name> += (<name>adler2</name> &amp; 0xffff) + <name>BASE</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> += ((<name>adler1</name> &gt;&gt; 16) &amp; 0xffff) + ((<name>adler2</name> &gt;&gt; 16) &amp; 0xffff) + <name>BASE</name> - <name>rem</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sum1</name> &gt; <name>BASE</name></expr>)</condition><then> <expr_stmt><expr><name>sum1</name> -= <name>BASE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>sum1</name> &gt; <name>BASE</name></expr>)</condition><then> <expr_stmt><expr><name>sum1</name> -= <name>BASE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>sum2</name> &gt; (<name>BASE</name> &lt;&lt; 1)</expr>)</condition><then> <expr_stmt><expr><name>sum2</name> -= (<name>BASE</name> &lt;&lt; 1)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>sum2</name> &gt; <name>BASE</name></expr>)</condition><then> <expr_stmt><expr><name>sum2</name> -= <name>BASE</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>sum1</name> | (<name>sum2</name> &lt;&lt; 16)</expr>;</return>
}</block></function>
</unit>
