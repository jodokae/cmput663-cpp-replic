<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/darwin/dlfcn.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_DLFCN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DLFCN_H_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AvailabilityMacros.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>dl_info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dli_fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>dli_fbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dli_sname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>dli_saddr</name></decl>;</decl_stmt>
}</block></struct></type> <name>Dl_info</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MIN_REQUIRED</name> &lt;= <name>MAC_OS_X_VERSION_10_2</name></expr></cpp:if>
<cpp:error>#<cpp:directive>warning</cpp:directive> CTYPES_DARWIN_DLFCN</cpp:error>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTYPES_DARWIN_DLFCN</name></cpp:macro></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type> (*<name>ctypes_dlopen</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type> (*<name>ctypes_dlsym</name>)<parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type> (*<name>ctypes_dlerror</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (*<name>ctypes_dlclose</name>)<parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (*<name>ctypes_dladdr</name>)<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>void</name> *</decl></param>, <param><decl><type><name>Dl_info</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type> <name>dlopen</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type> <name>dlsym</name><parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>symbol</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>dlerror</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dlclose</name><parameter_list>(<param><decl><type><name>void</name> *</type> <name>handle</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dladdr</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>void</name> *</decl></param>, <param><decl><type><name>Dl_info</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_LAZY</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_NOW</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_LOCAL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_GLOBAL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_NOLOAD</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_NODELETE</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_NEXT</name></cpp:macro> <cpp:value>((void *) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_DEFAULT</name></cpp:macro> <cpp:value>((void *) -2)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
