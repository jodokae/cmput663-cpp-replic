<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi_arm_wince/debug.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>ffi_stop_here</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><name>void</name></type> <name>ffi_assert</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>expr</name></decl></param>, <param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"ASSERTION FAILURE: %s at %s:%d\n"</expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffi_stop_here</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>ffi_type_test</name><parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>a</name></decl></param>, <param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>FFI_ASSERT_AT</name><argument_list>(<argument><expr><name>a</name> != <name>NULL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT_AT</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>type</name></name> &lt;= <name>FFI_TYPE_LAST</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT_AT</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_VOID</name> || <name><name>a</name>-&gt;<name>size</name></name> &gt; 0</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT_AT</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_VOID</name> || <name><name>a</name>-&gt;<name>alignment</name></name> &gt; 0</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT_AT</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_STRUCT</name> || <name><name>a</name>-&gt;<name>elements</name></name> != <name>NULL</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
