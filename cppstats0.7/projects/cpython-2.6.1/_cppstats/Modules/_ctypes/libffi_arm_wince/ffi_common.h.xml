<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi_arm_wince/ffi_common.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FFI_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_COMMON_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fficonfig.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>__builtin_alloca</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALLOCA_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> alloca</cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>alloca</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name> *</type><name>alloca</name> <parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STDC_HEADERS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MEMCPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memcpy</name><parameter_list>(<param><type><name>d</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>bcopy ((s), (d), (n))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ffi_assert</name><parameter_list>( <param><decl><type><name>char</name> *</type><name>expr</name></decl></param>, <param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi_stop_here</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi_type_test</name><parameter_list>( <param><decl><type><name>ffi_type</name> *</type><name>a</name></decl></param>, <param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ASSERT</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) ? (void)0 : ffi_assert(#x, __FILE__,__LINE__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ASSERT_AT</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>f</name></type></param>, <param><type><name>l</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) ? 0 : ffi_assert(#x, (f), (l)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ASSERT_VALID_TYPE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ffi_type_test (x, __FILE__, __LINE__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ASSERT</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ASSERT_AT</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>f</name></type></param>, <param><type><name>l</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ASSERT_VALID_TYPE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN</name><parameter_list>(<param><type><name>v</name></type></param>, <param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((((size_t) (v))-1) | ((a)-1))+1)</cpp:value></cpp:define>
<function_decl><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>rvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
}</block></struct></type> <name>extended_cif</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>UINT8</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__QI__</name>)));</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name> <name>SINT8</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__QI__</name>)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>UINT16</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__HI__</name>)));</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name> <name>SINT16</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__HI__</name>)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>UINT32</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__SI__</name>)));</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name> <name>SINT32</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__SI__</name>)));</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>UINT64</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__DI__</name>)));</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name> <name>SINT64</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__DI__</name>)));</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>__int8</name></type> <name>UINT8</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>__int8</name></type> <name>SINT8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int16</name></type> <name>UINT16</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>__int16</name></type> <name>SINT16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>UINT32</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>__int32</name></type> <name>SINT32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>UINT64</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>SINT64</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "Need typedefs here"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>float</name></type> <name>FLOAT32</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
