<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi_osx/x86/x86-ffi_darwin.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>retval_on_stack</name><parameter_list>(
<param><decl><type><name>ffi_type</name>*</type> <name>tp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>tp</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>tp</name>-&gt;<name>size</name></name> &gt; 8</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<switch>switch <condition>(<expr><name><name>tp</name>-&gt;<name>size</name></name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
</case><case>case <expr>2</expr>:
</case><case>case <expr>4</expr>:
</case><case>case <expr>8</expr>:
<return>return <expr>0</expr>;</return>
</case><default>default:
<return>return <expr>1</expr>;</return>
</default>}</block></switch>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>char</name>*</type></decl></param>, <param><decl><type><name>extended_cif</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>ffi_prep_args</name><parameter_list>(
<param><decl><type><name>char</name>*</type> <name>stack</name></decl></param>,
<param><decl><type><name>extended_cif</name>*</type> <name>ecif</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>void</name>**</type> <name>p_argv</name> <init>= <expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name>*</type> <name>argp</name> <init>= <expr><name>stack</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>ffi_type</name>**</type> <name>p_arg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>retval_on_stack</name><argument_list>(<argument><expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>void</name>**)<name>argp</name> = <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name> <init>= <expr><name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - 1) &amp; (<name>unsigned</name>)<name>argp</name></expr>)</condition><then>
<expr_stmt><expr><name>argp</name> = (<name>char</name>*)<call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name>*)<name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT8</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name>*)<name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT8</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name>*)<name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT16</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name>*)<name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT16</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name>*)<name>argp</name> = (<name>signed</name> <name>int</name>)*<call>(<name>SINT32</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name>*)<name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name>*)<name>argp</name> = (<name>unsigned</name> <name>int</name>)*<call>(<name>UINT32</name>*)<argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name><parameter_list>(
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = (<name>unsigned</name>)<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT8</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT16</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>8</expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = (<name><name>cif</name>-&gt;<name>bytes</name></name> + 15) &amp; ~0xF</expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_SYSV</name><parameter_list>(
<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>extended_cif</name>*</type></decl></param> ,
<param><decl><type><name>unsigned</name></type></decl></param> ,
<param><decl><type><name>unsigned</name></type></decl></param> ,
<param><decl><type><name>unsigned</name>*</type></decl></param> ,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_STDCALL</name><argument_list>(
<argument><expr><call><name>void</name> <argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>extended_cif</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>extended_cif</name>*</expr></argument> ,
<argument><expr><name>unsigned</name></expr></argument> ,
<argument><expr><name>unsigned</name></expr></argument> ,
<argument><expr><name>unsigned</name>*</expr></argument> ,
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>ffi_call</name><parameter_list>(
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name>*</type> <name>rvalue</name></decl></param>,
<param><decl><type><name>void</name>**</type> <name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; <call><name>retval_on_stack</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_SYSV</name></expr>:
<expr_stmt><expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_STDCALL</name></expr>:
<expr_stmt><expr><call><name>ffi_call_STDCALL</name><argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_closure_SYSV</name><parameter_list>(
<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(regparm<parameter_list>(</parameter_list>1</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>FFI_NO_RAW_API</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_closure_raw_SYSV</name><parameter_list>(
<param><decl><type><name>ffi_raw_closure</name>*</type> <name>closure</name></decl></param>)</parameter_list> __attribute__<parameter_list>(<param/></parameter_list>(regparm<parameter_list>(</parameter_list>1</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>void</name></type>
<name>ffi_prep_incoming_args_SYSV</name><parameter_list>(
<param><decl><type><name>char</name>*</type> <name>stack</name></decl></param>,
<param><decl><type><name>void</name>**</type> <name>rvalue</name></decl></param>,
<param><decl><type><name>void</name>**</type> <name>avalue</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>void</name>**</type> <name>p_argv</name> <init>= <expr><name>avalue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name>*</type> <name>argp</name> <init>= <expr><name>stack</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>ffi_type</name>**</type> <name>p_arg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>retval_on_stack</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rvalue</name> = *(<name>void</name>**)<name>argp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += 4</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> - 1) &amp; (<name>unsigned</name>)<name>argp</name></expr>)</condition><then>
<expr_stmt><expr><name>argp</name> = (<name>char</name>*)<call><name>ALIGN</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>p_argv</name> = (<name>void</name>*)<name>argp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<macro><name>__attribute__</name><argument_list>(<argument>(regparm(1))</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_closure_SYSV</name><parameter_list>(
<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name>*</type> <name>cif</name> <init>= <expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>**</type> <name>arg_area</name> <init>= <expr>(<name>void</name>**)<call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>resp</name> <init>= <expr>(<name>void</name>*)&amp;<name>res</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>args</name> <init>= <expr><call><name>__builtin_dwarf_cfa</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ffi_prep_incoming_args_SYSV</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>(<name>void</name>**)&amp;<name>resp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>)<argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>arg_area</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_INT</name></expr>)</condition><then>
<asm>asm("movl (%0),%%eax"
: : "r" (resp) : "eax");</asm></then>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
<asm>asm("flds (%0)"
: : "r" (resp) : "st");</asm></then>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<asm>asm("fldl (%0)"
: : "r" (resp) : "st", "st(1)");</asm></then>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
<asm>asm("fldt (%0)"
: : "r" (resp) : "st", "st(1)");</asm></then>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_SINT64</name></expr>)</condition><then>
<asm>asm("movl 0(%0),%%eax;"
"movl 4(%0),%%edx"
: : "r" (resp)
: "eax", "edx");</asm></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_SINT8</name></expr>)</condition><then>
<asm>asm("movsbl (%0),%%eax"
: : "r" (resp) : "eax");</asm></then>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_SINT16</name></expr>)</condition><then>
<asm>asm("movswl (%0),%%eax"
: : "r" (resp) : "eax");</asm></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<asm>asm("lea -8(%ebp),%esp;"
"pop %esi;"
"pop %edi;"
"pop %ebp;"
"ret $4");</asm></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_INIT_TRAMPOLINE</name><parameter_list>(<param><type><name>TRAMP</name></type></param>, <param><type><name>FUN</name></type></param>, <param><type><name>CTX</name></type></param>)</parameter_list></cpp:macro> <cpp:value>({ unsigned char* __tramp = (unsigned char*)(TRAMP); unsigned int __fun = (unsigned int)(FUN); unsigned int __ctx = (unsigned int)(CTX); unsigned int __dis = __fun - ((unsigned int)__tramp + FFI_TRAMPOLINE_SIZE); *(unsigned char*)&amp;__tramp[0] = 0xb8; *(unsigned int*)&amp;__tramp[1] = __ctx; *(unsigned char*)&amp;__tramp[5] = 0xe9; *(unsigned int*)&amp;__tramp[6] = __dis; })</cpp:value></cpp:define>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure</name><parameter_list>(
<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>void</name>**</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name>*</type> <name>user_data</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_SYSV</name></expr>)</condition><then>
<return>return <expr><name>FFI_BAD_ABI</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_INIT_TRAMPOLINE</name><argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name></expr></argument>, <argument><expr>&amp;<name>ffi_closure_SYSV</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>FFI_NO_RAW_API</name></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(regparm(1))</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_closure_raw_SYSV</name><parameter_list>(
<param><decl><type><name>ffi_raw_closure</name>*</type> <name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_raw</name>*</type> <name>raw_args</name> <init>= <expr>(<name>ffi_raw</name>*)<call><name>__builtin_dwarf_cfa</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name>*</type> <name>cif</name> <init>= <expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rtype</name> <init>= <expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>resp</name> <init>= <expr>(<name>void</name>*)&amp;<name>res</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>)<argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>raw_args</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_INT</name></expr>)</condition><then>
<asm>asm("movl (%0),%%eax"
: : "r" (resp) : "eax");</asm></then>
<else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
<asm>asm("flds (%0)"
: : "r" (resp) : "st");</asm></then>
<else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<asm>asm("fldl (%0)"
: : "r" (resp) : "st", "st(1)");</asm></then>
<else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
<asm>asm("fldt (%0)"
: : "r" (resp) : "st", "st(1)");</asm></then>
<else>else <if>if <condition>(<expr><name>rtype</name> == <name>FFI_TYPE_SINT64</name></expr>)</condition><then>
<asm>asm("movl 0(%0),%%eax;"
"movl 4(%0),%%edx"
: : "r" (resp) : "eax", "edx");</asm></then></if></else></if></else></if></else></if></else></if>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_raw_closure</name><parameter_list>(
<param><decl><type><name>ffi_raw_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>,<param><decl><type><name>ffi_raw</name>*</type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name>*</type> <name>user_data</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_SYSV</name></expr>)</condition><then>
<return>return <expr><name>FFI_BAD_ABI</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> != <name>FFI_TYPE_STRUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> != <name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>FFI_INIT_TRAMPOLINE</name><argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name></expr></argument>, <argument><expr>&amp;<name>ffi_closure_raw_SYSV</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_prep_args_raw</name><parameter_list>(
<param><decl><type><name>char</name>*</type> <name>stack</name></decl></param>,
<param><decl><type><name>extended_cif</name>*</type> <name>ecif</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></argument>, <argument><expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_STDCALL</name><parameter_list>(
<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>extended_cif</name>*</type></decl></param> ,
<param><decl><type><name>unsigned</name></type></decl></param> ,
<param><decl><type><name>unsigned</name></type></decl></param> ,
<param><decl><type><name>unsigned</name>*</type></decl></param> ,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>ffi_raw_call</name><parameter_list>(
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>()</parameter_list></function_decl></param>,
<param><decl><type><name>void</name>*</type> <name>rvalue</name></decl></param>,
<param><decl><type><name>ffi_raw</name>*</type> <name>fake_avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name> <init>= <expr>(<name>void</name> **)<name>fake_avalue</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; <call><name>retval_on_stack</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_SYSV</name></expr>:
<expr_stmt><expr><call><name>ffi_call_SYSV</name><argument_list>(<argument><expr><name>ffi_prep_args_raw</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_STDCALL</name></expr>:
<expr_stmt><expr><call><name>ffi_call_STDCALL</name><argument_list>(<argument><expr><name>ffi_prep_args_raw</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
