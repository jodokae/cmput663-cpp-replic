<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi_osx/powerpc/ppc-darwin.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG9</name></cpp:macro> <cpp:value>MODE_CHOICE(56,112)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG10</name></cpp:macro> <cpp:value>MODE_CHOICE(60,120)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG11</name></cpp:macro> <cpp:value>MODE_CHOICE(64,128)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG12</name></cpp:macro> <cpp:value>MODE_CHOICE(68,136)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG13</name></cpp:macro> <cpp:value>MODE_CHOICE(72,144)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG14</name></cpp:macro> <cpp:value>MODE_CHOICE(76,152)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG15</name></cpp:macro> <cpp:value>MODE_CHOICE(80,160)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG16</name></cpp:macro> <cpp:value>MODE_CHOICE(84,168)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG17</name></cpp:macro> <cpp:value>MODE_CHOICE(88,176)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG18</name></cpp:macro> <cpp:value>MODE_CHOICE(92,184)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG19</name></cpp:macro> <cpp:value>MODE_CHOICE(96,192)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG20</name></cpp:macro> <cpp:value>MODE_CHOICE(100,200)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG21</name></cpp:macro> <cpp:value>MODE_CHOICE(104,208)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG22</name></cpp:macro> <cpp:value>MODE_CHOICE(108,216)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG23</name></cpp:macro> <cpp:value>MODE_CHOICE(112,224)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG24</name></cpp:macro> <cpp:value>MODE_CHOICE(116,232)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG25</name></cpp:macro> <cpp:value>MODE_CHOICE(120,240)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG26</name></cpp:macro> <cpp:value>MODE_CHOICE(124,248)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG27</name></cpp:macro> <cpp:value>MODE_CHOICE(128,256)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG28</name></cpp:macro> <cpp:value>MODE_CHOICE(132,264)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ARG29</name></cpp:macro> <cpp:value>MODE_CHOICE(136,272)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_NEEDS_REGISTERS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_GPR_ARG_REGISTERS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_FPR_ARG_REGISTERS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_1_BYTE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) == FFI_TYPE_UINT8 || (x) == FFI_TYPE_SINT8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_2_BYTE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) == FFI_TYPE_UINT16 || (x) == FFI_TYPE_SINT16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_4_BYTE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) == FFI_TYPE_UINT32 || (x) == FFI_TYPE_SINT32 ||(x) == FFI_TYPE_INT || (x) == FFI_TYPE_FLOAT)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LIBFFI_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <block>{
<decl><name>FLAG_RETURNS_NOTHING</name> <init>= <expr>1 &lt;&lt; (31 - 30)</expr></init></decl>,
<decl><name>FLAG_RETURNS_FP</name> <init>= <expr>1 &lt;&lt; (31 - 29)</expr></init></decl>,
<decl><name>FLAG_RETURNS_64BITS</name> <init>= <expr>1 &lt;&lt; (31 - 28)</expr></init></decl>,
<decl><name>FLAG_RETURNS_128BITS</name> <init>= <expr>1 &lt;&lt; (31 - 31)</expr></init></decl>,
<decl><name>FLAG_RETURNS_STRUCT</name> <init>= <expr>1 &lt;&lt; (31 - 27)</expr></init></decl>,
<decl><name>FLAG_STRUCT_CONTAINS_FP</name> <init>= <expr>1 &lt;&lt; (31 - 26)</expr></init></decl>,
<decl><name>FLAG_ARG_NEEDS_COPY</name> <init>= <expr>1 &lt;&lt; (31 - 7)</expr></init></decl>,
<decl><name>FLAG_FP_ARGUMENTS</name> <init>= <expr>1 &lt;&lt; (31 - 6)</expr></init></decl>,
<decl><name>FLAG_4_GPR_ARGUMENTS</name> <init>= <expr>1 &lt;&lt; (31 - 5)</expr></init></decl>,
<decl><name>FLAG_RETVAL_REFERENCE</name> <init>= <expr>1 &lt;&lt; (31 - 4)</expr></init></decl>
}</block>;</enum>
<function_decl><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>extended_cif</name>*</type> <name>inEcif</name></decl></param>, <param><decl><type><name>unsigned</name> *<specifier>const</specifier></type> <name>stack</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
}</block></union></type> <name>ffi_dblfl</name>;</typedef>
<function_decl><type><name>int</name></type> <name>ffi_closure_helper_DARWIN</name><parameter_list>( <param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>void</name>*</type> <name>rvalue</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name>*</type> <name>pgr</name></decl></param>,
<param><decl><type><name>ffi_dblfl</name>*</type> <name>pfr</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ffi64_struct_to_ram_form</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>ffi_type</name>*</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>,
<param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>, <param><decl><type><name>char</name>*</type></decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ffi64_struct_to_reg_form</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>ffi_type</name>*</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>,
<param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>, <param><decl><type><name>char</name>*</type></decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>, <param><decl><type><name>char</name>*</type></decl></param>, <param><decl><type><name>unsigned</name></type> <name>int</name>*</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ffi64_stret_needs_ptr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>short</name>*</decl></param>, <param><decl><type><name>unsigned</name></type> <name>short</name>*</decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ffi64_struct_contains_fp</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>ffi64_data_size</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
