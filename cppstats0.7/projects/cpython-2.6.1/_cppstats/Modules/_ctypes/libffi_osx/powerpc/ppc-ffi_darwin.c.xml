<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi_osx/powerpc/ppc-ffi_darwin.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffi_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ppc-darwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;architecture/ppc/mode_independent_asm.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libkern/OSCacheControl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> weak sys_icache_invalidate</cpp:pragma>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sys_icache_invalidate</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>start</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_ASM</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>aix_fd_struct</name> <block>{
<decl_stmt><decl><type><name>void</name>*</type> <name>code_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>toc</name></decl>;</decl_stmt>
}</block></struct></type> <name>aix_fd</name>;</typedef>
<function><type><name>void</name></type>
<name>ffi_prep_args</name><parameter_list>(
<param><decl><type><name>extended_cif</name>*</type> <name>inEcif</name></decl></param>,
<param><decl><type><name>unsigned</name> *<specifier>const</specifier></type> <name>stack</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><specifier>volatile</specifier> <name>extended_cif</name>*</type> <name>ecif</name> <init>= <expr><name>inEcif</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>bytes</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *<specifier>const</specifier></type> <name>longStack</name> <init>= <expr>(<name>unsigned</name> <name>long</name> *const)<name>stack</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *<specifier>const</specifier></type> <name>stacktop</name> <init>=
<expr>(<name>unsigned</name> <name>long</name> *)<call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr>(<name>char</name>*)<name>longStack</name> + <name>bytes</name> + 96</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *<specifier>const</specifier></type> <name>stacktop</name> <init>= <expr><name>longStack</name> + (<name>bytes</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof>)</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>double</name>*</type> <name>fpr_base</name> <init>= <expr><call>(<name>double</name>*)<argument_list>(<argument><expr><name>stacktop</name> - <name>ASM_NEEDS_REGISTERS</name></expr></argument>)</argument_list></call> -
<name>NUM_FPR_ARG_REGISTERS</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fpr_base</name> -= 2</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fparg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name>*</type> <name>next_arg</name> <init>= <expr><name>longStack</name> + 6</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>double_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>**</type> <name>p_argv</name> <init>= <expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>gprvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name>**</type> <name>ptr</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>stack</name> == <call><name>SF_ROUND</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>stacktop</name> == <call><name>SF_ROUND</name><argument_list>(<argument><expr><name>stacktop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>bytes</name> == <call><name>SF_ROUND</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>FLAG_RETVAL_REFERENCE</name></expr>)</condition><then>
<expr_stmt><expr>*<name>next_arg</name>++ = (<name>unsigned</name> <name>long</name>)(<name>char</name>*)<name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>double_tmp</name> = *(<name>float</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*(<name>double</name>*)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>double_tmp</name> = *(<name>double</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*(<name>double</name>*)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>fparg_count</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)<name>fpr_base</name> = *(<name>long</name> <name>double</name>*)*<name>p_argv</name></expr>;</expr_stmt></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if>if <condition>(<expr><name>fparg_count</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)<name>fpr_base</name> = *(<name>long</name> <name>double</name>*)*<name>p_argv</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>fparg_count</name> == <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name>*)<name>fpr_base</name> = *(<name>double</name>*)*<name>p_argv</name></expr>;</expr_stmt></then></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)<name>next_arg</name> = *(<name>long</name> <name>double</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>fpr_base</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>4</expr></argument>,<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gprvalue</name> = *(<name>long</name> <name>long</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr>*(<name>long</name> <name>long</name>*)<name>next_arg</name> = *(<name>long</name> <name>long</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>long</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>char</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>signed</name> <name>char</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>short</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>signed</name> <name>short</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gprSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fprSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ffi64_struct_to_reg_form</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>, <argument><expr>(<name>char</name>*)*<name>p_argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>fparg_count</name></expr></argument>,
<argument><expr>(<name>char</name>*)<name>next_arg</name></expr></argument>, <argument><expr>&amp;<name>gprSize</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>fpr_base</name></expr></argument>, <argument><expr>&amp;<name>fprSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name> += <name>gprSize</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>fpr_base</name> += <name>fprSize</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name>*</type> <name>dest_cpy</name> <init>= <expr>(<name>char</name>*)<name>next_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size_al</name> <init>= <expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr>0</expr>]</index>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>size_al</name> &lt; 3</expr>)</condition><then>
<expr_stmt><expr><name>dest_cpy</name> += 4 - <name>size_al</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name>*)<name>dest_cpy</name></expr></argument>, <argument><expr>(<name>char</name>*)*<name>p_argv</name></expr></argument>, <argument><expr><name>size_al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name>*)*<name>p_argv</name></expr>;</expr_stmt>
<label><name>putgpr</name>:</label>
<expr_stmt><expr>*<name>next_arg</name>++ = <name>gprvalue</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></for>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>bool</name></type>
<name>ffi64_struct_contains_fp</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>containsFP</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name> &amp;&amp; !<name>containsFP</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name> ||
<name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name> ||
<name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>containsFP</name> = <name>true</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name>containsFP</name> = <call><name>ffi64_struct_contains_fp</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
}</block></for>
<return>return <expr><name>containsFP</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name><parameter_list>(
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name>**</type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intarg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fparg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size_al</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes</name> <init>= <expr>(6 + <name>ASM_NEEDS_REGISTERS</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
<case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_128BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_FP</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_64BITS</name></expr>;</expr_stmt>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_FP</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_64BITS</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>ffi64_stret_needs_ptr</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETVAL_REFERENCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_STRUCT</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ffi64_struct_contains_fp</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_STRUCT_CONTAINS_FP</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETVAL_REFERENCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<for>for (<init><expr><name>ptr</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name>
&amp;&amp; <name>intarg_count</name> % 2 != 0</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>fparg_count</name> += 2</expr>;</expr_stmt>
<if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name> + 1
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
&amp;&amp; <name>intarg_count</name> % 2 != 0</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>intarg_count</name> += 2</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<if>if <condition>(<expr><name>intarg_count</name> == <name>NUM_GPR_ARG_REGISTERS</name> - 1
|| (<name>intarg_count</name> &gt;= <name>NUM_GPR_ARG_REGISTERS</name>
&amp;&amp; <name>intarg_count</name> % 2 != 0)</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>intarg_count</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>size_al</name> = <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr>0</expr>]</index>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr><name>j</name></expr>]</index> != <name>NULL</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr><name>j</name></expr>]</index>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name> ||
<name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr><name>j</name></expr>]</index>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr><name>j</name></expr>]</index>-&gt;<name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fparg_count</name> += 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name> + 1</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name> += 2</expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></else></if></else></if>
}</block></for>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>intarg_count</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<if>if <condition>(<expr><name>fparg_count</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>FLAG_FP_ARGUMENTS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>bytes</name> += (<name>NUM_FPR_ARG_REGISTERS</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>bytes</name> += <name>NUM_FPR_ARG_REGISTERS</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>intarg_count</name> + <name>fparg_count</name>) &gt; <name>NUM_GPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> += (<name>intarg_count</name> + <name>fparg_count</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if>if <condition>(<expr>(<name>intarg_count</name> + 2 * <name>fparg_count</name>) &gt; <name>NUM_GPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> += (<name>intarg_count</name> + 2 * <name>fparg_count</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<expr_stmt><expr><name>bytes</name> += <name>NUM_GPR_ARG_REGISTERS</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>bytes</name> = <call><name>SF_ROUND</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_AIX</name><parameter_list>(
<param><decl><type><name>extended_cif</name>*</type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name>*</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn2</name>)<parameter_list>(<param><decl><type><name>extended_cif</name>*</type></decl></param>, <param><decl><type><name>unsigned</name> *</type><param><decl><type><specifier>const</specifier></type></decl></param></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>ffi_call_DARWIN</name><parameter_list>(
<param><decl><type><name>extended_cif</name>*</type></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>long</name></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name>*</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn2</name>)<parameter_list>(<param><decl><type><name>extended_cif</name>*</type></decl></param>, <param><decl><type><name>unsigned</name> *</type><param><decl><type><specifier>const</specifier></type></decl></param></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>ffi_call</name><parameter_list>(
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name>*</type> <name>rvalue</name></decl></param>,
<param><decl><type><name>void</name>**</type> <name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp;
(<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_AIX</name></expr>:
<expr_stmt><expr><call><name>ffi_call_AIX</name><argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr>-<name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>ffi_prep_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_DARWIN</name></expr>:
<expr_stmt><expr><call><name>ffi_call_DARWIN</name><argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr>-(<name>long</name>)<name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>ffi_prep_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LINE_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_icache</name><parameter_list>(
<param><decl><type><name>char</name>*</type> <name>addr</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>volatile</specifier> (
"dcbf 0,%0\n"
"sync\n"
"icbi 0,%0\n"
"sync\n"
"isync"
: : "r" (addr) : "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_range</name><parameter_list>(
<param><decl><type><name>char</name>*</type> <name>addr</name></decl></param>,
<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name> += <name>MIN_LINE_SIZE</name></expr></incr>)
<expr_stmt><expr><call><name>flush_icache</name><argument_list>(<argument><expr><name>addr</name> + <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>flush_icache</name><argument_list>(<argument><expr><name>addr</name> + <name>size</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure</name><parameter_list>(
<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name>*</type> <name>user_data</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_DARWIN</name></expr>: <block>{
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name>*</type> <name>tramp</name> <init>= <expr>(<name>unsigned</name> <name>int</name>*)&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x7c0802a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x429f0005</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x7d6802a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x7c0803a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0xe98b0018</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0x7d8903a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0xe96b0020</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x4e800420</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name>*)&amp;<name><name>tramp</name><index>[<expr>8</expr>]</index></name> = (<name>unsigned</name> <name>long</name>)<name>ffi_closure_ASM</name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name>*)&amp;<name><name>tramp</name><index>[<expr>10</expr>]</index></name> = (<name>unsigned</name> <name>long</name>)<name>closure</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x7c0802a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x429f0005</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x7d6802a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x7c0803a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x818b0018</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0x7d8903a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0x816b001c</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x4e800420</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>8</expr>]</index></name> = (<name>unsigned</name> <name>long</name>)<name>ffi_closure_ASM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>9</expr>]</index></name> = (<name>unsigned</name> <name>long</name>)<name>closure</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>sys_icache_invalidate</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sys_icache_invalidate</name><argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name></expr></argument>, <argument><expr><name>FFI_TRAMPOLINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush_range</name><argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name></expr></argument>, <argument><expr><name>FFI_TRAMPOLINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_AIX</name></expr>: <block>{
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_AIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ffi_aix_trampoline_struct</name>*</type> <name>tramp_aix</name> <init>=
<expr><call>(<name>ffi_aix_trampoline_struct</name>*)<argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aix_fd</name>*</type> <name>fd</name> <init>= <expr>(<name>aix_fd</name>*)(<name>void</name>*)<name>ffi_closure_ASM</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>code_pointer</name></name> = <name><name>fd</name>-&gt;<name>code_pointer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>toc</name></name> = <name><name>fd</name>-&gt;<name>toc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>static_chain</name></name> = <name>closure</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><default>default:
<return>return <expr><name>FFI_BAD_ABI</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>double</name></type> <name><name>ldbits</name><index>[<expr>2</expr>]</index></name>;</typedef>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>ldbits</name></type> <name>lb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
}</block></union></type> <name>ldu</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type>
<name>ffi_closure_helper_DARWIN</name><parameter_list>(
<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>void</name>*</type> <name>rvalue</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>long</name>*</type> <name>pgr</name></decl></param>,
<param><decl><type><name>ffi_dblfl</name>*</type> <name>pfr</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ldu</name></type> <name>temp_ld</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>double</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nf</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ng</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name>*</type> <name>cif</name> <init>= <expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>avn</name> <init>= <expr><name><name>cif</name>-&gt;<name>nargs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>**</type> <name>avalue</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name>**</type> <name>arg_types</name> <init>= <expr><name><name>cif</name>-&gt;<name>arg_types</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name> &amp;&amp;
<call><name>ffi64_stret_needs_ptr</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><name>rvalue</name> = (<name>void</name>*)*<name>pgr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
}</block></then></if></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>avn</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>*)<name>pgr</name> + <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>3</expr></argument>,<argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>*)<name>pgr</name> + <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>*)<name>pgr</name> + <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gprSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fprSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>savedFPRSize</name> <init>= <expr><name>fprSize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffi64_struct_to_ram_form</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>(const <name>char</name>*)<name>pgr</name></expr></argument>,
<argument><expr>&amp;<name>gprSize</name></expr></argument>, <argument><expr>(const <name>char</name>*)<name>pfr</name></expr></argument>, <argument><expr>&amp;<name>fprSize</name></expr></argument>, <argument><expr>&amp;<name>nf</name></expr></argument>, <argument><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += <name>gprSize</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += <name>gprSize</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name> += (<name>fprSize</name> - <name>savedFPRSize</name>) / <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size_al</name> <init>= <expr><name>size_al</name> = <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name><name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>size_al</name> &lt; 3</expr>)</condition><then>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>*)<name>pgr</name> + <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>4</expr></argument>,<argument><expr>8</expr></argument>)</argument_list></call> - <name>size_al</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>*)<name>pgr</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>ng</name> += (<name>size_al</name> + 3) / <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += (<name>size_al</name> + 3) / <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>temp</name> = <name><name>pfr</name>-&gt;<name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfr</name>-&gt;<name>f</name></name> = (<name>float</name>)<name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name>++</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>nf</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name>++</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>nf</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>2</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name> += 2</expr>;</expr_stmt>
}</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name> += 2</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>nf</name> == <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>temp_ld</name>.<name>lb</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pfr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldbits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>temp_ld</name>.<name>lb</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pgr</name> + 2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldbits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>temp_ld</name>.<name>ld</name></name></expr>;</expr_stmt>
}</block></then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> undefined architecture</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name>nf</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>4</expr></argument>,<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += <call><name>MODE_CHOICE</name><argument_list>(<argument><expr>4</expr></argument>,<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>)<argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>ffi64_struct_to_ram_form</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>inGPRs</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioGPRMarker</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>inFPRs</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioFPRMarker</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioFPRsUsed</name></decl></param>,
<param><decl><type><name>char</name>*</type> <name>outStruct</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioStructMarker</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcGMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcFMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>savedFMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fprsUsed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>savedFPRsUsed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>destMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>recurseCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ioGPRMarker</name></expr>)</condition><then>
<expr_stmt><expr><name>srcGMarker</name> = *<name>ioGPRMarker</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRMarker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>srcFMarker</name> = *<name>ioFPRMarker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savedFMarker</name> = <name>srcFMarker</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ioFPRsUsed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fprsUsed</name> = *<name>ioFPRsUsed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savedFPRsUsed</name> = <name>fprsUsed</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ioStructMarker</name></expr>)</condition><then>
<expr_stmt><expr><name>destMarker</name> = *<name>ioStructMarker</name></expr>;</expr_stmt></then></if>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
</case><case>case <expr>2</expr>:
</case><case>case <expr>4</expr>:
<expr_stmt><expr><name>srcGMarker</name> += 8 - <name><name>inType</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>srcFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcFMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>float</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
(<name>float</name>)*(<name>double</name>*)&amp;<name><name>inFPRs</name><index>[<expr><name>srcFMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcFMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name>++</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*(<name>float</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
(<name>float</name>)*(<name>double</name>*)&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>srcGMarker</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> += 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> != <name>NULL</name> &amp;&amp; (<name>destMarker</name> % 8)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>FFI_TYPE_1_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> &amp;&amp;
(!<call><name>FFI_TYPE_2_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>srcGMarker</name>) &lt; 2) &amp;&amp;
(!<call><name>FFI_TYPE_4_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>srcGMarker</name>) &lt; 4)</expr>)</condition><then>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>srcFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcFMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>double</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>double</name>*)&amp;<name><name>inFPRs</name><index>[<expr><name>srcFMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcFMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name>++</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*(<name>double</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>double</name>*)&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>destMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>destMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>srcFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcFMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>long</name> <name>double</name>*)&amp;<name><name>inFPRs</name><index>[<expr><name>srcFMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcFMarker</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>srcFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcFMarker</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>long</name> <name>double</name>*)&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>destMarker</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>: <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>alignment</name></name> == 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name> == 1</expr>)</condition><then>
<expr_stmt><expr><name><name>outStruct</name><index>[<expr><name>destMarker</name>++</expr>]</index></name> = <name><name>inGPRs</name><index>[<expr><name>srcGMarker</name>++</expr>]</index></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outStruct</name><index>[<expr><name>destMarker</name>++</expr>]</index></name> = <name><name>inGPRs</name><index>[<expr><name>srcGMarker</name>++</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outStruct</name><index>[<expr><name>destMarker</name>++</expr>]</index></name> = <name><name>inGPRs</name><index>[<expr><name>srcGMarker</name>++</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name></expr></argument>,
<argument><expr>&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> += <name><name>inType</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> += <name><name>inType</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> += <name><name>inType</name>-&gt;<name>size</name></name> - 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>outStruct</name><index>[<expr><name>destMarker</name>++</expr>]</index></name> = <name><name>inGPRs</name><index>[<expr><name>srcGMarker</name>++</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> != <name>NULL</name> &amp;&amp; (<name>srcGMarker</name> % 8)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>FFI_TYPE_1_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> &amp;&amp;
(!<call><name>FFI_TYPE_2_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>srcGMarker</name>) &lt; 2) &amp;&amp;
(!<call><name>FFI_TYPE_4_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>srcGMarker</name>) &lt; 4)</expr>)</condition><then>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></else></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>short</name>*)&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>int</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>int</name>*)&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> += 4</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> <name>long</name>*)&amp;<name><name>outStruct</name><index>[<expr><name>destMarker</name></expr>]</index></name> =
*(<name>long</name> <name>long</name>*)&amp;<name><name>inGPRs</name><index>[<expr><name>srcGMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcGMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>destMarker</name> += 8</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>recurseCount</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffi64_struct_to_ram_form</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>inGPRs</name></expr></argument>,
<argument><expr>&amp;<name>srcGMarker</name></expr></argument>, <argument><expr><name>inFPRs</name></expr></argument>, <argument><expr>&amp;<name>srcFMarker</name></expr></argument>, <argument><expr>&amp;<name>fprsUsed</name></expr></argument>,
<argument><expr><name>outStruct</name></expr></argument>, <argument><expr>&amp;<name>destMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recurseCount</name>--</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><name>srcGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>recurseCount</name> == 0 &amp;&amp; <name>srcGMarker</name> == 16</expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outStruct</name><index>[<expr>0</expr>]</index></name> = *(<name>long</name> <name>double</name>*)&amp;<name><name>inGPRs</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcFMarker</name> = <name>savedFMarker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name> = <name>savedFPRsUsed</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ioGPRMarker</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioGPRMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRMarker</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioFPRMarker</name> = <name>srcFMarker</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRsUsed</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioFPRsUsed</name> = <name>fprsUsed</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioStructMarker</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioStructMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>ffi64_struct_to_reg_form</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>inStruct</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioStructMarker</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioFPRsUsed</name></decl></param>,
<param><decl><type><name>char</name>*</type> <name>outGPRs</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioGPRSize</name></decl></param>,
<param><decl><type><name>char</name>*</type> <name>outFPRs</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name>*</type> <name>ioFPRSize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>destGMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>destFMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>savedFMarker</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fprsUsed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>savedFPRsUsed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>recurseCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ioStructMarker</name></expr>)</condition><then>
<expr_stmt><expr><name>srcMarker</name> = *<name>ioStructMarker</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRsUsed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fprsUsed</name> = *<name>ioFPRsUsed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savedFPRsUsed</name> = <name>fprsUsed</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ioGPRSize</name></expr>)</condition><then>
<expr_stmt><expr><name>destGMarker</name> = *<name>ioGPRSize</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRSize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>destFMarker</name> = *<name>ioFPRSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savedFMarker</name> = <name>destFMarker</name></expr>;</expr_stmt>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
</case><case>case <expr>2</expr>:
</case><case>case <expr>4</expr>:
<expr_stmt><expr><name>destGMarker</name> += 8 - <name><name>inType</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>srcMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destFMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>outFPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name>*)&amp;<name><name>outFPRs</name><index>[<expr><name>destFMarker</name></expr>]</index></name> =
(<name>double</name>)*(<name>float</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>destFMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
(<name>double</name>)*(<name>float</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> != <name>NULL</name> &amp;&amp; (<name>srcMarker</name> % 8)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>FFI_TYPE_1_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> &amp;&amp;
(!<call><name>FFI_TYPE_2_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>destGMarker</name>) &lt; 2) &amp;&amp;
(!<call><name>FFI_TYPE_4_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>destGMarker</name>) &lt; 4)</expr>)</condition><then>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>srcMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destFMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>outFPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name>*)&amp;<name><name>outFPRs</name><index>[<expr><name>destFMarker</name></expr>]</index></name> =
*(<name>double</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>destFMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>double</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>srcMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>destFMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destFMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>outFPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outFPRs</name><index>[<expr><name>destFMarker</name></expr>]</index></name> =
*(<name>long</name> <name>double</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>long</name> <name>double</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>destFMarker</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>long</name> <name>double</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><name>srcMarker</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>alignment</name></name> == 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name> == 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> = <name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name> == 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> = <name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outGPRs</name><index>[<expr><name>destGMarker</name> + 1</expr>]</index></name> = <name><name>inStruct</name><index>[<expr><name>srcMarker</name> + 1</expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>srcMarker</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>long</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name></expr></argument>,
<argument><expr>&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name>srcMarker</name> += <name><name>inType</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += <name><name>inType</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> += <name><name>inType</name>-&gt;<name>size</name></name> - 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> = <name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> != <name>NULL</name> &amp;&amp; (<name>destGMarker</name> % 8)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>FFI_TYPE_1_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> &amp;&amp;
(!<call><name>FFI_TYPE_2_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>destGMarker</name>) &lt; 2) &amp;&amp;
(!<call><name>FFI_TYPE_4_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call> ||
(<call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> - <name>destGMarker</name>) &lt; 4)</expr>)</condition><then>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name>srcMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>short</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>short</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr><name>srcMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>int</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>int</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 4</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr><name>srcMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>long</name>*)&amp;<name><name>outGPRs</name><index>[<expr><name>destGMarker</name></expr>]</index></name> =
*(<name>long</name> <name>long</name>*)&amp;<name><name>inStruct</name><index>[<expr><name>srcMarker</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>srcMarker</name> += 8</expr>;</expr_stmt>
<expr_stmt><expr><name>destGMarker</name> += 8</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>recurseCount</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffi64_struct_to_reg_form</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>inStruct</name></expr></argument>, <argument><expr>&amp;<name>srcMarker</name></expr></argument>, <argument><expr>&amp;<name>fprsUsed</name></expr></argument>, <argument><expr><name>outGPRs</name></expr></argument>,
<argument><expr>&amp;<name>destGMarker</name></expr></argument>, <argument><expr><name>outFPRs</name></expr></argument>, <argument><expr>&amp;<name>destFMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recurseCount</name>--</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><name>destGMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr><name><name>inType</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>recurseCount</name> == 0 &amp;&amp; <name>destGMarker</name> == 16</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>outGPRs</name> != <name>NULL</name> &amp;&amp; <name>inStruct</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>long</name> <name>double</name>*)&amp;<name><name>outGPRs</name><index>[<expr>0</expr>]</index></name> = *(<name>long</name> <name>double</name>*)&amp;<name><name>inStruct</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>destFMarker</name> = <name>savedFMarker</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name> = <name>savedFPRsUsed</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ioStructMarker</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioStructMarker</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>srcMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRsUsed</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioFPRsUsed</name> = <name>fprsUsed</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioGPRSize</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioGPRSize</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destGMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRSize</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioFPRSize</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>destFMarker</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>bool</name></type>
<name>ffi64_stret_needs_ptr</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>short</name>*</type> <name>ioGPRCount</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>short</name>*</type> <name>ioFPRCount</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>size</name></name> &gt; 14 * 8</expr>)</condition><then>
<return>return <expr><name>true</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>bool</name></type> <name>needsPtr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>gprsUsed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>fprsUsed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ioGPRCount</name></expr>)</condition><then>
<expr_stmt><expr><name>gprsUsed</name> = *<name>ioGPRCount</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRCount</name></expr>)</condition><then>
<expr_stmt><expr><name>fprsUsed</name> = *<name>ioFPRCount</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name> &amp;&amp; !<name>needsPtr</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>gprsUsed</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &gt; 13</expr>)</condition><then>
<expr_stmt><expr><name>needsPtr</name> = <name>true</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>gprsUsed</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>fprsUsed</name> += 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fprsUsed</name> &gt; 14</expr>)</condition><then>
<expr_stmt><expr><name>needsPtr</name> = <name>true</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>: <block>{
<expr_stmt><expr><name>gprsUsed</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>gprsUsed</name> &gt; 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name>needsPtr</name> = <name>true</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + 1</expr>]</index></name> == <name>NULL</name></expr>)</condition><then>
<break>break;</break></then></if>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 1</expr>;</init> <condition><expr><name>j</name> &lt; 8</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + <name>j</name></expr>]</index></name> == <name>NULL</name> ||
!<call><name>FFI_TYPE_1_BYTE</name><argument_list>(<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name> + <name>j</name></expr>]</index></name>-&gt;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><name>i</name> += <name>j</name> - 1</expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr><name>gprsUsed</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>gprsUsed</name> &gt; 8</expr>)</condition><then>
<expr_stmt><expr><name>needsPtr</name> = <name>true</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>needsPtr</name> = <call><name>ffi64_stret_needs_ptr</name><argument_list>(
<argument><expr><name><name>inType</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>gprsUsed</name></expr></argument>, <argument><expr>&amp;<name>fprsUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<if>if <condition>(<expr><name>ioGPRCount</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioGPRCount</name> = <name>gprsUsed</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ioFPRCount</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ioFPRCount</name> = <name>fprsUsed</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>needsPtr</name></expr>;</return>
}</block></function>
<function><type><name>unsigned</name> <name>int</name></type>
<name>ffi64_data_size</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>ffi_type</name>*</type> <name>inType</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>inType</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name>size</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name>size</name> = 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>size</name> = 4</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>size</name> = 8</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>size</name> = 16</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><call><name>ffi64_struct_to_reg_form</name><argument_list>(
<argument><expr><name>inType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>size</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
