<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi_osx/types.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_INTEGRAL_TYPEDEF</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>a</name></type></param>, <param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ffi_type ffi_type_##n = { s, a, t, NULL }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_AGGREGATE_TYPEDEF</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ffi_type ffi_type_##n = { 0, 0, FFI_TYPE_STRUCT, e }</cpp:value></cpp:define>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint8</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>FFI_TYPE_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint8</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>FFI_TYPE_SINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint16</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>FFI_TYPE_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint16</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>FFI_TYPE_SINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint32</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint32</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_SINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>FFI_TYPE_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ALPHA</name> || <name>defined</name> <name>SPARC64</name> || <name>defined</name> <name>X86_64</name> || <name>defined</name> <name>S390X</name> || <name>defined</name> <name>IA64</name> || <name>defined</name> <name>POWERPC64</name></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>X86</name> || <name>defined</name> <name>ARM</name> || <name>defined</name> <name>M68K</name> || <call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_SINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_SINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_SINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SH</name></expr></cpp:elif>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_SINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>uint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>sint64</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_SINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>X86</name> || <name>defined</name> <name>X86_WIN32</name> || <name>defined</name> <name>M68K</name> || <call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>X86_WIN32</name> || <name>defined</name> <name>X86_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>ARM</name> || <name>defined</name> <name>SH</name> || <name>defined</name> <name>POWERPC_AIX</name></expr></cpp:elif>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>POWERPC_DARWIN</name></expr></cpp:elif>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> &gt;= 4</expr></cpp:if>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SPARC</name></expr></cpp:elif>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>X86_64</name> || <name>defined</name> <name>POWERPC64</name></expr></cpp:elif>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_INTEGRAL_TYPEDEF</name><argument_list>(<argument><expr><name>longdouble</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>FFI_TYPE_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
