<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi_osx/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_ARG_SIZE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ALIGN(x, FFI_SIZEOF_ARG)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>ffi_status</name></type>
<name>initialize_aggregate</name><parameter_list>(
<param><decl><type><name>ffi_type</name>*</type> <name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>arg</name> == <name>NULL</name> || <name><name>arg</name>-&gt;<name>elements</name></name> == <name>NULL</name> ||
<name><name>arg</name>-&gt;<name>size</name></name> != 0 || <name><name>arg</name>-&gt;<name>alignment</name></name> != 0</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>ffi_type</name>**</type> <name>ptr</name> <init>= <expr>&amp;(<name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>)</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>(*<name>ptr</name>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>size</name></name> == 0) &amp;&amp; (<call><name>initialize_aggregate</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call> != <name>FFI_OK</name>)</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_ASSERT_VALID_TYPE</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POWERPC_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>curalign</name> <init>= <expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ptr</name> != &amp;(<name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>curalign</name> &gt; 4 &amp;&amp; <name>curalign</name> != 16</expr>)</condition><then>
<expr_stmt><expr><name>curalign</name> = 4</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name>curalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>size</name></name> += <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>alignment</name></name> = (<name><name>arg</name>-&gt;<name>alignment</name></name> &gt; <name>curalign</name>) ?
<name><name>arg</name>-&gt;<name>alignment</name></name> : <name>curalign</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>size</name></name> += <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>alignment</name></name> = (<name><name>arg</name>-&gt;<name>alignment</name></name> &gt; <name>(*<name>ptr</name>)-&gt;<name>alignment</name></name>) ?
<name><name>arg</name>-&gt;<name>alignment</name></name> : <name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name><name>arg</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__CRIS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>struct_on_stack</name><parameter_list>(
<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>size</name> &gt; 8</expr>)</condition><then>
<return>return <expr><name>true</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
</case><case>case <expr>2</expr>:
</case><case>case <expr>4</expr>:
</case><case>case <expr>8</expr>:
<return>return <expr><name>false</name></expr>;</return>
</case><default>default:
<return>return <expr><name>true</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif</name><parameter_list>(
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><decl><type><name>ffi_abi</name></type> <name>abi</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>nargs</name></decl></param>,
<param><decl><type><name>ffi_type</name>*</type> <name>rtype</name></decl></param>,
<param><decl><type><name>ffi_type</name>**</type> <name>atypes</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>cif</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>abi</name> &lt;= <name>FFI_FIRST_ABI</name> || <name>abi</name> &gt; <name>FFI_DEFAULT_ABI</name></expr>)</condition><then>
<return>return <expr><name>FFI_BAD_ABI</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name>**</type> <name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>abi</name></name> = <name>abi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>arg_types</name></name> = <name>atypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>nargs</name></name> = <name>nargs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>rtype</name></name> = <name>rtype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> == 0) &amp;&amp; (<call><name>initialize_aggregate</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> != <name>FFI_OK</name>)</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_ASSERT_VALID_TYPE</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>defined</name> <name>M68K</name> &amp;&amp; !<name>defined</name> <name>__x86_64__</name> &amp;&amp; !<name>defined</name> <name>S390</name> &amp;&amp; !<name>defined</name> <name>PA</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC</name></expr></argument>)</argument_list></call></expr></cpp:if>
&amp;&amp; (<name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_V9</name> || <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> &gt; 32)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
&amp;&amp; (<call><name>struct_on_stack</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call>)</expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then>
<expr_stmt><expr><name>bytes</name> = <call><name>STACK_ARG_SIZE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>ptr</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>size</name></name> == 0) &amp;&amp; (<call><name>initialize_aggregate</name><argument_list>(<argument><expr>(*<name>ptr</name>)</expr></argument>)</argument_list></call> != <name>FFI_OK</name>)</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_ASSERT_VALID_TYPE</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X86_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>align</name> &gt; 4</expr>)</condition><then>
<expr_stmt><expr><name>align</name> = 4</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>align</name> - 1) &amp; <name>bytes</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>bytes</name> += <call><name>STACK_ARG_SIZE</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>!<name>defined</name> <name>__x86_64__</name> &amp;&amp; !<name>defined</name> <name>S390</name> &amp;&amp; !<name>defined</name> <name>PA</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
&amp;&amp; (<name>(*<name>ptr</name>)-&gt;<name>size</name></name> &gt; 16 || <name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_V9</name>))
|| (<name>(*<name>ptr</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_LONGDOUBLE</name>
&amp;&amp; <name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_V9</name>)</expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>alignment</name></name> - 1) &amp; <name>bytes</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>bytes</name> += <call><name>STACK_ARG_SIZE</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><call><name>ffi_prep_cif_machdep</name><argument_list>(<argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
