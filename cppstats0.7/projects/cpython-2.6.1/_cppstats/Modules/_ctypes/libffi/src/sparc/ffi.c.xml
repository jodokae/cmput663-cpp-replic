<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi/src/sparc/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>ffi_prep_args_v8</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>argp</name> = <name>stack</name> + 16*<sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>int</name> *) <name>argp</name> = (<name>long</name>)<name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_PURIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>((<name>int</name>*)<name>argp</name>)<index>[<expr>0</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>int</name>*)<name>argp</name>)<index>[<expr>1</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>int</name>*)<name>argp</name>)<index>[<expr>2</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>int</name>*)<name>argp</name>)<index>[<expr>3</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>int</name>*)<name>argp</name>)<index>[<expr>4</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>int</name>*)<name>argp</name>)<index>[<expr>5</expr>]</index> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
|| <name>(*<name>p_arg</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then> <block>{
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = <call>(<name>unsigned</name> <name>long</name>)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><name>z</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = *<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = *<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = *<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = *<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
}</block></for>
<return>return;</return>
}</block></function>
<function><type><name>int</name></type> <name>ffi_prep_args_v9</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> = <name>stack</name> + 16*sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_PURIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>((<name>long</name> <name>long</name>*)<name>argp</name>)<index>[<expr>0</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>long</name> <name>long</name>*)<name>argp</name>)<index>[<expr>1</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>long</name> <name>long</name>*)<name>argp</name>)<index>[<expr>2</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>long</name> <name>long</name>*)<name>argp</name>)<index>[<expr>3</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>long</name> <name>long</name>*)<name>argp</name>)<index>[<expr>4</expr>]</index> = 0</expr>;</expr_stmt>
<expr_stmt><expr>((<name>long</name> <name>long</name>*)<name>argp</name>)<index>[<expr>5</expr>]</index> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name> &amp;&amp;
<name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> &gt; 32</expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>argp</name> = (<name>unsigned</name> <name>long</name>)<name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition>
<incr><expr><name>i</name>++</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<if>if <condition>(<expr><name>z</name> &gt; 16</expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>argp</name> = (<name>unsigned</name> <name>long</name>)* <name>p_argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ret</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<if>if <condition>(<expr><name>z</name> &lt; sizeof(<name>long</name> <name>long</name>)</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>long</name> <name>long</name> *) <name>argp</name> = *<call>(<name>SINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>argp</name> = *<call>(<name>UINT8</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>long</name> <name>long</name> *) <name>argp</name> = *<call>(<name>SINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>argp</name> = *<call>(<name>UINT16</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>long</name> <name>long</name> *) <name>argp</name> = *<call>(<name>SINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>argp</name> = *<call>(<name>UINT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr>*<call>(<name>float</name> *) <argument_list>(<argument><expr><name>argp</name> + 4</expr></argument>)</argument_list></call> = *<call>(<name>FLOAT32</name> *)<argument_list>(<argument><expr>* <name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name>z</name> = sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>z</name> == sizeof(<name>long</name> <name>long</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> = sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>tmp</name> &amp; 1) &amp;&amp; <name>(*<name>p_arg</name>)-&gt;<name>alignment</name></name> &gt; 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name>tmp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> = 2 * sizeof(<name>long</name> <name>long</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> += 2</expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>wordsize</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_V9</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wordsize</name> = 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> += <name>wordsize</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>bytes</name></name> &lt; 4*6+4</expr>)</condition><then>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = 4*6+4</expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>wordsize</name> = 8</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>bytes</name></name> &lt; 8*6</expr>)</condition><then>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = 8*6</expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> += 16 * <name>wordsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr>2 * <name>wordsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_VOID</name></expr>:
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_V9</name> &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> &gt; 32</expr>)</condition><then>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_VOID</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> != <name>FFI_V9</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_SINT64</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ffi_v9_layout_struct</name><parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>char</name> *</type><name>ret</name></decl></param>, <param><decl><type><name>char</name> *</type><name>intg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>flt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name> <init>= <expr>&amp;<name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>ptr</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>off</name> &amp; (<name>(*<name>ptr</name>)-&gt;<name>alignment</name></name> - 1)</expr>)</condition><then>
<expr_stmt><expr><name>off</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>off</name> = <call><name>ffi_v9_layout_struct</name><argument_list>(<argument><expr>*<name>ptr</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>intg</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ret</name> + <name>off</name></expr></argument>, <argument><expr><name>flt</name> + <name>off</name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> += <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ret</name> + <name>off</name></expr></argument>, <argument><expr><name>intg</name> + <name>off</name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> += <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>off</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ffi_call_v9</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ffi_call_v8</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>rval</name> <init>= <expr><name>rvalue</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> &lt;= 32</expr>)</condition><then>
<expr_stmt><expr><name>rval</name> = <call><name>alloca</name><argument_list>(<argument><expr>64</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>rval</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rvalue</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_V8</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ffi_call_v8</name><argument_list>(<argument><expr><name>ffi_prep_args_v8</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>FFI_V9</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ffi_call_v9</name><argument_list>(<argument><expr><name>ffi_prep_args_v9</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rvalue</name> &amp;&amp; <name>rval</name> &amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ffi_v9_layout_struct</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>char</name> *)<name>rvalue</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>rval</name></expr></argument>, <argument><expr>((<name>char</name> *)<name>rval</name>)+32</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_v9</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_v8</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name> <init>= <expr>(<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_V9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> = (<name>unsigned</name> <name>long</name>) <name>ffi_closure_v9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x83414000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0xca586010</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x81c14000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x01000000</expr>;</expr_stmt>
<expr_stmt><expr>*((<name>unsigned</name> <name>long</name> *) &amp;<name><name>tramp</name><index>[<expr>4</expr>]</index></name>) = <name>fn</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ctx</name> <init>= <expr>(<name>unsigned</name> <name>long</name>) <name>codeloc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_V8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> = (<name>unsigned</name> <name>long</name>) <name>ffi_closure_v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x03000000 | <name>fn</name> &gt;&gt; 10</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x05000000 | <name>ctx</name> &gt;&gt; 10</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = 0x81c06000 | (<name>fn</name> &amp; 0x3ff)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = 0x8410a000 | (<name>ctx</name> &amp; 0x3ff)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>asm <specifier>volatile</specifier> ("flush %0" : : "r" (closure) : "memory");</asm>
<asm>asm <specifier>volatile</specifier> ("flush %0" : : "r" (((char *) closure) + 8) : "memory");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<asm>asm <specifier>volatile</specifier> ("iflush %0" : : "r" (closure) : "memory");</asm>
<asm>asm <specifier>volatile</specifier> ("iflush %0" : : "r" (((char *) closure) + 8) : "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>ffi_closure_sparc_inner_v8</name><parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name> *</type><name>gpr</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name> *</type><name>scratch</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>argn</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avalue</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_STRUCT</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
|| <name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then>
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *) <name><name>gpr</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>argn</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_STRUCT</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
|| <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>void</name> *)<name><name>gpr</name><index>[<expr><name>argn</name>++</expr>]</index></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>
|| <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_SINT64</name>
|| <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_UINT64</name>)
&amp;&amp; (<name>argn</name> % 2) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>scratch</name><index>[<expr>0</expr>]</index></name> = <name><name>gpr</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scratch</name><index>[<expr>1</expr>]</index></name> = <name><name>gpr</name><index>[<expr><name>argn</name>+1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>scratch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scratch</name> -= 2</expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> += 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>argn</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>char</name> *) &amp;<name><name>gpr</name><index>[<expr><name>argn</name></expr>]</index></name>) - <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>ffi_closure_sparc_inner_v9</name><parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name> *</type><name>gpr</name></decl></param>, <param><decl><type><name>double</name> *</type><name>fpr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>argn</name></decl>, <decl><type ref="prev"/><name>fp_slot_max</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avalue</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>flags</name></name> == <name>FFI_TYPE_VOID</name>
&amp;&amp; <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *) <name><name>gpr</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>argn</name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>fp_slot_max</name> = 16 - <name>argn</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name> &gt; 16</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>void</name> *)<name><name>gpr</name><index>[<expr><name>argn</name>++</expr>]</index></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ffi_v9_layout_struct</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr>(<name>char</name> *) &amp;<name><name>gpr</name><index>[<expr><name>argn</name></expr>]</index></name></expr></argument>,
<argument><expr>(<name>char</name> *) &amp;<name><name>gpr</name><index>[<expr><name>argn</name></expr>]</index></name></expr></argument>,
<argument><expr>(<name>char</name> *) &amp;<name><name>fpr</name><index>[<expr><name>argn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>gpr</name><index>[<expr><name>argn</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>argn</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>argn</name> += <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>FFI_SIZEOF_ARG</name></expr></argument>)</argument_list></call> / <name>FFI_SIZEOF_ARG</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; <name>fp_slot_max</name>
&amp;&amp; (<name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_FLOAT</name>
|| <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
|| <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</expr>)</condition><then>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>char</name> *) &amp;<name><name>fpr</name><index>[<expr><name>argn</name></expr>]</index></name>) - <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>char</name> *) &amp;<name><name>gpr</name><index>[<expr><name>argn</name></expr>]</index></name>) - <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></function>
</unit>
