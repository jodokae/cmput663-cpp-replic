<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi/src/powerpc/asm.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_GLOBAL_DIRECTIVE</name></cpp:macro> <cpp:value>.globl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SYMBOL_NAME</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_LABEL</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name##:</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_LABEL</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name:</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNARG</name><parameter_list>(<param><type><name>log2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>log2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_TYPE_DIRECTIVE</name><parameter_list>(<param><type><name>name</name></type></param>,<param><type><name>typearg</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.type name,typearg;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SIZE_DIRECTIVE</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.size name,.-name</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MCOUNT</name></cpp:macro> <cpp:value>.pushsection; .section ".data"; .align ALIGNARG(2); 0:.long 0; .previous; mflr %r0; stw %r0,4(%r1); bl _GLOBAL_OFFSET_TABLE_@local-4; mflr %r11; lwz %r0,0b@got(%r11); bl JUMPTARGET(_mcount);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MCOUNT</name></cpp:macro> <cpp:value>.section ".data"; .align ALIGNARG(2); 0:.long 0; .previous; mflr %r0; lis %r11,0b@ha; stw %r0,4(%r1); addi %r0,%r11,0b@l; bl JUMPTARGET(_mcount);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MCOUNT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTRY</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(name); ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(name),@function) .align ALIGNARG(2); C_LABEL(name) CALL_MCOUNT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_0</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_1</name></cpp:macro> <cpp:value>nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_2</name></cpp:macro> <cpp:value>nop;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_3</name></cpp:macro> <cpp:value>nop;nop;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_4</name></cpp:macro> <cpp:value>EALIGN_W_3;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_5</name></cpp:macro> <cpp:value>EALIGN_W_4;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_6</name></cpp:macro> <cpp:value>EALIGN_W_5;nop</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN_W_7</name></cpp:macro> <cpp:value>EALIGN_W_6;nop</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>alignt</name></type></param>, <param><type><name>words</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(name); ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(name),@function) .align ALIGNARG(2); C_LABEL(name) CALL_MCOUNT b 0f; .align ALIGNARG(alignt); EALIGN_W_##words; 0:</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALIGN</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>alignt</name></type></param>, <param><type><name>words</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(name); ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(name),@function) .align ALIGNARG(alignt); EALIGN_W_##words; C_LABEL(name)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ASM_SIZE_DIRECTIVE(name)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMPTARGET</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name##@plt</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMPTARGET</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>.L##x</cpp:value></cpp:define>
</unit>
