<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi/src/s390/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GPRARGS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FPRARGS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FPRARGS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_SIZE</name><parameter_list>(<param><type><name>size</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((size) + 15) &amp; ~15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI390_RET_VOID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI390_RET_STRUCT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI390_RET_FLOAT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI390_RET_DOUBLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI390_RET_INT32</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI390_RET_INT64</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ffi_prep_args</name> <parameter_list>(<param><decl><type><name>unsigned</name></type> <name>char</name> *</decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> &gt; 3 || (<name>__GNUC__</name> == 3 &amp;&amp; <name>__GNUC_MINOR__</name> &gt; 2)</expr></cpp:if>
<name>__attribute__</name> <argument_list>(<argument><expr>(<call><name>visibility</name> <argument_list>(<argument><expr>"hidden"</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>ffi_closure_helper_SYSV</name> <argument_list>(<argument><expr><name>ffi_closure</name> *</expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> *</expr></argument>,
<argument><expr><name>unsigned</name> <name>long</name> <name>long</name> *</expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> *</expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_SYSV</name><parameter_list>(<param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>extended_cif</name> *</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*)<parameter_list>(<param><decl><type><name>unsigned</name></type> <name>char</name> *</decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>,
<param><decl><type><name>void</name> *</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_SYSV</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ffi_check_struct_type</name> <parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>arg</name>-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>arg</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
&amp;&amp; <name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name> &amp;&amp; !<name><name>arg</name>-&gt;<name>elements</name><index>[<expr>1</expr>]</index></name></expr>)</condition>
<expr_stmt><expr><name>arg</name> = <name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></while>
<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<return>return <expr><name>FFI_TYPE_UINT8</name></expr>;</return>
</case><case>case <expr>2</expr>:
<return>return <expr><name>FFI_TYPE_UINT16</name></expr>;</return>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr><name><name>arg</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_FLOAT</name></expr>)</condition><then>
<return>return <expr><name>FFI_TYPE_FLOAT</name></expr>;</return></then>
<else>else
<return>return <expr><name>FFI_TYPE_UINT32</name></expr>;</return></else></if>
</case><case>case <expr>8</expr>:
<if>if <condition>(<expr><name><name>arg</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name></expr>)</condition><then>
<return>return <expr><name>FFI_TYPE_DOUBLE</name></expr>;</return></then>
<else>else
<return>return <expr><name>FFI_TYPE_UINT64</name></expr>;</return></else></if>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>FFI_TYPE_POINTER</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ffi_prep_args</name> <parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>gpr_off</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fpr_off</name> <init>= <expr><name>gpr_off</name> + <call><name>ROUND_SIZE</name> <argument_list>(<argument><expr><name>MAX_GPRARGS</name> * <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> *</type><name>p_fpr</name> <init>= <expr><call>(<name>unsigned</name> <name>long</name> <name>long</name> *)<argument_list>(<argument><expr><name>stack</name> + <name>fpr_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>p_gpr</name> <init>= <expr><call>(<name>unsigned</name> <name>long</name> *)<argument_list>(<argument><expr><name>stack</name> + <name>gpr_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p_struct</name> <init>= <expr>(<name>unsigned</name> <name>char</name> *)<name>p_gpr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>p_ov</name> <init>= <expr>(<name>unsigned</name> <name>long</name> *)<name>stack</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_fpr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_gpr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_ov</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name> <init>= <expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name> == <name>FFI390_RET_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = (<name>unsigned</name> <name>long</name>) <name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>ptr</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>;</init>
<condition><expr><name>i</name> &gt; 0</expr>;</condition>
<incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>arg</name> <init>= <expr>*<name>p_argv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>type</name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <call><name>ffi_check_struct_type</name> <argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_POINTER</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p_struct</name> -= <call><name>ROUND_SIZE</name> <argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p_struct</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>arg</name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> = &amp;<name>p_struct</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>n_fpr</name> &lt; <name>MAX_FPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_fpr</name><index>[<expr><name>n_fpr</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>arg</name>)<index>[<expr>0</expr>]</index></expr>,
<expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>arg</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>n_fpr</name> &lt; <name>MAX_FPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_fpr</name><index>[<expr><name>n_fpr</name>++</expr>]</index></name> = (<name>long</name> <name>long</name>) *(<name>unsigned</name> <name>int</name> *) <name>arg</name> &lt;&lt; 32</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>int</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = (<name>unsigned</name> <name>long</name>)*(<name>unsigned</name> <name>char</name> **) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = (<name>unsigned</name> <name>long</name>)*(<name>unsigned</name> <name>char</name> **) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>n_gpr</name> == <name>MAX_GPRARGS</name>-1</expr>)</condition><then>
<expr_stmt><expr><name>n_gpr</name> = <name>MAX_GPRARGS</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>arg</name>)<index>[<expr>0</expr>]</index></expr>,
<expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>arg</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>arg</name>)<index>[<expr>0</expr>]</index></expr>,
<expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>arg</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>int</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>int</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>signed</name> <name>int</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>signed</name> <name>int</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>short</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>short</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>signed</name> <name>short</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>signed</name> <name>short</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>char</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>unsigned</name> <name>char</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> = *(<name>signed</name> <name>char</name> *) <name>arg</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> = *(<name>signed</name> <name>char</name> *) <name>arg</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>struct_size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_gpr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_fpr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_ov</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_VOID</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_VOID</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_STRUCT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_gpr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_FLOAT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_DOUBLE</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_STRUCT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_gpr</name>++</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_INT64</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_INT64</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI390_RET_INT32</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<for>for (<init><expr><name>ptr</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</init>
<condition><expr><name>i</name> &gt; 0</expr>;</condition>
<incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>type</name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <call><name>ffi_check_struct_type</name> <argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_POINTER</name></expr>)</condition><then>
<expr_stmt><expr><name>struct_size</name> += <call><name>ROUND_SIZE</name> <argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>n_fpr</name> &lt; <name>MAX_FPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name>n_fpr</name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>n_ov</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>n_fpr</name> &lt; <name>MAX_FPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name>n_fpr</name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>n_ov</name>++</expr>;</expr_stmt></else></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> == <name>MAX_GPRARGS</name>-1</expr>)</condition><then>
<expr_stmt><expr><name>n_gpr</name> = <name>MAX_GPRARGS</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name>n_gpr</name> += 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>n_ov</name> += 2</expr>;</expr_stmt></else></if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr><name>n_gpr</name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>n_ov</name>++</expr>;</expr_stmt></else></if>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <call><name>ROUND_SIZE</name> <argument_list>(<argument><expr><name>n_ov</name> * <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> + <name>struct_size</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret_type</name> <init>= <expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rvalue</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ret_type</name> == <name>FFI390_RET_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ret_type</name> = <name>FFI390_RET_VOID</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_SYSV</name></expr>:
<expr_stmt><expr><call><name>ffi_call_SYSV</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name>ffi_prep_args</name></expr></argument>,
<argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><name>void</name></type>
<name>ffi_closure_helper_SYSV</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>long</name> *</type><name>p_gpr</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>long</name> <name>long</name> *</type><name>p_fpr</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>long</name> *</type><name>p_ov</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ret_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>rvalue</name> <init>= <expr>&amp;<name>ret_buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_gpr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_fpr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_ov</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_arg</name> = <name>avalue</name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>closure</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name> == <name>FFI390_RET_STRUCT</name></expr>)</condition><then>
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *) <name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>ptr</name> = <name><name>closure</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>closure</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>;</init>
<condition><expr><name>i</name> &gt; 0</expr>;</condition>
<incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr>, <expr><name>ptr</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>deref_struct_pointer</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_LONGDOUBLE</name></expr>)</condition><then>
<expr_stmt><expr><name>type</name> = <name>FFI_TYPE_STRUCT</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>type</name> = <call><name>ffi_check_struct_type</name> <argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_POINTER</name></expr>)</condition><then>
<expr_stmt><expr><name>deref_struct_pointer</name> = 1</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> == <name>FFI_TYPE_POINTER</name></expr>)</condition><then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>type</name> = <name>FFI_TYPE_UINT64</name></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>type</name> = <name>FFI_TYPE_UINT32</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>n_fpr</name> &lt; <name>MAX_FPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_fpr</name><index>[<expr><name>n_fpr</name>++</expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name></expr>]</index></name></expr>,
<expr><name>n_ov</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>n_fpr</name> &lt; <name>MAX_FPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_fpr</name><index>[<expr><name>n_fpr</name>++</expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 4</expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>n_gpr</name> == <name>MAX_GPRARGS</name>-1</expr>)</condition><then>
<expr_stmt><expr><name>n_gpr</name> = <name>MAX_GPRARGS</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_gpr</name><index>[<expr><name>n_gpr</name></expr>]</index></name></expr>, <expr><name>n_gpr</name> += 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = &amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name></expr>]</index></name></expr>, <expr><name>n_ov</name> += 2</expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 4</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 4</expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 2</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 2</expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<if>if <condition>(<expr><name>n_gpr</name> &lt; <name>MAX_GPRARGS</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_gpr</name><index>[<expr><name>n_gpr</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>p_arg</name> = (<name>char</name> *)&amp;<name><name>p_ov</name><index>[<expr><name>n_ov</name>++</expr>]</index></name> + <sizeof>sizeof <argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt></else></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>deref_struct_pointer</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_arg</name> = *(<name>void</name> **)*<name>p_arg</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>closure</name>-&gt;<name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_VOID</name></expr>:
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name><name>p_fpr</name><index>[<expr>0</expr>]</index></name> = (<name>long</name> <name>long</name>) *(<name>unsigned</name> <name>int</name> *) <name>rvalue</name> &lt;&lt; 32</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name><name>p_fpr</name><index>[<expr>0</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> <name>long</name> *) <name>rvalue</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr>0</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> *) <name>rvalue</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr>0</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>rvalue</name>)<index>[<expr>0</expr>]</index></expr>,
<expr><name><name>p_gpr</name><index>[<expr>1</expr>]</index></name> = ((<name>unsigned</name> <name>long</name> *) <name>rvalue</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr>0</expr>]</index></name> = *(<name>unsigned</name> <name>long</name> *) <name>rvalue</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name><name>p_gpr</name><index>[<expr>0</expr>]</index></name> = *(<name>signed</name> <name>long</name> *) <name>rvalue</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name> *</type><name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>) <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>0</expr>]</index></name> = 0x0d10</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>2</expr>]</index></name> = 0x9801</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>4</expr>]</index></name> = 0x1006</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>6</expr>]</index></name> = 0x07f1</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>8</expr>]</index></name> = (<name>long</name>)<name>codeloc</name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>12</expr>]</index></name> = (<name>long</name>)&amp;<name>ffi_closure_SYSV</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>0</expr>]</index></name> = 0x0d10</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>2</expr>]</index></name> = 0xeb01</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>4</expr>]</index></name> = 0x100e</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>6</expr>]</index></name> = 0x0004</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>short</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name> <index>[<expr>8</expr>]</index></name> = 0x07f1</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>16</expr>]</index></name> = (<name>long</name>)<name>codeloc</name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>long</name> *)&amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>24</expr>]</index></name> = (<name>long</name>)&amp;<name>ffi_closure_SYSV</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
</unit>
