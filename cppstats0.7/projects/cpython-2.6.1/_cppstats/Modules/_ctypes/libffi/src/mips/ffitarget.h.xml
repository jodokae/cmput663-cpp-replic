<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi/src/mips/ffitarget.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LIBFFI_TARGET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBFFI_TARGET_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/sgidefs.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_ABIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABIN32</name></cpp:macro> <cpp:value>_MIPS_SIM_NABI32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_ABI64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABI64</name></cpp:macro> <cpp:value>_MIPS_SIM_ABI64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_ABIO32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABIO32</name></cpp:macro> <cpp:value>_MIPS_SIM_ABI32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_MIPS_SIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>-- <name>something</name> <name>is</name> <name>very</name> <name>wrong</name> --
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>_MIPS_SIM</name>==<name>_ABIN32</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>_ABIN32</name></expr></argument>)</argument_list></call>) || (<name>_MIPS_SIM</name>==<name>_ABI64</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>_ABI64</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_MIPS_N32</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>_MIPS_SIM</name>==<name>_ABIO32</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>_ABIO32</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_MIPS_O32</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
-- <name>this</name> <name>is</name> <name>an</name> <name>unsupported</name> <name>platform</name> --</expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_SIZEOF_ARG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_SIZEOF_ARG</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> == <name>_ABIN32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_SIZEOF_JAVA_RAW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_FLAG_BITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ARGS_D</name></cpp:macro> <cpp:value>FFI_TYPE_DOUBLE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ARGS_F</name></cpp:macro> <cpp:value>FFI_TYPE_FLOAT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ARGS_DD</name></cpp:macro> <cpp:value>FFI_TYPE_DOUBLE * 4 + FFI_TYPE_DOUBLE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ARGS_FF</name></cpp:macro> <cpp:value>FFI_TYPE_FLOAT * 4 + FFI_TYPE_FLOAT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ARGS_FD</name></cpp:macro> <cpp:value>FFI_TYPE_DOUBLE * 4 + FFI_TYPE_FLOAT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_ARGS_DF</name></cpp:macro> <cpp:value>FFI_TYPE_FLOAT * 4 + FFI_TYPE_DOUBLE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_SMALLSTRUCT</name></cpp:macro> <cpp:value>FFI_TYPE_UINT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_SMALLSTRUCT2</name></cpp:macro> <cpp:value>FFI_TYPE_SINT8</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_DD</name></cpp:macro> <cpp:value>(( FFI_ARGS_DD ) &lt;&lt; 4) + FFI_TYPE_STRUCT</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_D</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_F</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_DD</name></cpp:macro> <cpp:value>253</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_FF</name></cpp:macro> <cpp:value>173</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_FD</name></cpp:macro> <cpp:value>237</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_DF</name></cpp:macro> <cpp:value>189</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_SMALL</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TYPE_STRUCT_SMALL2</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBFFI_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v0</name></cpp:macro> <cpp:value>$2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1</name></cpp:macro> <cpp:value>$3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a0</name></cpp:macro> <cpp:value>$4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a1</name></cpp:macro> <cpp:value>$5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a2</name></cpp:macro> <cpp:value>$6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a3</name></cpp:macro> <cpp:value>$7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a4</name></cpp:macro> <cpp:value>$8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a5</name></cpp:macro> <cpp:value>$9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a6</name></cpp:macro> <cpp:value>$10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a7</name></cpp:macro> <cpp:value>$11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t0</name></cpp:macro> <cpp:value>$8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t1</name></cpp:macro> <cpp:value>$9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t2</name></cpp:macro> <cpp:value>$10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t3</name></cpp:macro> <cpp:value>$11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t4</name></cpp:macro> <cpp:value>$12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t5</name></cpp:macro> <cpp:value>$13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t6</name></cpp:macro> <cpp:value>$14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t7</name></cpp:macro> <cpp:value>$15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t8</name></cpp:macro> <cpp:value>$24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t9</name></cpp:macro> <cpp:value>$25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ra</name></cpp:macro> <cpp:value>$31</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_L</name></cpp:macro> <cpp:value>lw</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_S</name></cpp:macro> <cpp:value>sw</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBU</name></cpp:macro> <cpp:value>subu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDU</name></cpp:macro> <cpp:value>addu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRL</name></cpp:macro> <cpp:value>srl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LI</name></cpp:macro> <cpp:value>li</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_L</name></cpp:macro> <cpp:value>ld</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_S</name></cpp:macro> <cpp:value>sd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBU</name></cpp:macro> <cpp:value>dsubu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDU</name></cpp:macro> <cpp:value>daddu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRL</name></cpp:macro> <cpp:value>dsrl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LI</name></cpp:macro> <cpp:value>dli</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>_MIPS_SIM</name>==<name>_ABI64</name>)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LA</name></cpp:macro> <cpp:value>dla</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EH_FRAME_ALIGN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDE_ADDR_BYTES</name></cpp:macro> <cpp:value>.8byte</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LA</name></cpp:macro> <cpp:value>la</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EH_FRAME_ALIGN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDE_ADDR_BYTES</name></cpp:macro> <cpp:value>.4byte</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>ffi_arg</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__SI__</name>)));</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name> <name>ffi_sarg</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__SI__</name>)));</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>ffi_arg</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__DI__</name>)));</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name> <name>ffi_sarg</name></type> <name>__attribute__</name>((<name>__mode__</name>(<name>__DI__</name>)));</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <name>ffi_abi</name> <block>{
<decl><name>FFI_FIRST_ABI</name> <init>= <expr>0</expr></init></decl>,
<decl><name>FFI_O32</name></decl>,
<decl><name>FFI_N32</name></decl>,
<decl><name>FFI_N64</name></decl>,
<decl><name>FFI_O32_SOFT_FLOAT</name></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips_soft_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_O32_SOFT_FLOAT</name></expr></init></decl>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_O32</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name>==<name>_ABI64</name></expr></cpp:if>
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_N64</name></expr></init></decl>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl><name>FFI_DEFAULT_ABI</name> <init>= <expr><name>FFI_N32</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>FFI_LAST_ABI</name> <init>= <expr><name>FFI_DEFAULT_ABI</name> + 1</expr></init></decl>
}</block></enum></type> <name>ffi_abi</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_EXTRA_CIF_FIELDS</name></cpp:macro> <cpp:value>unsigned rstruct_flag</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFI_MIPS_O32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_CLOSURES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_CLOSURES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name>==<name>_ABI64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_TRAMPOLINE_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFI_NATIVE_RAW_API</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
