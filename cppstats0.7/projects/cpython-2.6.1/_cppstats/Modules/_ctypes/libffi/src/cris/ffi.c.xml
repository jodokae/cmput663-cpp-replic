<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_ctypes/libffi/src/cris/ffi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_ARG_SIZE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ALIGN(x, FFI_SIZEOF_ARG)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>ffi_status</name></type>
<name>initialize_aggregate_packed_struct</name> <parameter_list>(<param><decl><type><name>ffi_type</name> *</type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name>arg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>elements</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>size</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>alignment</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> = &amp;(<name><name>arg</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>)</expr>;</expr_stmt>
<while>while <condition>(<expr>(*<name>ptr</name>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>size</name></name> == 0)
&amp;&amp; (<call><name>initialize_aggregate_packed_struct</name> <argument_list>(<argument><expr>(*<name>ptr</name>)</expr></argument>)</argument_list></call> != <name>FFI_OK</name>)</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><call><name>ffi_type_test</name> <argument_list>(<argument><expr>(*<name>ptr</name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>size</name></name> += <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>alignment</name></name> = (<name><name>arg</name>-&gt;<name>alignment</name></name> &gt; <name>(*<name>ptr</name>)-&gt;<name>alignment</name></name>) ?
<name><name>arg</name>-&gt;<name>alignment</name></name> : <name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>arg</name>-&gt;<name>size</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then>
<else>else
<return>return <expr><name>FFI_OK</name></expr>;</return></else></if>
}</block></function>
<function><type><name>int</name></type>
<name>ffi_prep_args</name> <parameter_list>(<param><decl><type><name>char</name> *</type><name>stack</name></decl></param>, <param><decl><type><name>extended_cif</name> *</type> <name>ecif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>struct_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>p_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>argp</name> = <name>stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_argv</name> = <name><name>ecif</name>-&gt;<name>avalue</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr>, <expr><name>p_arg</name> = <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr>;</init>
<condition><expr>(<name>i</name> != 0)</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>p_arg</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_STRUCT</name></expr>: <block>{
<expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>z</name> &lt;= 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> = 4</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>z</name> &lt;= 8</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> = 8</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uiLocOnStack</name></decl>;</decl_stmt>
<expr_stmt><expr><name>z</name> = <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>uiLocOnStack</name> = 4 * <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name> + <name>struct_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>struct_count</name> = <name>struct_count</name> + <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> =
<call><call>(<name>unsigned</name> <name>int</name>) <argument_list>(<argument><expr><name>UINT32</name> *</expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>stack</name> + <name>uiLocOnStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>(<name>stack</name> + <name>uiLocOnStack</name>)</expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<break>break;</break>
}</block>
</case><default>default:
<expr_stmt><expr><name>z</name> = <name>(*<name>p_arg</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>z</name> &lt; <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name>(*<name>p_arg</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>) *<call>(<name>SINT8</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> =
(<name>unsigned</name> <name>int</name>) *<call>(<name>UINT8</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr>*(<name>signed</name> <name>int</name> *) <name>argp</name> = (<name>signed</name> <name>int</name>) *<call>(<name>SINT16</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> =
(<name>unsigned</name> <name>int</name>) *<call>(<name>UINT16</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name>z</name> = <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>z</name> == <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr>*(<name>unsigned</name> <name>int</name> *) <name>argp</name> = (<name>unsigned</name> <name>int</name>) *<call>(<name>UINT32</name> *) <argument_list>(<argument><expr>*<name>p_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr>*<name>p_argv</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>p_argv</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>argp</name> += <name>z</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr>(<name>struct_count</name>)</expr>;</return>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type> <name>cif</name></decl></param>,
<param><decl><type><name>ffi_abi</name></type> <name>abi</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>nargs</name></decl></param>,
<param><decl><type><name>ffi_type</name> *</type> <name>rtype</name></decl></param>, <param><decl><type><name>ffi_type</name> **</type> <name>atypes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name>cif</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>(<name>abi</name> &gt; <name>FFI_FIRST_ABI</name>) &amp;&amp; (<name>abi</name> &lt;= <name>FFI_DEFAULT_ABI</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>abi</name></name> = <name>abi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>arg_types</name></name> = <name>atypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>nargs</name></name> = <name>nargs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>rtype</name></name> = <name>rtype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name> == 0)
&amp;&amp; (<call><name>initialize_aggregate_packed_struct</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call> != <name>FFI_OK</name>)</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_ASSERT_VALID_TYPE</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>ptr</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>size</name></name> == 0)
&amp;&amp; (<call><name>initialize_aggregate_packed_struct</name> <argument_list>(<argument><expr>(*<name>ptr</name>)</expr></argument>)</argument_list></call> != <name>FFI_OK</name>)</expr>)</condition><then>
<return>return <expr><name>FFI_BAD_TYPEDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FFI_ASSERT_VALID_TYPE</name> <argument_list>(<argument><expr>*<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>(*<name>ptr</name>)-&gt;<name>alignment</name></name> - 1) &amp; <name>bytes</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> = <call><name>ALIGN</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>(*<name>ptr</name>)-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name> &gt; 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bytes</name> += <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> += <sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name> &gt; 4</expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> += 8</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>bytes</name> += 4</expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>bytes</name> += <call><name>STACK_ARG_SIZE</name> <argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></for>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><call><name>ffi_prep_cif_machdep</name> <argument_list>(<argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_cif_machdep</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type> <name>cif</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_VOID</name></expr>:
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = (<name>unsigned</name>) <name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>FFI_TYPE_INT</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_SYSV</name> <parameter_list>(<param><function_decl><type><name>int</name></type> (*)<parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>extended_cif</name> *</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>extended_cif</name> *</type></decl></param>,
<param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>) <parameter_list>()</parameter_list></function_decl></param>)</parameter_list>
__attribute__ <parameter_list>(<param/></parameter_list>(__visibility__ <parameter_list>(</parameter_list>"hidden"</function_decl>)))<empty_stmt>;</empty_stmt>
<function><type><name>void</name></type>
<name>ffi_call</name> <parameter_list>(<param><decl><type><name>ffi_cif</name> *</type> <name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>) <parameter_list>()</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp; (<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_SYSV</name></expr>:
<expr_stmt><expr><call><name>ffi_call_SYSV</name> <argument_list>(<argument><expr><name>ffi_prep_args</name></expr></argument>, <argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <name>ffi_cris_trampoline_template</name><index>[]</index></type>
<name>__attribute__</name> <argument_list>(<argument><expr>(<call><name>__visibility__</name> <argument_list>(<argument><expr>"hidden"</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name> <name>ffi_cris_trampoline_fn_offset</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr>(<call><name>__visibility__</name> <argument_list>(<argument><expr>"hidden"</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name> <name>ffi_cris_trampoline_closure_offset</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr>(<call><name>__visibility__</name> <argument_list>(<argument><expr>"hidden"</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>ffi_prep_closure_inner</name> <parameter_list>(<param><decl><type><name>void</name> **</type><name>params</name></decl></param>, <param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>register_args</name> <init>= <expr>(<name>char</name> *) <name>params</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>struct_ret</name> <init>= <expr><name><name>params</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>stack_args</name> <init>= <expr><name><name>params</name><index>[<expr>6</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name> <init>= <expr><name>register_args</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name> *</type><name>cif</name> <init>= <expr><name><name>closure</name>-&gt;<name>cif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>arg_types</name> <init>= <expr><name><name>cif</name>-&gt;<name>arg_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>avalue</name> <init>= <expr><call><name>alloca</name> <argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doing_regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>llret</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>doing_regs</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name> &lt;= 4</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += 4</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name> &lt;= 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += 8</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_STRUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = *(<name>void</name> **) <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += 4</expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>doing_regs</name> &amp;&amp; <name>ptr</name> &gt;= <name>register_args</name> + 4*4</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ptr</name> = <name>stack_args</name> + ((<name>ptr</name> &gt; <name>register_args</name> + 4*4) ? 4 : 0)</expr>;</expr_stmt>
<expr_stmt><expr><name>doing_regs</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>,
<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>
? <name>struct_ret</name>
: (<name>void</name> *) &amp;<name>llret</name></expr></argument>,
<argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>llret</name></expr>;</return>
}</block></function>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> **</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>innerfn</name> <init>= <expr><name>ffi_prep_closure_inner</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_SYSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name></expr></argument>, <argument><expr><name>ffi_cris_trampoline_template</name></expr></argument>,
<argument><expr><name>FFI_CRIS_TRAMPOLINE_CODE_PART_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name> + <name>ffi_cris_trampoline_fn_offset</name></expr></argument>,
<argument><expr>&amp;<name>innerfn</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>closure</name>-&gt;<name>tramp</name></name> + <name>ffi_cris_trampoline_closure_offset</name></expr></argument>,
<argument><expr>&amp;<name>codeloc</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
</unit>
