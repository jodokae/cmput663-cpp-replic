<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_ctypes/libffi/src/powerpc/ffi_darwin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffi_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_closure_ASM</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<enum>enum <block>{
<decl><name>FLAG_RETURNS_NOTHING</name> <init>= <expr>1 &lt;&lt; (31-30)</expr></init></decl>,
<decl><name>FLAG_RETURNS_FP</name> <init>= <expr>1 &lt;&lt; (31-29)</expr></init></decl>,
<decl><name>FLAG_RETURNS_64BITS</name> <init>= <expr>1 &lt;&lt; (31-28)</expr></init></decl>,
<decl><name>FLAG_RETURNS_128BITS</name> <init>= <expr>1 &lt;&lt; (31-31)</expr></init></decl>,
<decl><name>FLAG_ARG_NEEDS_COPY</name> <init>= <expr>1 &lt;&lt; (31- 7)</expr></init></decl>,
<decl><name>FLAG_FP_ARGUMENTS</name> <init>= <expr>1 &lt;&lt; (31- 6)</expr></init></decl>,
<decl><name>FLAG_4_GPR_ARGUMENTS</name> <init>= <expr>1 &lt;&lt; (31- 5)</expr></init></decl>,
<decl><name>FLAG_RETVAL_REFERENCE</name> <init>= <expr>1 &lt;&lt; (31- 4)</expr></init></decl>
}</block>;</enum>
<enum>enum <block>{
<decl><name>NUM_GPR_ARG_REGISTERS</name> <init>= <expr>8</expr></init></decl>,
<decl><name>NUM_FPR_ARG_REGISTERS</name> <init>= <expr>13</expr></init></decl>
}</block>;</enum>
<enum>enum <block>{ <decl><name>ASM_NEEDS_REGISTERS</name> <init>= <expr>4</expr></init></decl> }</block>;</enum>
<function><type><name>void</name></type> <name>ffi_prep_args</name><parameter_list>(<param><decl><type><name>extended_cif</name> *</type><name>ecif</name></decl></param>, <param><decl><type><name>unsigned</name> *<specifier>const</specifier></type> <name>stack</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>bytes</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>bytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> *<specifier>const</specifier></type> <name>stacktop</name> <init>= <expr><name>stack</name> + (<name>bytes</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type><name>fpr_base</name> <init>= <expr><call>(<name>double</name>*) <argument_list>(<argument><expr><name>stacktop</name> - <name>ASM_NEEDS_REGISTERS</name></expr></argument>)</argument_list></call> - <name>NUM_FPR_ARG_REGISTERS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fparg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> *</type><name>next_arg</name> <init>= <expr><name>stack</name> + 6</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>nargs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>double_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>p_argv</name> <init>= <expr><name><name>ecif</name>-&gt;<name>avalue</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>gprvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name>**</type> <name>ptr</name> <init>= <expr><name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>arg_types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dest_cpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size_al</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>((<name>unsigned</name>)(<name>char</name> *)<name>stack</name> &amp; 0xF) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>((<name>unsigned</name>)(<name>char</name> *)<name>stacktop</name> &amp; 0xF) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>(<name>bytes</name> &amp; 0xF) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>FLAG_RETVAL_REFERENCE</name></expr>)</condition><then>
<expr_stmt><expr>*<name>next_arg</name>++ = (<name>unsigned</name>)(<name>char</name> *)<name><name>ecif</name>-&gt;<name>rvalue</name></name></expr>;</expr_stmt></then></if>
<for>for (<init>;</init>
<condition><expr><name>i</name> &gt; 0</expr>;</condition>
<incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr>, <expr><name>p_argv</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>double_tmp</name> = *(<name>float</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>next_arg</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>double_tmp</name> = *(<name>double</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>double_tmp</name> = ((<name>double</name> *)*<name>p_argv</name>)<index>[<expr>0</expr>]</index></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>double_tmp</name> = ((<name>double</name> *)*<name>p_argv</name>)<index>[<expr>1</expr>]</index></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt;= <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr>*(<name>double</name> *)<name>next_arg</name> = <name>double_tmp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>fpr_base</name>++ = <name>double_tmp</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>next_arg</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr><name>flags</name> &amp; <name>FLAG_FP_ARGUMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr>*(<name>long</name> <name>long</name> *)<name>next_arg</name> = *(<name>long</name> <name>long</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name>+=2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>char</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>signed</name> <name>char</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> <name>short</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>signed</name> <name>short</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<goto>goto <name>putgpr</name>;</goto>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>dest_cpy</name> = (<name>char</name> *) <name>next_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_al</name> = <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr>0</expr>]</index>-&gt;<name>type</name> == 3</expr>)</condition><then>
<expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>size_al</name> &lt; 3 &amp;&amp; <name><name>ecif</name>-&gt;<name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then>
<expr_stmt><expr><name>dest_cpy</name> += 4 - <name>size_al</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name>dest_cpy</name></expr></argument>, <argument><expr>(<name>char</name> *)*<name>p_argv</name></expr></argument>, <argument><expr><name>size_al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_arg</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_INT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<expr_stmt><expr><name>gprvalue</name> = *(<name>unsigned</name> *)*<name>p_argv</name></expr>;</expr_stmt>
<label><name>putgpr</name>:</label>
<expr_stmt><expr>*<name>next_arg</name>++ = <name>gprvalue</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>darwin_adjust_aggregate_sizes</name> <parameter_list>(<param><decl><type><name>ffi_type</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>type</name></name> != <name>FFI_TYPE_STRUCT</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>size</name></name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>s</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>ffi_type</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <name><name>s</name>-&gt;<name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>darwin_adjust_aggregate_sizes</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> == 0
&amp;&amp; (<name><name>p</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_UINT64</name>
|| <name><name>p</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_SINT64</name>
|| <name><name>p</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_DOUBLE</name>
|| <name><name>p</name>-&gt;<name>alignment</name></name> == 8)</expr>)</condition><then>
<expr_stmt><expr><name>align</name> = 8</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>p</name>-&gt;<name>alignment</name></name> == 16 || <name><name>p</name>-&gt;<name>alignment</name></name> &lt; 4</expr>)</condition><then>
<expr_stmt><expr><name>align</name> = <name><name>p</name>-&gt;<name>alignment</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>align</name> = 4</expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name><name>s</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call> + <name><name>p</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>s</name>-&gt;<name>size</name></name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>size</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_UINT64</name>
|| <name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_SINT64</name>
|| <name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == <name>FFI_TYPE_DOUBLE</name>
|| <name><name>s</name>-&gt;<name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>alignment</name> == 8</expr>)</condition><then>
<expr_stmt><expr><name><name>s</name>-&gt;<name>alignment</name></name> = <name><name>s</name>-&gt;<name>alignment</name></name> &gt; 8 ? <name><name>s</name>-&gt;<name>alignment</name></name> : 8</expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>ffi_status</name></type> <name>ffi_prep_cif_machdep</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fparg_count</name> <init>= <expr>0</expr></init>, <name>intarg_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size_al</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>darwin_adjust_aggregate_sizes</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>darwin_adjust_aggregate_sizes</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></then></if>
<expr_stmt><expr><name>bytes</name> = (6 + <name>ASM_NEEDS_REGISTERS</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
<case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_128BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_FP</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_64BITS</name></expr>;</expr_stmt>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_FP</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_64BITS</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETVAL_REFERENCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_VOID</name></expr>:
<expr_stmt><expr><name>flags</name> |= <name>FLAG_RETURNS_NOTHING</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<for>for (<init><expr><name>ptr</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>, <expr><name>i</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>ptr</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<expr_stmt><expr><name>fparg_count</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name>
&amp;&amp; <name>intarg_count</name>%2 != 0</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<expr_stmt><expr><name>fparg_count</name> += 2</expr>;</expr_stmt>
<if>if <condition>(<expr><name>fparg_count</name> &gt; <name>NUM_FPR_ARG_REGISTERS</name>
&amp;&amp; <name>intarg_count</name>%2 != 0</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>intarg_count</name> +=2</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
<if>if <condition>(<expr><name>intarg_count</name> == <name>NUM_GPR_ARG_REGISTERS</name>-1
|| (<name>intarg_count</name> &gt;= <name>NUM_GPR_ARG_REGISTERS</name> &amp;&amp; <name>intarg_count</name>%2 != 0)</expr>)</condition><then>
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>intarg_count</name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>size_al</name> = <name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(*<name>ptr</name>)-&gt;<name>elements</name></name><index>[<expr>0</expr>]</index>-&gt;<name>type</name> == 3</expr>)</condition><then>
<expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name>(*<name>ptr</name>)-&gt;<name>size</name></name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>intarg_count</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>intarg_count</name>++</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></for>
<if>if <condition>(<expr><name>fparg_count</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>FLAG_FP_ARGUMENTS</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>fparg_count</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> += <name>NUM_FPR_ARG_REGISTERS</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>intarg_count</name> + 2 * <name>fparg_count</name>) &gt; <name>NUM_GPR_ARG_REGISTERS</name></expr>)</condition><then>
<expr_stmt><expr><name>bytes</name> += (<name>intarg_count</name> + 2 * <name>fparg_count</name>) * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>bytes</name> += <name>NUM_GPR_ARG_REGISTERS</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>bytes</name> = (<name>bytes</name> + 15) &amp; ~0xF</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cif</name>-&gt;<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_AIX</name><parameter_list>(<param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn2</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>ffi_call_DARWIN</name><parameter_list>(<param><decl><type><name>extended_cif</name> *</type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name></type></decl></param>, <param><decl><type><name>unsigned</name> *</type></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn2</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>ffi_call</name><parameter_list>(<param><decl><type><name>ffi_cif</name> *</type><name>cif</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>fn</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><name>void</name> *</type><name>rvalue</name></decl></param>, <param><decl><type><name>void</name> **</type><name>avalue</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>extended_cif</name></type> <name>ecif</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecif</name>.<name>avalue</name></name> = <name>avalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rvalue</name> == <name>NULL</name>) &amp;&amp;
(<name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ecif</name>.<name>rvalue</name></name> = <name>rvalue</name></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_AIX</name></expr>:
<expr_stmt><expr><call><name>ffi_call_AIX</name><argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr>-<name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>,
<argument><expr><name>ffi_prep_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_DARWIN</name></expr>:
<expr_stmt><expr><call><name>ffi_call_DARWIN</name><argument_list>(<argument><expr>&amp;<name>ecif</name></expr></argument>, <argument><expr>-<name><name>cif</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>cif</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ecif</name>.<name>rvalue</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>,
<argument><expr><name>ffi_prep_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>flush_icache</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>flush_range</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>aix_fd_struct</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>code_pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>toc</name></decl>;</decl_stmt>
}</block></struct></type> <name>aix_fd</name>;</typedef>
<function><type><name>ffi_status</name></type>
<name>ffi_prep_closure_loc</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>,
<param><decl><type><name>ffi_cif</name>*</type> <name>cif</name></decl></param>,
<param><function_decl><type><name>void</name></type> (*<name>fun</name>)<parameter_list>(<param><decl><type><name>ffi_cif</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>codeloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>tramp</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ffi_aix_trampoline_struct</name> *</type><name>tramp_aix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aix_fd</name> *</type><name>fd</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>cif</name>-&gt;<name>abi</name></name></expr>)</condition> <block>{
<case>case <expr><name>FFI_DARWIN</name></expr>:
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tramp</name> = (<name>unsigned</name> <name>int</name> *) &amp;<name><name>closure</name>-&gt;<name>tramp</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>0</expr>]</index></name> = 0x7c0802a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>1</expr>]</index></name> = 0x429f000d</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>4</expr>]</index></name> = 0x7d6802a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>5</expr>]</index></name> = 0x818b0000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>6</expr>]</index></name> = 0x7c0803a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>7</expr>]</index></name> = 0x7d8903a6</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>8</expr>]</index></name> = 0x816b0004</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>9</expr>]</index></name> = 0x4e800420</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>2</expr>]</index></name> = (<name>unsigned</name> <name>long</name>) <name>ffi_closure_ASM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp</name><index>[<expr>3</expr>]</index></name> = (<name>unsigned</name> <name>long</name>) <name>codeloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_range</name><argument_list>(<argument><expr><name>codeloc</name></expr></argument>, <argument><expr><name>FFI_TRAMPOLINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_AIX</name></expr>:
<expr_stmt><expr><name>tramp_aix</name> = (struct <name>ffi_aix_trampoline_struct</name> *) (<name><name>closure</name>-&gt;<name>tramp</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> = (<name>aix_fd</name> *)(<name>void</name> *)<name>ffi_closure_ASM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFI_ASSERT</name> <argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_AIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>code_pointer</name></name> = <name><name>fd</name>-&gt;<name>code_pointer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>toc</name></name> = <name><name>fd</name>-&gt;<name>toc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tramp_aix</name>-&gt;<name>static_chain</name></name> = <name>codeloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>cif</name></name> = <name>cif</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>closure</name>-&gt;<name>user_data</name></name> = <name>user_data</name></expr>;</expr_stmt>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>FFI_OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_icache</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>addr</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>volatile</specifier> (
"dcbf 0,%0\n"
"\tsync\n"
"\ticbi 0,%0\n"
"\tsync\n"
"\tisync"
: : "r"(addr) : "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_range</name><parameter_list>(<param><decl><type><name>char</name> *</type> <name>addr1</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LINE_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name> += <name>MIN_LINE_SIZE</name></expr></incr>)
<expr_stmt><expr><call><name>flush_icache</name><argument_list>(<argument><expr><name>addr1</name>+<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>flush_icache</name><argument_list>(<argument><expr><name>addr1</name>+<name>size</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
}</block></union></type> <name>ffi_dblfl</name>;</typedef>
<function_decl><type><name>int</name></type> <name>ffi_closure_helper_DARWIN</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>long</name>*</decl></param>, <param><decl><type><name>ffi_dblfl</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>int</name></type> <name>ffi_closure_helper_DARWIN</name> <parameter_list>(<param><decl><type><name>ffi_closure</name>*</type> <name>closure</name></decl></param>, <param><decl><type><name>void</name> *</type> <name>rvalue</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>long</name> *</type> <name>pgr</name></decl></param>, <param><decl><type><name>ffi_dblfl</name> *</type> <name>pfr</name></decl></param>)</parameter_list> <block>{
<typedef>typedef <type><name>double</name></type> <name><name>ldbits</name><index>[<expr>2</expr>]</index></name>;</typedef>
<union>union <name>ldu</name> <block>{
<decl_stmt><decl><type><name>ldbits</name></type> <name>lb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>void</name> **</type> <name>avalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_type</name> **</type> <name>arg_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ffi_cif</name> *</type> <name>cif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size_al</name></decl>;</decl_stmt>
<decl_stmt><decl><type>union <name>ldu</name></type> <name>temp_ld</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cif</name> = <name><name>closure</name>-&gt;<name>cif</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avalue</name> = <call><name>alloca</name><argument_list>(<argument><expr><name><name>cif</name>-&gt;<name>nargs</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nf</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name> == <name>FFI_TYPE_STRUCT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rvalue</name> = (<name>void</name> *) *<name>pgr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avn</name> = <name><name>cif</name>-&gt;<name>nargs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_types</name> = <name><name>cif</name>-&gt;<name>arg_types</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>avn</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>FFI_TYPE_SINT8</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT8</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) <name>pgr</name> + 3</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT16</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT16</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *) <name>pgr</name> + 2</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT32</name></expr>:
</case><case>case <expr><name>FFI_TYPE_POINTER</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_STRUCT</name></expr>:
<expr_stmt><expr><name>size_al</name> = <name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name><name>elements</name><index>[<expr>0</expr>]</index></name>-&gt;<name>type</name> == 3</expr>)</condition><then>
<expr_stmt><expr><name>size_al</name> = <call><name>ALIGN</name><argument_list>(<argument><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>size_al</name> &lt; 3 &amp;&amp; <name><name>cif</name>-&gt;<name>abi</name></name> == <name>FFI_DARWIN</name></expr>)</condition><then>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>void</name>*) <name>pgr</name> + 4 - <name>size_al</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>void</name>*) <name>pgr</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>ng</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += (<name>size_al</name> + 3) / 4</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_SINT64</name></expr>:
</case><case>case <expr><name>FFI_TYPE_UINT64</name></expr>:
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += 2</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_FLOAT</name></expr>:
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>temp</name> = <name><name>pfr</name>-&gt;<name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfr</name>-&gt;<name>f</name></name> = (<name>float</name>)<name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>nf</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>FFI_TYPE_DOUBLE</name></expr>:
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>nf</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += 2</expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFI_TYPE_LONGDOUBLE</name> != <name>FFI_TYPE_DOUBLE</name></expr></cpp:if>
</case><case>case <expr><name>FFI_TYPE_LONGDOUBLE</name></expr>:
<if>if <condition>(<expr><name>nf</name> &lt; <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pfr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pfr</name> += 2</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>nf</name> == <name>NUM_FPR_ARG_REGISTERS</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>temp_ld</name>.<name>lb</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pfr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldbits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr>&amp;<name><name>temp_ld</name>.<name>lb</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pgr</name> + 2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldbits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>temp_ld</name>.<name>ld</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>avalue</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pgr</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>nf</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>ng</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>pgr</name> += 4</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>FFI_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call>(<name><name>closure</name>-&gt;<name>fun</name></name>) <argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>, <argument><expr><name>avalue</name></expr></argument>, <argument><expr><name><name>closure</name>-&gt;<name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>cif</name>-&gt;<name>rtype</name>-&gt;<name>type</name></name></expr>;</return>
}</block></function>
</unit>
