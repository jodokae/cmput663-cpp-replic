<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_sqlite/microprotocols.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;structmember.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"microprotocols.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prepare_protocol.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>psyco_adapters</name></decl>;</decl_stmt>
<function><type><name>int</name></type>
<name>pysqlite_microprotocols_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name>psyco_adapters</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>"adapters"</expr></argument>, <argument><expr><name>psyco_adapters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>pysqlite_microprotocols_add</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>proto</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>cast</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>proto</name> == <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><name>proto</name> = (<name>PyObject</name>*)&amp;<name>pysqlite_PrepareProtocolType</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>key</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(OO)"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name>type</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>key</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>psyco_adapters</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>pysqlite_microprotocols_adapt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>proto</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>alt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>adapter</name></decl>, *<decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(OO)"</expr></argument>, <argument><expr>(<name>PyObject</name>*)<name><name>obj</name>-&gt;<name>ob_type</name></name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>key</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>adapter</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>psyco_adapters</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>adapter</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>adapted</name> <init>= <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>adapted</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr>"__adapt__"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>adapted</name> <init>= <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr>"__adapt__"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>adapted</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>adapted</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<return>return <expr><name>adapted</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>adapted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"__conform__"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>adapted</name> <init>= <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"__conform__"</expr></argument>,<argument><expr>"O"</expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>adapted</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>adapted</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<return>return <expr><name>adapted</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>adapted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_ProgrammingError</name></expr></argument>, <argument><expr>"can't adapt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>PyObject</name> *</type>
<name>pysqlite_adapt</name><parameter_list>(<param><decl><type><name>pysqlite_Cursor</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>, *<decl><type ref="prev"/><name>alt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>proto</name> <init>= <expr>(<name>PyObject</name>*)&amp;<name>pysqlite_PrepareProtocolType</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|OO"</expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>proto</name></expr></argument>, <argument><expr>&amp;<name>alt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>pysqlite_microprotocols_adapt</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
