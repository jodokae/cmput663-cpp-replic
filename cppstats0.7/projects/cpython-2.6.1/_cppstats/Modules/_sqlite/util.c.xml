<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/_sqlite/util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>pysqlite_step</name><parameter_list>(<param><decl><type><name>sqlite3_stmt</name>*</type> <name>statement</name></decl></param>, <param><decl><type><name>pysqlite_Connection</name>*</type> <name>connection</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>statement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <name>SQLITE_OK</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rc</name> <init>= <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr></expr_stmt>
}</block></else></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>_pysqlite_seterror</name><parameter_list>(<param><decl><type><name>sqlite3</name>*</type> <name>db</name></decl></param>, <param><decl><type><name>sqlite3_stmt</name>*</type> <name>st</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errorcode</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>st</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>errorcode</name> = <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>errorcode</name></expr>)</condition> <block>{
<case>case <expr><name>SQLITE_OK</name></expr>:
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_INTERNAL</name></expr>:
</case><case>case <expr><name>SQLITE_NOTFOUND</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_InternalError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_NOMEM</name></expr>:
<expr_stmt><expr>(<name>void</name>)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_ERROR</name></expr>:
</case><case>case <expr><name>SQLITE_PERM</name></expr>:
</case><case>case <expr><name>SQLITE_ABORT</name></expr>:
</case><case>case <expr><name>SQLITE_BUSY</name></expr>:
</case><case>case <expr><name>SQLITE_LOCKED</name></expr>:
</case><case>case <expr><name>SQLITE_READONLY</name></expr>:
</case><case>case <expr><name>SQLITE_INTERRUPT</name></expr>:
</case><case>case <expr><name>SQLITE_IOERR</name></expr>:
</case><case>case <expr><name>SQLITE_FULL</name></expr>:
</case><case>case <expr><name>SQLITE_CANTOPEN</name></expr>:
</case><case>case <expr><name>SQLITE_PROTOCOL</name></expr>:
</case><case>case <expr><name>SQLITE_EMPTY</name></expr>:
</case><case>case <expr><name>SQLITE_SCHEMA</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_OperationalError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_CORRUPT</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_DatabaseError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_TOOBIG</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_DataError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_CONSTRAINT</name></expr>:
</case><case>case <expr><name>SQLITE_MISMATCH</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_IntegrityError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SQLITE_MISUSE</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_ProgrammingError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>pysqlite_DatabaseError</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>errorcode</name></expr>;</return>
}</block></function>
</unit>
