<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/glmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;device.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>devport</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>textwritemask</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>pagewritemask</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>gewrite</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>gettp</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cgensupport.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_qread</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>retval</name> <init>= <expr><call><name>qread</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>2</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_varray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>vec</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>PyObject</name> *</type> (*<name>getitem</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>getitem</name> = <name>PyList_GetItem</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>getitem</name> = <name>PyTuple_GetItem</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>w</name> = <call>(*<name>getitem</name>)<argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>width</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>width</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>width</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<switch>switch <condition>(<expr><name>width</name></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<expr_stmt><expr><name><name>vec</name><index>[<expr>2</expr>]</index></name> = 0.0</expr>;</expr_stmt>
</case><case>case <expr>3</expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call>(*<name>getitem</name>)<argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v3d</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>gen_nvarray</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_nvarray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>gen_nvarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_vnarray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>gen_nvarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gen_nvarray</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>inorm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>, *<decl><type ref="prev"/><name>wnorm</name></decl>, *<decl><type ref="prev"/><name>wvec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>norm</name><index>[<expr>3</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vec</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>PyObject</name> *</type> (*<name>getitem</name>)<parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>getitem</name> = <name>PyList_GetItem</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>getitem</name> = <name>PyTuple_GetItem</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call>(*<name>getitem</name>)<argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> != 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>wnorm</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>inorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wvec</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>1 - <name>inorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetFloatArray</name><argument_list>(<argument><expr><name>wnorm</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>norm</name></expr></argument>)</argument_list></call> ||
!<call><name>PyArg_GetFloatArray</name><argument_list>(<argument><expr><name>wvec</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>n3f</name><argument_list>(<argument><expr><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v3f</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_nurbssurface</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type><name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg7</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg8</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ncoords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>s_byte_stride</name></decl>, <decl><type ref="prev"/><name>t_byte_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>s_nctl</name></decl>, <decl><type ref="prev"/><name>t_nctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>, *<decl><type ref="prev"/><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type><name>pnext</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetLongArraySize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg2</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLongArraySize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg4</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg7</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg8</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>arg8</name> == <name>N_XYZ</name></expr>)</condition><then>
<expr_stmt><expr><name>ncoords</name> = 3</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>arg8</name> == <name>N_XYZW</name></expr>)</condition><then>
<expr_stmt><expr><name>ncoords</name> = 4</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>s_nctl</name> = <name>arg1</name> - <name>arg6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_nctl</name> = <name>arg3</name> - <name>arg7</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>s_nctl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>arg5</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>s_nctl</name>*<name>t_nctl</name>*<name>ncoords</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pnext</name> = <name>arg5</name></expr>;</expr_stmt>
<for>for (<init><expr><name>s</name> = 0</expr>;</init> <condition><expr><name>s</name> &lt; <name>s_nctl</name></expr>;</condition> <incr><expr><name>s</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name> || !<call><name>PyList_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> ||
<call><name>PyList_Size</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> != <name>t_nctl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>t</name> = 0</expr>;</init> <condition><expr><name>t</name> &lt; <name>t_nctl</name></expr>;</condition> <incr><expr><name>t</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>pt</name> = <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ncoords</name></expr></argument>, <argument><expr><name>pnext</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pnext</name> += <name>ncoords</name></expr>;</expr_stmt>
}</block></for>
}</block></for>
<expr_stmt><expr><name>s_byte_stride</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> * <name>ncoords</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_byte_stride</name> = <name>s_byte_stride</name> * <name>s_nctl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurbssurface</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> ,
<argument><expr><name>s_byte_stride</name></expr></argument> , <argument><expr><name>t_byte_stride</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> , <argument><expr><name>arg7</name></expr></argument> , <argument><expr><name>arg8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_nurbscurve</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncoords</name></decl>, <decl><type ref="prev"/><name>npoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type><name>pnext</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetLongArraySize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg2</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>arg6</name> == <name>N_ST</name></expr>)</condition><then>
<expr_stmt><expr><name>ncoords</name> = 2</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>arg6</name> == <name>N_STW</name></expr>)</condition><then>
<expr_stmt><expr><name>ncoords</name> = 3</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>npoints</name> = <name>arg1</name> - <name>arg5</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> != <name>npoints</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>arg4</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>npoints</name>*<name>ncoords</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pnext</name> = <name>arg4</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>npoints</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ncoords</name></expr></argument>, <argument><expr><name>pnext</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pnext</name> += <name>ncoords</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>arg3</name> = (<sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof>) * <name>ncoords</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nurbscurve</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pwlcurve</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> *</type><name>data</name></decl>, *<decl><type ref="prev"/><name>pnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>npoints</name></decl>, <decl><type ref="prev"/><name>ncoords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>npoints</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>N_ST</name></expr>)</condition><then>
<expr_stmt><expr><name>ncoords</name> = 2</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr>(<name>data</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>npoints</name>*<name>ncoords</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pnext</name> = <name>data</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>npoints</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>PyArg_GetDoubleArray</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ncoords</name></expr></argument>, <argument><expr><name>pnext</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pnext</name> += <name>ncoords</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>pwlcurve</name><argument_list>(<argument><expr><name>npoints</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof>*<name>ncoords</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name> *</type><name>pickbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>pickbuffersize</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>pick_select</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><function_decl><type><name>void</name></type> (*<name>func</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>pickbuffersize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>pickbuffer</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"pick/gselect: already picking/selecting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>pickbuffer</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>pickbuffersize</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call>(*<name>func</name>)<argument_list>(<argument><expr><name>pickbuffer</name></expr></argument>, <argument><expr><name>pickbuffersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>endpick_select</name><parameter_list>(<param><function_decl><type><name>long</name></type> (*<name>func</name>)<parameter_list>()</parameter_list></function_decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nhits</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pickbuffer</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"endpick/endselect: not in pick/select mode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>nhits</name> = <call>(*<name>func</name>)<argument_list>(<argument><expr><name>pickbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nhits</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>nhits</name> = -<name>nhits</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>nhits</name> &gt; 0</expr>;</condition> <incr><expr><name>nhits</name>--</expr></incr>) <block>{
<expr_stmt><expr><name>n</name> += 1 + <name><name>pickbuffer</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>pickbuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>pickbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pickbuffer</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>pick</name><parameter_list>()</parameter_list>, gselect<parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>long</name></type> <name>endpick</name><parameter_list>()</parameter_list>, endselect<parameter_list>()</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>gl_pick</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>pick_select</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>pick</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>gl_endpick</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>endpick_select</name><argument_list>(<argument><expr><name>endpick</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>gl_gselect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>pick_select</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>gselect</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>gl_endselect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>endpick_select</name><argument_list>(<argument><expr><name>endselect</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getmatrix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Matrix</name></type> <name>arg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getmatrix</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 4</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>mknewfloatobject</name><argument_list>(<argument><expr><name><name>arg1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name>*4+<name>j</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for></for>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_altgetmatrix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Matrix</name></type> <name>arg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>getmatrix</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 4</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>mknewfloatobject</name><argument_list>(<argument><expr><name><name>arg1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lrectwrite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>x1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>y1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>x2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>y2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>parray</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
int pixcount;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>x1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>x2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetString</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>parray</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
pixcount = (long)(x2+1-x1) * (long)(y2+1-y1);
if (!PyString_Check(s) || PyString_Size(s) != pixcount*sizeof(long)) {
PyErr_SetString(PyExc_RuntimeError,
"string arg to lrectwrite has wrong size");
return NULL;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>lrectwrite</name><argument_list>( <argument><expr><name>x1</name></expr></argument> , <argument><expr><name>y1</name></expr></argument> , <argument><expr><name>x2</name></expr></argument> , <argument><expr><name>y2</name></expr></argument> , <argument><expr>(<name>unsigned</name> <name>long</name> *) <name>parray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lrectread</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>x1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>y1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>x2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>y2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>parray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixcount</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>x1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>x2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetShort</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pixcount</name> = <call>(<name>long</name>)<argument_list>(<argument><expr><name>x2</name>+1-<name>x1</name></expr></argument>)</argument_list></call> * <call>(<name>long</name>)<argument_list>(<argument><expr><name>y2</name>+1-<name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parray</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>pixcount</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parray</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lrectread</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>parray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>parray</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_readdisplay</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>parray</name></decl>, <decl><type ref="prev"/><name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>size_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"hhhhl"</expr></argument>, <argument><expr>&amp;<name>x1</name></expr></argument>, <argument><expr>&amp;<name>y1</name></expr></argument>, <argument><expr>&amp;<name>x2</name></expr></argument>, <argument><expr>&amp;<name>y2</name></expr></argument>, <argument><expr>&amp;<name>hints</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>size</name> = <call>(<name>long</name>)<argument_list>(<argument><expr><name>x2</name>+1-<name>x1</name></expr></argument>)</argument_list></call> * <call>(<name>long</name>)<argument_list>(<argument><expr><name>y2</name>+1-<name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>size</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == <name>NULL</name></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>parray</name> = (<name>unsigned</name> <name>long</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size_ret</name> = <call><name>readdisplay</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>parray</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>size_ret</name> != <name>size</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"gl_readdisplay: got %ld pixels, expected %ld\n"</expr></argument>,
<argument><expr><name>size_ret</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"readdisplay returned unexpected length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_packrect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>packfactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>unpacked</name></decl>, *<decl><type ref="prev"/><name>packed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixcount</name></decl>, <decl><type ref="prev"/><name>packedcount</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pixel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type><name>parray</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>packfactor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetString</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>unpacked</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>width</name> &lt;= 0 || <name>height</name> &lt;= 0 || <name>packfactor</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"packrect args must be &gt; 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pixcount</name> = <name>width</name>*<name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packedcount</name> = ((<name>width</name>+<name>packfactor</name>-1)/<name>packfactor</name>) *
((<name>height</name>+<name>packfactor</name>-1)/<name>packfactor</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>unpacked</name></expr></argument>)</argument_list></call> != <name>pixcount</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"string arg to packrect has wrong size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>packed</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>packedcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>packed</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>parray</name> = (<name>unsigned</name> <name>long</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = (<name>unsigned</name> <name>char</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>packed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>y</name> = 0</expr>;</init> <condition><expr><name>y</name> &lt; <name>height</name></expr>;</condition> <incr><expr><name>y</name> += <name>packfactor</name></expr>, <expr><name>parray</name> += <name>packfactor</name>*<name>width</name></expr></incr>) <block>{
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>width</name></expr>;</condition> <incr><expr><name>x</name> += <name>packfactor</name></expr></incr>) <block>{
<expr_stmt><expr><name>pixel</name> = <name><name>parray</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <name>pixel</name> &amp; 0xff</expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = (<name>pixel</name> &gt;&gt; 8) &amp; 0xff</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = (<name>pixel</name> &gt;&gt; 16) &amp; 0xff</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = (30*<name>r</name>+59*<name>g</name>+11*<name>b</name>) / 100</expr>;</expr_stmt>
}</block></for>
}</block></for>
<return>return <expr><name>packed</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>unpacktab</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unpacktab_inited</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_unpackrect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>packfactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>unpacked</name></decl>, *<decl><type ref="prev"/><name>packed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixcount</name></decl>, <decl><type ref="prev"/><name>packedcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>long</name> *</type><name>parray</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>unpacktab_inited</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>white</name></decl>;</decl_stmt>
<for>for (<init><expr><name>white</name> = 256</expr>;</init> <condition><expr>--<name>white</name> &gt;= 0</expr>;</condition> <incr/>)
<expr_stmt><expr><name><name>unpacktab</name><index>[<expr><name>white</name></expr>]</index></name> = <name>white</name> * 0x010101L</expr>;</expr_stmt></for>
<expr_stmt><expr><name>unpacktab_inited</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetLong</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>packfactor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetString</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_GetObject</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>packed</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>width</name> &lt;= 0 || <name>height</name> &lt;= 0 || <name>packfactor</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>, <argument><expr>"packrect args must be &gt; 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pixcount</name> = <name>width</name>*<name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packedcount</name> = ((<name>width</name>+<name>packfactor</name>-1)/<name>packfactor</name>) *
((<name>height</name>+<name>packfactor</name>-1)/<name>packfactor</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>packed</name></expr></argument>)</argument_list></call> != <name>packedcount</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"string arg to unpackrect has wrong size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>unpacked</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>pixcount</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>unpacked</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>parray</name> = (<name>unsigned</name> <name>long</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = (<name>unsigned</name> <name>char</name> *) <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>packed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>packfactor</name> == 1 &amp;&amp; <name>width</name>*<name>height</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>x</name> <init>= <expr><name>width</name> * <name>height</name></expr></init></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr>*<name>parray</name>++ = <name><name>unpacktab</name><index>[<expr>*<name>p</name>++</expr>]</index></name></expr>;</expr_stmt>
}</block> while <condition>(<expr>--<name>x</name> &gt;= 0</expr>)</condition>;</do>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>y</name></decl>;</decl_stmt>
<for>for (<init><expr><name>y</name> = 0</expr>;</init> <condition><expr><name>y</name> &lt; <name>height</name>-<name>packfactor</name>+1</expr>;</condition>
<incr><expr><name>y</name> += <name>packfactor</name></expr>, <expr><name>parray</name> += <name>packfactor</name>*<name>width</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>width</name>-<name>packfactor</name>+1</expr>;</condition> <incr><expr><name>x</name> += <name>packfactor</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>register</name> <name>unsigned</name> <name>long</name></type> <name>pixel</name> <init>= <expr><name><name>unpacktab</name><index>[<expr>*<name>p</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name>packfactor</name>*<name>width</name></expr>;</init> <condition><expr>(<name>i</name>-=<name>width</name>) &gt;= 0</expr>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>register</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = <name>packfactor</name></expr>;</init> <condition><expr>--<name>j</name> &gt;= 0</expr>;</condition> <incr/>)
<expr_stmt><expr><name><name>parray</name><index>[<expr><name>i</name>+<name>x</name>+<name>j</name></expr>]</index></name> = <name>pixel</name></expr>;</expr_stmt></for>
}</block></for>
}</block></for>
}</block></for>
}</block></else></if>
<return>return <expr><name>unpacked</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gversion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gversion</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_clear</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>__GLclear</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getshade</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getshade</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_devport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>devport</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rdr2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rdr2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rectfs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rectfs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rects</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rects</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rmv2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rmv2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_noport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>noport</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_popviewport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>popviewport</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_clearhitcode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>clearhitcode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_closeobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>closeobj</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cursoff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>cursoff</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_curson</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>curson</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_doublebuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>doublebuffer</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_finish</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>finish</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gconfig</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>gconfig</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_ginit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ginit</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_greset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>greset</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_multimap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>multimap</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_onemap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>onemap</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_popattributes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>popattributes</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_popmatrix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>popmatrix</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pushattributes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>pushattributes</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pushmatrix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>pushmatrix</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pushviewport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>pushviewport</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_qreset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>qreset</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_RGBmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>RGBmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_singlebuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>singlebuffer</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_swapbuffers</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>swapbuffers</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gsync</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>gsync</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gflush</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>gflush</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_tpon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>tpon</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_tpoff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>tpoff</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_clkon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>clkon</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_clkoff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>clkoff</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_ringbell</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ringbell</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gbegin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>gbegin</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_textinit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>textinit</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_initnames</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>initnames</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pclos</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>pclos</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_popname</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>popname</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_spclos</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>spclos</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_zclear</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>zclear</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_screenspace</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>screenspace</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_reshapeviewport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>reshapeviewport</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winpush</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>winpush</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winpop</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>winpop</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_foreground</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>foreground</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endfullscrn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endfullscrn</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endpupmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endpupmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_fullscrn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fullscrn</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pupmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>pupmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winconstraints</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>winconstraints</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pagecolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pagecolor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_textcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>textcolor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_color</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>color</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_curveit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>curveit</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_font</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>font</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_linewidth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>linewidth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setlinestyle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setlinestyle</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setmap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setmap</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_swapinterval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>swapinterval</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_writemask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>writemask</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_textwritemask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>textwritemask</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_qdevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>qdevice</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_unqdevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>unqdevice</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_curvebasis</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>curvebasis</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_curveprecision</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>curveprecision</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_loadname</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>loadname</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_passthrough</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>passthrough</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pushname</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pushname</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setmonitor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setmonitor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setshade</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setshade</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setpattern</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setpattern</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pagewritemask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pagewritemask</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_callobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>callobj</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_delobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>delobj</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_editobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>editobj</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_makeobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>makeobj</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_maketag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>maketag</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_chunksize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>chunksize</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_compactify</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>compactify</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_deltag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>deltag</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lsrepeat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lsrepeat</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_objinsert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>objinsert</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_objreplace</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>objreplace</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winclose</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>winclose</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_blanktime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>blanktime</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_freepup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>freepup</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_backbuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>backbuffer</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_frontbuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>frontbuffer</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lsbackup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lsbackup</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_resetls</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>resetls</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lampon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lampon</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lampoff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lampoff</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setbell</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setbell</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_blankscreen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>blankscreen</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_depthcue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>depthcue</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_zbuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>zbuffer</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_backface</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>backface</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmov2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cmov2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_draw2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>draw2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_move2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>move2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pnt2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pnt2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_patchbasis</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>patchbasis</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_patchprecision</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>patchprecision</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pdr2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pdr2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pmv2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pmv2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpdr2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpdr2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpmv2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpmv2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_objdelete</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>objdelete</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_patchcurves</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>patchcurves</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_minsize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>minsize</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_maxsize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>maxsize</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_keepaspect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>keepaspect</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_prefsize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>prefsize</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_stepunit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>stepunit</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_fudge</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>fudge</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winmove</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>winmove</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_attachcursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>attachcursor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_deflinestyle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>deflinestyle</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_noise</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>noise</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_picksize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>picksize</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_qenter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>qenter</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setdepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setdepth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmov2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cmov2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_draw2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>draw2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_move2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>move2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pdr2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pdr2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pmv2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pmv2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pnt2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pnt2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rdr2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rdr2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rmv2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rmv2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpdr2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpdr2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpmv2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpmv2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmov2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cmov2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_draw2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>draw2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_move2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>move2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pnt2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pnt2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pdr2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pdr2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pmv2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pmv2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rdr2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rdr2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rmv2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rmv2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpdr2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpdr2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpmv2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpmv2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_loadmatrix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>loadmatrix</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_multmatrix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>multmatrix</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_crv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>crv</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rcrv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rcrv</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_addtopup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>addtopup</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_charstr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>charstr</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>getport</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_strwidth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>strwidth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>winopen</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_wintitle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>wintitle</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polf2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polf2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_poly</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>poly</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_poly2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>poly2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_crvn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>crvn</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rcrvn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>4</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 4</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>4</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>4 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rcrvn</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polf2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>long</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>long</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>long</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polf2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polfi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>long</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>long</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>long</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polfi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_poly2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>long</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>long</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>long</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>poly2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polyi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>long</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>long</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>long</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polyi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polf2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>short</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>short</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polf2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polfs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>short</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>short</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polfs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polys</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>short</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>short</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polys</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_poly2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>short</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>short</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>poly2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_defcursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>arg2</name> <index>[ <expr>128</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>128</expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>defcursor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_writepixels</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg2</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>writepixels</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_defbasis</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>arg2</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>defbasis</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gewrite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name> *</type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg2</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr><name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>gewrite</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rotate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getichararg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rotate</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rot</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getichararg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rot</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_circfi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>circfi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_circi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>circi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmovi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cmovi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_drawi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>drawi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_movei</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>movei</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pnti</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pnti</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_newtag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>newtag</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pdri</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pdri</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pmvi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pmvi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rdri</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rdri</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rmvi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rmvi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpdri</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpdri</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpmvi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpmvi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpti</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpti</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_circ</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>circ</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_circf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>circf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmov</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cmov</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_draw</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>draw</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_move</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>move</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pnt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pnt</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_scale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>scale</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_translate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>translate</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pdr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pdr</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pmv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pmv</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rdr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rdr</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rmv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rmv</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpdr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpdr</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpmv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpmv</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_RGBcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>RGBcolor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_RGBwritemask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>RGBwritemask</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setcursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setcursor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_tie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>tie</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_circfs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>circfs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_circs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>circs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmovs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cmovs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_draws</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>draws</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_moves</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>moves</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pdrs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pdrs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pmvs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pmvs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pnts</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pnts</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rdrs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rdrs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rmvs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rmvs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpdrs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpdrs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpmvs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpmvs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpts</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpts</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_curorigin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>curorigin</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cyclemap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cyclemap</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_patch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>arg2</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>arg3</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>patch</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_splf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg3</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>splf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_splf2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>float</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>float</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg3</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>splf2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_splfi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>long</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>long</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>long</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg3</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>splfi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_splf2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>long</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>long</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>long</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>long</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg3</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>splf2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_splfs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>short</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>3</expr> ]</index></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 3</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>short</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr>3 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 * <name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg3</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>splfs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_splf2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>short</name> <argument_list>(<argument><expr>* <name>arg2</name></expr></argument>)</argument_list></call> <index>[ <expr>2</expr> ]</index></expr> ;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> *</type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arg1</name> = <name>arg1</name> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arg2</name> = (<call><name>short</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index>) <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>short</name></expr></argument> , <argument><expr>2 * <name>arg1</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2 * <name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg3</name> = <macro><name>PyMem_NEW</name><argument_list>(<argument>unsigned short</argument> , <argument>arg1</argument> )</argument_list></macro>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>arg1</name></expr></argument> , <argument><expr>(<name>short</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>splf2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rpatch</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>arg2</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>arg3</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>arg4</name> <index>[ <expr>4</expr> ]</index> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>4 * 4</expr></argument> , <argument><expr>(<name>float</name> *) <name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rpatch</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_ortho2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ortho2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rect</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rectf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rectf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt4</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt4</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_textport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>textport</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_mapcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>mapcolor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_scrmask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>scrmask</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setvaluator</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setvaluator</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_viewport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>viewport</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_shaderange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>shaderange</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt4s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt4s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rectfi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rectfi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_recti</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>recti</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_xfpt4i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>xfpt4i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_prefposition</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>prefposition</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_arc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>arc</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_arcf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>arcf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_arcfi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>arcfi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_arci</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>arci</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bbox2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg6</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>bbox2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bbox2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg6</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>bbox2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bbox2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg6</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>bbox2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_blink</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>blink</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_ortho</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg6</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ortho</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_window</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg6</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>window</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lookat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg7</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>&amp;<name>arg7</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lookat</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> , <argument><expr><name>arg7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_perspective</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>perspective</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_polarview</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>polarview</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_arcfs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>arcfs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_arcs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>arcs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rectcopy</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg6</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rectcopy</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_RGBcursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg7</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>&amp;<name>arg7</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>RGBcursor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> , <argument><expr><name>arg7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getbutton</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>getbutton</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getcmmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getcmmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getlsbackup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getlsbackup</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getresetls</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getresetls</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getdcm</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getdcm</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getzbuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getzbuffer</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_ismex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>ismex</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_isobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>isobj</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_isqueued</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>isqueued</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_istag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>istag</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_genobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>genobj</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gentag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>gentag</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getbuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getbuffer</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getcolor</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getdisplaymode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getdisplaymode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getfont</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getfont</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getheight</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getheight</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gethitcode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>gethitcode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getlstyle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getlstyle</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getlwidth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getlwidth</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getmap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getmap</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getplanes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getplanes</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getwritemask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getwritemask</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_qtest</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>qtest</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getlsrepeat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getlsrepeat</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getmonitor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getmonitor</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getopenobj</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getopenobj</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getpattern</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getpattern</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winget</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>winget</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winattach</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>winattach</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getothermonitor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getothermonitor</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_newpup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>newpup</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getvaluator</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>getvaluator</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>winset</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_dopup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>dopup</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getdepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getdepth</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>2</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getcpos</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getcpos</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>2</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getsize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getsize</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>2</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getorigin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getorigin</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>2</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getviewport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getviewport</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>4</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gettp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>gettp</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>4</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getgpos</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getgpos</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>4</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_winposition</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>winposition</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gRGBcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>gRGBcolor</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>3</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gRGBmask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>gRGBmask</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>3</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getscrmask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getscrmask</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>4</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getmcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>getmcolor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>3</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_mapw</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg7</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg8</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg9</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>mapw</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> , <argument><expr>&amp; <name>arg5</name></expr></argument> , <argument><expr>&amp; <name>arg6</name></expr></argument> , <argument><expr>&amp; <name>arg7</name></expr></argument> , <argument><expr>&amp; <name>arg8</name></expr></argument> , <argument><expr>&amp; <name>arg9</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>6</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_mapw2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg5</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>mapw2</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> , <argument><expr>&amp; <name>arg5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>2</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getcursor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<expr_stmt><expr><call><name>getcursor</name><argument_list>( <argument><expr>&amp; <name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> , <argument><expr>&amp; <name>arg3</name></expr></argument> , <argument><expr>&amp; <name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>( <argument><expr>4</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr>(<name>short</name>) <name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name>mknewshortobject</name><argument_list>(<argument><expr>(<name>short</name>) <name>arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SetItem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>cmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_concave</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>concave</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_curstype</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>curstype</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_drawmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>drawmode</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_gammaramp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name><name>arg1</name> <index>[ <expr>256</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name><name>arg2</name> <index>[ <expr>256</expr> ]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name><name>arg3</name> <index>[ <expr>256</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>256</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>256</expr></argument> , <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>256</expr></argument> , <argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>gammaramp</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getbackface</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getbackface</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getdescender</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getdescender</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getdrawmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getdrawmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getmmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getmmode</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getsm</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>getsm</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getvideo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>getvideo</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_imakebackground</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>imakebackground</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lmbind</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lmbind</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lmdef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name> *</type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarraysize</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>arg4</name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>float</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lmdef</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_mmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>mmode</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_normal</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>normal</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_overlay</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>overlay</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_RGBrange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg7</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg8</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>&amp;<name>arg7</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>&amp;<name>arg8</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>RGBrange</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> , <argument><expr><name>arg7</name></expr></argument> , <argument><expr><name>arg8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setvideo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setvideo</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_shademodel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>shademodel</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_underlay</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>underlay</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgnclosedline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgnclosedline</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgnline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgnline</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgnpoint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgnpoint</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgnpolygon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgnpolygon</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgnsurface</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgnsurface</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgntmesh</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgntmesh</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_bgntrim</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>bgntrim</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endclosedline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endclosedline</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endline</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endpoint</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endpoint</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endpolygon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endpolygon</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endsurface</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endsurface</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endtmesh</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endtmesh</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_endtrim</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>endtrim</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_blendfunction</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>blendfunction</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_c3f</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>c3f</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_c3i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>c3i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_c3s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>c3s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_c4f</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>c4f</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_c4i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>c4i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_c4s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>c4s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_colorf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>colorf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_cpack</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>cpack</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_czclear</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>czclear</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_dglclose</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>dglclose</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_dglopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>dglopen</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getgdesc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>getgdesc</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_getnurbsproperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>getnurbsproperty</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr>&amp; <name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewfloatobject</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_glcompat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>glcompat</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_iconsize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>iconsize</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_icontitle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>string</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getistringarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>icontitle</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lRGBrange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg5</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg6</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg7</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg8</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>arg5</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>&amp;<name>arg6</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>&amp;<name>arg7</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>&amp;<name>arg8</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lRGBrange</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> , <argument><expr><name>arg5</name></expr></argument> , <argument><expr><name>arg6</name></expr></argument> , <argument><expr><name>arg7</name></expr></argument> , <argument><expr><name>arg8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_linesmooth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>linesmooth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lmcolor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lmcolor</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_logicop</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>logicop</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lsetdepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lsetdepth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_lshaderange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>lshaderange</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_n3f</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>n3f</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_noborder</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>noborder</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pntsmooth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pntsmooth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_readsource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>readsource</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_rectzoom</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>rectzoom</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_sbox</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>sbox</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_sboxi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>sboxi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_sboxs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>sboxs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_sboxf</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>sboxf</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_sboxfi</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>sboxfi</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_sboxfs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg3</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>arg4</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getishortarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>&amp;<name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>sboxfs</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> , <argument><expr><name>arg4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setnurbsproperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getifloatarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setnurbsproperty</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_setpup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg3</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setpup</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> , <argument><expr><name>arg3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_smoothline</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>smoothline</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_subpixel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>subpixel</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_swaptmesh</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>swaptmesh</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_swinopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>swinopen</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v2f</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>2</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v2f</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v2i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name><name>arg1</name> <index>[ <expr>2</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v2i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v2s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name><name>arg1</name> <index>[ <expr>2</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v2s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v3f</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v3f</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v3i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v3i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v3s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v3s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v4f</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getifloatarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v4f</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v4i</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v4i</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v4s</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getishortarray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v4s</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_videocmd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>videocmd</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_windepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>windepth</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_wmpack</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>wmpack</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_zdraw</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>zdraw</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_zfunction</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>zfunction</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_zsource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>zsource</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_zwritemask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>zwritemask</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v2d</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name><name>arg1</name> <index>[ <expr>2</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getidoublearray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v2d</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v3d</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name><name>arg1</name> <index>[ <expr>3</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getidoublearray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v3d</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_v4d</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name><name>arg1</name> <index>[ <expr>4</expr> ]</index></name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getidoublearray</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument> , <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>v4d</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_pixmode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg2</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>pixmode</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> , <argument><expr><name>arg2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_qgetfd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>qgetfd</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mknewlongobject</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>gl_dither</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>arg1</name></decl> ;</decl_stmt>
<if>if <condition>(<expr>!<call><name>getilongarg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>dither</name><argument_list>( <argument><expr><name>arg1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>gl_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"qread"</expr>, <expr><name>gl_qread</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"varray"</expr>, <expr><name>gl_varray</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nvarray"</expr>, <expr><name>gl_nvarray</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"vnarray"</expr>, <expr><name>gl_vnarray</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nurbssurface"</expr>, <expr><name>gl_nurbssurface</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nurbscurve"</expr>, <expr><name>gl_nurbscurve</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pwlcurve"</expr>, <expr><name>gl_pwlcurve</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pick"</expr>, <expr><name>gl_pick</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endpick"</expr>, <expr><name>gl_endpick</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gselect"</expr>, <expr><name>gl_gselect</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endselect"</expr>, <expr><name>gl_endselect</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getmatrix"</expr>, <expr><name>gl_getmatrix</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"altgetmatrix"</expr>, <expr><name>gl_altgetmatrix</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lrectwrite"</expr>, <expr><name>gl_lrectwrite</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lrectread"</expr>, <expr><name>gl_lrectread</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"readdisplay"</expr>, <expr><name>gl_readdisplay</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"packrect"</expr>, <expr><name>gl_packrect</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"unpackrect"</expr>, <expr><name>gl_unpackrect</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gversion"</expr>, <expr><name>gl_gversion</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clear"</expr>, <expr><name>gl_clear</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getshade"</expr>, <expr><name>gl_getshade</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"devport"</expr>, <expr><name>gl_devport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rdr2i"</expr>, <expr><name>gl_rdr2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rectfs"</expr>, <expr><name>gl_rectfs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rects"</expr>, <expr><name>gl_rects</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmv2i"</expr>, <expr><name>gl_rmv2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noport"</expr>, <expr><name>gl_noport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"popviewport"</expr>, <expr><name>gl_popviewport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clearhitcode"</expr>, <expr><name>gl_clearhitcode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"closeobj"</expr>, <expr><name>gl_closeobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cursoff"</expr>, <expr><name>gl_cursoff</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curson"</expr>, <expr><name>gl_curson</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"doublebuffer"</expr>, <expr><name>gl_doublebuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"finish"</expr>, <expr><name>gl_finish</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gconfig"</expr>, <expr><name>gl_gconfig</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ginit"</expr>, <expr><name>gl_ginit</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"greset"</expr>, <expr><name>gl_greset</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"multimap"</expr>, <expr><name>gl_multimap</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"onemap"</expr>, <expr><name>gl_onemap</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"popattributes"</expr>, <expr><name>gl_popattributes</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"popmatrix"</expr>, <expr><name>gl_popmatrix</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pushattributes"</expr>, <expr><name>gl_pushattributes</name></expr>,<expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pushmatrix"</expr>, <expr><name>gl_pushmatrix</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pushviewport"</expr>, <expr><name>gl_pushviewport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"qreset"</expr>, <expr><name>gl_qreset</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"RGBmode"</expr>, <expr><name>gl_RGBmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"singlebuffer"</expr>, <expr><name>gl_singlebuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"swapbuffers"</expr>, <expr><name>gl_swapbuffers</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gsync"</expr>, <expr><name>gl_gsync</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gflush"</expr>, <expr><name>gl_gflush</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tpon"</expr>, <expr><name>gl_tpon</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tpoff"</expr>, <expr><name>gl_tpoff</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clkon"</expr>, <expr><name>gl_clkon</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clkoff"</expr>, <expr><name>gl_clkoff</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ringbell"</expr>, <expr><name>gl_ringbell</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gbegin"</expr>, <expr><name>gl_gbegin</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"textinit"</expr>, <expr><name>gl_textinit</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"initnames"</expr>, <expr><name>gl_initnames</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pclos"</expr>, <expr><name>gl_pclos</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"popname"</expr>, <expr><name>gl_popname</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"spclos"</expr>, <expr><name>gl_spclos</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"zclear"</expr>, <expr><name>gl_zclear</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"screenspace"</expr>, <expr><name>gl_screenspace</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"reshapeviewport"</expr>, <expr><name>gl_reshapeviewport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winpush"</expr>, <expr><name>gl_winpush</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winpop"</expr>, <expr><name>gl_winpop</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"foreground"</expr>, <expr><name>gl_foreground</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endfullscrn"</expr>, <expr><name>gl_endfullscrn</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endpupmode"</expr>, <expr><name>gl_endpupmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"fullscrn"</expr>, <expr><name>gl_fullscrn</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pupmode"</expr>, <expr><name>gl_pupmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winconstraints"</expr>, <expr><name>gl_winconstraints</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pagecolor"</expr>, <expr><name>gl_pagecolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"textcolor"</expr>, <expr><name>gl_textcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"color"</expr>, <expr><name>gl_color</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curveit"</expr>, <expr><name>gl_curveit</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"font"</expr>, <expr><name>gl_font</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"linewidth"</expr>, <expr><name>gl_linewidth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setlinestyle"</expr>, <expr><name>gl_setlinestyle</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setmap"</expr>, <expr><name>gl_setmap</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"swapinterval"</expr>, <expr><name>gl_swapinterval</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"writemask"</expr>, <expr><name>gl_writemask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"textwritemask"</expr>, <expr><name>gl_textwritemask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"qdevice"</expr>, <expr><name>gl_qdevice</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"unqdevice"</expr>, <expr><name>gl_unqdevice</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curvebasis"</expr>, <expr><name>gl_curvebasis</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curveprecision"</expr>, <expr><name>gl_curveprecision</name></expr>,<expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"loadname"</expr>, <expr><name>gl_loadname</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"passthrough"</expr>, <expr><name>gl_passthrough</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pushname"</expr>, <expr><name>gl_pushname</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setmonitor"</expr>, <expr><name>gl_setmonitor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setshade"</expr>, <expr><name>gl_setshade</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setpattern"</expr>, <expr><name>gl_setpattern</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pagewritemask"</expr>, <expr><name>gl_pagewritemask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"callobj"</expr>, <expr><name>gl_callobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"delobj"</expr>, <expr><name>gl_delobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"editobj"</expr>, <expr><name>gl_editobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"makeobj"</expr>, <expr><name>gl_makeobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"maketag"</expr>, <expr><name>gl_maketag</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"chunksize"</expr>, <expr><name>gl_chunksize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"compactify"</expr>, <expr><name>gl_compactify</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"deltag"</expr>, <expr><name>gl_deltag</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lsrepeat"</expr>, <expr><name>gl_lsrepeat</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"objinsert"</expr>, <expr><name>gl_objinsert</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"objreplace"</expr>, <expr><name>gl_objreplace</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winclose"</expr>, <expr><name>gl_winclose</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"blanktime"</expr>, <expr><name>gl_blanktime</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"freepup"</expr>, <expr><name>gl_freepup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"backbuffer"</expr>, <expr><name>gl_backbuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"frontbuffer"</expr>, <expr><name>gl_frontbuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lsbackup"</expr>, <expr><name>gl_lsbackup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"resetls"</expr>, <expr><name>gl_resetls</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lampon"</expr>, <expr><name>gl_lampon</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lampoff"</expr>, <expr><name>gl_lampoff</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setbell"</expr>, <expr><name>gl_setbell</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"blankscreen"</expr>, <expr><name>gl_blankscreen</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"depthcue"</expr>, <expr><name>gl_depthcue</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"zbuffer"</expr>, <expr><name>gl_zbuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"backface"</expr>, <expr><name>gl_backface</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmov2i"</expr>, <expr><name>gl_cmov2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"draw2i"</expr>, <expr><name>gl_draw2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"move2i"</expr>, <expr><name>gl_move2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pnt2i"</expr>, <expr><name>gl_pnt2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"patchbasis"</expr>, <expr><name>gl_patchbasis</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"patchprecision"</expr>, <expr><name>gl_patchprecision</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pdr2i"</expr>, <expr><name>gl_pdr2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pmv2i"</expr>, <expr><name>gl_pmv2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpdr2i"</expr>, <expr><name>gl_rpdr2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpmv2i"</expr>, <expr><name>gl_rpmv2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt2i"</expr>, <expr><name>gl_xfpt2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"objdelete"</expr>, <expr><name>gl_objdelete</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"patchcurves"</expr>, <expr><name>gl_patchcurves</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"minsize"</expr>, <expr><name>gl_minsize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"maxsize"</expr>, <expr><name>gl_maxsize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"keepaspect"</expr>, <expr><name>gl_keepaspect</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"prefsize"</expr>, <expr><name>gl_prefsize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"stepunit"</expr>, <expr><name>gl_stepunit</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"fudge"</expr>, <expr><name>gl_fudge</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winmove"</expr>, <expr><name>gl_winmove</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"attachcursor"</expr>, <expr><name>gl_attachcursor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"deflinestyle"</expr>, <expr><name>gl_deflinestyle</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noise"</expr>, <expr><name>gl_noise</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"picksize"</expr>, <expr><name>gl_picksize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"qenter"</expr>, <expr><name>gl_qenter</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setdepth"</expr>, <expr><name>gl_setdepth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmov2s"</expr>, <expr><name>gl_cmov2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"draw2s"</expr>, <expr><name>gl_draw2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"move2s"</expr>, <expr><name>gl_move2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pdr2s"</expr>, <expr><name>gl_pdr2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pmv2s"</expr>, <expr><name>gl_pmv2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pnt2s"</expr>, <expr><name>gl_pnt2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rdr2s"</expr>, <expr><name>gl_rdr2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmv2s"</expr>, <expr><name>gl_rmv2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpdr2s"</expr>, <expr><name>gl_rpdr2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpmv2s"</expr>, <expr><name>gl_rpmv2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt2s"</expr>, <expr><name>gl_xfpt2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmov2"</expr>, <expr><name>gl_cmov2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"draw2"</expr>, <expr><name>gl_draw2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"move2"</expr>, <expr><name>gl_move2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pnt2"</expr>, <expr><name>gl_pnt2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pdr2"</expr>, <expr><name>gl_pdr2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pmv2"</expr>, <expr><name>gl_pmv2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rdr2"</expr>, <expr><name>gl_rdr2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmv2"</expr>, <expr><name>gl_rmv2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpdr2"</expr>, <expr><name>gl_rpdr2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpmv2"</expr>, <expr><name>gl_rpmv2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt2"</expr>, <expr><name>gl_xfpt2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"loadmatrix"</expr>, <expr><name>gl_loadmatrix</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"multmatrix"</expr>, <expr><name>gl_multmatrix</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"crv"</expr>, <expr><name>gl_crv</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rcrv"</expr>, <expr><name>gl_rcrv</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"addtopup"</expr>, <expr><name>gl_addtopup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"charstr"</expr>, <expr><name>gl_charstr</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getport"</expr>, <expr><name>gl_getport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"strwidth"</expr>, <expr><name>gl_strwidth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winopen"</expr>, <expr><name>gl_winopen</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"wintitle"</expr>, <expr><name>gl_wintitle</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polf"</expr>, <expr><name>gl_polf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polf2"</expr>, <expr><name>gl_polf2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"poly"</expr>, <expr><name>gl_poly</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"poly2"</expr>, <expr><name>gl_poly2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"crvn"</expr>, <expr><name>gl_crvn</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rcrvn"</expr>, <expr><name>gl_rcrvn</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polf2i"</expr>, <expr><name>gl_polf2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polfi"</expr>, <expr><name>gl_polfi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"poly2i"</expr>, <expr><name>gl_poly2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polyi"</expr>, <expr><name>gl_polyi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polf2s"</expr>, <expr><name>gl_polf2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polfs"</expr>, <expr><name>gl_polfs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polys"</expr>, <expr><name>gl_polys</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"poly2s"</expr>, <expr><name>gl_poly2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"defcursor"</expr>, <expr><name>gl_defcursor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"writepixels"</expr>, <expr><name>gl_writepixels</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"defbasis"</expr>, <expr><name>gl_defbasis</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gewrite"</expr>, <expr><name>gl_gewrite</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rotate"</expr>, <expr><name>gl_rotate</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rot"</expr>, <expr><name>gl_rot</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"circfi"</expr>, <expr><name>gl_circfi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"circi"</expr>, <expr><name>gl_circi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmovi"</expr>, <expr><name>gl_cmovi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"drawi"</expr>, <expr><name>gl_drawi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"movei"</expr>, <expr><name>gl_movei</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pnti"</expr>, <expr><name>gl_pnti</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"newtag"</expr>, <expr><name>gl_newtag</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pdri"</expr>, <expr><name>gl_pdri</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pmvi"</expr>, <expr><name>gl_pmvi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rdri"</expr>, <expr><name>gl_rdri</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmvi"</expr>, <expr><name>gl_rmvi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpdri"</expr>, <expr><name>gl_rpdri</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpmvi"</expr>, <expr><name>gl_rpmvi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpti"</expr>, <expr><name>gl_xfpti</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"circ"</expr>, <expr><name>gl_circ</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"circf"</expr>, <expr><name>gl_circf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmov"</expr>, <expr><name>gl_cmov</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"draw"</expr>, <expr><name>gl_draw</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"move"</expr>, <expr><name>gl_move</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pnt"</expr>, <expr><name>gl_pnt</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"scale"</expr>, <expr><name>gl_scale</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"translate"</expr>, <expr><name>gl_translate</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pdr"</expr>, <expr><name>gl_pdr</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pmv"</expr>, <expr><name>gl_pmv</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rdr"</expr>, <expr><name>gl_rdr</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmv"</expr>, <expr><name>gl_rmv</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpdr"</expr>, <expr><name>gl_rpdr</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpmv"</expr>, <expr><name>gl_rpmv</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt"</expr>, <expr><name>gl_xfpt</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"RGBcolor"</expr>, <expr><name>gl_RGBcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"RGBwritemask"</expr>, <expr><name>gl_RGBwritemask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setcursor"</expr>, <expr><name>gl_setcursor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tie"</expr>, <expr><name>gl_tie</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"circfs"</expr>, <expr><name>gl_circfs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"circs"</expr>, <expr><name>gl_circs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmovs"</expr>, <expr><name>gl_cmovs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"draws"</expr>, <expr><name>gl_draws</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"moves"</expr>, <expr><name>gl_moves</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pdrs"</expr>, <expr><name>gl_pdrs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pmvs"</expr>, <expr><name>gl_pmvs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pnts"</expr>, <expr><name>gl_pnts</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rdrs"</expr>, <expr><name>gl_rdrs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rmvs"</expr>, <expr><name>gl_rmvs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpdrs"</expr>, <expr><name>gl_rpdrs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpmvs"</expr>, <expr><name>gl_rpmvs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpts"</expr>, <expr><name>gl_xfpts</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curorigin"</expr>, <expr><name>gl_curorigin</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cyclemap"</expr>, <expr><name>gl_cyclemap</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"patch"</expr>, <expr><name>gl_patch</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"splf"</expr>, <expr><name>gl_splf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"splf2"</expr>, <expr><name>gl_splf2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"splfi"</expr>, <expr><name>gl_splfi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"splf2i"</expr>, <expr><name>gl_splf2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"splfs"</expr>, <expr><name>gl_splfs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"splf2s"</expr>, <expr><name>gl_splf2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rpatch"</expr>, <expr><name>gl_rpatch</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ortho2"</expr>, <expr><name>gl_ortho2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rect"</expr>, <expr><name>gl_rect</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rectf"</expr>, <expr><name>gl_rectf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt4"</expr>, <expr><name>gl_xfpt4</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"textport"</expr>, <expr><name>gl_textport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mapcolor"</expr>, <expr><name>gl_mapcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"scrmask"</expr>, <expr><name>gl_scrmask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setvaluator"</expr>, <expr><name>gl_setvaluator</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"viewport"</expr>, <expr><name>gl_viewport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"shaderange"</expr>, <expr><name>gl_shaderange</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt4s"</expr>, <expr><name>gl_xfpt4s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rectfi"</expr>, <expr><name>gl_rectfi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"recti"</expr>, <expr><name>gl_recti</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"xfpt4i"</expr>, <expr><name>gl_xfpt4i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"prefposition"</expr>, <expr><name>gl_prefposition</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"arc"</expr>, <expr><name>gl_arc</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"arcf"</expr>, <expr><name>gl_arcf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"arcfi"</expr>, <expr><name>gl_arcfi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"arci"</expr>, <expr><name>gl_arci</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bbox2"</expr>, <expr><name>gl_bbox2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bbox2i"</expr>, <expr><name>gl_bbox2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bbox2s"</expr>, <expr><name>gl_bbox2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"blink"</expr>, <expr><name>gl_blink</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ortho"</expr>, <expr><name>gl_ortho</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"window"</expr>, <expr><name>gl_window</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lookat"</expr>, <expr><name>gl_lookat</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"perspective"</expr>, <expr><name>gl_perspective</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"polarview"</expr>, <expr><name>gl_polarview</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"arcfs"</expr>, <expr><name>gl_arcfs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"arcs"</expr>, <expr><name>gl_arcs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rectcopy"</expr>, <expr><name>gl_rectcopy</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"RGBcursor"</expr>, <expr><name>gl_RGBcursor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getbutton"</expr>, <expr><name>gl_getbutton</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getcmmode"</expr>, <expr><name>gl_getcmmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getlsbackup"</expr>, <expr><name>gl_getlsbackup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getresetls"</expr>, <expr><name>gl_getresetls</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getdcm"</expr>, <expr><name>gl_getdcm</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getzbuffer"</expr>, <expr><name>gl_getzbuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ismex"</expr>, <expr><name>gl_ismex</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"isobj"</expr>, <expr><name>gl_isobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"isqueued"</expr>, <expr><name>gl_isqueued</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"istag"</expr>, <expr><name>gl_istag</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"genobj"</expr>, <expr><name>gl_genobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gentag"</expr>, <expr><name>gl_gentag</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getbuffer"</expr>, <expr><name>gl_getbuffer</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getcolor"</expr>, <expr><name>gl_getcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getdisplaymode"</expr>, <expr><name>gl_getdisplaymode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getfont"</expr>, <expr><name>gl_getfont</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getheight"</expr>, <expr><name>gl_getheight</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gethitcode"</expr>, <expr><name>gl_gethitcode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getlstyle"</expr>, <expr><name>gl_getlstyle</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getlwidth"</expr>, <expr><name>gl_getlwidth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getmap"</expr>, <expr><name>gl_getmap</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getplanes"</expr>, <expr><name>gl_getplanes</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getwritemask"</expr>, <expr><name>gl_getwritemask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"qtest"</expr>, <expr><name>gl_qtest</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getlsrepeat"</expr>, <expr><name>gl_getlsrepeat</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getmonitor"</expr>, <expr><name>gl_getmonitor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getopenobj"</expr>, <expr><name>gl_getopenobj</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getpattern"</expr>, <expr><name>gl_getpattern</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winget"</expr>, <expr><name>gl_winget</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winattach"</expr>, <expr><name>gl_winattach</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getothermonitor"</expr>, <expr><name>gl_getothermonitor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"newpup"</expr>, <expr><name>gl_newpup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getvaluator"</expr>, <expr><name>gl_getvaluator</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winset"</expr>, <expr><name>gl_winset</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"dopup"</expr>, <expr><name>gl_dopup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getdepth"</expr>, <expr><name>gl_getdepth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getcpos"</expr>, <expr><name>gl_getcpos</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getsize"</expr>, <expr><name>gl_getsize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getorigin"</expr>, <expr><name>gl_getorigin</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getviewport"</expr>, <expr><name>gl_getviewport</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gettp"</expr>, <expr><name>gl_gettp</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getgpos"</expr>, <expr><name>gl_getgpos</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"winposition"</expr>, <expr><name>gl_winposition</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gRGBcolor"</expr>, <expr><name>gl_gRGBcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gRGBmask"</expr>, <expr><name>gl_gRGBmask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getscrmask"</expr>, <expr><name>gl_getscrmask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getmcolor"</expr>, <expr><name>gl_getmcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mapw"</expr>, <expr><name>gl_mapw</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mapw2"</expr>, <expr><name>gl_mapw2</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getcursor"</expr>, <expr><name>gl_getcursor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cmode"</expr>, <expr><name>gl_cmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"concave"</expr>, <expr><name>gl_concave</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curstype"</expr>, <expr><name>gl_curstype</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"drawmode"</expr>, <expr><name>gl_drawmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"gammaramp"</expr>, <expr><name>gl_gammaramp</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getbackface"</expr>, <expr><name>gl_getbackface</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getdescender"</expr>, <expr><name>gl_getdescender</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getdrawmode"</expr>, <expr><name>gl_getdrawmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getmmode"</expr>, <expr><name>gl_getmmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getsm"</expr>, <expr><name>gl_getsm</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getvideo"</expr>, <expr><name>gl_getvideo</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"imakebackground"</expr>, <expr><name>gl_imakebackground</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lmbind"</expr>, <expr><name>gl_lmbind</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lmdef"</expr>, <expr><name>gl_lmdef</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mmode"</expr>, <expr><name>gl_mmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"normal"</expr>, <expr><name>gl_normal</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"overlay"</expr>, <expr><name>gl_overlay</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"RGBrange"</expr>, <expr><name>gl_RGBrange</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setvideo"</expr>, <expr><name>gl_setvideo</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"shademodel"</expr>, <expr><name>gl_shademodel</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"underlay"</expr>, <expr><name>gl_underlay</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgnclosedline"</expr>, <expr><name>gl_bgnclosedline</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgnline"</expr>, <expr><name>gl_bgnline</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgnpoint"</expr>, <expr><name>gl_bgnpoint</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgnpolygon"</expr>, <expr><name>gl_bgnpolygon</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgnsurface"</expr>, <expr><name>gl_bgnsurface</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgntmesh"</expr>, <expr><name>gl_bgntmesh</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bgntrim"</expr>, <expr><name>gl_bgntrim</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endclosedline"</expr>, <expr><name>gl_endclosedline</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endline"</expr>, <expr><name>gl_endline</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endpoint"</expr>, <expr><name>gl_endpoint</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endpolygon"</expr>, <expr><name>gl_endpolygon</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endsurface"</expr>, <expr><name>gl_endsurface</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endtmesh"</expr>, <expr><name>gl_endtmesh</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endtrim"</expr>, <expr><name>gl_endtrim</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"blendfunction"</expr>, <expr><name>gl_blendfunction</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"c3f"</expr>, <expr><name>gl_c3f</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"c3i"</expr>, <expr><name>gl_c3i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"c3s"</expr>, <expr><name>gl_c3s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"c4f"</expr>, <expr><name>gl_c4f</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"c4i"</expr>, <expr><name>gl_c4i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"c4s"</expr>, <expr><name>gl_c4s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"colorf"</expr>, <expr><name>gl_colorf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cpack"</expr>, <expr><name>gl_cpack</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"czclear"</expr>, <expr><name>gl_czclear</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"dglclose"</expr>, <expr><name>gl_dglclose</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"dglopen"</expr>, <expr><name>gl_dglopen</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getgdesc"</expr>, <expr><name>gl_getgdesc</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getnurbsproperty"</expr>, <expr><name>gl_getnurbsproperty</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"glcompat"</expr>, <expr><name>gl_glcompat</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"iconsize"</expr>, <expr><name>gl_iconsize</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"icontitle"</expr>, <expr><name>gl_icontitle</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lRGBrange"</expr>, <expr><name>gl_lRGBrange</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"linesmooth"</expr>, <expr><name>gl_linesmooth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lmcolor"</expr>, <expr><name>gl_lmcolor</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"logicop"</expr>, <expr><name>gl_logicop</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lsetdepth"</expr>, <expr><name>gl_lsetdepth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"lshaderange"</expr>, <expr><name>gl_lshaderange</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"n3f"</expr>, <expr><name>gl_n3f</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noborder"</expr>, <expr><name>gl_noborder</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pntsmooth"</expr>, <expr><name>gl_pntsmooth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"readsource"</expr>, <expr><name>gl_readsource</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rectzoom"</expr>, <expr><name>gl_rectzoom</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sbox"</expr>, <expr><name>gl_sbox</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sboxi"</expr>, <expr><name>gl_sboxi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sboxs"</expr>, <expr><name>gl_sboxs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sboxf"</expr>, <expr><name>gl_sboxf</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sboxfi"</expr>, <expr><name>gl_sboxfi</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sboxfs"</expr>, <expr><name>gl_sboxfs</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setnurbsproperty"</expr>, <expr><name>gl_setnurbsproperty</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setpup"</expr>, <expr><name>gl_setpup</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"smoothline"</expr>, <expr><name>gl_smoothline</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"subpixel"</expr>, <expr><name>gl_subpixel</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"swaptmesh"</expr>, <expr><name>gl_swaptmesh</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"swinopen"</expr>, <expr><name>gl_swinopen</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v2f"</expr>, <expr><name>gl_v2f</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v2i"</expr>, <expr><name>gl_v2i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v2s"</expr>, <expr><name>gl_v2s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v3f"</expr>, <expr><name>gl_v3f</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v3i"</expr>, <expr><name>gl_v3i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v3s"</expr>, <expr><name>gl_v3s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v4f"</expr>, <expr><name>gl_v4f</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v4i"</expr>, <expr><name>gl_v4i</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v4s"</expr>, <expr><name>gl_v4s</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"videocmd"</expr>, <expr><name>gl_videocmd</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"windepth"</expr>, <expr><name>gl_windepth</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"wmpack"</expr>, <expr><name>gl_wmpack</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"zdraw"</expr>, <expr><name>gl_zdraw</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"zfunction"</expr>, <expr><name>gl_zfunction</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"zsource"</expr>, <expr><name>gl_zsource</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"zwritemask"</expr>, <expr><name>gl_zwritemask</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v2d"</expr>, <expr><name>gl_v2d</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v3d"</expr>, <expr><name>gl_v3d</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"v4d"</expr>, <expr><name>gl_v4d</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pixmode"</expr>, <expr><name>gl_pixmode</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"qgetfd"</expr>, <expr><name>gl_qgetfd</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"dither"</expr>, <expr><name>gl_dither</name></expr>, <expr><name>METH_OLDARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>initgl</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the gl module has been removed in "
"Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>Py_InitModule</name><argument_list>(<argument><expr>"gl"</expr></argument>, <argument><expr><name>gl_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
