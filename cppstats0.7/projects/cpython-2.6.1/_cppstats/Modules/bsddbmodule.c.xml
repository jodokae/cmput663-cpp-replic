<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/bsddbmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pythread.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DB_185_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db_185.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>DB</name> *</type><name>di_bsddb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>di_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>di_type</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyThread_type_lock</name></type> <name>di_lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>bsddbobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Bsddbtype</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_bsddbobject</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v)-&gt;ob_type == &amp;Bsddbtype)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_bsddbobject_open</name><parameter_list>(<param><type><name>v</name></type></param>, <param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if ((v)-&gt;di_bsddb == NULL) { PyErr_SetString(BsddbError, "BSDDB object has already been closed"); return r; }</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BsddbError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newdbhashobject</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>int</name></type> <name>bsize</name></decl></param>, <param><decl><type><name>int</name></type> <name>ffactor</name></decl></param>, <param><decl><type><name>int</name></type> <name>nelem</name></decl></param>, <param><decl><type><name>int</name></type> <name>cachesize</name></decl></param>,
<param><decl><type><name>int</name></type> <name>hash</name></decl></param>, <param><decl><type><name>int</name></type> <name>lorder</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HASHINFO</name></type> <name>info</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>dp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>bsddbobject</name></expr></argument>, <argument><expr>&amp;<name>Bsddbtype</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>info</name>.<name>bsize</name></name> = <name>bsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>ffactor</name></name> = <name>ffactor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>nelem</name></name> = <name>nelem</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>cachesize</name></name> = <name>cachesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>hash</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>lorder</name></name> = <name>lorder</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> |= <name>O_BINARY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name><name>dp</name>-&gt;<name>di_bsddb</name></name> <init>= <expr><call><name>dbopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>DB_HASH</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_type</name></name> = <name>DB_HASH</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <call><name>PyThread_allocate_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_lock</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>, <argument><expr>"can't allocate lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>(<name>PyObject</name> *)<name>dp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newdbbtobject</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>int</name></type> <name>btflags</name></decl></param>, <param><decl><type><name>int</name></type> <name>cachesize</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxkeypage</name></decl></param>,
<param><decl><type><name>int</name></type> <name>minkeypage</name></decl></param>, <param><decl><type><name>int</name></type> <name>psize</name></decl></param>, <param><decl><type><name>int</name></type> <name>lorder</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BTREEINFO</name></type> <name>info</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>dp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>bsddbobject</name></expr></argument>, <argument><expr>&amp;<name>Bsddbtype</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>info</name>.<name>flags</name></name> = <name>btflags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>cachesize</name></name> = <name>cachesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>maxkeypage</name></name> = <name>maxkeypage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>minkeypage</name></name> = <name>minkeypage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>psize</name></name> = <name>psize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>lorder</name></name> = <name>lorder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>compare</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>prefix</name></name> = 0</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> |= <name>O_BINARY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name><name>dp</name>-&gt;<name>di_bsddb</name></name> <init>= <expr><call><name>dbopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_type</name></name> = <name>DB_BTREE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <call><name>PyThread_allocate_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_lock</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>, <argument><expr>"can't allocate lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>(<name>PyObject</name> *)<name>dp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newdbrnobject</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>int</name></type> <name>rnflags</name></decl></param>, <param><decl><type><name>int</name></type> <name>cachesize</name></decl></param>, <param><decl><type><name>int</name></type> <name>psize</name></decl></param>, <param><decl><type><name>int</name></type> <name>lorder</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>reclen</name></decl></param>, <param><decl><type><name>u_char</name></type> <name>bval</name></decl></param>, <param><decl><type><name>char</name> *</type><name>bfname</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECNOINFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>dp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>bsddbobject</name></expr></argument>, <argument><expr>&amp;<name>Bsddbtype</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>info</name>.<name>flags</name></name> = <name>rnflags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>cachesize</name></name> = <name>cachesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>psize</name></name> = <name>psize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>lorder</name></name> = <name>lorder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>reclen</name></name> = <name>reclen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>bval</name></name> = <name>bval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>.<name>bfname</name></name> = <name>bfname</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> |= <name>O_BINARY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fd</name> = <call><name>open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fd</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name><name>dp</name>-&gt;<name>di_bsddb</name></name> <init>= <expr><call><name>dbopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>DB_RECNO</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Py_END_ALLOW_THREADS</name></expr></expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_type</name></name> = <name>DB_RECNO</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <call><name>PyThread_allocate_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_lock</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>, <argument><expr>"can't allocate lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>(<name>PyObject</name> *)<name>dp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bsddb_dealloc</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_lock</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyThread_acquire_lock</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_lock</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_release_lock</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyThread_free_lock</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>status</name> <init>= <expr><call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>close</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"Python bsddb: close errno %d in dealloc\n"</expr></argument>,
<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDDB_BGN_SAVE</name><parameter_list>(<param><type><name>_dp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_BEGIN_ALLOW_THREADS PyThread_acquire_lock(_dp-&gt;di_lock,1);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDDB_END_SAVE</name><parameter_list>(<param><type><name>_dp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyThread_release_lock(_dp-&gt;di_lock); Py_END_ALLOW_THREADS</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDDB_BGN_SAVE</name><parameter_list>(<param><type><name>_dp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_BEGIN_ALLOW_THREADS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDDB_END_SAVE</name><parameter_list>(<param><type><name>_dp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>Py_END_ALLOW_THREADS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>bsddb_length</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_size</name></name> &lt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<for>for (<init><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>seq</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>,
<argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>,<argument><expr><name>R_FIRST</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>status</name> == 0</expr>;</condition>
<incr><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>seq</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>,
<argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr><name>R_NEXT</name></expr></argument>)</argument_list></call></expr></incr>)
<expr_stmt><expr><name>size</name>++</expr>;</expr_stmt></for>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>dp</name>-&gt;<name>di_size</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_subscript</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>,<decl><type ref="prev"/><name><name>buf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"key type must be integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = &amp;<name>recno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"key type must be string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>get</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>drec</name>.<name>size</name></name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <expr_stmt><expr><name>data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>data</name> = <name>buf</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>data</name>!=<name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name><name>drec</name>.<name>data</name></name></expr></argument>,<argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>data</name>==<name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>data</name> != <name>buf</name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bsddb_ass_sub</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"bsddb key type must be integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = &amp;<name>recno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"bsddb key type must be string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>del</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"bsddb value type must be string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>drec</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drec</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>put</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
}</block></else></if>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>bsddb_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>bsddb_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>bsddb_subscript</name></expr>,
<expr>(<name>objobjargproc</name>)<name>bsddb_ass_sub</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_close</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>close</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_keys</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>item</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name><init>=<expr><name>NULL</name></expr></init>,<name><name>buf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>seq</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr><name>R_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>krec</name>.<name>size</name></name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <expr_stmt><expr><name>data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>data</name> = <name>buf</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>data</name> != <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name><name>krec</name>.<name>data</name></name></expr></argument>,<argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>status</name> == 0 &amp;&amp; <name>data</name>==<name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr><name>status</name> == 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then>
<expr_stmt><expr><name>item</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>*((<name>int</name>*)<name>data</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>item</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr>(<name>int</name>)<name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>data</name> != <name>buf</name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>seq</name></name>)
<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr><name>R_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>krec</name>.<name>size</name></name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><name>data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>data</name> = <name>buf</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>data</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name><name>krec</name>.<name>data</name></name></expr></argument>,<argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>data</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
}</block></while>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_size</name></name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>list</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_has_key</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i;key type must be integer"</expr></argument>,
<argument><expr>&amp;<name>recno</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = &amp;<name>recno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#;key type must be string"</expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>get</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>status</name> == 0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_set_location</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>,<decl><type ref="prev"/><name><name>buf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recno_t</name></type> <name>recno</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"i;key type must be integer"</expr></argument>,
<argument><expr>&amp;<name>recno</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = &amp;<name>recno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"s#;key type must be string"</expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>seq</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>, <argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr><name>R_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>drec</name>.<name>size</name></name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <expr_stmt><expr><name>data</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>data</name> = <name>buf</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>data</name>!=<name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name><name>drec</name>.<name>data</name></name></expr></argument>,<argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>data</name>==<name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"is#"</expr></argument>, <argument><expr>*((<name>int</name>*)<name><name>krec</name>.<name>data</name></name>)</expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#s#"</expr></argument>, <argument><expr><name><name>krec</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>data</name> != <name>buf</name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_seq</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>int</name></type> <name>sequence_request</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>kdata</name><init>=<expr><name>NULL</name></expr></init>,<name><name>kbuf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ddata</name><init>=<expr><name>NULL</name></expr></init>,<name><name>dbuf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>data</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>krec</name>.<name>size</name></name> = 0</expr>;</expr_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>seq</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>&amp;<name>krec</name></expr></argument>,
<argument><expr>&amp;<name>drec</name></expr></argument>, <argument><expr><name>sequence_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>krec</name>.<name>size</name></name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>kbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <expr_stmt><expr><name>kdata</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>kdata</name> = <name>kbuf</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>kdata</name> != <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kdata</name></expr></argument>,<argument><expr><name><name>krec</name>.<name>data</name></name></expr></argument>,<argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>drec</name>.<name>size</name></name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <expr_stmt><expr><name>ddata</name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>ddata</name> = <name>dbuf</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>ddata</name> != <name>NULL</name></expr>)</condition><then> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,<argument><expr><name><name>drec</name>.<name>data</name></name></expr></argument>,<argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>status</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>kdata</name> == <name>NULL</name>) || (<name>ddata</name> == <name>NULL</name>)</expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>status</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr>"no key/data pairs"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_type</name></name> == <name>DB_RECNO</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"is#"</expr></argument>, <argument><expr>*((<name>int</name>*)<name>kdata</name>)</expr></argument>,
<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"s#s#"</expr></argument>, <argument><expr><name>kdata</name></expr></argument>, <argument><expr><name><name>krec</name>.<name>size</name></name></expr></argument>,
<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>drec</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>kdata</name> != <name>kbuf</name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>kdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ddata</name> != <name>dbuf</name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_next</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>bsddb_seq</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>R_NEXT</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_previous</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>bsddb_seq</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>R_PREV</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_first</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>bsddb_seq</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>R_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_last</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>bsddb_seq</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>R_LAST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_sync</name><parameter_list>(<param><decl><type><name>bsddbobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_bsddbobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_BGN_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<expr_stmt><expr><name>status</name> = <call>(<name><name>dp</name>-&gt;<name>di_bsddb</name>-&gt;<name>sync</name></name>)<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_bsddb</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BSDDB_END_SAVE</name><argument_list>(<argument>dp</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>status</name> = 0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>bsddb_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_close</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"keys"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_keys</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"has_key"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_has_key</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"set_location"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_set_location</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"next"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_next</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"previous"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_previous</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"first"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_first</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"last"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_last</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"sync"</expr>, <expr>(<name>PyCFunction</name>)<name>bsddb_sync</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsddb_getattr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>bsddb_methods</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Bsddbtype</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"bsddb.bsddb"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>bsddbobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>bsddb_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>bsddb_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>&amp;<name>bsddb_as_mapping</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsdhashopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>flag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0666</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bsize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ffactor</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nelem</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cachesize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lorder</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z|siiiiiii:hashopen"</expr></argument>,
<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>flag</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr>&amp;<name>bsize</name></expr></argument>, <argument><expr>&amp;<name>ffactor</name></expr></argument>, <argument><expr>&amp;<name>nelem</name></expr></argument>, <argument><expr>&amp;<name>cachesize</name></expr></argument>,
<argument><expr>&amp;<name>hash</name></expr></argument>, <argument><expr>&amp;<name>lorder</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>flag</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDONLY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'w'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'c'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name>|<name>O_CREAT</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'n'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name>|<name>O_CREAT</name>|<name>O_TRUNC</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"Flag should begin with 'r', 'w', 'c' or 'n'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>1</expr>]</index></name> == 'l'</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_EXLOCK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>O_SHLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>O_SHLOCK</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>flags</name> |= <name>O_EXLOCK</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"locking not supported on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
}</block></then></if>
<return>return <expr><call><name>newdbhashobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>bsize</name></expr></argument>, <argument><expr><name>ffactor</name></expr></argument>, <argument><expr><name>nelem</name></expr></argument>, <argument><expr><name>cachesize</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>lorder</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsdbtopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>flag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0666</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cachesize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxkeypage</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minkeypage</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>btflags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>psize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lorder</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z|siiiiiii:btopen"</expr></argument>,
<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>flag</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr>&amp;<name>btflags</name></expr></argument>, <argument><expr>&amp;<name>cachesize</name></expr></argument>, <argument><expr>&amp;<name>maxkeypage</name></expr></argument>, <argument><expr>&amp;<name>minkeypage</name></expr></argument>,
<argument><expr>&amp;<name>psize</name></expr></argument>, <argument><expr>&amp;<name>lorder</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>flag</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDONLY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'w'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'c'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name>|<name>O_CREAT</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'n'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name>|<name>O_CREAT</name>|<name>O_TRUNC</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"Flag should begin with 'r', 'w', 'c' or 'n'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>1</expr>]</index></name> == 'l'</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_EXLOCK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>O_SHLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>O_SHLOCK</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>flags</name> |= <name>O_EXLOCK</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"locking not supported on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
}</block></then></if>
<return>return <expr><call><name>newdbbtobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>btflags</name></expr></argument>, <argument><expr><name>cachesize</name></expr></argument>, <argument><expr><name>maxkeypage</name></expr></argument>, <argument><expr><name>minkeypage</name></expr></argument>,
<argument><expr><name>psize</name></expr></argument>, <argument><expr><name>lorder</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>bsdrnopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>flag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0666</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cachesize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnflags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>psize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lorder</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>reclen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>bval</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>bfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z|siiiiiiss:rnopen"</expr></argument>,
<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>flag</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr>&amp;<name>rnflags</name></expr></argument>, <argument><expr>&amp;<name>cachesize</name></expr></argument>, <argument><expr>&amp;<name>psize</name></expr></argument>, <argument><expr>&amp;<name>lorder</name></expr></argument>,
<argument><expr>&amp;<name>reclen</name></expr></argument>, <argument><expr>&amp;<name>bval</name></expr></argument>, <argument><expr>&amp;<name>bfname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>flag</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDONLY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'w'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'c'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name>|<name>O_CREAT</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'n'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> = <name>O_RDWR</name>|<name>O_CREAT</name>|<name>O_TRUNC</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"Flag should begin with 'r', 'w', 'c' or 'n'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>1</expr>]</index></name> == 'l'</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_EXLOCK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>O_SHLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>flag</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then>
<expr_stmt><expr><name>flags</name> |= <name>O_SHLOCK</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>flags</name> |= <name>O_EXLOCK</name></expr>;</expr_stmt></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"locking not supported on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><name><name>flag</name><index>[<expr>1</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>BsddbError</name></expr></argument>,
<argument><expr>"Flag char 2 should be 'l' or absent"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<return>return <expr><call><name>newdbrnobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rnflags</name></expr></argument>, <argument><expr><name>cachesize</name></expr></argument>,
<argument><expr><name>psize</name></expr></argument>, <argument><expr><name>lorder</name></expr></argument>, <argument><expr><name>reclen</name></expr></argument>, <argument><expr><name><name>bval</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>bfname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>bsddbmodule_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"hashopen"</expr>, <expr>(<name>PyCFunction</name>)<name>bsdhashopen</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"btopen"</expr>, <expr>(<name>PyCFunction</name>)<name>bsdbtopen</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"rnopen"</expr>, <expr>(<name>PyCFunction</name>)<name>bsdrnopen</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"open"</expr>, <expr>(<name>PyCFunction</name>)<name>bsdhashopen</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initbsddb185</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the bsddb185 module has been removed in "
"Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>Bsddbtype</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"bsddb185"</expr></argument>, <argument><expr><name>bsddbmodule_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BsddbError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"bsddb.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>BsddbError</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>BsddbError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
