<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/cPickle.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cStringIO.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>cPickle_module_documentation</name></expr></argument>,
<argument><expr>"C implementation and optimization of the Python pickle module."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_eval_input</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graminit.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_eval_input</name></cpp:macro> <cpp:value>eval_input</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEL_LIST_SLICE</name><parameter_list>(<param><type><name>list</name></type></param>, <param><type><name>from</name></type></param>, <param><type><name>to</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyList_SetSlice(list, from, to, NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_BUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGHEST_PROTOCOL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARK</name></cpp:macro> <cpp:value>'('</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP</name></cpp:macro> <cpp:value>'.'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_MARK</name></cpp:macro> <cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP</name></cpp:macro> <cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT</name></cpp:macro> <cpp:value>'F'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINFLOAT</name></cpp:macro> <cpp:value>'G'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT</name></cpp:macro> <cpp:value>'I'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BININT</name></cpp:macro> <cpp:value>'J'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BININT1</name></cpp:macro> <cpp:value>'K'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG</name></cpp:macro> <cpp:value>'L'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BININT2</name></cpp:macro> <cpp:value>'M'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONE</name></cpp:macro> <cpp:value>'N'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERSID</name></cpp:macro> <cpp:value>'P'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINPERSID</name></cpp:macro> <cpp:value>'Q'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDUCE</name></cpp:macro> <cpp:value>'R'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINSTRING</name></cpp:macro> <cpp:value>'T'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORT_BINSTRING</name></cpp:macro> <cpp:value>'U'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE</name></cpp:macro> <cpp:value>'V'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINUNICODE</name></cpp:macro> <cpp:value>'X'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND</name></cpp:macro> <cpp:value>'a'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT</name></cpp:macro> <cpp:value>'d'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_DICT</name></cpp:macro> <cpp:value>'}'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPENDS</name></cpp:macro> <cpp:value>'e'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET</name></cpp:macro> <cpp:value>'g'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINGET</name></cpp:macro> <cpp:value>'h'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BINGET</name></cpp:macro> <cpp:value>'j'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST</name></cpp:macro> <cpp:value>'l'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_LIST</name></cpp:macro> <cpp:value>']'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ</name></cpp:macro> <cpp:value>'o'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT</name></cpp:macro> <cpp:value>'p'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINPUT</name></cpp:macro> <cpp:value>'q'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_BINPUT</name></cpp:macro> <cpp:value>'r'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETITEM</name></cpp:macro> <cpp:value>'s'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUPLE</name></cpp:macro> <cpp:value>'t'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_TUPLE</name></cpp:macro> <cpp:value>')'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETITEMS</name></cpp:macro> <cpp:value>'u'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO</name></cpp:macro> <cpp:value>'\x80'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWOBJ</name></cpp:macro> <cpp:value>'\x81'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT1</name></cpp:macro> <cpp:value>'\x82'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT2</name></cpp:macro> <cpp:value>'\x83'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT4</name></cpp:macro> <cpp:value>'\x84'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUPLE1</name></cpp:macro> <cpp:value>'\x85'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUPLE2</name></cpp:macro> <cpp:value>'\x86'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUPLE3</name></cpp:macro> <cpp:value>'\x87'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWTRUE</name></cpp:macro> <cpp:value>'\x88'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWFALSE</name></cpp:macro> <cpp:value>'\x89'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG1</name></cpp:macro> <cpp:value>'\x8a'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG4</name></cpp:macro> <cpp:value>'\x8b'</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRUE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>"I01\n"</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FALSE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>"I00\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATCHSIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>MARKv</name> <init>= <expr><name>MARK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PickleError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PicklingError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UnpickleableError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UnpicklingError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>BadPickleGet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>empty_tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>dispatch_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>extension_registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>inverted_registry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>extension_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>two_tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>__class___str</name></decl>, *<decl><type ref="prev"/><name>__getinitargs___str</name></decl>, *<decl><type ref="prev"/><name>__dict___str</name></decl>,
*<decl><type ref="prev"/><name>__getstate___str</name></decl>, *<decl><type ref="prev"/><name>__setstate___str</name></decl>, *<decl><type ref="prev"/><name>__name___str</name></decl>, *<decl><type ref="prev"/><name>__reduce___str</name></decl>,
*<decl><type ref="prev"/><name>__reduce_ex___str</name></decl>,
*<decl><type ref="prev"/><name>write_str</name></decl>, *<decl><type ref="prev"/><name>append_str</name></decl>,
*<decl><type ref="prev"/><name>read_str</name></decl>, *<decl><type ref="prev"/><name>readline_str</name></decl>, *<decl><type ref="prev"/><name>__main___str</name></decl>,
*<decl><type ref="prev"/><name>copyreg_str</name></decl>, *<decl><type ref="prev"/><name>dispatch_table_str</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>Pdata</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>Pdata_dealloc</name><parameter_list>(<param><decl><type><name>Pdata</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>p</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name><name>self</name>-&gt;<name>length</name></name></expr>, <expr><name>p</name> = <name><name>self</name>-&gt;<name>data</name></name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>p</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>data</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PdataType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> "cPickle.Pdata"</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pdata</name></expr></argument>)</argument_list></sizeof></expr>, <expr>0</expr>,
<expr>(<name>destructor</name>)<name>Pdata_dealloc</name></expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0L</expr>,<expr>0L</expr>,<expr>0L</expr>,<expr>0L</expr>, <expr>""</expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pdata_Check</name><parameter_list>(<param><type><name>O</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(O) == &amp;PdataType)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pdata_New</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Pdata</name> *</type><name>self</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>Pdata</name></expr></argument>, <argument><expr>&amp;<name>PdataType</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>size</name></name> = 8</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <call><name>malloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>size</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>data</name></name></expr>)</condition><then>
<return>return <expr>(<name>PyObject</name>*)<name>self</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>stackUnderflow</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"unpickling stack underflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pdata_clear</name><parameter_list>(<param><decl><type><name>Pdata</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>clearto</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>clearto</name> &lt; 0</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>clearto</name> &gt;= <name><name>self</name>-&gt;<name>length</name></name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = <name><name>self</name>-&gt;<name>length</name></name></expr>, <expr><name>p</name> = <name><name>self</name>-&gt;<name>data</name></name> + <name>clearto</name></expr>;</init>
<condition><expr>--<name>i</name> &gt;= <name>clearto</name></expr>;</condition>
<incr><expr><name>p</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>length</name></name> = <name>clearto</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pdata_grow</name><parameter_list>(<param><decl><type><name>Pdata</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> **</type><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bigger</name> = <name><name>self</name>-&gt;<name>size</name></name> &lt;&lt; 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bigger</name> &lt;= 0</expr>)</condition><then>
<goto>goto <name>nomemory</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>int</name>)(<name>size_t</name>)<name>bigger</name> != <name>bigger</name></expr>)</condition><then>
<goto>goto <name>nomemory</name>;</goto></then></if>
<expr_stmt><expr><name>nbytes</name> = (<name>size_t</name>)<name>bigger</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbytes</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>PyObject</name> *</expr></argument>)</argument_list></sizeof> != (<name>size_t</name>)<name>bigger</name></expr>)</condition><then>
<goto>goto <name>nomemory</name>;</goto></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>nomemory</name>;</goto></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>data</name></name> = <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>size</name></name> = <name>bigger</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>nomemory</name>:</label>
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDATA_POP</name><parameter_list>(<param><type><name>D</name></type></param>, <param><type><name>V</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if ((D)-&gt;length) (V) = (D)-&gt;data[--((D)-&gt;length)]; else { PyErr_SetString(UnpicklingError, "bad pickle data"); (V) = NULL; } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDATA_PUSH</name><parameter_list>(<param><type><name>D</name></type></param>, <param><type><name>O</name></type></param>, <param><type><name>ER</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if (((Pdata*)(D))-&gt;length == ((Pdata*)(D))-&gt;size &amp;&amp; Pdata_grow((Pdata*)(D)) &lt; 0) { Py_DECREF(O); return ER; } ((Pdata*)(D))-&gt;data[((Pdata*)(D))-&gt;length++] = (O); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDATA_APPEND</name><parameter_list>(<param><type><name>D</name></type></param>, <param><type><name>O</name></type></param>, <param><type><name>ER</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if (((Pdata*)(D))-&gt;length == ((Pdata*)(D))-&gt;size &amp;&amp; Pdata_grow((Pdata*)(D)) &lt; 0) return ER; Py_INCREF(O); ((Pdata*)(D))-&gt;data[((Pdata*)(D))-&gt;length++] = (O); }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pdata_popTuple</name><parameter_list>(<param><decl><type><name>Pdata</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> = <name><name>self</name>-&gt;<name>length</name></name>-<name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = <name>start</name></expr>, <expr><name>j</name> = 0</expr> ;</init> <condition><expr><name>j</name> &lt; <name>l</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>)
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>length</name></name> = <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pdata_popList</name><parameter_list>(<param><decl><type><name>Pdata</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name>=<name><name>self</name>-&gt;<name>length</name></name>-<name>start</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>r</name>=<call><name>PyList_New</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name>=<name>start</name></expr>, <expr><name>j</name>=0</expr> ;</init> <condition><expr><name>j</name> &lt; <name>l</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>)
<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>length</name></name>=<name>start</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_TUP</name><parameter_list>(<param><type><name>self</name></type></param>, <param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if (self-&gt;arg || (self-&gt;arg=PyTuple_New(1))) { Py_XDECREF(PyTuple_GET_ITEM(self-&gt;arg,0)); PyTuple_SET_ITEM(self-&gt;arg,0,o); } else { Py_DECREF(o); } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ARG_TUP</name><parameter_list>(<param><type><name>self</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if (Py_REFCNT(self-&gt;arg) &gt; 1) { Py_DECREF(self-&gt;arg); self-&gt;arg=NULL; } }</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>Picklerobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pers_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>inst_pers_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fast</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (*<name>write_func</name>)<parameter_list>(<param><decl><type>struct</type> <name>Picklerobject</name> *</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>char</name> *</type><name>write_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dispatch_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fast_container</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>fast_memo</name></decl>;</decl_stmt>
}</block></struct></type> <name>Picklerobject</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PY_CPICKLE_FAST_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_CPICKLE_FAST_LIMIT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Picklertype</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>Unpicklerobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>readline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pdata</name> *</type><name>stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pers_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>last_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>marks_size</name></decl>;</decl_stmt>
<function_decl><type><name>Py_ssize_t</name></type> (*<name>read_func</name>)<parameter_list>(<param><decl><type>struct</type> <name>Unpicklerobject</name> *</decl></param>, <param><decl><type><name>char</name> **</type></decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>Py_ssize_t</name></type> (*<name>readline_func</name>)<parameter_list>(<param><decl><type>struct</type> <name>Unpicklerobject</name> *</decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>find_class</name></decl>;</decl_stmt>
}</block></struct></type> <name>Unpicklerobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Unpicklertype</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>save</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>put2</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier>
<name>PyObject</name> *</type>
<name>cPickle_ErrFormat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ErrType</name></decl></param>, <param><decl><type><name>char</name> *</type><name>stringformat</name></decl></param>, <param><decl><type><name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name><init>=<expr>0</expr></init>, *<name>retval</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name></expr>)</condition><then> <expr_stmt><expr><name>args</name> = <call><name>Py_VaBuildValue</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name> &amp;&amp; ! <name>args</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>stringformat</name> &amp;&amp; !(<name>retval</name>=<call><name>PyString_FromString</name><argument_list>(<argument><expr><name>stringformat</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>retval</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>args</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name>=<call><name>PyString_Format</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>v</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name>=<name>v</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>args</name></expr>)</condition><then> <expr_stmt><expr><name>retval</name>=<name>args</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>ErrType</name></expr></argument>,<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>ErrType</name></expr></argument>,<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_file</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>nbyteswritten</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; <name>INT_MAX</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyFile_IncUseCount</name><argument_list>(<argument><expr>(<name>PyFileObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>nbyteswritten</name> <init>= <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>PyFile_DecUseCount</name><argument_list>(<argument><expr>(<name>PyFileObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nbyteswritten</name> != (<name>size_t</name>)<name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>int</name>)<name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_cStringIO</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>PycStringIO</name>-&gt;<name>cwrite</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>(<name>int</name>)<name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_none</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>n</name> &gt; <name>INT_MAX</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<return>return <expr>(<name>int</name>)<name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_other</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>_n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_str</name> <init>= <expr>0</expr></init>, *<name>junk</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>_n</name> &gt; <name>INT_MAX</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>n</name> = (<name>int</name>)<name>_n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <name><name>self</name>-&gt;<name>buf_size</name></name> )</expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>py_str</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write_buf</name></name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>py_str</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf_size</name></name> &amp;&amp; (<name>n</name> + <name><name>self</name>-&gt;<name>buf_size</name></name>) &gt; <name>WRITE_BUF_SIZE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>write_other</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; <name>WRITE_BUF_SIZE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <name>py_str</name> =
<call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write_buf</name></name> + <name><name>self</name>-&gt;<name>buf_size</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> += <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>write</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>py_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>junk</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>junk</name></expr>)</condition><then> <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <return>return <expr>-1</expr>;</return></else></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>py_str</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>read_file</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>nbytesread</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf_size</name></name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = ((<name>n</name> &lt; 32) ? 32 : <name>n</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name><name>self</name>-&gt;<name>buf</name></name> = (<name>char</name> *)<call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>n</name> &gt; <name><name>self</name>-&gt;<name>buf_size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newbuf</name> <init>= <expr>(<name>char</name> *)<call><name>realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>newbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = <name>n</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>PyFile_IncUseCount</name><argument_list>(<argument><expr>(<name>PyFileObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>nbytesread</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_END_ALLOW_THREADS</name></type>
<name>PyFile_DecUseCount</name><argument_list>(<argument><expr>(<name>PyFileObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<if>if <condition>(<expr><name>nbytesread</name> != (<name>size_t</name>)<name>n</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>s</name> = <name><name>self</name>-&gt;<name>buf</name></name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>readline_file</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf_size</name></name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <name><name>self</name>-&gt;<name>buf</name></name> = (<name>char</name> *)<call><name>malloc</name><argument_list>(<argument><expr>40</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = 40</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>newbuf</name></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>i</name> &lt; (<name><name>self</name>-&gt;<name>buf_size</name></name> - 1)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call> ||
(<name><name>self</name>-&gt;<name>buf</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>getc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call>) == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name><index>[<expr><name>i</name> + 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name> = <name><name>self</name>-&gt;<name>buf</name></name></expr>;</expr_stmt>
<return>return <expr><name>i</name> + 1</expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>bigger</name> = <name><name>self</name>-&gt;<name>buf_size</name></name> &lt;&lt; 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>bigger</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>newbuf</name> = (<name>char</name> *)<call><name>realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>bigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>newbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf</name></name> = <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = <name>bigger</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>read_cStringIO</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>PycStringIO</name>-&gt;<name>cread</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> != <name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>s</name> = <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>readline_cStringIO</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>n</name> = <call><name><name>PycStringIO</name>-&gt;<name>creadline</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>s</name> = <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>read_other</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>s</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>bytes</name></decl>, *<decl><type ref="prev"/><name>str</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>bytes</name> = <call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>read</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>str</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>last_string</name></name> = <name>str</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! (*<name>s</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>readline_other</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> **</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>str_size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>str</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>readline</name></name></expr></argument>, <argument><expr><name>empty_tuple</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>str_size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>last_string</name></name> = <name>str</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! (*<name>s</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><name>str_size</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>pystrndup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>r</name> <init>= <expr>(<name>char</name> *)<call><name>malloc</name><argument_list>(<argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>char</name>*)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name></decl>, *<decl><type ref="prev"/><name>mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>c_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>mv</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!( <name>value</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <call><name>PyInt_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"no int where int expected in memo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>c_value</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*)<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>GET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>s</name> + 1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>"%ld\n"</expr></argument>, <argument><expr><name>c_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>Pdata_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>write_other</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>mv</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>c_value</name> &lt; 256</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>BINGET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>1</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>c_value</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>LONG_BINGET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>1</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>c_value</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>2</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>c_value</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>3</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>c_value</name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>4</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>c_value</name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 5</expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>put</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call> &lt; 2 || <name><name>self</name>-&gt;<name>fast</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>put2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>put2</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_ob_id</name> <init>= <expr>0</expr></init>, *<name>memo_len</name> <init>= <expr>0</expr></init>, *<name>t</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>p</name> = <call><name>PyDict_Size</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>py_ob_id</name> = <call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>memo_len</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>t</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>memo_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>memo_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_ob_id</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>PUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>c_str</name> + 1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>"%d\n"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>Pdata_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>write_other</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>memo_len</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name>=0</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>p</name> &gt;= 256</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>LONG_BINPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>p</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>2</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>p</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>3</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>p</name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>4</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>p</name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 5</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>BINPUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ob_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>memo_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>whichmodule</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>global</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>global_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module</name> <init>= <expr>0</expr></init>, *<name>modules_dict</name> <init>= <expr>0</expr></init>,
*<name>global_name_attr</name> <init>= <expr>0</expr></init>, *<name>name</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>module</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr>"__module__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>module</name></expr>)</condition><then>
<return>return <expr><name>module</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
<if>if <condition>(<expr>!( <name>modules_dict</name> = <call><name>PySys_GetObject</name><argument_list>(<argument><expr>"modules"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>j</name> = <call><name>PyDict_Next</name><argument_list>(<argument><expr><name>modules_dict</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>module</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>PyObject_Compare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>__main___str</name></expr></argument>)</argument_list></call>==0</expr>)</condition><then> <continue>continue;</continue></then></if>
<expr_stmt><expr><name>global_name_attr</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>global_name_attr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>global_name_attr</name> != <name>global</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>global_name_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>global_name_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></while>
<if>if <condition>(<expr>!<name>j</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>j</name>=1</expr>;</expr_stmt>
<expr_stmt><expr><name>name</name>=<name>__main___str</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>name</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fast_save_enter</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>++<name><name>self</name>-&gt;<name>fast_container</name></name> &gt;= <name>PY_CPICKLE_FAST_LIMIT</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast_memo</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast_memo</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast_memo</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast_container</name></name> = -1</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>key</name> = <call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fast_memo</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"fast mode: can't pickle cyclic objects "
"including object type %s at %p"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast_container</name></name> = -1</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fast_memo</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast_container</name></name> = -1</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>fast_save_leave</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast_container</name></name>-- &gt;= <name>PY_CPICKLE_FAST_LIMIT</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_DelItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fast_memo</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_none</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>none</name> <init>= <expr><name>NONE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_bool</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>buf</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{<expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>len</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{<expr><sizeof>sizeof<argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></sizeof>-1</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></sizeof>-1</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)<name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name> &gt;= 2</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>opcode</name> <init>= <expr><name>l</name> ? <name>NEWTRUE</name> : <name>NEWFALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>opcode</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>len</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_int</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)<name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> &gt; 4</expr></cpp:if>
|| <name>l</name> &gt; 0x7fffffffL
|| <name>l</name> &lt; -0x80000000L</expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>INT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>c_str</name> + 1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>"%ld\n"</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <call>(<name>int</name>)<argument_list>( <argument><expr><name>l</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>2</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>l</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>3</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>l</name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>4</expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>l</name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>c_str</name><index>[<expr>4</expr>]</index></name> == 0) &amp;&amp; (<name><name>c_str</name><index>[<expr>3</expr>]</index></name> == 0)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>c_str</name><index>[<expr>2</expr>]</index></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>BININT1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>BININT2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 3</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>BININT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 5</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_long</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>l</name> <init>= <expr><name>LONG</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name> &gt;= 2</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>pdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>_PyLong_Sign</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sign</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>LONG1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>nbits</name> = <call><name>_PyLong_NumBits</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbits</name> == (<name>size_t</name>)-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>nbytes</name> = (<name>nbits</name> &gt;&gt; 3) + 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbytes</name> &gt; <name>INT_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>, <argument><expr>"long too large "
"to pickle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>repr</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>int</name>)<name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>repr</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>pdata</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>_PyLong_AsByteArray</name><argument_list>(<argument><expr>(<name>PyLongObject</name> *)<name>args</name></expr></argument>,
<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>,
<argument><expr>1</expr></argument> , <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name>sign</name> &lt; 0 &amp;&amp; <name>nbytes</name> &gt; 1 &amp;&amp; <name><name>pdata</name><index>[<expr><name>nbytes</name> - 1</expr>]</index></name> == 0xff &amp;&amp;
(<name><name>pdata</name><index>[<expr><name>nbytes</name> - 2</expr>]</index></name> &amp; 0x80) != 0</expr>)</condition><then>
<expr_stmt><expr>--<name>nbytes</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>nbytes</name> &lt; 256</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>LONG1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = (<name>char</name>)<name>nbytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>LONG4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = (<name>int</name>)<name>nbytes</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr><name>size</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> &gt;&gt;= 8</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>size</name> = 5</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>i</name> = <call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>i</name> = <call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>pdata</name></expr></argument>, <argument><expr>(<name>int</name>)<name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>!( <name>repr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>repr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_float</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>PyFloat_AS_DOUBLE</name><argument_list>(<argument><expr>(<name>PyFloatObject</name> *)<name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr>9</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr>0</expr>]</index></name> = <name>BINFLOAT</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>_PyFloat_Pack8</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name><name>str</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>250</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_ascii_formatd</name><argument_list>(<argument><expr><name>c_str</name> + 1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></sizeof> - 2</expr></argument>, <argument><expr>"%.17g"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>c_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_string</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>doput</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>repr_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>string</name> <init>= <expr><name>STRING</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>repr</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><name>repr_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>repr_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>size</name> &lt; 256</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>SHORT_BINSTRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>size</name> &lt;= <name>INT_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>BINSTRING</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>c_str</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>size</name> &gt;&gt; ((<name>i</name> - 1) * 8)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name>len</name> = 5</expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr>-1</expr>;</return></else></if></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>size</name> &gt; 128 &amp;&amp; <call><name>Pdata_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>write_other</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name>args</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>doput</name></expr>)</condition><then>
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if></then></if>
<return>return <expr>0</expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>modified_EncodeRawUnicodeEscape</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>hexdigit</name> <init>= <expr>"0123456789ABCDEF"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>repr</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>6 * <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>repr</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
<return>return <expr><name>repr</name></expr>;</return></then></if>
<expr_stmt><expr><name>p</name> = <name>q</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name>-- &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>ch</name> <init>= <expr>*<name>s</name>++</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ch</name> &gt;= 256 || <name>ch</name> == '\\' || <name>ch</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p</name>++ = '\\'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = 'u'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>hexdigit</name><index>[<expr>(<name>ch</name> &gt;&gt; 12) &amp; 0xf</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>hexdigit</name><index>[<expr>(<name>ch</name> &gt;&gt; 8) &amp; 0xf</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>hexdigit</name><index>[<expr>(<name>ch</name> &gt;&gt; 4) &amp; 0xf</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>hexdigit</name><index>[<expr><name>ch</name> &amp; 15</expr>]</index></name></expr>;</expr_stmt>
}</block></then>
<else>else
<expr_stmt><expr>*<name>p</name>++ = (<name>char</name>) <name>ch</name></expr>;</expr_stmt></else></if>
}</block></while>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><name>p</name> - <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>repr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_unicode</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>doput</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>repr</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>repr_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>string</name> <init>= <expr><name>UNICODE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>repr</name> = <call><name>modified_EncodeRawUnicodeEscape</name><argument_list>(
<argument><expr><call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>repr</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><name>repr_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>repr_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>repr</name> = <call><name>PyUnicode_AsUTF8String</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><name>size</name> &gt; <name>INT_MAX</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>BINUNICODE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>c_str</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>size</name> &gt;&gt; ((<name>i</name> - 1) * 8)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name>len</name> = 5</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><name>size</name> &gt; 128 &amp;&amp; <call><name>Pdata_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>write_other</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>repr</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>doput</name></expr>)</condition><then>
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if></then></if>
<return>return <expr>0</expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_tuple_elements</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> == <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>element</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>element</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></for>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_tuple</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_tuple_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>tuple</name> <init>= <expr><name>TUPLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>pop</name> <init>= <expr><name>POP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>pop_mark</name> <init>= <expr><name>POP_MARK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>len2opcode</name><index>[]</index></name> <init>= <expr><block>{<expr><name>EMPTY_TUPLE</name></expr>, <expr><name>TUPLE1</name></expr>, <expr><name>TUPLE2</name></expr>, <expr><name>TUPLE3</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>EMPTY_TUPLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <name>TUPLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt></then></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>py_tuple_id</name> = <call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>py_tuple_id</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name>len</name> &lt;= 3 &amp;&amp; <name><name>self</name>-&gt;<name>proto</name></name> &gt;= 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>store_tuple_elements</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_tuple_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>pop</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if></for>
<if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>py_tuple_id</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>len2opcode</name> + <name>len</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<goto>goto <name>memoize</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>MARKv</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>store_tuple_elements</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_tuple_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>pop_mark</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>pop</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if></for>
}</block></else></if>
<if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>py_tuple_id</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt></then></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<label><name>memoize</name>:</label>
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt></then></if>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_tuple_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>batch_list</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>iter</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>firstitem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>append</name> <init>= <expr><name>APPEND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>appends</name> <init>= <expr><name>APPENDS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name> == 0</expr>)</condition><then> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>obj</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>append</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<do>do <block>{
<expr_stmt><expr><name>firstitem</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>firstitem</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>firstitem</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>append</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>MARKv</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>firstitem</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>obj</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> += 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == <name>BATCHSIZE</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<break>break;</break>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>appends</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
}</block> while <condition>(<expr><name>n</name> == <name>BATCHSIZE</name></expr>)</condition>;</do>
<return>return <expr>0</expr>;</return>
<label><name>BatchFailed</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_list</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>iter</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name> &amp;&amp; !<call><name>fast_save_enter</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>EMPTY_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>1</expr>]</index></name> = <name>LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt></then></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name>put2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>iter</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iter</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>Py_EnterRecursiveCall</name><argument_list>(<argument><expr>" while pickling an object"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>batch_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_LeaveRecursiveCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name> &amp;&amp; !<call><name>fast_save_leave</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt></then></if>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>batch_dict</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>iter</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>firstitem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>setitem</name> <init>= <expr><name>SETITEM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>setitems</name> <init>= <expr><name>SETITEMS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name> == 0</expr>)</condition><then> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>p</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> != 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"dict items "
"iterator must return 2-tuples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> = <call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>setitem</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<do>do <block>{
<expr_stmt><expr><name>firstitem</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>firstitem</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call> != 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"dict items "
"iterator must return 2-tuples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>BatchFailed</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>setitem</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>MARKv</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> != 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"dict items "
"iterator must return 2-tuples"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>BatchFailed</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> += 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == <name>BATCHSIZE</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>p</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
<break>break;</break>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>setitems</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>BatchFailed</name>;</goto></then></if>
}</block> while <condition>(<expr><name>n</name> == <name>BATCHSIZE</name></expr>)</condition>;</do>
<return>return <expr>0</expr>;</return>
<label><name>BatchFailed</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>firstitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_dict</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>iter</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name> &amp;&amp; !<call><name>fast_save_enter</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>EMPTY_DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name>MARK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr>1</expr>]</index></name> = <name>DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 2</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name>PyDict_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt></then></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name>put2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>iter</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iteritems"</expr></argument>, <argument><expr>"()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iter</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>Py_EnterRecursiveCall</name><argument_list>(<argument><expr>" while pickling an object"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>batch_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_LeaveRecursiveCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name> &amp;&amp; !<call><name>fast_save_leave</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt></then></if>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_inst</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>class</name> <init>= <expr>0</expr></init>, *<name>module</name> <init>= <expr>0</expr></init>, *<name>name</name> <init>= <expr>0</expr></init>, *<name>state</name> <init>= <expr>0</expr></init>,
*<name>getinitargs_func</name> <init>= <expr>0</expr></init>, *<name>getstate_func</name> <init>= <expr>0</expr></init>, *<name>class_args</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>module_str</name></decl>, *<decl><type ref="prev"/><name>name_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>module_size</name></decl>, <decl><type ref="prev"/><name>name_size</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>inst</name> <init>= <expr><name>INST</name></expr></init>, <name>obj</name> <init>= <expr><name>OBJ</name></expr></init>, <name>build</name> <init>= <expr><name>BUILD</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name> &amp;&amp; !<call><name>fast_save_enter</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>MARKv</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>class</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__class___str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>getinitargs_func</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__getinitargs___str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>element</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>class_args</name> =
<call><name>PyObject_Call</name><argument_list>(<argument><expr><name>getinitargs_func</name></expr></argument>, <argument><expr><name>empty_tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name>PyObject_Size</name><argument_list>(<argument><expr><name>class_args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!( <name>element</name> = <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>class_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<goto>goto <name>finally</name>;</goto></else></if>
}</block></else></if>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <name>name</name> = ((<name>PyClassObject</name> *)<name>class</name>)-&gt;<name>cl_name</name> )</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"class has no name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>!( <name>module</name> = <call><name>whichmodule</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>module_size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call>) &lt; 0 ||
(<name>name_size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>module_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>inst</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>module_str</name></expr></argument>, <argument><expr><name>module_size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>name_str</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<goto>goto <name>finally</name>;</goto>
}</block></then></if></else></if>
<if>if <condition>(<expr>(<name>getstate_func</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__getstate___str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>state</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>getstate_func</name></expr></argument>, <argument><expr><name>empty_tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>state</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<goto>goto <name>finally</name>;</goto></else></if>
<if>if <condition>(<expr>!( <name>state</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__dict___str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<goto>goto <name>finally</name>;</goto></else></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>put2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>build</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fast</name></name> &amp;&amp; !<call><name>fast_save_leave</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>getinitargs_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>getstate_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>class_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_global</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>global_name</name> <init>= <expr>0</expr></init>, *<name>module</name> <init>= <expr>0</expr></init>, *<name>mod</name> <init>= <expr>0</expr></init>, *<name>klass</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name_str</name></decl>, *<decl><type ref="prev"/><name>module_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>module_size</name></decl>, <decl><type ref="prev"/><name>name_size</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>global</name> <init>= <expr><name>GLOBAL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>name</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>global_name</name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!( <name>global_name</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__name___str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></else></if>
<if>if <condition>(<expr>!( <name>module</name> = <call><name>whichmodule</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>global_name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>module_size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call>) &lt; 0 ||
(<name>name_size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>global_name</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>module_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_str</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mod</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><name>module_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mod</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Can't pickle %s: import of module %s "
"failed"</expr></argument>,
<argument><expr>"OS"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>klass</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>klass</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Can't pickle %s: attribute lookup %s.%s "
"failed"</expr></argument>,
<argument><expr>"OSS"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>klass</name> != <name>args</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Can't pickle %s: it's not the same object "
"as %s.%s"</expr></argument>,
<argument><expr>"OSS"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name> &gt;= 2</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c_str</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>two_tuple</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>two_tuple</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>py_code</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>extension_registry</name></expr></argument>, <argument><expr><name>two_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>py_code</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>gen_global</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"Can't pickle %s: "
"extension code %s isn't an integer"</expr></argument>,
<argument><expr>"OO"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>code</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> &lt;= 0 || <name>code</name> &gt; 0x7fffffffL</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"Can't pickle %s: "
"extension code %ld is out of range"</expr></argument>,
<argument><expr>"Ol"</expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>code</name> &lt;= 0xff</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>EXT1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = (<name>char</name>)<name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>code</name> &lt;= 0xffff</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>EXT2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr><name>code</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>2</expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr>(<name>code</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 3</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c_str</name><index>[<expr>0</expr>]</index></name> = <name>EXT4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>1</expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr><name>code</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>2</expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr>(<name>code</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>3</expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr>(<name>code</name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_str</name><index>[<expr>4</expr>]</index></name> = <call>(<name>char</name>)<argument_list>(<argument><expr>(<name>code</name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = 5</expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt></then></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<label><name>gen_global</name>:</label>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>global</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>module_str</name></expr></argument>, <argument><expr><name>module_size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>name_str</name></expr></argument>, <argument><expr><name>name_size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_pers</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>persid</name> <init>= <expr><name>PERSID</name></expr></init>, <name>binpersid</name> <init>= <expr><name>BINPERSID</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pid</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>pid</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>pid</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>bin</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"persistent id must be string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>persid</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>size</name> = <call><name>PyString_Size</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(
<argument><expr>(<name>PyStringObject</name> *)<name>pid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 1</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then> <else>else <if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>binpersid</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>res</name> = -1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>res</name> = 1</expr>;</expr_stmt></else></if>
}</block></then></if></else></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save_reduce</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>fn</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>callable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>argtup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>listitems</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dictitems</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_newobj</name> <init>= <expr><name><name>self</name>-&gt;<name>proto</name></name> &gt;= 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>reduce</name> <init>= <expr><name>REDUCE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>build</name> <init>= <expr><name>BUILD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>newobj</name> <init>= <expr><name>NEWOBJ</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &lt; 2 || <name>size</name> &gt; 5</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"tuple returned by "
"%s must contain 2 through 5 elements"</expr></argument>,
<argument><expr>"O"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>! <call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"save_reduce"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>5</expr></argument>,
<argument><expr>&amp;<name>callable</name></expr></argument>,
<argument><expr>&amp;<name>argtup</name></expr></argument>,
<argument><expr>&amp;<name>state</name></expr></argument>,
<argument><expr>&amp;<name>listitems</name></expr></argument>,
<argument><expr>&amp;<name>dictitems</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>argtup</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"Second element of "
"tuple returned by %s must be a tuple"</expr></argument>,
<argument><expr>"O"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>state</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>listitems</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>listitems</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>PyIter_Check</name><argument_list>(<argument><expr><name>listitems</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"Fourth element of "
"tuple returned by %s must be an iterator, not %s"</expr></argument>,
<argument><expr>"Os"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>listitems</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>dictitems</name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>dictitems</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>PyIter_Check</name><argument_list>(<argument><expr><name>dictitems</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"Fifth element of "
"tuple returned by %s must be an iterator, not %s"</expr></argument>,
<argument><expr>"Os"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>dictitems</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>use_newobj</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>callable</name></expr></argument>, <argument><expr><name>__name___str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>temp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr>-1</expr>;</return></else></if>
<expr_stmt><expr><name>use_newobj</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>use_newobj</name> = <call><name>PyString_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"__newobj__"</expr></argument>)</argument_list></call> == 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>use_newobj</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>cls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>newargtup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>argtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"__newobj__ arglist "
"is empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cls</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>argtup</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"__new__"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"args[0] from "
"__newobj__ args has no __new__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ob</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob_dot_class</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ob_dot_class</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>__class___str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ob_dot_class</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(
<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr>-1</expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><name>i</name> = <name>ob_dot_class</name> != <name>cls</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ob_dot_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"args[0] from "
"__newobj__ args has the wrong class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>newargtup</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr><name>n</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newargtup</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>argtup</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>newargtup</name></expr></argument>, <argument><expr><name>i</name>-1</expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>i</name> = <call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>newargtup</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>newargtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>newobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>callable</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0 ||
<call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>argtup</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0 ||
<call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>reduce</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>ob</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>state</name> &amp;&amp; !<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>put2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>put</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>listitems</name> &amp;&amp; <call><name>batch_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>listitems</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>dictitems</name> &amp;&amp; <call><name>batch_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dictitems</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0 ||
<call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>build</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>save</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pers_save</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_ob_id</name> <init>= <expr>0</expr></init>, *<name>__reduce__</name> <init>= <expr>0</expr></init>, *<name>t</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>Py_EnterRecursiveCall</name><argument_list>(<argument><expr>" while pickling an object"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>pers_save</name> &amp;&amp; <name><name>self</name>-&gt;<name>pers_func</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>tmp</name> = <call><name>save_pers</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <name>tmp</name></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>args</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_none</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>type</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>type</name>-&gt;<name>tp_name</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'b'</expr>:
<if>if <condition>(<expr><name>args</name> == <name>Py_False</name> || <name>args</name> == <name>Py_True</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_bool</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyInt_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_int</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'l'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyLong_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyFloat_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_float</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyTuple_Type</name> &amp;&amp; <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<if>if <condition>(<expr>(<name>type</name> == &amp;<name>PyString_Type</name>) &amp;&amp; (<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 2)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr>'u'</expr>:
<if>if <condition>(<expr>(<name>type</name> == &amp;<name>PyUnicode_Type</name>) &amp;&amp; (<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt; 2)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_unicode</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case>}</block></switch>
<if>if <condition>(<expr><call><name>Py_REFCNT</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <name>py_ob_id</name> = <call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_ob_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>py_ob_id</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>type</name>-&gt;<name>tp_name</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'s'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyString_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr>'u'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyUnicode_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_unicode</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr>'t'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyTuple_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyType_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'l'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyList_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'d'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyDict_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyInstance_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_inst</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'c'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyClass_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyFunction_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> &amp;&amp; <call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PickleError</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'b'</expr>:
<if>if <condition>(<expr><name>type</name> == &amp;<name>PyCFunction_Type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
</case>}</block></switch>
<if>if <condition>(<expr>!<name>pers_save</name> &amp;&amp; <name><name>self</name>-&gt;<name>inst_pers_func</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>tmp</name> = <call><name>save_pers</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>inst_pers_func</name></name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <name>tmp</name></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyType_IsSubtype</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>&amp;<name>PyType_Type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>__reduce__</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dispatch_table</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>__reduce__</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>__reduce__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>__reduce__</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>__reduce__</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__reduce_ex___str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>__reduce__</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>t</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>__reduce__</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<goto>goto <name>finally</name>;</goto></else></if>
<expr_stmt><expr><name>__reduce__</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>__reduce___str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>__reduce__</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>__reduce__</name></expr></argument>,
<argument><expr><name>empty_tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>UnpickleableError</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></else></if>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>t</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>save_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>, <argument><expr>"Value returned by "
"%s must be string or tuple"</expr></argument>,
<argument><expr>"O"</expr></argument>, <argument><expr><name>__reduce__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>save_reduce</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>__reduce__</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_LeaveRecursiveCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_ob_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>__reduce__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dump</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>stop</name> <init>= <expr><name>STOP</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>proto</name></name> &gt;= 2</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>bytes</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr>0</expr>]</index></name> = <name>PROTO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>proto</name></name> &gt;= 0 &amp;&amp; <name><name>self</name>-&gt;<name>proto</name></name> &lt; 256</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr>1</expr>]</index></name> = (<name>char</name>)<name><name>self</name>-&gt;<name>proto</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>save</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>write_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pickle_clear_memo</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>memo</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_Clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pickle_getvalue</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>rsize</name></decl>, <decl><type ref="prev"/><name>ssize</name></decl>, <decl><type ref="prev"/><name>clear</name><init>=<expr>1</expr></init>, <name>lm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ik</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>k</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>, *<decl><type ref="prev"/><name>have_get</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pdata</name> *</type><name>data</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>args</name> &amp;&amp; !<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:getvalue"</expr></argument>, <argument><expr>&amp;<name>clear</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>Pdata_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Attempt to getvalue() a non-list-based pickler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>write_other</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>data</name>=(<name>Pdata</name>*)<name><name>self</name>-&gt;<name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name>=<name><name>data</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lm</name> = <call><name>PyDict_Size</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lm</name> &lt; 0</expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>lm</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>have_get</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>have_get</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>have_get</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>rsize</name> = 0</expr>, <expr><name>i</name> = <name>l</name></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr/>) <block>{
<expr_stmt><expr><name>k</name> = <name><name>data</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>rsize</name> += <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ik</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*)<name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ik</name> &gt;= <name>lm</name> || <name>ik</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Invalid get data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name><name>have_get</name><index>[<expr><name>ik</name></expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name>rsize</name> += <name>ik</name> &lt; 256 ? 2 : 5</expr>;</expr_stmt></then></if>
}</block></then>
<else>else <if>if <condition>(<expr>! (<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> == 2 &amp;&amp;
<call><name>PyInt_Check</name><argument_list>(<argument><expr>(<name>k</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call>)</expr>
)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Unexpected data in internal list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then>
<else>else <block>{
<expr_stmt><expr><name>ik</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)<name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ik</name> &gt;= <name>lm</name> || <name>ik</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>,
<argument><expr>"Invalid get data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>have_get</name><index>[<expr><name>ik</name></expr>]</index></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name> += <name>ik</name> &lt; 256 ? 2 : 5</expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></for>
<expr_stmt><expr><name>r</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><name>s</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>l</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>k</name> = <name><name>data</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ssize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ssize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name>=<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>--<name>ssize</name> &gt;= 0</expr>)</condition>
<expr_stmt><expr>*<name>s</name>++ = *<name>p</name>++</expr>;</expr_stmt></while>
}</block></then></if>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ik</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name> *)
<call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ik</name> &lt; 256</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>s</name>++ = <name>BINGET</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr><name>ik</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>s</name>++ = <name>LONG_BINGET</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr><name>ik</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>ik</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>ik</name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>ik</name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then>
<else>else <block>{
<expr_stmt><expr><name>ik</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr>(<name>PyIntObject</name>*)<name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>have_get</name><index>[<expr><name>ik</name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ik</name> &lt; 256</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>s</name>++ = <name>BINPUT</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr><name>ik</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>s</name>++ = <name>LONG_BINPUT</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr><name>ik</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>ik</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>ik</name> &gt;&gt; 16) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s</name>++ = <call>(<name>int</name>)<argument_list>(<argument><expr>(<name>ik</name> &gt;&gt; 24) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>clear</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_Clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>have_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>have_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pickler_dump</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O|i:dump"</expr></argument>, <argument><expr>&amp;<name>ob</name></expr></argument>, <argument><expr>&amp;<name>get</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>get</name></expr>)</condition><then> <return>return <expr><call><name>Pickle_getvalue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name>*)<name>self</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>Pickler_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"dump"</expr>, <expr>(<name>PyCFunction</name>)<name>Pickler_dump</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"dump(object) -- "
"Write an object in pickle format to the object's pickle stream"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"clear_memo"</expr>, <expr>(<name>PyCFunction</name>)<name>Pickle_clear_memo</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"clear_memo() -- Clear the picklers memo"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"getvalue"</expr>, <expr>(<name>PyCFunction</name>)<name>Pickle_getvalue</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"getvalue() -- Finish picking a list-based pickle"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>Picklerobject</name> *</type>
<name>newPicklerobject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>proto</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Picklerobject</name> *</type><name>self</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>proto</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>proto</name> = <name>HIGHEST_PROTOCOL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>proto</name> &gt; <name>HIGHEST_PROTOCOL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"pickle protocol %d asked for; "
"the highest available protocol is %d"</expr></argument>,
<argument><expr><name>proto</name></expr></argument>, <argument><expr><name>HIGHEST_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>Picklerobject</name></expr></argument>, <argument><expr>&amp;<name>Picklertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>proto</name></name> = <name>proto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>bin</name></name> = <name>proto</name> &gt; 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>fp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>write</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>memo</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pers_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>inst_pers_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>write_buf</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast_container</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>fast_memo</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>dispatch_table</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>file</name> = <call><name>Pdata_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name><name>self</name>-&gt;<name>memo</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>PyFile_Check</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>fp</name></name> = <call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fp</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"I/O operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>write_func</name></name> = <name>write_file</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PycStringIO_OutputCheck</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>write_func</name></name> = <name>write_cStringIO</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>file</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>write_func</name></name> = <name>write_none</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>write_func</name></name> = <name>write_other</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>Pdata_Check</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>write</name></name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>write_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>write</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"argument must have 'write' "
"attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>write_buf</name></name> = (<name>char</name> *)<call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>WRITE_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>write_buf</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><call><name>PyEval_GetRestricted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name> <init>= <expr><call><name>PyImport_Import</name><argument_list>(<argument><expr><name>copyreg_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>dispatch_table</name></name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>dispatch_table_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>dispatch_table</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>dispatch_table</name></name> = <name>dispatch_table</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dispatch_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>PyObject_GC_Track</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_Pickler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"file"</expr>, <expr>"protocol"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proto</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|i:Pickler"</expr></argument>, <argument><expr>&amp;<name>proto</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proto</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"O|i:Pickler"</expr></argument>,
<argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>proto</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>newPicklerobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>Pickler_dealloc</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fast_memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>inst_pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dispatch_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pickler_traverse</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fast_memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>inst_pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dispatch_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pickler_clear</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>fast_memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>inst_pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>dispatch_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pickler_get_pers_func</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>pers_func</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr>"persistent_id"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name><name>p</name>-&gt;<name>pers_func</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pickler_set_pers_func</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>p</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"attribute deletion is not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>pers_func</name></name> = <name>v</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pickler_set_inst_pers_func</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>p</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"attribute deletion is not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>inst_pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>inst_pers_func</name></name> = <name>v</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pickler_get_memo</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>memo</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr>"memo"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name><name>p</name>-&gt;<name>memo</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Pickler_set_memo</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>p</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"attribute deletion is not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"memo must be a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>memo</name></name> = <name>v</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Pickler_get_error</name><parameter_list>(<param><decl><type><name>Picklerobject</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>PicklingError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PicklingError</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>Pickler_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"binary"</expr>, <expr><name>T_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>Picklerobject</argument>, <argument>bin</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr>"fast"</expr>, <expr><name>T_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>Picklerobject</argument>, <argument>fast</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>Pickler_getsets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"persistent_id"</expr>, <expr>(<name>getter</name>)<name>Pickler_get_pers_func</name></expr>,
<expr>(<name>setter</name>)<name>Pickler_set_pers_func</name></expr>
}</block></expr>,
<expr><block>{<expr>"inst_persistent_id"</expr>, <expr><name>NULL</name></expr>, <expr>(<name>setter</name>)<name>Pickler_set_inst_pers_func</name></expr>}</block></expr>,
<expr><block>{<expr>"memo"</expr>, <expr>(<name>getter</name>)<name>Pickler_get_memo</name></expr>, <expr>(<name>setter</name>)<name>Pickler_set_memo</name></expr>}</block></expr>,
<expr><block>{<expr>"PicklingError"</expr>, <expr>(<name>getter</name>)<name>Pickler_get_error</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>Picklertype__doc__</name></expr></argument>,
<argument><expr>"Objects that know how to pickle objects\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Picklertype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"cPickle.Pickler"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Picklerobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>Pickler_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr><name>Picklertype__doc__</name></expr>,
<expr>(<name>traverseproc</name>)<name>Pickler_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>Pickler_clear</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Pickler_methods</name></expr>,
<expr><name>Pickler_members</name></expr>,
<expr><name>Pickler_getsets</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>find_class</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>py_module_name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>py_global_name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>fc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>global</name> <init>= <expr>0</expr></init>, *<name>module</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>fc</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>fc</name>==<name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"Global and instance "
"pickles are not supported."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyObject_CallFunctionObjArgs</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>py_module_name</name></expr></argument>,
<argument><expr><name>py_global_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>module</name> = <call><name>PySys_GetObject</name><argument_list>(<argument><expr>"modules"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>module</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>py_module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>module</name> = <call><name>PyImport_Import</name><argument_list>(<argument><expr><name>py_module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>module</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>global</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>py_global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>global</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>py_global_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>global</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>marker</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>num_marks</name></name> &lt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"could not find MARK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr><name><name>self</name>-&gt;<name>marks</name><index>[<expr>--<name><name>self</name>-&gt;<name>num_marks</name></name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_none</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bad_readline</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"pickle data was truncated"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_int</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_int</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>s</name>=<call><name>pystrndup</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errno</name> || (*<name>endptr</name> != '\n') || (<name><name>endptr</name><index>[<expr>1</expr>]</index></name> != '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>py_int</name> = <call><name>PyLong_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>py_int</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"could not convert string to int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>len</name> == 3 &amp;&amp; (<name>l</name> == 0 || <name>l</name> == 1)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <name>py_int</name> = <call><name>PyBool_FromLong</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!( <name>py_int</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <goto>goto <name>finally</name>;</goto></then></if>
}</block></else></if>
}</block></else></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>py_int</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_bool</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>boolean</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>boolean</name> == <name>Py_True</name> || <name>boolean</name> == <name>Py_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>calc_binint</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>l</name> = 0L</expr>;</init> <condition><expr><name>i</name> &lt; <name>x</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> |= (<name>long</name>)<name>c</name> &lt;&lt; (<name>i</name> * 8)</expr>;</expr_stmt>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> &gt; 4</expr></cpp:if>
<if>if <condition>(<expr><name>x</name> == 4 &amp;&amp; <name>l</name> &amp; (1L &lt;&lt; 31)</expr>)</condition><then>
<expr_stmt><expr><name>l</name> |= (~0L) &lt;&lt; 32</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>l</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binintx</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_int</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> = <call><name>calc_binint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>py_int</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>py_int</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binint</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>load_binintx</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binint1</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>load_binintx</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binint2</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>load_binintx</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_long</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>l</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>s</name>=<call><name>pystrndup</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>l</name> = <call><name>PyLong_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_counted_long</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>pdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>along</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> == 1 || <name>size</name> == 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>size</name> = <call><name>calc_binint</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"LONG pickle has negative "
"byte count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>along</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr>0L</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>i</name> = <call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>(<name>char</name> **)&amp;<name>pdata</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>along</name> = <call><name>_PyLong_FromByteArray</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr>(<name>size_t</name>)<name>size</name></expr></argument>,
<argument><expr>1</expr></argument> , <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>along</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>along</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_float</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_float</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>s</name>=<call><name>pystrndup</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <call><name>PyOS_ascii_strtod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errno</name> || (<name><name>endptr</name><index>[<expr>0</expr>]</index></name> != '\n') || (<name><name>endptr</name><index>[<expr>1</expr>]</index></name> != '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"could not convert string to float"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>!( <name>py_float</name> = <call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>py_float</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binfloat</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>x</name> = <call><name>_PyFloat_Unpack8</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)<name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == -1.0 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>py_float</name> = <call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>py_float</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>py_float</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_string</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>s</name>=<call><name>pystrndup</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<while>while <condition>(<expr><name><name>s</name><index>[<expr><name>len</name>-1</expr>]</index></name> &lt;= ' '</expr>)</condition>
<expr_stmt><expr><name>len</name>--</expr>;</expr_stmt></while>
<if>if<condition>(<expr><name><name>s</name><index>[<expr>0</expr>]</index></name>=='"' &amp;&amp; <name><name>s</name><index>[<expr><name>len</name>-1</expr>]</index></name>=='"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>s</name> + 1</expr> ;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>(<expr><name><name>s</name><index>[<expr>0</expr>]</index></name>=='\'' &amp;&amp; <name><name>s</name><index>[<expr><name>len</name>-1</expr>]</index></name>=='\''</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>s</name> + 1</expr> ;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 2</expr>;</expr_stmt>
}</block></then> <else>else
<goto>goto <name>insecure</name>;</goto></else></if></else></if>
<expr_stmt><expr><name>str</name> = <call><name>PyString_DecodeEscape</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>res</name></expr>;</return>
<label><name>insecure</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,<argument><expr>"insecure string pickle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binstring</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_string</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>l</name> = <call><name>calc_binint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>,
<argument><expr>"BINSTRING pickle has negative byte count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>py_string</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>py_string</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_short_binstring</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_string</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>l</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>py_string</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>py_string</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_unicode</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 1</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>str</name> = <call><name>PyUnicode_DecodeRawUnicodeEscape</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>finally</name>:</label>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binunicode</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>unicode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>l</name> = <call><name>calc_binint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>,
<argument><expr>"BINUNICODE pickle has negative byte count"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>unicode</name> = <call><name>PyUnicode_DecodeUTF8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>unicode</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_tuple</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>tup</name>=<call><name>Pdata_popTuple</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_counted_tuple</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name> <init>= <expr><call><name>PyTuple_New</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tup</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<while>while <condition>(<expr>--<name>len</name> &gt;= 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>element</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>element</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_empty_list</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>list</name>=<call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_empty_dict</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>dict</name>=<call><name>PyDict_New</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_list</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>list</name>=<call><name>Pdata_popList</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_dict</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>, *<decl><type ref="prev"/><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>j</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>dict</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>k</name> = <name>i</name>+1</expr>;</init> <condition><expr><name>k</name> &lt; <name>j</name></expr>;</condition> <incr><expr><name>k</name> += 2</expr></incr>) <block>{
<expr_stmt><expr><name>key</name> =<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>k</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>k</name></expr> ]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Instance_New</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>r</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyClass_Check</name><argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>l</name>=<call><name>PyObject_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>l</name> )</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>__getinitargs__</name></decl>;</decl_stmt>
<expr_stmt><expr><name>__getinitargs__</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>cls</name></expr></argument>,
<argument><expr><name>__getinitargs___str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>__getinitargs__</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>inst</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>inst</name>=<call><name>PyInstance_NewRaw</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<return>return <expr><name>inst</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>__getinitargs__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>r</name>=<call><name>PyInstance_New</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr><name>r</name></expr>;</return></then>
<else>else <goto>goto <name>err</name>;</goto></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>r</name>=<call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr><name>r</name></expr>;</return></then></if>
<label><name>err</name>:</label> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tp</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>, *<decl><type ref="prev"/><name>tb</name></decl>, *<decl><type ref="prev"/><name>tmp_value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr>&amp;<name>tp</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_value</name> = <name>v</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp_value</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>tmp_value</name> = <name>Py_None</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>r</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>tmp_value</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name>=<name>r</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_Restore</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_obj</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>class</name></decl>, *<decl><type ref="prev"/><name>tup</name></decl>, *<decl><type ref="prev"/><name>obj</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>tup</name>=<call><name>Pdata_popTuple</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>class</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>obj</name> = <call><name>Instance_New</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>obj</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_inst</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tup</name></decl>, *<decl><type ref="prev"/><name>class</name><init>=<expr>0</expr></init>, *<name>obj</name><init>=<expr>0</expr></init>, *<name>module_name</name></decl>, *<decl><type ref="prev"/><name>class_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>module_name</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>module_name</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>class_name</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>class</name> = <call><name>find_class</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>class</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>tup</name>=<call><name>Pdata_popTuple</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>obj</name> = <call><name>Instance_New</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>obj</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_newobj</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>clsraw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name> *</type><name>cls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Fail</name>;</goto></then></if>
<if>if <condition>(<expr>! <call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"NEWOBJ expected an arg "
"tuple."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>clsraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cls</name> = (<name>PyTypeObject</name> *)<name>clsraw</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cls</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Fail</name>;</goto></then></if>
<if>if <condition>(<expr>! <call><name>PyType_Check</name><argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"NEWOBJ class argument "
"isn't a type object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>tp_new</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"NEWOBJ class argument "
"has NULL tp_new"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Fail</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>obj</name> = <call><name><name>cls</name>-&gt;<name>tp_new</name></name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>clsraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>clsraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_global</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>class</name> <init>= <expr>0</expr></init>, *<name>module_name</name> <init>= <expr>0</expr></init>, *<name>class_name</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>module_name</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>module_name</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>class_name</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>class</name> = <call><name>find_class</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>class</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_persid</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>pid</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>pid</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pid</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>! <name>pid</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>,
<argument><expr>"A load persistent id instruction was encountered,\n"
"but no persistent_load function was specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binpersid</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>pid</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pid</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>pid</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>,
<argument><expr>"A load persistent id instruction was encountered,\n"
"but no persistent_load function was specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_pop</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( (<name>len</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>) &gt; 0 )</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>self</name>-&gt;<name>num_marks</name></name> &gt; 0) &amp;&amp;
(<name><name>self</name>-&gt;<name>marks</name><index>[<expr><name><name>self</name>-&gt;<name>num_marks</name></name> - 1</expr>]</index></name> == <name>len</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>self</name>-&gt;<name>num_marks</name></name>--</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>=<name>len</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_pop_mark</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_dup</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>) &lt;= 0</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>last</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_get</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_str</name> <init>= <expr>0</expr></init>, *<name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>py_str</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>BadPickleGet</name></expr></argument>, <argument><expr><name>py_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = -1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binget</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_key</name> <init>= <expr>0</expr></init>, *<name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>key</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>py_key</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>key</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>BadPickleGet</name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = -1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_long_binget</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_key</name> <init>= <expr>0</expr></init>, *<name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = (<name>long</name>)<name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> |= (<name>long</name>)<name>c</name> &lt;&lt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> |= (<name>long</name>)<name>c</name> &lt;&lt; 16</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> |= (<name>long</name>)<name>c</name> &lt;&lt; 24</expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>py_key</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>key</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>BadPickleGet</name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = -1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_extension</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>codebytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>module_name</name></decl>, *<decl><type ref="prev"/><name>class_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nbytes</name> == 1 || <name>nbytes</name> == 2 || <name>nbytes</name> == 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>codebytes</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>code</name> = <call><name>calc_binint</name><argument_list>(<argument><expr><name>codebytes</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"EXT specifies code &lt;= 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>py_code</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>py_code</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>extension_cache</name></expr></argument>, <argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pair</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>inverted_registry</name></expr></argument>, <argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pair</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"unregistered extension "
"code %ld"</expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call> != 2 ||
!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>module_name</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>class_name</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"_inverted_registry[%ld] "
"isn't a 2-tuple of strings"</expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>find_class</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>code</name> = <call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>extension_cache</name></expr></argument>, <argument><expr><name>py_code</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_put</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_str</name> <init>= <expr>0</expr></init>, *<name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>l</name> = <call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>l</name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>bad_readline</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>len</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> )</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>py_str</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name> - 1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>value</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name>=<call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_str</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_binput</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_key</name> <init>= <expr>0</expr></init>, *<name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( (<name>len</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>) &gt; 0 )</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>key</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>py_key</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>key</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>value</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name>=<call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_long_binput</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_key</name> <init>= <expr>0</expr></init>, *<name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>len</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> )</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = (<name>long</name>)<name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> |= (<name>long</name>)<name>c</name> &lt;&lt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> |= (<name>long</name>)<name>c</name> &lt;&lt; 16</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)<name><name>s</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> |= (<name>long</name>)<name>c</name> &lt;&lt; 24</expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>py_key</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>value</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>len</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name>=<call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_append</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr>0</expr></init>, *<name>list</name> <init>= <expr>0</expr></init>, *<name>append_method</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>len</name> &gt;= <name>x</name> &amp;&amp; <name>x</name> &gt; 0 )</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name>==<name>x</name></expr>)</condition><then> <return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>list</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>x</name>-1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>slice</name>=<call><name>Pdata_popList</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>slice</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>list_len</name> = <call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>=<call><name>PyList_SetSlice</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>list_len</name></expr></argument>, <argument><expr><name>list_len</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!( <name>append_method</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>append_str</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = <name>x</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>junk</name></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>junk</name>=0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>junk</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>append_method</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>junk</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>=<name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>append_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>=<name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>append_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_append</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_append</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> - 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_appends</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_append</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_setitems</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr>0</expr></init>, *<name>key</name> <init>= <expr>0</expr></init>, *<name>dict</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>r</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( (<name>len</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>) &gt;= <name>x</name>
&amp;&amp; <name>x</name> &gt; 0 )</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>dict</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>x</name>-1</expr>]</index></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>x</name>+1</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name> += 2</expr></incr>) <block>{
<expr_stmt><expr><name>key</name> =<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name>=<name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name>=-1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_setitem</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_setitems</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> - 2</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_setitems</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_setitems</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_build</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>state</name></decl>, *<decl><type ref="prev"/><name>inst</name></decl>, *<decl><type ref="prev"/><name>slotstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>__setstate__</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d_key</name></decl>, *<decl><type ref="prev"/><name>d_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> &lt; 2</expr>)</condition><then>
<return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>inst</name> = <name><name>self</name>-&gt;<name>stack</name>-&gt;<name>data</name><index>[<expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> - 1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>__setstate__</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>__setstate___str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>__setstate__</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>junk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>arg</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>junk</name> = <call><name>PyObject_Call</name><argument_list>(<argument><expr><name>__setstate__</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_ARG_TUP</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>__setstate__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>junk</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> == 2</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slotstate</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>slotstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>slotstate</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>state</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyDict_Check</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"state is not a "
"dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>dict</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>__dict___str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>d_key</name></expr></argument>, <argument><expr>&amp;<name>d_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>d_key</name></expr></argument>, <argument><expr><name>d_value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></while>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>slotstate</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>PyDict_Check</name><argument_list>(<argument><expr><name>slotstate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr>"slot state is not "
"a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finally</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>slotstate</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>d_key</name></expr></argument>, <argument><expr>&amp;<name>d_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>PyObject_SetAttr</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>d_key</name></expr></argument>, <argument><expr><name>d_value</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>res</name> = 0</expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>slotstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_mark</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>self</name>-&gt;<name>num_marks</name></name> + 1) &gt;= <name><name>self</name>-&gt;<name>marks_size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>marks</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name>=<name><name>self</name>-&gt;<name>marks_size</name></name>+20</expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> &lt;= <name><name>self</name>-&gt;<name>num_marks</name></name></expr>)</condition><then> <expr_stmt><expr><name>s</name>=<name><name>self</name>-&gt;<name>num_marks</name></name> + 1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>marks</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>marks</name>=(<name>int</name> *)<call><name>malloc</name><argument_list>(<argument><expr><name>s</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>marks</name>=(<name>int</name> *)<call><name>realloc</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>marks</name></name></expr></argument>,
<argument><expr><name>s</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name>marks</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>marks</name></name> = <name>marks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>marks_size</name></name> = <name>s</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>marks</name><index>[<expr><name><name>self</name>-&gt;<name>num_marks</name></name>++</expr>]</index></name> = <name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_reduce</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>callable</name> <init>= <expr>0</expr></init>, *<name>arg_tup</name> <init>= <expr>0</expr></init>, *<name>ob</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>arg_tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>arg_tup</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callable</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ob</name> = <call><name>Instance_New</name><argument_list>(<argument><expr><name>callable</name></expr></argument>, <argument><expr><name>arg_tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>arg_tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>ob</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_PUSH</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>ob</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>load_proto</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>protobyte</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> = <call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>protobyte</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>i</name> = <call><name>calc_binint</name><argument_list>(<argument><expr><name>protobyte</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt;= <name>HIGHEST_PROTOCOL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"unsupported pickle protocol: %d"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>load</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>err</name> <init>= <expr>0</expr></init>, *<name>val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>num_marks</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<switch>switch <condition>(<expr><name><name>s</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr><name>NONE</name></expr>:
<if>if <condition>(<expr><call><name>load_none</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BININT</name></expr>:
<if>if <condition>(<expr><call><name>load_binint</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BININT1</name></expr>:
<if>if <condition>(<expr><call><name>load_binint1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BININT2</name></expr>:
<if>if <condition>(<expr><call><name>load_binint2</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>INT</name></expr>:
<if>if <condition>(<expr><call><name>load_int</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG</name></expr>:
<if>if <condition>(<expr><call><name>load_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG1</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG4</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>FLOAT</name></expr>:
<if>if <condition>(<expr><call><name>load_float</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINFLOAT</name></expr>:
<if>if <condition>(<expr><call><name>load_binfloat</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINSTRING</name></expr>:
<if>if <condition>(<expr><call><name>load_binstring</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>SHORT_BINSTRING</name></expr>:
<if>if <condition>(<expr><call><name>load_short_binstring</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>STRING</name></expr>:
<if>if <condition>(<expr><call><name>load_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>UNICODE</name></expr>:
<if>if <condition>(<expr><call><name>load_unicode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINUNICODE</name></expr>:
<if>if <condition>(<expr><call><name>load_binunicode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>EMPTY_TUPLE</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE1</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE2</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE3</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE</name></expr>:
<if>if <condition>(<expr><call><name>load_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EMPTY_LIST</name></expr>:
<if>if <condition>(<expr><call><name>load_empty_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LIST</name></expr>:
<if>if <condition>(<expr><call><name>load_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EMPTY_DICT</name></expr>:
<if>if <condition>(<expr><call><name>load_empty_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>DICT</name></expr>:
<if>if <condition>(<expr><call><name>load_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>OBJ</name></expr>:
<if>if <condition>(<expr><call><name>load_obj</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>INST</name></expr>:
<if>if <condition>(<expr><call><name>load_inst</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>NEWOBJ</name></expr>:
<if>if <condition>(<expr><call><name>load_newobj</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>GLOBAL</name></expr>:
<if>if <condition>(<expr><call><name>load_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>APPEND</name></expr>:
<if>if <condition>(<expr><call><name>load_append</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>APPENDS</name></expr>:
<if>if <condition>(<expr><call><name>load_appends</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BUILD</name></expr>:
<if>if <condition>(<expr><call><name>load_build</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>DUP</name></expr>:
<if>if <condition>(<expr><call><name>load_dup</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINGET</name></expr>:
<if>if <condition>(<expr><call><name>load_binget</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG_BINGET</name></expr>:
<if>if <condition>(<expr><call><name>load_long_binget</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>GET</name></expr>:
<if>if <condition>(<expr><call><name>load_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EXT1</name></expr>:
<if>if <condition>(<expr><call><name>load_extension</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EXT2</name></expr>:
<if>if <condition>(<expr><call><name>load_extension</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EXT4</name></expr>:
<if>if <condition>(<expr><call><name>load_extension</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>MARK</name></expr>:
<if>if <condition>(<expr><call><name>load_mark</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINPUT</name></expr>:
<if>if <condition>(<expr><call><name>load_binput</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG_BINPUT</name></expr>:
<if>if <condition>(<expr><call><name>load_long_binput</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>PUT</name></expr>:
<if>if <condition>(<expr><call><name>load_put</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>POP</name></expr>:
<if>if <condition>(<expr><call><name>load_pop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>POP_MARK</name></expr>:
<if>if <condition>(<expr><call><name>load_pop_mark</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>SETITEM</name></expr>:
<if>if <condition>(<expr><call><name>load_setitem</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>SETITEMS</name></expr>:
<if>if <condition>(<expr><call><name>load_setitems</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>STOP</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PERSID</name></expr>:
<if>if <condition>(<expr><call><name>load_persid</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINPERSID</name></expr>:
<if>if <condition>(<expr><call><name>load_binpersid</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>REDUCE</name></expr>:
<if>if <condition>(<expr><call><name>load_reduce</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>PROTO</name></expr>:
<if>if <condition>(<expr><call><name>load_proto</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>NEWTRUE</name></expr>:
<if>if <condition>(<expr><call><name>load_bool</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Py_True</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>NEWFALSE</name></expr>:
<if>if <condition>(<expr><call><name>load_bool</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Py_False</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr>'\0'</expr>:
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>,
<argument><expr>"invalid load key, '%s'."</expr></argument>,
<argument><expr>"c"</expr></argument>, <argument><expr><name><name>s</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<break>break;</break>
}</block></while>
<if>if <condition>(<expr>(<name>err</name> = <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>err</name> == <name>PyExc_EOFError</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_obj</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_inst</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>marker</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_newobj</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_global</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>readline_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>,<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_reduce</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> &lt; 2</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>,<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_build</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name> &lt; 1</expr>)</condition><then> <return>return <expr><call><name>stackUnderflow</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>stack</name>-&gt;<name>length</name></name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>noload_extension</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>nbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>codebytes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nbytes</name> == 1 || <name>nbytes</name> == 2 || <name>nbytes</name> == 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>codebytes</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PDATA_APPEND</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>noload</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>err</name> <init>= <expr>0</expr></init>, *<name>val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>num_marks</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Pdata_clear</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr><call><name><name>self</name>-&gt;<name>read_func</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<switch>switch <condition>(<expr><name><name>s</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr><name>NONE</name></expr>:
<if>if <condition>(<expr><call><name>load_none</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BININT</name></expr>:
<if>if <condition>(<expr><call><name>load_binint</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BININT1</name></expr>:
<if>if <condition>(<expr><call><name>load_binint1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BININT2</name></expr>:
<if>if <condition>(<expr><call><name>load_binint2</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>INT</name></expr>:
<if>if <condition>(<expr><call><name>load_int</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG</name></expr>:
<if>if <condition>(<expr><call><name>load_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG1</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG4</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_long</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>FLOAT</name></expr>:
<if>if <condition>(<expr><call><name>load_float</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINFLOAT</name></expr>:
<if>if <condition>(<expr><call><name>load_binfloat</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINSTRING</name></expr>:
<if>if <condition>(<expr><call><name>load_binstring</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>SHORT_BINSTRING</name></expr>:
<if>if <condition>(<expr><call><name>load_short_binstring</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>STRING</name></expr>:
<if>if <condition>(<expr><call><name>load_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr><name>UNICODE</name></expr>:
<if>if <condition>(<expr><call><name>load_unicode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINUNICODE</name></expr>:
<if>if <condition>(<expr><call><name>load_binunicode</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr><name>EMPTY_TUPLE</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE1</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE2</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE3</name></expr>:
<if>if <condition>(<expr><call><name>load_counted_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>TUPLE</name></expr>:
<if>if <condition>(<expr><call><name>load_tuple</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EMPTY_LIST</name></expr>:
<if>if <condition>(<expr><call><name>load_empty_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LIST</name></expr>:
<if>if <condition>(<expr><call><name>load_list</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EMPTY_DICT</name></expr>:
<if>if <condition>(<expr><call><name>load_empty_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>DICT</name></expr>:
<if>if <condition>(<expr><call><name>load_dict</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>OBJ</name></expr>:
<if>if <condition>(<expr><call><name>noload_obj</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>INST</name></expr>:
<if>if <condition>(<expr><call><name>noload_inst</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>NEWOBJ</name></expr>:
<if>if <condition>(<expr><call><name>noload_newobj</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>GLOBAL</name></expr>:
<if>if <condition>(<expr><call><name>noload_global</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>APPEND</name></expr>:
<if>if <condition>(<expr><call><name>load_append</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>APPENDS</name></expr>:
<if>if <condition>(<expr><call><name>load_appends</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BUILD</name></expr>:
<if>if <condition>(<expr><call><name>noload_build</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>DUP</name></expr>:
<if>if <condition>(<expr><call><name>load_dup</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINGET</name></expr>:
<if>if <condition>(<expr><call><name>load_binget</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG_BINGET</name></expr>:
<if>if <condition>(<expr><call><name>load_long_binget</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>GET</name></expr>:
<if>if <condition>(<expr><call><name>load_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EXT1</name></expr>:
<if>if <condition>(<expr><call><name>noload_extension</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EXT2</name></expr>:
<if>if <condition>(<expr><call><name>noload_extension</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>EXT4</name></expr>:
<if>if <condition>(<expr><call><name>noload_extension</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>MARK</name></expr>:
<if>if <condition>(<expr><call><name>load_mark</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINPUT</name></expr>:
<if>if <condition>(<expr><call><name>load_binput</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>LONG_BINPUT</name></expr>:
<if>if <condition>(<expr><call><name>load_long_binput</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>PUT</name></expr>:
<if>if <condition>(<expr><call><name>load_put</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>POP</name></expr>:
<if>if <condition>(<expr><call><name>load_pop</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>POP_MARK</name></expr>:
<if>if <condition>(<expr><call><name>load_pop_mark</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>SETITEM</name></expr>:
<if>if <condition>(<expr><call><name>load_setitem</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>SETITEMS</name></expr>:
<if>if <condition>(<expr><call><name>load_setitems</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>STOP</name></expr>:
<break>break;</break>
</case><case>case <expr><name>PERSID</name></expr>:
<if>if <condition>(<expr><call><name>load_persid</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>BINPERSID</name></expr>:
<if>if <condition>(<expr><call><name>load_binpersid</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>REDUCE</name></expr>:
<if>if <condition>(<expr><call><name>noload_reduce</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>PROTO</name></expr>:
<if>if <condition>(<expr><call><name>load_proto</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>NEWTRUE</name></expr>:
<if>if <condition>(<expr><call><name>load_bool</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Py_True</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><case>case <expr><name>NEWFALSE</name></expr>:
<if>if <condition>(<expr><call><name>load_bool</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Py_False</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<continue>continue;</continue>
</case><default>default:
<expr_stmt><expr><call><name>cPickle_ErrFormat</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>,
<argument><expr>"invalid load key, '%s'."</expr></argument>,
<argument><expr>"c"</expr></argument>, <argument><expr><name><name>s</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<break>break;</break>
}</block></while>
<if>if <condition>(<expr>(<name>err</name> = <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>err</name> == <name>PyExc_EOFError</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetNone</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PDATA_POP</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Unpickler_load</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>load</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Unpickler_noload</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>noload</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>Unpickler_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"load"</expr>, <expr>(<name>PyCFunction</name>)<name>Unpickler_load</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"load() -- Load a pickle"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"noload"</expr>, <expr>(<name>PyCFunction</name>)<name>Unpickler_noload</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(
<argument>"noload() -- not load a pickle, but go through most of the motions\n"
"\n"
"This function can be used to read past a pickle without instantiating\n"
"any objects or importing any modules. It can also be used to find all\n"
"persistent references without instantiating any objects or importing\n"
"any modules.\n"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>Unpicklerobject</name> *</type>
<name>newUnpicklerobject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>self</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>Unpicklerobject</name></expr></argument>, <argument><expr>&amp;<name>Unpicklertype</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>arg</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>stack</name></name> = (<name>Pdata</name>*)<call><name>Pdata_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pers_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>last_string</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>marks</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>num_marks</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>marks_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>buf_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>read</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>readline</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>find_class</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name><name>self</name>-&gt;<name>memo</name></name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>stack</name></name></expr>)</condition><then>
<goto>goto <name>err</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>file</name></name> = <name>f</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyFile_Check</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>fp</name></name> = <call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>fp</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"I/O operation on closed file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>read_func</name></name> = <name>read_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>readline_func</name></name> = <name>readline_file</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PycStringIO_InputCheck</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>fp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>read_func</name></name> = <name>read_cStringIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>readline_func</name></name> = <name>readline_cStringIO</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>fp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>read_func</name></name> = <name>read_other</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>readline_func</name></name> = <name>readline_other</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!( (<name><name>self</name>-&gt;<name>readline</name></name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>readline_str</name></expr></argument>)</argument_list></call>) &amp;&amp;
(<name><name>self</name>-&gt;<name>read</name></name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>read_str</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>( <argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"argument must have 'read' and "
"'readline' attributes"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
}</block></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>PyObject_GC_Track</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_Unpickler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>PyObject</name> *)<call><name>newUnpicklerobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>Unpickler_dealloc</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>readline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>marks</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>buf_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Unpickler_traverse</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>readline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Unpickler_clear</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>readline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>last_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_CLEAR</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>Unpickler_getattr</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"persistent_load"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>pers_func</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"find_global"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>find_class</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>find_class</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"memo"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>self</name>-&gt;<name>memo</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>memo</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"UnpicklingError"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>UnpicklingError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UnpicklingError</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>Unpickler_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Unpickler_setattr</name><parameter_list>(<param><decl><type><name>Unpicklerobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"persistent_load"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pers_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pers_func</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"find_global"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>find_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>find_class</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"attribute deletion is not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"memo"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"memo must be a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>memo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>memo</name></name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_AttributeError</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cpm_dump</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"obj"</expr>, <expr>"file"</expr>, <expr>"protocol"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>, *<decl><type ref="prev"/><name>file</name></decl>, *<decl><type ref="prev"/><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Picklerobject</name> *</type><name>pickler</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proto</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"OO|i"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>ob</name></expr></argument>, <argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>proto</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>pickler</name> = <call><name>newPicklerobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>pickler</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <name>Py_None</name></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pickler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cpm_dumps</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"obj"</expr>, <expr>"protocol"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>, *<decl><type ref="prev"/><name>file</name> <init>= <expr>0</expr></init>, *<name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Picklerobject</name> *</type><name>pickler</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proto</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"O|i:dumps"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>,
<argument><expr>&amp;<name>ob</name></expr></argument>, <argument><expr>&amp;<name>proto</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>file</name> = <call><name><name>PycStringIO</name>-&gt;<name>NewOutput</name></name><argument_list>(<argument><expr>128</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>pickler</name> = <call><name>newPicklerobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>dump</name><argument_list>(<argument><expr><name>pickler</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = <call><name><name>PycStringIO</name>-&gt;<name>cgetvalue</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pickler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cpm_load</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Unpicklerobject</name> *</type><name>unpickler</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <name>unpickler</name> = <call><name>newUnpicklerobject</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = <call><name>load</name><argument_list>(<argument><expr><name>unpickler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>unpickler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cpm_loads</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name></decl>, *<decl><type ref="prev"/><name>file</name> <init>= <expr>0</expr></init>, *<name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Unpicklerobject</name> *</type><name>unpickler</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!( <call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"S:loads"</expr></argument>, <argument><expr>&amp;<name>ob</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>file</name> = <call><name><name>PycStringIO</name>-&gt;<name>NewInput</name></name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<if>if <condition>(<expr>!( <name>unpickler</name> = <call><name>newUnpicklerobject</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>finally</name>;</goto></then></if>
<expr_stmt><expr><name>res</name> = <call><name>load</name><argument_list>(<argument><expr><name>unpickler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finally</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>unpickler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>Unpicklertype__doc__</name></expr></argument>,
<argument><expr>"Objects that know how to unpickle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Unpicklertype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"cPickle.Unpickler"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Unpicklerobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>Unpickler_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>Unpickler_getattr</name></expr>,
<expr>(<name>setattrfunc</name>)<name>Unpickler_setattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr><name>Unpicklertype__doc__</name></expr>,
<expr>(<name>traverseproc</name>)<name>Unpickler_traverse</name></expr>,
<expr>(<name>inquiry</name>)<name>Unpickler_clear</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>cPickle_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"dump"</expr>, <expr>(<name>PyCFunction</name>)<name>cpm_dump</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"dump(obj, file, protocol=0) -- "
"Write an object in pickle format to the given file.\n"
"\n"
"See the Pickler docstring for the meaning of optional argument proto."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"dumps"</expr>, <expr>(<name>PyCFunction</name>)<name>cpm_dumps</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"dumps(obj, protocol=0) -- "
"Return a string containing an object in pickle format.\n"
"\n"
"See the Pickler docstring for the meaning of optional argument proto."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"load"</expr>, <expr>(<name>PyCFunction</name>)<name>cpm_load</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"load(file) -- Load a pickle from the given file"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"loads"</expr>, <expr>(<name>PyCFunction</name>)<name>cpm_loads</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"loads(string) -- Load a pickle from the given string"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Pickler"</expr>, <expr>(<name>PyCFunction</name>)<name>get_Pickler</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Pickler(file, protocol=0) -- Create a pickler.\n"
"\n"
"This takes a file-like object for writing a pickle data stream.\n"
"The optional proto argument tells the pickler to use the given\n"
"protocol; supported protocols are 0, 1, 2. The default\n"
"protocol is 0, to be backwards compatible. (Protocol 0 is the\n"
"only protocol that can be written to a file opened in text\n"
"mode and read back successfully. When using a protocol higher\n"
"than 0, make sure the file is opened in binary mode, both when\n"
"pickling and unpickling.)\n"
"\n"
"Protocol 1 is more efficient than protocol 0; protocol 2 is\n"
"more efficient than protocol 1.\n"
"\n"
"Specifying a negative protocol version selects the highest\n"
"protocol version supported. The higher the protocol used, the\n"
"more recent the version of Python needed to read the pickle\n"
"produced.\n"
"\n"
"The file parameter must have a write() method that accepts a single\n"
"string argument. It can thus be an open file object, a StringIO\n"
"object, or any other custom object that meets this interface.\n"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Unpickler"</expr>, <expr>(<name>PyCFunction</name>)<name>get_Unpickler</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Unpickler(file) -- Create an unpickler."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_stuff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>module_dict</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>copyreg</name></decl>, *<decl><type ref="prev"/><name>t</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_STR</name><parameter_list>(<param><type><name>S</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (!( S ##_str=PyString_InternFromString(#S))) return -1;</cpp:value></cpp:define>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Unpicklertype</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Picklertype</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__class__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__getinitargs__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__dict__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__getstate__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__setstate__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__name__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__main__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__reduce__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>__reduce_ex__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>readline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>copyreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INIT_STR</name><argument_list>(<argument><expr><name>dispatch_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>copyreg</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>"copy_reg"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>dispatch_table</name> = <call><name>PyObject_GetAttr</name><argument_list>(<argument><expr><name>copyreg</name></expr></argument>, <argument><expr><name>dispatch_table_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dispatch_table</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>extension_registry</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>copyreg</name></expr></argument>,
<argument><expr>"_extension_registry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>extension_registry</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>inverted_registry</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>copyreg</name></expr></argument>,
<argument><expr>"_inverted_registry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>inverted_registry</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>extension_cache</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>copyreg</name></expr></argument>,
<argument><expr>"_extension_cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>extension_cache</name></expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>copyreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>empty_tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>two_tuple</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>two_tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>two_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>t</name>=<call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>"__builtin__"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>module_dict</name></expr></argument>, <argument><expr>"__builtins__"</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>t</name>=<call><name>PyDict_New</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>r</name>=<call><name>PyRun_String</name><argument_list>(
<argument><expr>"def __str__(self):\n"
" return self.args and ('%s' % self.args[0]) or '(what)'\n"</expr></argument>,
<argument><expr><name>Py_file_input</name></expr></argument>,
<argument><expr><name>module_dict</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> )</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PickleError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"cPickle.PickleError"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>PickleError</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PicklingError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"cPickle.PicklingError"</expr></argument>,
<argument><expr><name>PickleError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>PicklingError</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>t</name>=<call><name>PyDict_New</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>r</name>=<call><name>PyRun_String</name><argument_list>(
<argument><expr>"def __str__(self):\n"
" a=self.args\n"
" a=a and type(a[0]) or '(what)'\n"
" return 'Cannot pickle %s objects' % a\n"</expr></argument>
, <argument><expr><name>Py_file_input</name></expr></argument>,
<argument><expr><name>module_dict</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> )</expr>)</condition><then> <return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>UnpickleableError</name> = <call><name>PyErr_NewException</name><argument_list>(
<argument><expr>"cPickle.UnpickleableError"</expr></argument>, <argument><expr><name>PicklingError</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!( <name>UnpicklingError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"cPickle.UnpicklingError"</expr></argument>,
<argument><expr><name>PickleError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr>!( <name>BadPickleGet</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"cPickle.BadPickleGet"</expr></argument>,
<argument><expr><name>UnpicklingError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>module_dict</name></expr></argument>, <argument><expr>"PickleError"</expr></argument>,
<argument><expr><name>PickleError</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>module_dict</name></expr></argument>, <argument><expr>"PicklingError"</expr></argument>,
<argument><expr><name>PicklingError</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>module_dict</name></expr></argument>, <argument><expr>"UnpicklingError"</expr></argument>,
<argument><expr><name>UnpicklingError</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>module_dict</name></expr></argument>, <argument><expr>"UnpickleableError"</expr></argument>,
<argument><expr><name>UnpickleableError</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>module_dict</name></expr></argument>, <argument><expr>"BadPickleGet"</expr></argument>,
<argument><expr><name>BadPickleGet</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>PycString_IMPORT</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PyMODINIT_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMODINIT_FUNC</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initcPickle</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>di</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>, *<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>rev</name> <init>= <expr>"1.71"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>format_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>compatible_formats</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the cPickle module has been removed in "
"Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>Picklertype</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>Unpicklertype</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>PdataType</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>di</name></expr>)</condition><then> <return>return;</return></then></if>
<if>if <condition>(<expr><call><name>init_stuff</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"cPickle"</expr></argument>, <argument><expr><name>cPickle_methods</name></expr></argument>,
<argument><expr><name>cPickle_module_documentation</name></expr></argument>,
<argument><expr>(<name>PyObject</name>*)<name>NULL</name></expr></argument>,<argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"__version__"</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>k</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>) <block>{
<if>if <condition>(<expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"HIGHEST_PROTOCOL"</expr></argument>, <argument><expr><name>HIGHEST_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>format_version</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"2.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compatible_formats</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"[sssss]"</expr></argument>,
<argument><expr>"1.0"</expr></argument>,
<argument><expr>"1.1"</expr></argument>,
<argument><expr>"1.2"</expr></argument>,
<argument><expr>"1.3"</expr></argument>,
<argument><expr>"2.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"format_version"</expr></argument>, <argument><expr><name>format_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"compatible_formats"</expr></argument>, <argument><expr><name>compatible_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>format_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>compatible_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
