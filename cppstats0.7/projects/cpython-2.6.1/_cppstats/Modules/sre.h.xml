<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/sre.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SRE_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_INCLUDED</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sre_constants.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_UNICODE_WIDE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CODE</name></cpp:macro> <cpp:value>Py_UCS4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_CODE</name></cpp:macro> <cpp:value>unsigned short</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
<name>Py_ssize_t</name></type> <name>groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>groupindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>indexgroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>weakreflist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>codesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name></type> <name><name>code</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>PatternObject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PatternObject_GetCode</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PatternObject*)(o))-&gt;code)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
<name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>regs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PatternObject</name>*</type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>endpos</name>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name><name>mark</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>MatchObject</name>;</typedef>
<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name></type> (*<name>SRE_TOLOWER_HOOK</name>)<parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRE_MARK_SIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>SRE_REPEAT_T</name> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_CODE</name>*</type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>last_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>SRE_REPEAT_T</name> *</type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>SRE_REPEAT</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name>*</type> <name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>beginning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name></decl>, <name>endpos</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>charsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lastmark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>*</type> <name><name>mark</name><index>[<expr><name>SRE_MARK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>data_stack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_stack_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_stack_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_REPEAT</name> *</type><name>repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_TOLOWER_HOOK</name></type> <name>lower</name></decl>;</decl_stmt>
}</block></struct></type> <name>SRE_STATE</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PyObject</name>*</type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SRE_STATE</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>ScannerObject</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
