<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/tkappinit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tk.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>Tcl_AppInit</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Tk_Window</name></type> <name>main_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>_tkinter_skip_tk_init</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TK_AQUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MAX_PATH_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PATH_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>tclLibPath</name><index>[<expr><name>MAX_PATH_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tkLibPath</name><index>[<expr><name>MAX_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Tcl_Obj</name>*</type> <name>pathPtr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Tk_MacOSXOpenBundleResources</name> <argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"com.tcltk.tcllibrary"</expr></argument>,
<argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>MAX_PATH_LEN</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tclLibPath</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tcl_library"</expr></argument>, <argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tclDefaultLibrary"</expr></argument>, <argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tcl_pkgPath"</expr></argument>, <argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>tclLibPath</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tcl_library"</expr></argument>, <argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tclDefaultLibrary"</expr></argument>, <argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tcl_pkgPath"</expr></argument>, <argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>Tcl_Init</name> <argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call> == <name>TCL_ERROR</name></expr>)</condition><then>
<return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TK_AQUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Tk_MacOSXOpenBundleResources</name> <argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"com.tcltk.tklibrary"</expr></argument>,
<argument><expr><name>tkLibPath</name></expr></argument>, <argument><expr><name>MAX_PATH_LEN</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tclLibPath</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pathPtr</name> = <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>tclLibPath</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pathPtr</name> <init>= <expr><call><name>TclGetLibraryPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>tkLibPath</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>objPtr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tk_library"</expr></argument>, <argument><expr><name>tkLibPath</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>objPtr</name> = <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>tkLibPath</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pathPtr</name></expr></argument>, <argument><expr><name>objPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>TclSetLibraryPath</name><argument_list>(<argument><expr><name>pathPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_XXX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>_tkinter_skip_tk_init</name> = <call><name>Tcl_GetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"_tkinter_skip_tk_init"</expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_tkinter_skip_tk_init</name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>_tkinter_skip_tk_init</name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>Tk_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call> == <name>TCL_ERROR</name></expr>)</condition><then>
<return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>main_window</name> = <call><name>Tk_MainWindow</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TK_AQUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>TkMacOSXInitAppleEvents</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TkMacOSXInitMenus</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_MOREBUTTONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><specifier>extern</specifier> <name>Tcl_CmdProc</name></type> <name>studButtonCmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Tcl_CmdProc</name></type> <name>triButtonCmd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"studbutton"</expr></argument>, <argument><expr><name>studButtonCmd</name></expr></argument>,
<argument><expr>(<name>ClientData</name>) <name>main_window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"tributton"</expr></argument>, <argument><expr><name>triButtonCmd</name></expr></argument>,
<argument><expr>(<name>ClientData</name>) <name>main_window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_PIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>TkImaging_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>TkImaging_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_PIL_OLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>TkImaging_Init</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_TIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Tix_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Tix_SafeInit</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>Tcl_StaticPackage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Tix"</expr></argument>, <argument><expr><name>Tix_Init</name></expr></argument>, <argument><expr><name>Tix_SafeInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_BLT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Blt_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Blt_SafeInit</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>Tcl_StaticPackage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Blt"</expr></argument>, <argument><expr><name>Blt_Init</name></expr></argument>, <argument><expr><name>Blt_SafeInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_TOGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Togl_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>Tcl_StaticPackage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Togl"</expr></argument>, <argument><expr><name>Togl_Init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_XXX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
</unit>
