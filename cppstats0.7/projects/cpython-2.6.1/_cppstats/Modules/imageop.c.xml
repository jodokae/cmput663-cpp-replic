<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/imageop.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signed</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> == 4</expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>Py_Int32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>Py_UInt32</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> == 4</expr></cpp:if>
<typedef>typedef <type><name>long</name></type> <name>Py_Int32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>Py_UInt32</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "No 4-byte integral type"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHARP</name><parameter_list>(<param><type><name>cp</name></type></param>, <param><type><name>xmax</name></type></param>, <param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((char *)(cp+y*xmax+x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORTP</name><parameter_list>(<param><type><name>cp</name></type></param>, <param><type><name>xmax</name></type></param>, <param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((short *)(cp+2*(y*xmax+x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGP</name><parameter_list>(<param><type><name>cp</name></type></param>, <param><type><name>xmax</name></type></param>, <param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((Py_Int32 *)(cp+4*(y*xmax+x)))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ImageopError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ImageopDict</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_coordonnate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr>0 &lt; <name>value</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"%s value is negative or nul"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_multiply_size</name><parameter_list>(<param><decl><type><name>int</name></type> <name>product</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>xname</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>yname</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr>!<call><name>check_coordonnate</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xname</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_coordonnate</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yname</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr><name>size</name> == (<name>product</name> / <name>y</name>) / <name>x</name></expr> )</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"String has incorrect length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_multiply</name><parameter_list>(<param><decl><type><name>int</name></type> <name>product</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>check_multiply_size</name><argument_list>(<argument><expr><name>product</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>imageop_backward_compatible</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>bcos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>bco</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ImageopDict</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr><name>bcos</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bcos</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>"backward_compatible"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bcos</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>bco</name> = <call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>ImageopDict</name></expr></argument>, <argument><expr><name>bcos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bco</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyInt_Check</name><argument_list>(<argument><expr><name>bco</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>bco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rc</name> != 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_crop</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> *</type><name>nsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_Int32</name> *</type><name>nlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>newx1</name></decl>, <decl><type ref="prev"/><name>newx2</name></decl>, <decl><type ref="prev"/><name>newy1</name></decl>, <decl><type ref="prev"/><name>newy2</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iy</name></decl>, <decl><type ref="prev"/><name>xstep</name></decl>, <decl><type ref="prev"/><name>ystep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#iiiiiii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>,
<argument><expr>&amp;<name>newx1</name></expr></argument>, <argument><expr>&amp;<name>newy1</name></expr></argument>, <argument><expr>&amp;<name>newx2</name></expr></argument>, <argument><expr>&amp;<name>newy2</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr><name>size</name> != 1 &amp;&amp; <name>size</name> != 2 &amp;&amp; <name>size</name> != 4</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"Size should be 1, 2 or 4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>xstep</name> = (<name>newx1</name> &lt; <name>newx2</name>)? 1 : -1</expr>;</expr_stmt>
<expr_stmt><expr><name>ystep</name> = (<name>newy1</name> &lt; <name>newy2</name>)? 1 : -1</expr>;</expr_stmt>
<expr_stmt><expr><name>nlen</name> = (<call><name>abs</name><argument_list>(<argument><expr><name>newx2</name>-<name>newx1</name></expr></argument>)</argument_list></call>+1)*(<call><name>abs</name><argument_list>(<argument><expr><name>newy2</name>-<name>newy1</name></expr></argument>)</argument_list></call>+1)*<name>size</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>newx2</name>-<name>newx1</name></expr></argument>)</argument_list></call>+1</expr></argument>, <argument><expr>"abs(newx2-newx1)+1"</expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>newy2</name>-<name>newy1</name></expr></argument>)</argument_list></call>+1</expr></argument>, <argument><expr>"abs(newy2-newy1)+1"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsp</name> = (<name>short</name> *)<name>ncp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlp</name> = (<name>Py_Int32</name> *)<name>ncp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newy2</name> += <name>ystep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newx2</name> += <name>xstep</name></expr>;</expr_stmt>
<for>for( <init><expr><name>iy</name> = <name>newy1</name></expr>;</init> <condition><expr><name>iy</name> != <name>newy2</name></expr>;</condition> <incr><expr><name>iy</name>+=<name>ystep</name></expr></incr> ) <block>{
<for>for ( <init><expr><name>ix</name> = <name>newx1</name></expr>;</init> <condition><expr><name>ix</name> != <name>newx2</name></expr>;</condition> <incr><expr><name>ix</name>+=<name>xstep</name></expr></incr> ) <block>{
<if>if <condition>( <expr><name>iy</name> &lt; 0 || <name>iy</name> &gt;= <name>y</name> || <name>ix</name> &lt; 0 || <name>ix</name> &gt;= <name>x</name></expr> )</condition><then> <block>{
<if>if <condition>( <expr><name>size</name> == 1</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = 0</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>nlp</name>++ = 0</expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<if>if <condition>( <expr><name>size</name> == 1</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = *<call><name>CHARP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>( <expr><name>size</name> == 2</expr> )</condition><then>
<expr_stmt><expr>*<name>nsp</name>++ = *<call><name>SHORTP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>nlp</name>++ = *<call><name>LONGP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></else></if>
}</block></for>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_scale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> *</type><name>nsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_Int32</name> *</type><name>nlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>newx</name></decl>, <decl><type ref="prev"/><name>newy</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>iy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oix</name></decl>, <decl><type ref="prev"/><name>oiy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#iiiii"</expr></argument>,
<argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>newx</name></expr></argument>, <argument><expr>&amp;<name>newy</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr><name>size</name> != 1 &amp;&amp; <name>size</name> != 2 &amp;&amp; <name>size</name> != 4</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"Size should be 1, 2 or 4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>newx</name>*<name>newy</name>*<name>size</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>newx</name></expr></argument>, <argument><expr>"newx"</expr></argument>, <argument><expr><name>newy</name></expr></argument>, <argument><expr>"newy"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsp</name> = (<name>short</name> *)<name>ncp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nlp</name> = (<name>Py_Int32</name> *)<name>ncp</name></expr>;</expr_stmt>
<for>for( <init><expr><name>iy</name> = 0</expr>;</init> <condition><expr><name>iy</name> &lt; <name>newy</name></expr>;</condition> <incr><expr><name>iy</name>++</expr></incr> ) <block>{
<for>for ( <init><expr><name>ix</name> = 0</expr>;</init> <condition><expr><name>ix</name> &lt; <name>newx</name></expr>;</condition> <incr><expr><name>ix</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>oix</name> = <name>ix</name> * <name>x</name> / <name>newx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oiy</name> = <name>iy</name> * <name>y</name> / <name>newy</name></expr>;</expr_stmt>
<if>if <condition>( <expr><name>size</name> == 1</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = *<call><name>CHARP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>oix</name></expr></argument>, <argument><expr><name>oiy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>( <expr><name>size</name> == 2</expr> )</condition><then>
<expr_stmt><expr>*<name>nsp</name>++ = *<call><name>SHORTP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>oix</name></expr></argument>, <argument><expr><name>oiy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>nlp</name>++ = *<call><name>LONGP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>oix</name></expr></argument>, <argument><expr><name>oiy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></for>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_tovideo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>maxx</name></decl>, <decl><type ref="prev"/><name>maxy</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#iii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>maxx</name></expr></argument>, <argument><expr>&amp;<name>maxy</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr><name>width</name> != 1 &amp;&amp; <name>width</name> != 4</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"Size should be 1 or 4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>maxx</name></expr></argument>, <argument><expr>"max"</expr></argument>, <argument><expr><name>maxy</name></expr></argument>, <argument><expr>"maxy"</expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>width</name> == 1</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ncp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>maxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ncp</name> += <name>maxx</name></expr>;</expr_stmt>
<for>for (<init><expr><name>y</name>=1</expr>;</init> <condition><expr><name>y</name>&lt;<name>maxy</name></expr>;</condition> <incr><expr><name>y</name>++</expr></incr>) <block>{
<for>for(<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>maxx</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>i</name> = <name>y</name>*<name>maxx</name> + <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = ((<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> + (<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name>-<name>maxx</name></expr>]</index></name>) &gt;&gt; 1</expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ncp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>maxx</name>*4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ncp</name> += <name>maxx</name>*4</expr>;</expr_stmt>
<for>for (<init><expr><name>y</name>=1</expr>;</init> <condition><expr><name>y</name>&lt;<name>maxy</name></expr>;</condition> <incr><expr><name>y</name>++</expr></incr>) <block>{
<for>for(<init><expr><name>x</name>=0</expr>;</init> <condition><expr><name>x</name>&lt;<name>maxx</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>i</name> = (<name>y</name>*<name>maxx</name> + <name>x</name>)*4 + 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = ((<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> + (<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name>-4*<name>maxx</name></expr>]</index></name>) &gt;&gt; 1</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = ((<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> + (<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name>-4*<name>maxx</name></expr>]</index></name>) &gt;&gt; 1</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = ((<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> + (<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name>-4*<name>maxx</name></expr>]</index></name>) &gt;&gt; 1</expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_grey2mono</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tres</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ovalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#iii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>tres</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>len</name>+7)/8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> = 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<if>if <condition>( <expr>(<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> &gt; <name>tres</name></expr> )</condition><then>
<expr_stmt><expr><name>ovalue</name> |= <name>bit</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>bit</name> &gt;&gt;= 1</expr>;</expr_stmt>
<if>if <condition>( <expr><name>bit</name> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> = 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>( <expr><name>bit</name> != 0x80</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_grey2grey4</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ovalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>len</name>+1)/2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>ovalue</name> |= ((<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xf0) &gt;&gt; <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> += 4</expr>;</expr_stmt>
<if>if <condition>( <expr><name>pos</name> == 8</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>( <expr><name>pos</name> != 0</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_grey2grey2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ovalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>len</name>+3)/4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>ovalue</name> |= ((<name>int</name>)<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xc0) &gt;&gt; <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> += 2</expr>;</expr_stmt>
<if>if <condition>( <expr><name>pos</name> == 8</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>( <expr><name>pos</name> != 0</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_dither2mono</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ovalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>len</name>+7)/8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> = 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>sum</name> += <name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>( <expr><name>sum</name> &gt;= 256</expr> )</condition><then> <block>{
<expr_stmt><expr><name>sum</name> -= 256</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> |= <name>bit</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>bit</name> &gt;&gt;= 1</expr>;</expr_stmt>
<if>if <condition>( <expr><name>bit</name> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> = 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>( <expr><name>bit</name> != 0x80</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_dither2grey2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ovalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr>0</expr></init>, <name>nvalue</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>len</name>+3)/4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>sum</name> += <name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nvalue</name> = <name>sum</name> &amp; 0x180</expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> -= <name>nvalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> |= <name>nvalue</name> &gt;&gt; <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> += 2</expr>;</expr_stmt>
<if>if <condition>( <expr><name>pos</name> == 9</expr> )</condition><then> <block>{
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ovalue</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>( <expr><name>pos</name> != 0</expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = <name>ovalue</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_mono2grey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#iiii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>v0</name></expr></argument>, <argument><expr>&amp;<name>v1</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>(<name>nlen</name>+7)/8 != <name>len</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"String has incorrect length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> = 0x80</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nlen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<if>if <condition>( <expr>*<name>cp</name> &amp; <name>bit</name></expr> )</condition><then>
<expr_stmt><expr>*<name>ncp</name>++ = <name>v1</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>ncp</name>++ = <name>v0</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>bit</name> &gt;&gt;= 1</expr>;</expr_stmt>
<if>if <condition>( <expr><name>bit</name> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr><name>bit</name> = 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_grey22grey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr>0</expr></init>, <name>nvalue</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>( <expr>(<name>nlen</name>+3)/4 != <name>len</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"String has incorrect length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nlen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<if>if <condition>( <expr><name>pos</name> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr><name>value</name> = *<name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 8</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>pos</name> -= 2</expr>;</expr_stmt>
<expr_stmt><expr><name>nvalue</name> = (<name>value</name> &gt;&gt; <name>pos</name>) &amp; 0x03</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>nvalue</name> | (<name>nvalue</name> &lt;&lt; 2) |
(<name>nvalue</name> &lt;&lt; 4) | (<name>nvalue</name> &lt;&lt; 6)</expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_grey42grey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr>0</expr></init>, <name>nvalue</name></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>(<name>nlen</name>+1)/2 != <name>len</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>ImageopError</name></expr></argument>, <argument><expr>"String has incorrect length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nlen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<if>if <condition>( <expr><name>pos</name> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr><name>value</name> = *<name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = 8</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>pos</name> -= 4</expr>;</expr_stmt>
<expr_stmt><expr><name>nvalue</name> = (<name>value</name> &gt;&gt; <name>pos</name>) &amp; 0x0f</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>nvalue</name> | (<name>nvalue</name> &lt;&lt; 4)</expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_rgb2rgb8</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backward_compatible</name> <init>= <expr><call><name>imageop_backward_compatible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nlen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<if>if <condition>(<expr><name>backward_compatible</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_UInt32</name></type> <name>value</name> <init>= <expr>* (<name>Py_UInt32</name> *) <name>cp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cp</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<name>value</name> &amp; 0xff) / 255. * 7. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>value</name> &gt;&gt; 8) &amp; 0xff) / 255. * 7. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>value</name> &gt;&gt; 16) &amp; 0xff) / 255. * 3. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>*<name>cp</name>++ / 255. * 3. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>*<name>cp</name>++ / 255. * 7. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>*<name>cp</name>++ / 255. * 7. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>ncp</name>++ = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr>(<name>r</name>&lt;&lt;5) | (<name>b</name>&lt;&lt;3) | <name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_rgb82rgb</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backward_compatible</name> <init>= <expr><call><name>imageop_backward_compatible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name>*4</expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>value</name> = *<name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = (<name>value</name> &gt;&gt; 5) &amp; 7</expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = (<name>value</name> ) &amp; 7</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = (<name>value</name> &gt;&gt; 3) &amp; 3</expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = (<name>r</name>&lt;&lt;5) | (<name>r</name>&lt;&lt;3) | (<name>r</name>&gt;&gt;1)</expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = (<name>g</name>&lt;&lt;5) | (<name>g</name>&lt;&lt;3) | (<name>g</name>&gt;&gt;1)</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = (<name>b</name>&lt;&lt;6) | (<name>b</name>&lt;&lt;4) | (<name>b</name>&lt;&lt;2) | <name>b</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>backward_compatible</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_UInt32</name></type> <name>nvalue</name> <init>= <expr><name>r</name> | (<name>g</name>&lt;&lt;8) | (<name>b</name>&lt;&lt;16)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>* (<name>Py_UInt32</name> *) <name>ncp</name> = <name>nvalue</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ncp</name> += 4</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>ncp</name>++ = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>r</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_rgb2grey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backward_compatible</name> <init>= <expr><call><name>imageop_backward_compatible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name></expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nlen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<if>if <condition>(<expr><name>backward_compatible</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_UInt32</name></type> <name>value</name> <init>= <expr>* (<name>Py_UInt32</name> *) <name>cp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cp</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<name>value</name> &amp; 0xff) / 255. * 7. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>value</name> &gt;&gt; 8) &amp; 0xff) / 255. * 7. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>value</name> &gt;&gt; 16) &amp; 0xff) / 255. * 3. + .5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = *<name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = *<name>cp</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = *<name>cp</name>++</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>nvalue</name> = <call>(<name>int</name>)<argument_list>(<argument><expr>0.30*<name>r</name> + 0.59*<name>g</name> + 0.11*<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>nvalue</name> &gt; 255</expr> )</condition><then> <expr_stmt><expr><name>nvalue</name> = 255</expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>ncp</name>++ = (<name>unsigned</name> <name>char</name>)<name>nvalue</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>imageop_grey2rgb</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>ncp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backward_compatible</name> <init>= <expr><call><name>imageop_backward_compatible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#ii"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr>!<call><name>check_multiply</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>nlen</name> = <name>x</name>*<name>y</name>*4</expr>;</expr_stmt>
<if>if <condition>( <expr>!<call><name>check_multiply_size</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>"x"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>"y"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == 0</expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>ncp</name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for ( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
<expr_stmt><expr><name>value</name> = *<name>cp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>backward_compatible</name></expr>)</condition><then> <block>{
<expr_stmt><expr>* (<name>Py_UInt32</name> *) <name>ncp</name> = (<name>Py_UInt32</name>) <name>value</name> | ((<name>Py_UInt32</name>) <name>value</name> &lt;&lt; 8 ) | ((<name>Py_UInt32</name>) <name>value</name> &lt;&lt; 16)</expr>;</expr_stmt>
<expr_stmt><expr><name>ncp</name> += 4</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>ncp</name>++ = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ncp</name>++ = <name>value</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>imageop_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"crop"</expr>, <expr><name>imageop_crop</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"scale"</expr>, <expr><name>imageop_scale</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"grey2mono"</expr>, <expr><name>imageop_grey2mono</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"grey2grey2"</expr>, <expr><name>imageop_grey2grey2</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"grey2grey4"</expr>, <expr><name>imageop_grey2grey4</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"dither2mono"</expr>, <expr><name>imageop_dither2mono</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"dither2grey2"</expr>, <expr><name>imageop_dither2grey2</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"mono2grey"</expr>, <expr><name>imageop_mono2grey</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"grey22grey"</expr>, <expr><name>imageop_grey22grey</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"grey42grey"</expr>, <expr><name>imageop_grey42grey</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"tovideo"</expr>, <expr><name>imageop_tovideo</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"rgb2rgb8"</expr>, <expr><name>imageop_rgb2rgb8</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"rgb82rgb"</expr>, <expr><name>imageop_rgb82rgb</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"rgb2grey"</expr>, <expr><name>imageop_rgb2grey</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"grey2rgb"</expr>, <expr><name>imageop_grey2rgb</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initimageop</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the imageop module has been removed in "
"Python 3.0"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"imageop"</expr></argument>, <argument><expr><name>imageop_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>ImageopDict</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ImageopError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"imageop.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ImageopError</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>ImageopDict</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>ImageopError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
