<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/yuvconvert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv.h"</cpp:file></cpp:include>
<function><type><name>void</name></type>
<name>yuv_sv411_to_cl422dc</name><parameter_list>(<param><decl><type><name>int</name></type> <name>invert</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>void</name> *</type><name>yuv</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>yuv411</name> *</type><name>in</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv422</name> *</type><name>out_even</name> <init>= <expr><name>yuv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv422</name> *</type><name>out_odd</name> <init>= <expr><name>out_even</name> + <name>width</name> / 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name>height</name> / 2</expr>;</init> <condition><expr><name>i</name>--</expr>;</condition> <incr/>) <block>{
<for>for (<init><expr><name>j</name> = <name>width</name> / 4</expr>;</init> <condition><expr><name>j</name>--</expr>;</condition> <incr/>) <block>{
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y00</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_U00</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_V00</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y01</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_even</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y02</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_U02</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_V02</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y03</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_even</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y10</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_U10</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_V10</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y11</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y12</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_U12</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_V12</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y13</name><argument_list>(<argument><expr>*<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>in</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>out_even</name> += <name>width</name> / 2</expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name> += <name>width</name> / 2</expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>void</name></type>
<name>yuv_sv411_to_cl422dc_quartersize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>invert</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>void</name> *</type><name>yuv</name></decl></param>,
<param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>w4</name> <init>= <expr><name>width</name> / 4</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv411</name> *</type><name>in_even</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv411</name> *</type><name>in_odd</name> <init>= <expr><name>in_even</name> + <name>w4</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv422</name> *</type><name>out_even</name> <init>= <expr><name>yuv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv422</name> *</type><name>out_odd</name> <init>= <expr><name>out_even</name> + <name>w4</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name>height</name> / 4</expr>;</init> <condition><expr><name>i</name>--</expr>;</condition> <incr/>) <block>{
<for>for (<init><expr><name>j</name> = <name>w4</name></expr>;</init> <condition><expr><name>j</name>--</expr>;</condition> <incr/>) <block>{
<expr_stmt><expr><name>u</name> = <call><name>YUV411_U00</name><argument_list>(<argument><expr>*<name>in_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>YUV411_V00</name><argument_list>(<argument><expr>*<name>in_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y00</name><argument_list>(<argument><expr>*<name>in_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y02</name><argument_list>(<argument><expr>*<name>in_even</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y10</name><argument_list>(<argument><expr>*<name>in_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y12</name><argument_list>(<argument><expr>*<name>in_odd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_even</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>in_odd</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>out_even</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>in_even</name> += <name>w4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_odd</name> += <name>w4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_even</name> += <name>w4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name> += <name>w4</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>void</name></type>
<name>yuv_sv411_to_cl422dc_sixteenthsize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>invert</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>void</name> *</type><name>yuv</name></decl></param>,
<param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>w4_3</name> <init>= <expr>3 * <name>width</name> / 4</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w8</name> <init>= <expr><name>width</name> / 8</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv411</name> *</type><name>in_even</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv411</name> *</type><name>in_odd</name> <init>= <expr><name>in_even</name> + <name>width</name> / 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv422</name> *</type><name>out_even</name> <init>= <expr><name>yuv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>yuv422</name> *</type><name>out_odd</name> <init>= <expr><name>out_even</name> + <name>w8</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name>height</name> / 8</expr>;</init> <condition><expr><name>i</name>--</expr>;</condition> <incr/>) <block>{
<for>for (<init><expr><name>j</name> = <name>w8</name></expr>;</init> <condition><expr><name>j</name>--</expr>;</condition> <incr/>) <block>{
<expr_stmt><expr><name>u</name> = <call><name>YUV411_U00</name><argument_list>(<argument><expr><name><name>in_even</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>YUV411_V00</name><argument_list>(<argument><expr><name><name>in_even</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y00</name><argument_list>(<argument><expr><name><name>in_even</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_even</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y00</name><argument_list>(<argument><expr><name><name>in_even</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y00</name><argument_list>(<argument><expr><name><name>in_odd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_U0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_V0</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV422_Y1</name><argument_list>(<argument><expr>*<name>out_odd</name></expr></argument>)</argument_list></call> = <call><name>YUV411_Y00</name><argument_list>(<argument><expr><name><name>in_even</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_even</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>in_odd</name> += 2</expr>;</expr_stmt>
<expr_stmt><expr><name>out_even</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>in_even</name> += <name>w4_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_odd</name> += <name>w4_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_even</name> += <name>w8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_odd</name> += <name>w8</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
</unit>
