<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/grpmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Field</name></type> <name><name>struct_group_type_fields</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"gr_name"</expr>, <expr>"group name"</expr>}</block></expr>,
<expr><block>{<expr>"gr_passwd"</expr>, <expr>"password"</expr>}</block></expr>,
<expr><block>{<expr>"gr_gid"</expr>, <expr>"group id"</expr>}</block></expr>,
<expr><block>{<expr>"gr_mem"</expr>, <expr>"group memebers"</expr>}</block></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>struct_group__doc__</name></expr></argument>,
<argument><expr>"grp.struct_group: Results from getgr*() routines.\n\n\
This object may be accessed either as a tuple of\n\
(gr_name,gr_passwd,gr_gid,gr_mem)\n\
or via the object attributes as named in the above tuple.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyStructSequence_Desc</name></type> <name>struct_group_type_desc</name> <init>= <expr><block>{
<expr>"grp.struct_group"</expr>,
<expr><name>struct_group__doc__</name></expr>,
<expr><name>struct_group_type_fields</name></expr>,
<expr>4</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>StructGrpType</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mkgrent</name><parameter_list>(<param><decl><type>struct <name>group</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>setIndex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyStructSequence_New</name><argument_list>(<argument><expr>&amp;<name>StructGrpType</name></expr></argument>)</argument_list></call></expr></init>, *<name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>member</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>w</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>member</name> = <name><name>p</name>-&gt;<name>gr_mem</name></name></expr>;</init> <condition><expr>*<name>member</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>member</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>*<name>member</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyList_Append</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<param><type><name>i</name></type></param>,<param><type><name>val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyStructSequence_SET_ITEM(v, i, val)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>gr_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>gr_passwd</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>gr_passwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name><name>p</name>-&gt;<name>gr_gid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>setIndex</name>++</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>grp_getgrgid</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>pyo_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_int_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>group</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>py_int_id</name> = <call><name>PyNumber_Int</name><argument_list>(<argument><expr><name>pyo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>py_int_id</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>gid</name> = <call><name>PyInt_AS_LONG</name><argument_list>(<argument><expr><name>py_int_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_int_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>p</name> = <call><name>getgrgid</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr>"getgrgid(): gid not found: %d"</expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>mkgrent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>grp_getgrnam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>pyo_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>py_str_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>group</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>py_str_name</name> = <call><name>PyObject_Str</name><argument_list>(<argument><expr><name>pyo_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>py_str_name</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>name</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>py_str_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>p</name> = <call><name>getgrnam</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>, <argument><expr>"getgrnam(): name not found: %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_str_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_str_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mkgrent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>grp_getgrall</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>ignore</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>group</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>d</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setgrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>p</name> = <call><name>getgrent</name><argument_list>()</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>mkgrent</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name> || <call><name>PyList_Append</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>endgrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>grp_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"getgrgid"</expr>, <expr><name>grp_getgrgid</name></expr>, <expr><name>METH_O</name></expr>,
<expr>"getgrgid(id) -&gt; tuple\n\
Return the group database entry for the given numeric group ID. If\n\
id is not valid, raise KeyError."</expr>
}</block></expr>,
<expr><block>{
<expr>"getgrnam"</expr>, <expr><name>grp_getgrnam</name></expr>, <expr><name>METH_O</name></expr>,
<expr>"getgrnam(name) -&gt; tuple\n\
Return the group database entry for the given group name. If\n\
name is not valid, raise KeyError."</expr>
}</block></expr>,
<expr><block>{
<expr>"getgrall"</expr>, <expr><name>grp_getgrall</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr>"getgrall() -&gt; list of tuples\n\
Return a list of all available group entries, in arbitrary order."</expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>grp__doc__</name></expr></argument>,
<argument><expr>"Access to the Unix group database.\n\
\n\
Group entries are reported as 4-tuples containing the following fields\n\
from the group database, in order:\n\
\n\
name - name of the group\n\
passwd - group password (encrypted); often empty\n\
gid - numeric ID of the group\n\
mem - list of members\n\
\n\
The gid is an integer, name and password are strings. (Note that most\n\
users are not explicitly listed as members of the groups they are in\n\
according to the password database. Check both databases to get\n\
complete membership information.)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initgrp</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"grp"</expr></argument>, <argument><expr><name>grp_methods</name></expr></argument>, <argument><expr><name>grp__doc__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyStructSequence_InitType</name><argument_list>(<argument><expr>&amp;<name>StructGrpType</name></expr></argument>, <argument><expr>&amp;<name>struct_group_type_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"struct_group"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>StructGrpType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> = 1</expr>;</expr_stmt>
}</block></function>
</unit>
