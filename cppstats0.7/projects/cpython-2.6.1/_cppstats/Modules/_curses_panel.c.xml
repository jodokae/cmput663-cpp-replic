<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_curses_panel.c"><decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>PyCursesVersion</name> <init>= <expr>"2.1"</expr></init></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"py_curses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;panel.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyCursesError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesCheckERR</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>char</name> *</type><name>fname</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>code</name> != <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>fname</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"%s() returned ERR"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>PANEL</name> *</type><name>pan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesWindowObject</name> *</type><name>wo</name></decl>;</decl_stmt>
}</block></struct></type> <name>PyCursesPanelObject</name>;</typedef>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCursesPanel_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesPanel_Check</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(v) == &amp;PyCursesPanel_Type)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_list_of_panels</name> <block>{
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_list_of_panels</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>list_of_panels</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>list_of_panels</name> *</type><name>lop</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>insert_lop</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>list_of_panels</name> *</type><name>new</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>new</name> = (<name>list_of_panels</name> *)<call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>list_of_panels</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>po</name></name> = <name>po</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>lop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lop</name> = <name>new</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_lop</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>list_of_panels</name> *</type><name>temp</name></decl>, *<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>temp</name> = <name>lop</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>temp</name>-&gt;<name>po</name></name> == <name>po</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lop</name> = <name><name>temp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<while>while <condition>(<expr><name><name>temp</name>-&gt;<name>next</name></name> == <name>NULL</name> || <name><name>temp</name>-&gt;<name>next</name>-&gt;<name>po</name></name> != <name>po</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>temp</name>-&gt;<name>next</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"remove_lop: can't find Panel Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>temp</name> = <name><name>temp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>n</name> = <name><name>temp</name>-&gt;<name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>temp</name>-&gt;<name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>next</name></name> = <name>n</name></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyCursesPanelObject</name> *</type>
<name>find_po</name><parameter_list>(<param><decl><type><name>PANEL</name> *</type><name>pan</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>list_of_panels</name> *</type><name>temp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>temp</name> = <name>lop</name></expr>;</init> <condition><expr><name><name>temp</name>-&gt;<name>po</name>-&gt;<name>pan</name></name> != <name>pan</name></expr>;</condition> <incr><expr><name>temp</name> = <name><name>temp</name>-&gt;<name>next</name></name></expr></incr>)
<if>if <condition>(<expr><name><name>temp</name>-&gt;<name>next</name></name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if></for>
<return>return <expr><name><name>temp</name>-&gt;<name>po</name></name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Panel_NoArgNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject *PyCursesPanel_##X(PyCursesPanelObject *self) { return PyCursesCheckERR(X(self-&gt;pan), #X); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Panel_NoArgTrueFalseFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject *PyCursesPanel_##X(PyCursesPanelObject *self) { if (X (self-&gt;pan) == FALSE) { Py_INCREF(Py_False); return Py_False; } else { Py_INCREF(Py_True); return Py_True; } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Panel_TwoArgNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>, <param><type><name>TYPE</name></type></param>, <param><type><name>PARSESTR</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject *PyCursesPanel_##X(PyCursesPanelObject *self, PyObject *args) { TYPE arg1, arg2; if (!PyArg_ParseTuple(args, PARSESTR, &amp;arg1, &amp;arg2)) return NULL; return PyCursesCheckERR(X(self-&gt;pan, arg1, arg2), #X); }</cpp:value></cpp:define>
<macro><name>Panel_NoArgNoReturnFunction</name><argument_list>(<argument>bottom_panel</argument>)</argument_list></macro>
<macro><name>Panel_NoArgNoReturnFunction</name><argument_list>(<argument>hide_panel</argument>)</argument_list></macro>
<macro><name>Panel_NoArgNoReturnFunction</name><argument_list>(<argument>show_panel</argument>)</argument_list></macro>
<macro><name>Panel_NoArgNoReturnFunction</name><argument_list>(<argument>top_panel</argument>)</argument_list></macro>
<macro><name>Panel_NoArgTrueFalseFunction</name><argument_list>(<argument>panel_hidden</argument>)</argument_list></macro>
<macro><name>Panel_TwoArgNoReturnFunction</name><argument_list>(<argument>move_panel</argument>, <argument>int</argument>, <argument>"ii;y,x"</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_New</name><parameter_list>(<param><decl><type><name>PANEL</name> *</type><name>pan</name></decl></param>, <param><decl><type><name>PyCursesWindowObject</name> *</type><name>wo</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<expr_stmt><expr><name>po</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyCursesPanelObject</name></expr></argument>, <argument><expr>&amp;<name>PyCursesPanel_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>po</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>po</name>-&gt;<name>pan</name></name> = <name>pan</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>wo</name></name> = <name>wo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>wo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>insert_lop</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>po</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyCursesPanel_Dealloc</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>del_panel</name><argument_list>(<argument><expr><name><name>po</name>-&gt;<name>pan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>po</name>-&gt;<name>wo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remove_lop</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_above</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PANEL</name> *</type><name>pan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pan</name> = <call><name>panel_above</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pan</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>po</name> = <call><name>find_po</name><argument_list>(<argument><expr><name>pan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>po</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"panel_above: can't find Panel Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>po</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_below</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PANEL</name> *</type><name>pan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pan</name> = <call><name>panel_below</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pan</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>po</name> = <call><name>find_po</name><argument_list>(<argument><expr><name>pan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>po</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"panel_below: can't find Panel Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>po</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_window</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>wo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name><name>self</name>-&gt;<name>wo</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_replace_panel</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesWindowObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"replace requires one argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!;window object"</expr></argument>,
<argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>po</name> = <call><name>find_po</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>po</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"replace_panel: can't find Panel Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rtn</name> = <call><name>replace_panel</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pan</name></name></expr></argument>, <argument><expr><name><name>temp</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rtn</name> == <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"replace_panel() returned ERR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>po</name>-&gt;<name>wo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>wo</name></name> = <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>po</name>-&gt;<name>wo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_set_panel_userptr</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>set_panel_userptr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pan</name></name></expr></argument>, <argument><expr>(<name>void</name>*)<name>obj</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"set_panel_userptr"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_userptr</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> = (<name>PyObject</name> *) <call><name>panel_userptr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"no userptr set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PyCursesPanel_Methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"above"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_above</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"below"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_below</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bottom"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_bottom_panel</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"hidden"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_panel_hidden</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"hide"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_hide_panel</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"move"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_move_panel</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"replace"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_replace_panel</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"set_userptr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_set_panel_userptr</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{<expr>"show"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_show_panel</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"top"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_top_panel</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"userptr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_userptr</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"window"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesPanel_window</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesPanel_GetAttr</name><parameter_list>(<param><decl><type><name>PyCursesPanelObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>PyCursesPanel_Methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCursesPanel_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"_curses_panel.curses panel"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyCursesPanelObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>PyCursesPanel_Dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>PyCursesPanel_GetAttr</name></expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_bottom_panel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PANEL</name> *</type><name>pan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pan</name> = <call><name>panel_above</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pan</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>po</name> = <call><name>find_po</name><argument_list>(<argument><expr><name>pan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>po</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"panel_above: can't find Panel Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>po</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_new_panel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCursesWindowObject</name> *</type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PANEL</name> *</type><name>pan</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!"</expr></argument>, <argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>, <argument><expr>&amp;<name>win</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pan</name> = <call><name>new_panel</name><argument_list>(<argument><expr><name><name>win</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pan</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesPanel_New</name><argument_list>(<argument><expr><name>pan</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_top_panel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PANEL</name> *</type><name>pan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesPanelObject</name> *</type><name>po</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pan</name> = <call><name>panel_below</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pan</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>po</name> = <call><name>find_po</name><argument_list>(<argument><expr><name>pan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>po</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"panel_below: can't find Panel Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>po</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyCurses_update_panels</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>PyCursesInitialised</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_panels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PyCurses_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"bottom_panel"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_bottom_panel</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"new_panel"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_new_panel</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"top_panel"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_top_panel</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"update_panels"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_update_panels</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_curses_panel</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>PyCursesPanel_Type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>import_curses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_curses_panel"</expr></argument>, <argument><expr><name>PyCurses_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PyCursesError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"_curses_panel.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>PyCursesError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>PyCursesVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"version"</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"__version__"</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
