<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/arraymodule.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_SSIZE_T_CLEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC_HEADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct_decl>struct <name>arrayobject</name>;</struct_decl>
<struct>struct <name>arraydescr</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>typecode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itemsize</name></decl>;</decl_stmt>
<function_decl><type><name>PyObject</name> *</type> (*<name>getitem</name>)<parameter_list>(<param><decl><type>struct</type> <name>arrayobject</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>setitem</name>)<parameter_list>(<param><decl><type>struct</type> <name>arrayobject</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>, <param><decl><type><name>PyObject</name> *</type></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>
<typedef>typedef <type><struct>struct <name>arrayobject</name> <block>{
<decl_stmt><decl><type><name>PyObject_VAR_HEAD</name>
<name>char</name> *</type><name>ob_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>arraydescr</name> *</type><name>ob_descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>weakreflist</name></decl>;</decl_stmt>
}</block></struct></type> <name>arrayobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Arraytype</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;Arraytype)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>array_CheckExact</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(op) == &amp;Arraytype)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_resize</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>newsize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_new_size</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>allocated</name></name> &gt;= <name>newsize</name> &amp;&amp;
<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; <name>newsize</name> + 16 &amp;&amp;
<name><name>self</name>-&gt;<name>ob_item</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> = <name>newsize</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>_new_size</name> = (<name>newsize</name> &gt;&gt; 4) + (<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 8 ? 3 : 7) + <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>items</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_new_size</name> &lt;= ((~(<name>size_t</name>)0) / <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr>(<name>_new_size</name> * <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>items</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>items</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>items</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> = <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <name>_new_size</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>c_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>&amp;((<name>char</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"c;array item must be char"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>char</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>b_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name> <init>= <expr>((<name>char</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>x</name> &gt;= 128</expr>)</condition><then>
<expr_stmt><expr><name>x</name> -= 256</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>b_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"h;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else <if>if <condition>(<expr><name>x</name> &lt; -128</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"signed char is less than minimum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>x</name> &gt; 127</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"signed char is greater than maximum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>char</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = (<name>char</name>)<name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>BB_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name> <init>= <expr>((<name>unsigned</name> <name>char</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BB_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"b;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>char</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>u_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr>&amp;((<name>Py_UNICODE</name> *) <name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>u_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"u#;array item must be unicode character"</expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"array item must be unicode character"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>Py_UNICODE</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name><name>p</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>h_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr>(<name>short</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>h_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"h;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>short</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>HH_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr>(<name>unsigned</name> <name>short</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>HH_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"i;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else <if>if <condition>(<expr><name>x</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"unsigned short is less than minimum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>x</name> &gt; <name>USHRT_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"unsigned short is greater than maximum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>short</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = (<name>short</name>)<name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>i_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr>(<name>int</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>i_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"i;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>int</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>II_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(
<argument><expr><call>(<name>unsigned</name> <name>long</name>) <argument_list>(<argument><expr>(<name>unsigned</name> <name>int</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>II_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = <call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == (<name>unsigned</name> <name>long</name>) -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>long</name></type> <name>y</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>y</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"unsigned int is less than minimum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>x</name> = (<name>unsigned</name> <name>long</name>)<name>y</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>x</name> &gt; <name>UINT_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"unsigned int is greater than maximum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>unsigned</name> <name>int</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = (<name>unsigned</name> <name>int</name>)<name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>l_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>((<name>long</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>l_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>long</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>LL_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr>((<name>unsigned</name> <name>long</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>LL_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name> = <call><name>PyLong_AsUnsignedLong</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == (<name>unsigned</name> <name>long</name>) -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>long</name></type> <name>y</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"l;array item must be integer"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>y</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"unsigned long is less than minimum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>x</name> = (<name>unsigned</name> <name>long</name>)<name>y</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>x</name> &gt; <name>ULONG_MAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"unsigned long is greater than maximum"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>unsigned</name> <name>long</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>f_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call>(<name>double</name>) <argument_list>(<argument><expr>(<name>float</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>f_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"f;array item must be float"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>float</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>d_getitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr>((<name>double</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>d_setitem</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ap</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"d;array item must be float"</expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr>((<name>double</name> *)<name><name>ap</name>-&gt;<name>ob_item</name></name>)<index>[<expr><name>i</name></expr>]</index> = <name>x</name></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>arraydescr</name></type> <name><name>descriptors</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>'c'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>c_getitem</name></expr>, <expr><name>c_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'b'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>b_getitem</name></expr>, <expr><name>b_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'B'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>BB_getitem</name></expr>, <expr><name>BB_setitem</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>'u'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>u_getitem</name></expr>, <expr><name>u_setitem</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>'h'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>h_getitem</name></expr>, <expr><name>h_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'H'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>HH_getitem</name></expr>, <expr><name>HH_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'i'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>i_getitem</name></expr>, <expr><name>i_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'I'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>II_getitem</name></expr>, <expr><name>II_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'l'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>l_getitem</name></expr>, <expr><name>l_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'L'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>LL_getitem</name></expr>, <expr><name>LL_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'f'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>f_getitem</name></expr>, <expr><name>f_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'d'</expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>d_getitem</name></expr>, <expr><name>d_setitem</name></expr>}</block></expr>,
<expr><block>{<expr>'\0'</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newarrayobject</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>, <param><decl><type>struct <name>arraydescr</name> *</type><name>descr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>size</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>nbytes</name> = <name>size</name> * <name><name>descr</name>-&gt;<name>itemsize</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbytes</name> / <name><name>descr</name>-&gt;<name>itemsize</name></name> != (<name>size_t</name>)<name>size</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>op</name> = (<name>arrayobject</name> *) <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>op</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>op</name>-&gt;<name>ob_descr</name></name> = <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>allocated</name></name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>weakreflist</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> = <name>size</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>op</name>-&gt;<name>ob_item</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>op</name>-&gt;<name>ob_item</name></name> = <call><name>PyMem_NEW</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>op</name>-&gt;<name>ob_item</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr>(<name>PyObject</name> *) <name>op</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>getarrayitem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>arrayobject</name> *</type><name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>array_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> = (<name>arrayobject</name> *)<name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name>&gt;=0 &amp;&amp; <name>i</name>&lt;<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call>(*<name><name>ap</name>-&gt;<name>ob_descr</name>-&gt;<name>getitem</name></name>)<argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ins1</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>where</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name> <init>= <expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call>(*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>setitem</name></name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>array_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>items</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>where</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>where</name> += <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>where</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>where</name> = 0</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>where</name> &gt; <name>n</name></expr>)</condition><then>
<expr_stmt><expr><name>where</name> = <name>n</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>where</name> != <name>n</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>items</name> + (<name>where</name>+1)*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name>items</name> + <name>where</name>*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr>(<name>n</name>-<name>where</name>)*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call>(*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>setitem</name></name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>array_dealloc</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>op</name>-&gt;<name>weakreflist</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyObject_ClearWeakRefs</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>op</name>-&gt;<name>ob_item</name></name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_DEL</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_richcompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>va</name></decl>, *<decl><type ref="prev"/><name>wa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>vi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>wi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>array_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || !<call><name>array_Check</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>va</name> = (<name>arrayobject</name> *)<name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wa</name> = (<name>arrayobject</name> *)<name>w</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call> != <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>wa</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>op</name> == <name>Py_EQ</name> || <name>op</name> == <name>Py_NE</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = <name>Py_False</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>res</name> = <name>Py_True</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>k</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call> &amp;&amp; <name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>wa</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>vi</name> = <call><name>getarrayitem</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wi</name> = <call><name>getarrayitem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>vi</name> == <name>NULL</name> || <name>wi</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>k</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name>wi</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>k</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>k</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></for>
<if>if <condition>(<expr><name>k</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>vs</name> <init>= <expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>ws</name> <init>= <expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>wa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>Py_LT</name></expr>:
<expr_stmt><expr><name>cmp</name> = <name>vs</name> &lt; <name>ws</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_LE</name></expr>:
<expr_stmt><expr><name>cmp</name> = <name>vs</name> &lt;= <name>ws</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_EQ</name></expr>:
<expr_stmt><expr><name>cmp</name> = <name>vs</name> == <name>ws</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_NE</name></expr>:
<expr_stmt><expr><name>cmp</name> = <name>vs</name> != <name>ws</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_GT</name></expr>:
<expr_stmt><expr><name>cmp</name> = <name>vs</name> &gt; <name>ws</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_GE</name></expr>:
<expr_stmt><expr><name>cmp</name> = <name>vs</name> &gt;= <name>ws</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then>
<expr_stmt><expr><name>res</name> = <name>Py_True</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>res</name> = <name>Py_False</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <name>Py_False</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>op</name> == <name>Py_NE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <name>Py_True</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>res</name> = <call><name>PyObject_RichCompare</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name>wi</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>array_length</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_item</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"array index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_slice</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>ilow</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>ihigh</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>np</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ilow</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>ilow</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>ilow</name> &gt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ilow</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>ihigh</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>ihigh</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ihigh</name> &lt; <name>ilow</name></expr>)</condition><then>
<expr_stmt><expr><name>ihigh</name> = <name>ilow</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>ihigh</name> &gt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ihigh</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>np</name> = (<name>arrayobject</name> *) <call><name>newarrayobject</name><argument_list>(<argument><expr>&amp;<name>Arraytype</name></expr></argument>, <argument><expr><name>ihigh</name> - <name>ilow</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>ob_descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>np</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>np</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>ob_item</name></name> + <name>ilow</name> * <name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr>(<name>ihigh</name>-<name>ilow</name>) * <name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>np</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_copy</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>array_slice</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>copy_doc</name></expr></argument>,
<argument><expr>"copy(array)\n\
\n\
Return a copy of the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_concat</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>np</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>array_Check</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can only append array (not \"%.200s\") to array"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name></cpp:macro> <cpp:value>((arrayobject *)bb)</cpp:value></cpp:define>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>ob_descr</name></name> != <name><name>b</name>-&gt;<name>ob_descr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> &gt; <name>PY_SSIZE_T_MAX</name> - <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>size</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> + <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> = (<name>arrayobject</name> *) <call><name>newarrayobject</name><argument_list>(<argument><expr>&amp;<name>Arraytype</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>ob_descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>np</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>np</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>np</name>-&gt;<name>ob_item</name></name> + <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>*<name><name>b</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>np</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>b</name></cpp:undef>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_repeat</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>np</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> != 0) &amp;&amp; (<name>n</name> &gt; <name>PY_SSIZE_T_MAX</name> / <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>size</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>np</name> = (<name>arrayobject</name> *) <call><name>newarrayobject</name><argument_list>(<argument><expr>&amp;<name>Arraytype</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>ob_descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>np</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>p</name> = <name><name>np</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += <name>nbytes</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr>(<name>PyObject</name> *) <name>np</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_ass_slice</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>ilow</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>ihigh</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name></cpp:macro> <cpp:value>((arrayobject *)v)</cpp:value></cpp:define>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>array_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>a</name> == <name>b</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> = <call><name>array_slice</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>v</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>array_ass_slice</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ilow</name></expr></argument>, <argument><expr><name>ihigh</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>ob_descr</name></name> != <name><name>a</name>-&gt;<name>ob_descr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can only assign array (not \"%.200s\") to array slice"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>ilow</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>ilow</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>ilow</name> &gt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ilow</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>ihigh</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>ihigh</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ihigh</name> &lt; <name>ilow</name></expr>)</condition><then>
<expr_stmt><expr><name>ihigh</name> = <name>ilow</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>ihigh</name> &gt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ihigh</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>item</name> = <name><name>a</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name>n</name> - (<name>ihigh</name>-<name>ilow</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>d</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>item</name> + (<name>ihigh</name>+<name>d</name>)*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name>item</name> + <name>ihigh</name>*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>-<name>ihigh</name>)*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> += <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>d</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>,
<argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> + <name>d</name>)*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>item</name> + (<name>ihigh</name>+<name>d</name>)*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name>item</name> + <name>ihigh</name>*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>-<name>ihigh</name>)*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> += <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>item</name> + <name>ilow</name>*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>ob_item</name></name></expr></argument>,
<argument><expr><name>n</name>*<name><name>b</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>b</name></cpp:undef>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_ass_item</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"array assignment index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>array_ass_slice</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call>(*<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>setitem</name></name>)<argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>setarrayitem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>array_Check</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>array_ass_item</name><argument_list>(<argument><expr>(<name>arrayobject</name> *)<name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_iter_extend</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>it</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<while>while <condition>(<expr>(<name>v</name> = <call><name>PyIter_Next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>ins1</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_do_extend</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_item</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>array_Check</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>array_iter_extend</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name></cpp:macro> <cpp:value>((arrayobject *)bb)</cpp:value></cpp:define>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_descr</name></name> != <name><name>b</name>-&gt;<name>ob_descr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can only extend with array of same kind"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt; <name>PY_SSIZE_T_MAX</name> - <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>) ||
((<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>) &gt; <name>PY_SSIZE_T_MAX</name> / <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>size</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_item</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name>*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_item</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>old_item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>*<name><name>b</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <name>size</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>b</name></cpp:undef>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_inplace_concat</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>array_Check</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can only extend array with array (not \"%.200s\")"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>array_do_extend</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_inplace_repeat</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>items</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>items</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name> != 0) &amp;&amp;
(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt; <name>PY_SSIZE_T_MAX</name> / <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>size</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> * <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyMem_FREE</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>size</name> &gt; <name>PY_SSIZE_T_MAX</name> / <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><name>n</name> * <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>items</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>p</name> = <name>items</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>p</name> += <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>items</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> *= <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>ins</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>where</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ins1</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_count</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>selfi</name> <init>= <expr><call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
}</block></for>
<return>return <expr><call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>count_doc</name></expr></argument>,
<argument><expr>"count(x)\n\
\n\
Return number of occurences of x in the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_index</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>selfi</name> <init>= <expr><call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"array.index(x): x not in list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>index_doc</name></expr></argument>,
<argument><expr>"index(x)\n\
\n\
Return index of first occurence of x in the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_contains</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>cmp</name> = 0</expr> ;</init> <condition><expr><name>cmp</name> == 0 &amp;&amp; <name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>selfi</name> <init>= <expr><call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cmp</name> = <call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>cmp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_remove</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>selfi</name> <init>= <expr><call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>PyObject_RichCompareBool</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>Py_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>selfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>array_ass_slice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>cmp</name> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"array.remove(x): x not in list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>remove_doc</name></expr></argument>,
<argument><expr>"remove(x)\n\
\n\
Remove the first occurence of x in the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_pop</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"|n:pop"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"pop from empty array"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> += <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>, <argument><expr>"pop index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>v</name> = <call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>array_ass_slice</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name>+1</expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>pop_doc</name></expr></argument>,
<argument><expr>"pop([i])\n\
\n\
Return the i-th element and delete it from the array. i defaults to -1."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_extend</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>array_do_extend</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>extend_doc</name></expr></argument>,
<argument><expr>"extend(array or iterable)\n\
\n\
Append items to the end of the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_insert</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"nO:insert"</expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>ins</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>insert_doc</name></expr></argument>,
<argument><expr>"insert(i,x)\n\
\n\
Insert a new item x into the array before position i."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_buffer_info</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>retval</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>PyLong_FromVoidPtr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>)<argument_list>(<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>buffer_info_doc</name></expr></argument>,
<argument><expr>"buffer_info() -&gt; (address, length)\n\
\n\
Return a tuple (address, length) giving the current memory address and\n\
the length in items of the buffer used to hold array's contents\n\
The length should be multiplied by the itemsize attribute to calculate\n\
the buffer length in bytes."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_append</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ins</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>append_doc</name></expr></argument>,
<argument><expr>"append(x)\n\
\n\
Append new value x to the end of the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_byteswap</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<break>break;</break>
</case><case>case <expr>2</expr>:
<for>for (<init><expr><name>p</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>, <expr><name>i</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>p</name> += 2</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = <name><name>p</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>1</expr>]</index></name> = <name>p0</name></expr>;</expr_stmt>
}</block></for>
<break>break;</break>
</case><case>case <expr>4</expr>:
<for>for (<init><expr><name>p</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>, <expr><name>i</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>p</name> += 4</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = <name><name>p</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>1</expr>]</index></name> = <name><name>p</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>2</expr>]</index></name> = <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>3</expr>]</index></name> = <name>p0</name></expr>;</expr_stmt>
}</block></for>
<break>break;</break>
</case><case>case <expr>8</expr>:
<for>for (<init><expr><name>p</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>, <expr><name>i</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>--<name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>p</name> += 8</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name>p0</name> <init>= <expr><name><name>p</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p1</name> <init>= <expr><name><name>p</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p2</name> <init>= <expr><name><name>p</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>p3</name> <init>= <expr><name><name>p</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = <name><name>p</name><index>[<expr>7</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>1</expr>]</index></name> = <name><name>p</name><index>[<expr>6</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>2</expr>]</index></name> = <name><name>p</name><index>[<expr>5</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>3</expr>]</index></name> = <name><name>p</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>4</expr>]</index></name> = <name>p3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>5</expr>]</index></name> = <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>6</expr>]</index></name> = <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr>7</expr>]</index></name> = <name>p0</name></expr>;</expr_stmt>
}</block></for>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"don't know how to byteswap this array type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>byteswap_doc</name></expr></argument>,
<argument><expr>"byteswap()\n\
\n\
Byteswap all items of the array. If the items in the array are not 1, 2,\n\
4, or 8 bytes in size, RuntimeError is raised."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_reduce</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>array</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dict</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>array</name></expr></argument>, <argument><expr>"__dict__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dict</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>array</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name>
&gt; <name>PY_SSIZE_T_MAX</name> / <name><name>array</name>-&gt;<name>ob_size</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O(cs#)O"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>array</name>-&gt;<name>ob_descr</name>-&gt;<name>typecode</name></name></expr></argument>,
<argument><expr><name><name>array</name>-&gt;<name>ob_item</name></name></expr></argument>,
<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call> * <name><name>array</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O(c)O"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>array</name>-&gt;<name>ob_descr</name>-&gt;<name>typecode</name></name></expr></argument>,
<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>array_doc</name></expr></argument>, <argument><expr>"Return state information for pickling."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_reverse</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>Py_ssize_t</name></type> <name>itemsize</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>(<name>size_t</name>)<name>itemsize</name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
<for>for (<init><expr><name>p</name> = <name><name>self</name>-&gt;<name>ob_item</name></name></expr>,
<expr><name>q</name> = <name><name>self</name>-&gt;<name>ob_item</name></name> + (<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - 1)*<name>itemsize</name></expr>;</init>
<condition><expr><name>p</name> &lt; <name>q</name></expr>;</condition>
<incr><expr><name>p</name> += <name>itemsize</name></expr>, <expr><name>q</name> -= <name>itemsize</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>reverse_doc</name></expr></argument>,
<argument><expr>"reverse()\n\
\n\
Reverse the order of the items in the array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_fromfile</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"On:fromfile"</expr></argument>, <argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>fp</name> = <call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg1 must be open file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>itemsize</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>newlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newbytes</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>newlength</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <name>n</name>) &lt;= 0 ||
(<name>newbytes</name> = <name>newlength</name> * <name>itemsize</name>) / <name>itemsize</name> !=
(<name>size_t</name>)<name>newlength</name></expr>)</condition><then>
<goto>goto <name>nomem</name>;</goto></then></if>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><name>newbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<label><name>nomem</name>:</label>
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> += <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name> = <call><name>fread</name><argument_list>(<argument><expr><name>item</name> + (<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>n</name>) * <name>itemsize</name></expr></argument>,
<argument><expr><name>itemsize</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nread</name> &lt; (<name>size_t</name>)<name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> -= (<name>n</name> - <name>nread</name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>*<name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_EOFError</name></expr></argument>,
<argument><expr>"not enough items in file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>fromfile_doc</name></expr></argument>,
<argument><expr>"fromfile(f, n)\n\
\n\
Read n objects from the file object f and append them to the end of the\n\
array. Also called as read."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_fromfile_as_read</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"array.read() not supported in 3.x; "
"use array.fromfile()"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>array_fromfile</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_tofile</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fp</name> = <call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg must be open file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_size</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_size</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> != (<name>size_t</name>)<name><name>self</name>-&gt;<name>ob_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>tofile_doc</name></expr></argument>,
<argument><expr>"tofile(f)\n\
\n\
Write all items (as machine values) to the file object f. Also called as\n\
write."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_tofile_as_write</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"array.write() not supported in 3.x; "
"use array.tofile()"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>array_tofile</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_fromlist</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>list</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>itemsize</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyList_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg must be list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <name>n</name>) * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> += <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call>(*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>setitem</name></name>)<argument_list>(<argument><expr><name>self</name></expr></argument>,
<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>n</name> + <name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> -= <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>itemsize</name> &amp;&amp; (<name><name>self</name>-&gt;<name>ob_size</name></name> &gt; <name>PY_SSIZE_T_MAX</name> / <name>itemsize</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>,
<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>fromlist_doc</name></expr></argument>,
<argument><expr>"fromlist(list)\n\
\n\
Append items to array from list."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_tolist</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>= <expr><call><name>getarrayitem</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>list</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>tolist_doc</name></expr></argument>,
<argument><expr>"tolist() -&gt; list\n\
\n\
Convert array to an ordinary list with the same items."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_fromstring</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itemsize</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:fromstring"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>n</name> % <name>itemsize</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"string length not a multiple of item size"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <name>n</name> / <name>itemsize</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>n</name> &gt; <name>PY_SSIZE_T_MAX</name> - <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>) ||
((<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <name>n</name>) &gt; <name>PY_SSIZE_T_MAX</name> / <name>itemsize</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <name>n</name>) * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> += <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>item</name> + (<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>n</name>) * <name>itemsize</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><name>itemsize</name>*<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>fromstring_doc</name></expr></argument>,
<argument><expr>"fromstring(string)\n\
\n\
Appends items from the string, interpreting it as an array of machine\n\
values,as if it had been read from a file using the fromfile() method)."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_tostring</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_size</name></name> &lt;= <name>PY_SSIZE_T_MAX</name> / <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></argument>,
<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> * <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>tostring_doc</name></expr></argument>,
<argument><expr>"tostring() -&gt; string\n\
\n\
Convert the array to an array of machine values and return the string\n\
representation."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_fromunicode</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>ustr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"u#:fromunicode"</expr></argument>, <argument><expr>&amp;<name>ustr</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>typecode</name></name> != 'u'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"fromunicode() may only be called on "
"type 'u' arrays"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>item</name> <init>= <expr>(<name>Py_UNICODE</name> *) <name><name>self</name>-&gt;<name>ob_item</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt; <name>PY_SSIZE_T_MAX</name> - <name>n</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyMem_RESIZE</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>Py_UNICODE</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> + <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = (<name>char</name> *) <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> += <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>item</name> + <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>n</name></expr></argument>,
<argument><expr><name>ustr</name></expr></argument>, <argument><expr><name>n</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>fromunicode_doc</name></expr></argument>,
<argument><expr>"fromunicode(ustr)\n\
\n\
Extends this array with data from the unicode string ustr.\n\
The array must be a type 'u' array; otherwise a ValueError\n\
is raised. Use array.fromstring(ustr.decode(...)) to\n\
append Unicode data to an array of some other type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_tounicode</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>typecode</name></name> != 'u'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"tounicode() may only be called on type 'u' arrays"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr>(<name>Py_UNICODE</name> *) <name><name>self</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>tounicode_doc</name></expr></argument>,
<argument><expr>"tounicode() -&gt; unicode\n\
\n\
Convert the array to a unicode string. The array must be\n\
a type 'u' array; otherwise a ValueError is raised. Use\n\
array.tostring().decode() to obtain a unicode string from\n\
an array of some other type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_get_typecode</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>tc</name> <init>= <expr><name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>typecode</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>&amp;<name>tc</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_get_itemsize</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>array_getsets</name> <index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"typecode"</expr>, <expr>(<name>getter</name>) <name>array_get_typecode</name></expr>, <expr><name>NULL</name></expr>,
<expr>"the typecode character used to create the array"</expr>
}</block></expr>,
<expr><block>{
<expr>"itemsize"</expr>, <expr>(<name>getter</name>) <name>array_get_itemsize</name></expr>, <expr><name>NULL</name></expr>,
<expr>"the size, in bytes, of one array item"</expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>array_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"append"</expr>, <expr>(<name>PyCFunction</name>)<name>array_append</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>append_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"buffer_info"</expr>, <expr>(<name>PyCFunction</name>)<name>array_buffer_info</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>buffer_info_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"byteswap"</expr>, <expr>(<name>PyCFunction</name>)<name>array_byteswap</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>byteswap_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"__copy__"</expr>, <expr>(<name>PyCFunction</name>)<name>array_copy</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>copy_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"count"</expr>, <expr>(<name>PyCFunction</name>)<name>array_count</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>count_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"__deepcopy__"</expr>,<expr>(<name>PyCFunction</name>)<name>array_copy</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>copy_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"extend"</expr>, <expr>(<name>PyCFunction</name>)<name>array_extend</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>extend_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"fromfile"</expr>, <expr>(<name>PyCFunction</name>)<name>array_fromfile</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>fromfile_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"fromlist"</expr>, <expr>(<name>PyCFunction</name>)<name>array_fromlist</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>fromlist_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"fromstring"</expr>, <expr>(<name>PyCFunction</name>)<name>array_fromstring</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>fromstring_doc</name></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"fromunicode"</expr>, <expr>(<name>PyCFunction</name>)<name>array_fromunicode</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>fromunicode_doc</name></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr>"index"</expr>, <expr>(<name>PyCFunction</name>)<name>array_index</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>index_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"insert"</expr>, <expr>(<name>PyCFunction</name>)<name>array_insert</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>insert_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"pop"</expr>, <expr>(<name>PyCFunction</name>)<name>array_pop</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>pop_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"read"</expr>, <expr>(<name>PyCFunction</name>)<name>array_fromfile_as_read</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<expr><name>fromfile_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>array_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>array_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"remove"</expr>, <expr>(<name>PyCFunction</name>)<name>array_remove</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>remove_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"reverse"</expr>, <expr>(<name>PyCFunction</name>)<name>array_reverse</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>reverse_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tofile"</expr>, <expr>(<name>PyCFunction</name>)<name>array_tofile</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>tofile_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tolist"</expr>, <expr>(<name>PyCFunction</name>)<name>array_tolist</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>tolist_doc</name></expr>
}</block></expr>,
<expr><block>{
<expr>"tostring"</expr>, <expr>(<name>PyCFunction</name>)<name>array_tostring</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>tostring_doc</name></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"tounicode"</expr>, <expr>(<name>PyCFunction</name>)<name>array_tounicode</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<expr><name>tounicode_doc</name></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr>"write"</expr>, <expr>(<name>PyCFunction</name>)<name>array_tofile_as_write</name></expr>, <expr><name>METH_O</name></expr>,
<expr><name>tofile_doc</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_repr</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>, <decl><type ref="prev"/><name>typecode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>t</name></decl>, *<decl><type ref="prev"/><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>typecode</name> = <name><name>a</name>-&gt;<name>ob_descr</name>-&gt;<name>typecode</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"array('%c')"</expr></argument>, <argument><expr><name>typecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>typecode</name> == 'c'</expr>)</condition><then>
<expr_stmt><expr><name>v</name> = <call><name>array_tostring</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name>typecode</name> == 'u'</expr>)</condition><then>
<expr_stmt><expr><name>v</name> = <call><name>array_tounicode</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<expr_stmt><expr><name>v</name> = <call><name>array_tolist</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name>t</name> = <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"array('%c', "</expr></argument>, <argument><expr><name>typecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name>*</type>
<name>array_subscr</name><parameter_list>(<param><decl><type><name>arrayobject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>item</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyIndex_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><call><name>PyNumber_AsSsize_t</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>PyExc_IndexError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>i</name>==-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> += <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>array_item</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelength</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arrayobject</name>*</type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itemsize</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr>(<name>PySliceObject</name>*)<name>item</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>, <argument><expr>&amp;<name>step</name></expr></argument>, <argument><expr>&amp;<name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>slicelength</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>newarrayobject</name><argument_list>(<argument><expr>&amp;<name>Arraytype</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_descr</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>step</name> == 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>newarrayobject</name><argument_list>(<argument><expr>&amp;<name>Arraytype</name></expr></argument>,
<argument><expr><name>slicelength</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_descr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>((<name>arrayobject</name> *)<name>result</name>)-&gt;<name>ob_item</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>start</name> * <name>itemsize</name></expr></argument>,
<argument><expr><name>slicelength</name> * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>newarrayobject</name><argument_list>(<argument><expr>&amp;<name>Arraytype</name></expr></argument>, <argument><expr><name>slicelength</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>ob_descr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ar</name> = (<name>arrayobject</name>*)<name>result</name></expr>;</expr_stmt>
<for>for (<init><expr><name>cur</name> = <name>start</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>slicelength</name></expr>;</condition>
<incr><expr><name>cur</name> += <name>step</name></expr>, <expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ar</name>-&gt;<name>ob_item</name></name> + <name>i</name>*<name>itemsize</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>cur</name>*<name>itemsize</name></expr></argument>,
<argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"array indices must be integers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>array_ass_subscr</name><parameter_list>(<param><decl><type><name>arrayobject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>item</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>slicelength</name></decl>, <decl><type ref="prev"/><name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arrayobject</name>*</type> <name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itemsize</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyIndex_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><call><name>PyNumber_AsSsize_t</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>PyExc_IndexError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>i</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>i</name> += <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>i</name> &lt; 0 || <name>i</name> &gt;= <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"array assignment index out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>start</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stop</name> = <name>i</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>slicelength</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><call>(*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>setitem</name></name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PySlice_Check</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PySlice_GetIndicesEx</name><argument_list>(<argument><expr>(<name>PySliceObject</name> *)<name>item</name></expr></argument>,
<argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>,
<argument><expr>&amp;<name>step</name></expr></argument>, <argument><expr>&amp;<name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"array indices must be integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>other</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>array_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>other</name> = (<name>arrayobject</name> *)<name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>other</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> = <call><name>array_slice</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>array_ass_subscr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>other</name>-&gt;<name>ob_descr</name></name> != <name><name>self</name>-&gt;<name>ob_descr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can only assign array (not \"%.200s\") to array slice"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>itemsize</name> = <name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>step</name> &gt; 0 &amp;&amp; <name>stop</name> &lt; <name>start</name>) ||
(<name>step</name> &lt; 0 &amp;&amp; <name>stop</name> &gt; <name>start</name>)</expr>)</condition><then>
<expr_stmt><expr><name>stop</name> = <name>start</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>step</name> == 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>slicelength</name> &gt; <name>needed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + (<name>start</name> + <name>needed</name>) * <name>itemsize</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>stop</name> * <name>itemsize</name></expr></argument>,
<argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>stop</name>) * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>array_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> +
<name>needed</name> - <name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>slicelength</name> &lt; <name>needed</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>array_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> +
<name>needed</name> - <name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + (<name>start</name> + <name>needed</name>) * <name>itemsize</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>stop</name> * <name>itemsize</name></expr></argument>,
<argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>start</name> - <name>needed</name>) * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>needed</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>start</name> * <name>itemsize</name></expr></argument>,
<argument><expr><name><name>other</name>-&gt;<name>ob_item</name></name></expr></argument>, <argument><expr><name>needed</name> * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>needed</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>step</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>stop</name> = <name>start</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> = <name>stop</name> + <call><name>step</name> * <argument_list>(<argument><expr><name>slicelength</name> - 1</expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> = -<name>step</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>cur</name> = <name>start</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>slicelength</name></expr>;</condition>
<incr><expr><name>cur</name> += <name>step</name></expr>, <expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>lim</name> <init>= <expr><name>step</name> - 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cur</name> + <name>step</name> &gt;= <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>lim</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>cur</name> - 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + (<name>cur</name> - <name>i</name>) * <name>itemsize</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + (<name>cur</name> + 1) * <name>itemsize</name></expr></argument>,
<argument><expr><name>lim</name> * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>cur</name> = <name>start</name> + <name>slicelength</name> * <name>step</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cur</name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + (<name>cur</name>-<name>slicelength</name>) * <name>itemsize</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>cur</name> * <name>itemsize</name></expr></argument>,
<argument><expr>(<call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>cur</name>) * <name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>array_resize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>slicelength</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>needed</name> != <name>slicelength</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"attempt to assign array of size %zd "
"to extended slice of size %zd"</expr></argument>,
<argument><expr><name>needed</name></expr></argument>, <argument><expr><name>slicelength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>cur</name> = <name>start</name></expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>slicelength</name></expr>;</condition>
<incr><expr><name>cur</name> += <name>step</name></expr>, <expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_item</name></name> + <name>cur</name> * <name>itemsize</name></expr></argument>,
<argument><expr><name><name>other</name>-&gt;<name>ob_item</name></name> + <name>i</name> * <name>itemsize</name></expr></argument>,
<argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></else></if></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>array_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>array_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>array_subscr</name></expr>,
<expr>(<name>objobjargproc</name>)<name>array_ass_subscr</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> *</type><name>emptybuf</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>array_buffer_getreadbuf</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>ptr</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr><name>index</name> != 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
<argument><expr>"Accessing non-existent array segment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>ptr</name> = (<name>void</name> *)<name><name>self</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>ptr</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ptr</name> = <name>emptybuf</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>array_buffer_getwritebuf</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>index</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>ptr</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr><name>index</name> != 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>,
<argument><expr>"Accessing non-existent array segment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>ptr</name> = (<name>void</name> *)<name><name>self</name>-&gt;<name>ob_item</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>ptr</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ptr</name> = <name>emptybuf</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>array_buffer_getsegcount</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>Py_ssize_t</name> *</type><name>lenp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr><name>lenp</name></expr> )</condition><then>
<expr_stmt><expr>*<name>lenp</name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>*<name><name>self</name>-&gt;<name>ob_descr</name>-&gt;<name>itemsize</name></name></expr>;</expr_stmt></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>array_as_sequence</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>array_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>array_concat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>array_repeat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>array_item</name></expr>,
<expr>(<name>ssizessizeargfunc</name>)<name>array_slice</name></expr>,
<expr>(<name>ssizeobjargproc</name>)<name>array_ass_item</name></expr>,
<expr>(<name>ssizessizeobjargproc</name>)<name>array_ass_slice</name></expr>,
<expr>(<name>objobjproc</name>)<name>array_contains</name></expr>,
<expr>(<name>binaryfunc</name>)<name>array_inplace_concat</name></expr>,
<expr>(<name>ssizeargfunc</name>)<name>array_inplace_repeat</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyBufferProcs</name></type> <name>array_as_buffer</name> <init>= <expr><block>{
<expr>(<name>readbufferproc</name>)<name>array_buffer_getreadbuf</name></expr>,
<expr>(<name>writebufferproc</name>)<name>array_buffer_getwritebuf</name></expr>,
<expr>(<name>segcountproc</name>)<name>array_buffer_getsegcount</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>initial</name> <init>= <expr><name>NULL</name></expr></init>, *<name>it</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>arraydescr</name> *</type><name>descr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name> == &amp;<name>Arraytype</name> &amp;&amp; !<call><name>_PyArg_NoKeywords</name><argument_list>(<argument><expr>"array.array()"</expr></argument>, <argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"c|O:array"</expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>initial</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!(<name>initial</name> == <name>NULL</name> || <call><name>PyList_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call>
|| <call><name>PyString_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call>
|| (<name>c</name> == 'u' &amp;&amp; <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>it</name> = <call><name>PyObject_GetIter</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>initial</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>descr</name> = <name>descriptors</name></expr>;</init> <condition><expr><name><name>descr</name>-&gt;<name>typecode</name></name> != '\0'</expr>;</condition> <incr><expr><name>descr</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>descr</name>-&gt;<name>typecode</name></name> == <name>c</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>initial</name> == <name>NULL</name> || !(<call><name>PyList_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call>
|| <call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>len</name> = <call><name>PySequence_Size</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>a</name> = <call><name>newarrayobject</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>a</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name> <init>=
<expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>initial</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>setarrayitem</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr><name>initial</name> != <name>NULL</name> &amp;&amp; <call><name>PyString_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>t_initial</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t_initial</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>t_initial</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>v</name> = <call><name>array_fromstring</name><argument_list>(<argument><expr>(<name>arrayobject</name> *)<name>a</name></expr></argument>,
<argument><expr><name>t_initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>t_initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_USING_UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if <condition>(<expr><name>initial</name> != <name>NULL</name> &amp;&amp; <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>n</name> <init>= <expr><call><name>PyUnicode_GET_DATA_SIZE</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>self</name> <init>= <expr>(<name>arrayobject</name> *)<name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>item</name> <init>= <expr><name><name>self</name>-&gt;<name>ob_item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> = (<name>char</name> *)<call><name>PyMem_Realloc</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>ob_item</name></name> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> = <name>n</name> / <sizeof>sizeof<argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>PyUnicode_AS_DATA</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>allocated</name></name> = <call><name>Py_SIZE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>it</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>array_iter_extend</name><argument_list>(<argument><expr>(<name>arrayobject</name> *)<name>a</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>a</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"bad typecode (must be c, b, B, u, h, H, i, I, l, L, f or d)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"This module defines an object type which can efficiently represent\n\
an array of basic values: characters, integers, floating point\n\
numbers. Arrays are sequence types and behave very much like lists,\n\
except that the type of objects stored in them is constrained. The\n\
type is specified at object creation time by using a type code, which\n\
is a single character. The following type codes are defined:\n\
\n\
Type code C Type Minimum size in bytes \n\
'c' character 1 \n\
'b' signed integer 1 \n\
'B' unsigned integer 1 \n\
'u' Unicode character 2 \n\
'h' signed integer 2 \n\
'H' unsigned integer 2 \n\
'i' signed integer 2 \n\
'I' unsigned integer 2 \n\
'l' signed integer 4 \n\
'L' unsigned integer 4 \n\
'f' floating point 4 \n\
'd' floating point 8 \n\
\n\
The constructor is:\n\
\n\
array(typecode [, initializer]) -- create a new array\n\
"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>arraytype_doc</name></expr></argument>,
<argument><expr>"array(typecode [, initializer]) -&gt; array\n\
\n\
Return a new array whose items are restricted by typecode, and\n\
initialized from the optional initializer value, which must be a list,\n\
string. or iterable over elements of the appropriate type.\n\
\n\
Arrays represent basic values and behave very much like lists, except\n\
the type of objects stored in them is constrained.\n\
\n\
Methods:\n\
\n\
append() -- append a new item to the end of the array\n\
buffer_info() -- return information giving the current memory info\n\
byteswap() -- byteswap all the items of the array\n\
count() -- return number of occurences of an object\n\
extend() -- extend array by appending multiple elements from an iterable\n\
fromfile() -- read items from a file object\n\
fromlist() -- append items from the list\n\
fromstring() -- append items from the string\n\
index() -- return index of first occurence of an object\n\
insert() -- insert a new item into the array at a provided position\n\
pop() -- remove and return item (default last)\n\
read() -- DEPRECATED, use fromfile()\n\
remove() -- remove first occurence of an object\n\
reverse() -- reverse the order of the items in the array\n\
tofile() -- write all items to a file object\n\
tolist() -- return the array converted to an ordinary list\n\
tostring() -- return the array converted to a string\n\
write() -- DEPRECATED, use tofile()\n\
\n\
Attributes:\n\
\n\
typecode -- the typecode character used to create the array\n\
itemsize -- the length in bytes of one array item\n\
"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>array_iter</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ao</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Arraytype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"array.array"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>arrayobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>array_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>array_repr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>array_as_sequence</name></expr>,
<expr>&amp;<name>array_as_mapping</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>&amp;<name>array_as_buffer</name></expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_BASETYPE</name> | <name>Py_TPFLAGS_HAVE_WEAKREFS</name></expr>,
<expr><name>arraytype_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>array_richcompare</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>arrayobject</name></expr></argument>, <argument><expr><name>weakreflist</name></expr></argument>)</argument_list></call></expr>,
<expr>(<name>getiterfunc</name>)<name>array_iter</name></expr>,
<expr>0</expr>,
<expr><name>array_methods</name></expr>,
<expr>0</expr>,
<expr><name>array_getsets</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyType_GenericAlloc</name></expr>,
<expr><name>array_new</name></expr>,
<expr><name>PyObject_Del</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Py_ssize_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>arrayobject</name> *</type><name>ao</name></decl>;</decl_stmt>
<function_decl><type><name>PyObject</name> *</type> (*<name>getitem</name>)<parameter_list>(<param><decl><type>struct</type> <name>arrayobject</name> *</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>arrayiterobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyArrayIter_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArrayIter_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PyObject_TypeCheck(op, &amp;PyArrayIter_Type)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>array_iter</name><parameter_list>(<param><decl><type><name>arrayobject</name> *</type><name>ao</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>arrayiterobject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>array_Check</name><argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_GC_New</name><argument_list>(<argument><expr><name>arrayiterobject</name></expr></argument>, <argument><expr>&amp;<name>PyArrayIter_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ao</name></name> = <name>ao</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>getitem</name></name> = <name><name>ao</name>-&gt;<name>ob_descr</name>-&gt;<name>getitem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Track</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>arrayiter_next</name><parameter_list>(<param><decl><type><name>arrayiterobject</name> *</type><name>it</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyArrayIter_Check</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>it</name>-&gt;<name>index</name></name> &lt; <call><name>Py_SIZE</name><argument_list>(<argument><expr><name><name>it</name>-&gt;<name>ao</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call>(*<name><name>it</name>-&gt;<name>getitem</name></name>)<argument_list>(<argument><expr><name><name>it</name>-&gt;<name>ao</name></name></expr></argument>, <argument><expr><name><name>it</name>-&gt;<name>index</name></name>++</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>arrayiter_dealloc</name><parameter_list>(<param><decl><type><name>arrayiterobject</name> *</type><name>it</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>it</name>-&gt;<name>ao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyObject_GC_Del</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>arrayiter_traverse</name><parameter_list>(<param><decl><type><name>arrayiterobject</name> *</type><name>it</name></decl></param>, <param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>it</name>-&gt;<name>ao</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyArrayIter_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"arrayiterator"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>arrayiterobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>arrayiter_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>arrayiter_traverse</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_SelfIter</name></expr>,
<expr>(<name>iternextfunc</name>)<name>arrayiter_next</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>a_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initarray</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Arraytype</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyArrayIter_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"array"</expr></argument>, <argument><expr><name>a_methods</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>(<name>PyObject</name> *)&amp;<name>Arraytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"ArrayType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Arraytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>(<name>PyObject</name> *)&amp;<name>Arraytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"array"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Arraytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
