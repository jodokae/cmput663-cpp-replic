<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/addrinfo.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_ADDRFAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_ADDRFAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_AGAIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_BADFLAGS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_FAIL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_FAMILY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_MEMORY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_NODATA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_NONAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SERVICE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SOCKTYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SYSTEM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_BADHINTS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_PROTOCOL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_MAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name></cpp:macro> <cpp:value>fake_getaddrinfo</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_ADDRFAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_AGAIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_BADFLAGS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_FAIL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_FAMILY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_MEMORY</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_NODATA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_NONAME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SERVICE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SOCKTYPE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SYSTEM</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_BADHINTS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_PROTOCOL</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_MAX</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_PASSIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_PASSIVE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_CANONNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_NUMERICHOST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_MASK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_ALL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_V4MAPPED_CFG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_ADDRCONFIG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_V4MAPPED</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_DEFAULT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_PASSIVE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_CANONNAME</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_NUMERICHOST</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_MASK</name></cpp:macro> <cpp:value>(AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_ALL</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_V4MAPPED_CFG</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_ADDRCONFIG</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_V4MAPPED</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_DEFAULT</name></cpp:macro> <cpp:value>(AI_V4MAPPED_CFG | AI_ADDRCONFIG)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETNAMEINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NI_MAXHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXHOST</name></cpp:macro> <cpp:value>1025</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXSERV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NI_NOFQDN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NOFQDN</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NUMERICHOST</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NAMEREQD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NUMERICSERV</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_DGRAM</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>addrinfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ai_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_socktype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ai_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ai_canonname</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sockaddr</name> *</type><name>ai_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>addrinfo</name> *</type><name>ai_next</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_STORAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_MAXSIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_ALIGNSIZE</name></cpp:macro> <cpp:value>(sizeof(PY_LONG_LONG))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_ALIGNSIZE</name></cpp:macro> <cpp:value>(sizeof(double))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_PAD1SIZE</name></cpp:macro> <cpp:value>(_SS_ALIGNSIZE - sizeof(u_char) * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SS_PAD2SIZE</name></cpp:macro> <cpp:value>(_SS_MAXSIZE - sizeof(u_char) * 2 - _SS_PAD1SIZE - _SS_ALIGNSIZE)</cpp:value></cpp:define>
<struct>struct <name>sockaddr_storage</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ss_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ss_family</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ss_family</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>__ss_pad1</name><index>[<expr><name>_SS_PAD1SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PY_LONG_LONG</name></type> <name>__ss_align</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>double</name></type> <name>__ss_align</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>__ss_pad2</name><index>[<expr><name>_SS_PAD2SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>freehostent</name></type> <name>Py_PROTO</name><argument_list>(<argument><expr>(struct <name>hostent</name> *)</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
