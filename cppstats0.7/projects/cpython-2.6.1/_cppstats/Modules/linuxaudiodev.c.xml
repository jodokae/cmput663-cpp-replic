<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/linuxaudiodev.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDONLY</name></cpp:macro> <cpp:value>00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_WRONLY</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/soundcard.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>uint32_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/soundcard.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SNDCTL_DSP_CHANNELS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNDCTL_DSP_CHANNELS</name></cpp:macro> <cpp:value>SOUND_PCM_WRITE_CHANNELS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>int</name></type> <name>x_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_icount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_ocount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>x_afmts</name></decl>;</decl_stmt>
}</block></struct></type> <name>lad_t</name>;</typedef>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a_bps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>a_name</name></decl>;</decl_stmt>
}</block> <decl><name><name>audio_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>8</expr>, <expr><name>AFMT_MU_LAW</name></expr>, <expr>"logarithmic mu-law 8-bit audio"</expr> }</block></expr>,
<expr><block>{ <expr>8</expr>, <expr><name>AFMT_A_LAW</name></expr>, <expr>"logarithmic A-law 8-bit audio"</expr> }</block></expr>,
<expr><block>{ <expr>8</expr>, <expr><name>AFMT_U8</name></expr>, <expr>"linear unsigned 8-bit audio"</expr> }</block></expr>,
<expr><block>{ <expr>8</expr>, <expr><name>AFMT_S8</name></expr>, <expr>"linear signed 8-bit audio"</expr> }</block></expr>,
<expr><block>{ <expr>16</expr>, <expr><name>AFMT_U16_BE</name></expr>, <expr>"linear unsigned 16-bit big-endian audio"</expr> }</block></expr>,
<expr><block>{ <expr>16</expr>, <expr><name>AFMT_U16_LE</name></expr>, <expr>"linear unsigned 16-bit little-endian audio"</expr> }</block></expr>,
<expr><block>{ <expr>16</expr>, <expr><name>AFMT_S16_BE</name></expr>, <expr>"linear signed 16-bit big-endian audio"</expr> }</block></expr>,
<expr><block>{ <expr>16</expr>, <expr><name>AFMT_S16_LE</name></expr>, <expr>"linear signed 16-bit little-endian audio"</expr> }</block></expr>,
<expr><block>{ <expr>16</expr>, <expr><name>AFMT_S16_NE</name></expr>, <expr>"linear signed 16-bit native-endian audio"</expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_audio_types</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>audio_types</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>audio_types</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Ladtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>LinuxAudioError</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>lad_t</name> *</type>
<name>newladobject</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lad_t</name> *</type><name>xp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>afmts</name></decl>, <decl><type ref="prev"/><name>imode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>basedev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>mode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"s|s:open"</expr></argument>, <argument><expr>&amp;<name>basedev</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>basedev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>basedev</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>imode</name> = <name>O_RDONLY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>imode</name> = <name>O_WRONLY</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>, <argument><expr>"mode should be 'r' or 'w'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>basedev</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>basedev</name> = <call><name>getenv</name><argument_list>(<argument><expr>"AUDIODEV"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>basedev</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>basedev</name> = "/dev/dsp"</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>fd</name> = <call><name>open</name><argument_list>(<argument><expr><name>basedev</name></expr></argument>, <argument><expr><name>imode</name></expr></argument>)</argument_list></call>) == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrnoWithFilename</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>, <argument><expr><name>basedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>imode</name> == <name>O_WRONLY</name> &amp;&amp; <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SNDCTL_DSP_NONBLOCK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrnoWithFilename</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>, <argument><expr><name>basedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SNDCTL_DSP_GETFMTS</name></expr></argument>, <argument><expr>&amp;<name>afmts</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrnoWithFilename</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>, <argument><expr><name>basedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>xp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>lad_t</name></expr></argument>, <argument><expr>&amp;<name>Ladtype</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_fd</name></name> = <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_mode</name></name> = <name>imode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_icount</name></name> = <name><name>xp</name>-&gt;<name>x_ocount</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name>-&gt;<name>x_afmts</name></name> = <name>afmts</name></expr>;</expr_stmt>
<return>return <expr><name>xp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lad_dealloc</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>xp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>xp</name>-&gt;<name>x_fd</name></name> != -1</expr>)</condition><then>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>xp</name>-&gt;<name>x_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_read</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:read"</expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>cp</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>count</name> = <call><name>read</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>x_icount</name></name> += <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>rv</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_write</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>write_set_fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>timeval</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>select_retval</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:write"</expr></argument>, <argument><expr>&amp;<name>cp</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>write_set_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr>&amp;<name>write_set_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name>.<name>tv_sec</name></name> = 4</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name>.<name>tv_usec</name></name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><name>select_retval</name> = <call><name>select</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name>+1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>write_set_fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name>.<name>tv_sec</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name>.<name>tv_usec</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>select_retval</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>write</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call>) == -1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>errno</name> != <name>EAGAIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>x_ocount</name></name> += <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> -= <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> += <name>rv</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></while>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_close</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>x_fd</name></name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>x_fd</name></name> = -1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_fileno</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_setparameters</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rate</name></decl>, <decl><type ref="prev"/><name>ssize</name></decl>, <decl><type ref="prev"/><name>nchannels</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>emulate</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiii|i:setparameters"</expr></argument>,
<argument><expr>&amp;<name>rate</name></expr></argument>, <argument><expr>&amp;<name>ssize</name></expr></argument>, <argument><expr>&amp;<name>nchannels</name></expr></argument>, <argument><expr>&amp;<name>fmt</name></expr></argument>, <argument><expr>&amp;<name>emulate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>rate</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"expected rate &gt;= 0, not %d"</expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ssize</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"expected sample size &gt;= 0, not %d"</expr></argument>,
<argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>nchannels</name> != 1 &amp;&amp; <name>nchannels</name> != 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"nchannels must be 1 or 2, not %d"</expr></argument>,
<argument><expr><name>nchannels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>n_audio_types</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<if>if <condition>(<expr><name>fmt</name> == <name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_fmt</name></expr>)</condition><then>
<break>break;</break></then></if></for>
<if>if <condition>(<expr><name>n</name> == <name>n_audio_types</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"unknown audio encoding: %d"</expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_bps</name> != <name>ssize</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"for %s, expected sample size %d, not %d"</expr></argument>,
<argument><expr><name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_name</name></expr></argument>, <argument><expr><name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_bps</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>emulate</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>self</name>-&gt;<name>x_afmts</name></name> &amp; <name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_fmt</name>) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"%s format not supported by device"</expr></argument>,
<argument><expr><name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_SETFMT</name></expr></argument>,
<argument><expr>&amp;<name><name>audio_types</name><index>[<expr><name>n</name></expr>]</index></name>.<name>a_fmt</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_CHANNELS</name></expr></argument>, <argument><expr>&amp;<name>nchannels</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_SPEED</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>_ssize</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name> *</type><name>nchannels</name></decl></param>, <param><decl><type><name>int</name> *</type><name>ssize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fmt</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_SETFMT</name></expr></argument>, <argument><expr>&amp;<name>fmt</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-<name>errno</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{
<case>case <expr><name>AFMT_MU_LAW</name></expr>:
</case><case>case <expr><name>AFMT_A_LAW</name></expr>:
</case><case>case <expr><name>AFMT_U8</name></expr>:
</case><case>case <expr><name>AFMT_S8</name></expr>:
<expr_stmt><expr>*<name>ssize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AFMT_S16_LE</name></expr>:
</case><case>case <expr><name>AFMT_S16_BE</name></expr>:
</case><case>case <expr><name>AFMT_U16_LE</name></expr>:
</case><case>case <expr><name>AFMT_U16_BE</name></expr>:
<expr_stmt><expr>*<name>ssize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AFMT_MPEG</name></expr>:
</case><case>case <expr><name>AFMT_IMA_ADPCM</name></expr>:
</case><default>default:
<return>return <expr>-<name>EOPNOTSUPP</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_CHANNELS</name></expr></argument>, <argument><expr><name>nchannels</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr>-<name>errno</name></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_bufsize</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>audio_buf_info</name></type> <name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name><init>=<expr>0</expr></init>, <name>ssize</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>_ssize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>nchannels</name></expr></argument>, <argument><expr>&amp;<name>ssize</name></expr></argument>)</argument_list></call> &lt; 0 || !<name>ssize</name> || !<name>nchannels</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_GETOSPACE</name></expr></argument>, <argument><expr>&amp;<name>ai</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name><name>ai</name>.<name>fragstotal</name></name> * <name><name>ai</name>.<name>fragsize</name></name>) / (<name>nchannels</name> * <name>ssize</name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_obufcount</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>audio_buf_info</name></type> <name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name><init>=<expr>0</expr></init>, <name>ssize</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>_ssize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>nchannels</name></expr></argument>, <argument><expr>&amp;<name>ssize</name></expr></argument>)</argument_list></call> &lt; 0 || !<name>ssize</name> || !<name>nchannels</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_GETOSPACE</name></expr></argument>, <argument><expr>&amp;<name>ai</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name><name>ai</name>.<name>fragstotal</name></name> * <name><name>ai</name>.<name>fragsize</name></name> - <name><name>ai</name>.<name>bytes</name></name>) /
(<name>ssize</name> * <name>nchannels</name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_obuffree</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>audio_buf_info</name></type> <name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name><init>=<expr>0</expr></init>, <name>ssize</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>_ssize</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>&amp;<name>nchannels</name></expr></argument>, <argument><expr>&amp;<name>ssize</name></expr></argument>)</argument_list></call> &lt; 0 || !<name>ssize</name> || !<name>nchannels</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_GETOSPACE</name></expr></argument>, <argument><expr>&amp;<name>ai</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>ai</name>.<name>bytes</name></name> / (<name>ssize</name> * <name>nchannels</name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_flush</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>SNDCTL_DSP_SYNC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_getptr</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>count_info</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>req</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>x_mode</name></name> == <name>O_RDONLY</name></expr>)</condition><then>
<expr_stmt><expr><name>req</name> = <name>SNDCTL_DSP_GETIPTR</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>req</name> = <name>SNDCTL_DSP_GETOPTR</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>x_fd</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iii"</expr></argument>, <argument><expr><name><name>info</name>.<name>bytes</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>blocks</name></name></expr></argument>, <argument><expr><name><name>info</name>.<name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>lad_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"read"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_read</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"write"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_write</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"setparameters"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_setparameters</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"bufsize"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_bufsize</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"obufcount"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_obufcount</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"obuffree"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_obuffree</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"flush"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_flush</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_close</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"fileno"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_fileno</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>"getptr"</expr>, <expr>(<name>PyCFunction</name>)<name>lad_getptr</name></expr>, <expr><name>METH_NOARGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>lad_getattr</name><parameter_list>(<param><decl><type><name>lad_t</name> *</type><name>xp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>lad_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>xp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Ladtype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>&amp;<name>PyType_Type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"linuxaudiodev.linux_audio_device"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>lad_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>lad_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>lad_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>ladopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>PyObject</name> *)<call><name>newladobject</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>linuxaudiodev_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"open"</expr>, <expr><name>ladopen</name></expr>, <expr><name>METH_VARARGS</name></expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>initlinuxaudiodev</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"the linuxaudiodev module has been removed in "
"Python 3.0; use the ossaudiodev module instead"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"linuxaudiodev"</expr></argument>, <argument><expr><name>linuxaudiodev_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>LinuxAudioError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"linuxaudiodev.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>LinuxAudioError</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>LinuxAudioError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_MU_LAW"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_MU_LAW</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_A_LAW"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_A_LAW</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_U8"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_U8</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_S8"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_S8</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_U16_BE"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_U16_BE</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_U16_LE"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_U16_LE</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_S16_BE"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_S16_BE</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_S16_LE"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_S16_LE</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"AFMT_S16_NE"</expr></argument>, <argument><expr>(<name>long</name>)<name>AFMT_S16_NE</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return;</return></then></if>
<return>return;</return>
}</block></function>
</unit>
