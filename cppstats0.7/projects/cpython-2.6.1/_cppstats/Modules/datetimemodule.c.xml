<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/datetimemodule.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_SSIZE_T_CLEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modsupport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timefuncs.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Py_BUILD_CORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BUILD_CORE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datetime.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Py_BUILD_CORE</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> &lt; 4</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "datetime.c requires that C int have at least 32 bits"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINYEAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXYEAR</name></cpp:macro> <cpp:value>9999</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DELTA_DAYS</name></cpp:macro> <cpp:value>999999999</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_YEAR</name></cpp:macro> <cpp:value>PyDateTime_GET_YEAR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MONTH</name></cpp:macro> <cpp:value>PyDateTime_GET_MONTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DAY</name></cpp:macro> <cpp:value>PyDateTime_GET_DAY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_GET_HOUR</name></cpp:macro> <cpp:value>PyDateTime_DATE_GET_HOUR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_GET_MINUTE</name></cpp:macro> <cpp:value>PyDateTime_DATE_GET_MINUTE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_GET_SECOND</name></cpp:macro> <cpp:value>PyDateTime_DATE_GET_SECOND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_GET_MICROSECOND</name></cpp:macro> <cpp:value>PyDateTime_DATE_GET_MICROSECOND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_YEAR</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((o)-&gt;data[0] = ((v) &amp; 0xff00) &gt;&gt; 8), ((o)-&gt;data[1] = ((v) &amp; 0x00ff)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_MONTH</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_GET_MONTH(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DAY</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_GET_DAY(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_SET_HOUR</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_DATE_GET_HOUR(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_SET_MINUTE</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_DATE_GET_MINUTE(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_SET_SECOND</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_DATE_GET_SECOND(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_SET_MICROSECOND</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((o)-&gt;data[7] = ((v) &amp; 0xff0000) &gt;&gt; 16), ((o)-&gt;data[8] = ((v) &amp; 0x00ff00) &gt;&gt; 8), ((o)-&gt;data[9] = ((v) &amp; 0x0000ff)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_GET_HOUR</name></cpp:macro> <cpp:value>PyDateTime_TIME_GET_HOUR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_GET_MINUTE</name></cpp:macro> <cpp:value>PyDateTime_TIME_GET_MINUTE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_GET_SECOND</name></cpp:macro> <cpp:value>PyDateTime_TIME_GET_SECOND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_GET_MICROSECOND</name></cpp:macro> <cpp:value>PyDateTime_TIME_GET_MICROSECOND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_SET_HOUR</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_TIME_GET_HOUR(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_SET_MINUTE</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_TIME_GET_MINUTE(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_SET_SECOND</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(PyDateTime_TIME_GET_SECOND(o) = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_SET_MICROSECOND</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((o)-&gt;data[3] = ((v) &amp; 0xff0000) &gt;&gt; 16), ((o)-&gt;data[4] = ((v) &amp; 0x00ff00) &gt;&gt; 8), ((o)-&gt;data[5] = ((v) &amp; 0x0000ff)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TD_DAYS</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyDateTime_Delta *)(o))-&gt;days)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TD_SECONDS</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyDateTime_Delta *)(o))-&gt;seconds)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TD_MICROSECONDS</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((PyDateTime_Delta *)(o))-&gt;microseconds)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TD_DAYS</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((o)-&gt;days = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TD_SECONDS</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((o)-&gt;seconds = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TD_MICROSECONDS</name><parameter_list>(<param><type><name>o</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((o)-&gt;microseconds = (v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASTZINFO</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((_PyDateTime_BaseTZInfo *)(p))-&gt;hastzinfo)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONTH_IS_SANE</name><parameter_list>(<param><type><name>M</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)(M) - 1 &lt; 12)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_DateType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_DateTimeType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_DeltaType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_TimeType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_TZInfoType</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_ADD_OVERFLOWED</name><parameter_list>(<param><type><name>RESULT</name></type></param>, <param><type><name>I</name></type></param>, <param><type><name>J</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((((RESULT) ^ (I)) &amp; ((RESULT) ^ (J))) &lt; 0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>divmod</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>int</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>quo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>y</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>quo</name> = <name>x</name> / <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>r</name> = <name>x</name> - <name>quo</name> * <name>y</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>r</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>quo</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>r</name> += <name>y</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= *<name>r</name> &amp;&amp; *<name>r</name> &lt; <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>quo</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>round_to_long</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>x</name> &gt;= 0.0</expr>)</condition><then>
<expr_stmt><expr><name>x</name> = <call><name>floor</name><argument_list>(<argument><expr><name>x</name> + 0.5</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>x</name> = <call><name>ceil</name><argument_list>(<argument><expr><name>x</name> - 0.5</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>(<name>long</name>)<name>x</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>_days_in_month</name><index>[]</index></name> <init>= <expr><block>{
<expr>0</expr>,
<expr>31</expr>, <expr>28</expr>, <expr>31</expr>, <expr>30</expr>, <expr>31</expr>, <expr>30</expr>, <expr>31</expr>, <expr>31</expr>, <expr>30</expr>, <expr>31</expr>, <expr>30</expr>, <expr>31</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>_days_before_month</name><index>[]</index></name> <init>= <expr><block>{
<expr>0</expr>,
<expr>0</expr>, <expr>31</expr>, <expr>59</expr>, <expr>90</expr>, <expr>120</expr>, <expr>151</expr>, <expr>181</expr>, <expr>212</expr>, <expr>243</expr>, <expr>273</expr>, <expr>304</expr>, <expr>334</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_leap</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>ayear</name> <init>= <expr>(<name>unsigned</name> <name>int</name>)<name>year</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ayear</name> % 4 == 0 &amp;&amp; (<name>ayear</name> % 100 != 0 || <name>ayear</name> % 400 == 0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>days_in_month</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>month</name> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>month</name> &lt;= 12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>month</name> == 2 &amp;&amp; <call><name>is_leap</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>29</expr>;</return></then>
<else>else
<return>return <expr><name><name>_days_in_month</name><index>[<expr><name>month</name></expr>]</index></name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>days_before_month</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>month</name> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>month</name> &lt;= 12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> = <name><name>_days_before_month</name><index>[<expr><name>month</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>month</name> &gt; 2 &amp;&amp; <call><name>is_leap</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>days</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>days</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>days_before_year</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>year</name> - 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>year</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>y</name> &gt;= 0</expr>)</condition><then>
<return>return <expr><name>y</name>*365 + <name>y</name>/4 - <name>y</name>/100 + <name>y</name>/400</expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>y</name> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-366</expr>;</return>
}</block></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI4Y</name></cpp:macro> <cpp:value>1461</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI100Y</name></cpp:macro> <cpp:value>36524</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DI400Y</name></cpp:macro> <cpp:value>146097</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ord_to_ymd</name><parameter_list>(<param><decl><type><name>int</name></type> <name>ordinal</name></decl></param>, <param><decl><type><name>int</name> *</type><name>year</name></decl></param>, <param><decl><type><name>int</name> *</type><name>month</name></decl></param>, <param><decl><type><name>int</name> *</type><name>day</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n100</name></decl>, <decl><type ref="prev"/><name>n400</name></decl>, <decl><type ref="prev"/><name>leapyear</name></decl>, <decl><type ref="prev"/><name>preceding</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ordinal</name> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name>ordinal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n400</name> = <name>ordinal</name> / <name>DI400Y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>ordinal</name> % <name>DI400Y</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>year</name> = <name>n400</name> * 400 + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>n100</name> = <name>n</name> / <name>DI100Y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>n</name> % <name>DI100Y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> = <name>n</name> / <name>DI4Y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>n</name> % <name>DI4Y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n1</name> = <name>n</name> / 365</expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <name>n</name> % 365</expr>;</expr_stmt>
<expr_stmt><expr>*<name>year</name> += <name>n100</name> * 100 + <name>n4</name> * 4 + <name>n1</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n1</name> == 4 || <name>n100</name> == 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>year</name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>month</name> = 12</expr>;</expr_stmt>
<expr_stmt><expr>*<name>day</name> = 31</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>leapyear</name> = <name>n1</name> == 3 &amp;&amp; (<name>n4</name> != 24 || <name>n100</name> == 3)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>leapyear</name> == <call><name>is_leap</name><argument_list>(<argument><expr>*<name>year</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>month</name> = (<name>n</name> + 50) &gt;&gt; 5</expr>;</expr_stmt>
<expr_stmt><expr><name>preceding</name> = (<name><name>_days_before_month</name><index>[<expr>*<name>month</name></expr>]</index></name> + (*<name>month</name> &gt; 2 &amp;&amp; <name>leapyear</name>))</expr>;</expr_stmt>
<if>if <condition>(<expr><name>preceding</name> &gt; <name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>month</name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr><name>preceding</name> -= <call><name>days_in_month</name><argument_list>(<argument><expr>*<name>year</name></expr></argument>, <argument><expr>*<name>month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>n</name> -= <name>preceding</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> &lt; <call><name>days_in_month</name><argument_list>(<argument><expr>*<name>year</name></expr></argument>, <argument><expr>*<name>month</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>day</name> = <name>n</name> + 1</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ymd_to_ord</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>day</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>days_before_year</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call> + <call><name>days_before_month</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call> + <name>day</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>weekday</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>day</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<call><name>ymd_to_ord</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call> + 6) % 7</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso_week1_monday</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>first_day</name> <init>= <expr><call><name>ymd_to_ord</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_weekday</name> <init>= <expr>(<name>first_day</name> + 6) % 7</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>week1_monday</name> <init>= <expr><name>first_day</name> - <name>first_weekday</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>first_weekday</name> &gt; 3</expr>)</condition><then>
<expr_stmt><expr><name>week1_monday</name> += 7</expr>;</expr_stmt></then></if>
<return>return <expr><name>week1_monday</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_delta_day_range</name><parameter_list>(<param><decl><type><name>int</name></type> <name>days</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>-<name>MAX_DELTA_DAYS</name> &lt;= <name>days</name> &amp;&amp; <name>days</name> &lt;= <name>MAX_DELTA_DAYS</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"days=%d; must have magnitude &lt;= %d"</expr></argument>,
<argument><expr><name>days</name></expr></argument>, <argument><expr><name>MAX_DELTA_DAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_date_args</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>day</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>year</name> &lt; <name>MINYEAR</name> || <name>year</name> &gt; <name>MAXYEAR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"year is out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>month</name> &lt; 1 || <name>month</name> &gt; 12</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"month must be in 1..12"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>day</name> &lt; 1 || <name>day</name> &gt; <call><name>days_in_month</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"day is out of range for month"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_time_args</name><parameter_list>(<param><decl><type><name>int</name></type> <name>h</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>us</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>h</name> &lt; 0 || <name>h</name> &gt; 23</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"hour must be in 0..23"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>m</name> &lt; 0 || <name>m</name> &gt; 59</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"minute must be in 0..59"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>s</name> &lt; 0 || <name>s</name> &gt; 59</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"second must be in 0..59"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>us</name> &lt; 0 || <name>us</name> &gt; 999999</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"microsecond must be in 0..999999"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>normalize_pair</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>hi</name></decl></param>, <param><decl><type><name>int</name> *</type><name>lo</name></decl></param>, <param><decl><type><name>int</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>factor</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>lo</name> != <name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>lo</name> &lt; 0 || *<name>lo</name> &gt;= <name>factor</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_hi</name> <init>= <expr><call><name>divmod</name><argument_list>(<argument><expr>*<name>lo</name></expr></argument>, <argument><expr><name>factor</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>new_hi</name> <init>= <expr>*<name>hi</name> + <name>num_hi</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>SIGNED_ADD_OVERFLOWED</name><argument_list>(<argument><expr><name>new_hi</name></expr></argument>, <argument><expr>*<name>hi</name></expr></argument>, <argument><expr><name>num_hi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>hi</name> = <name>new_hi</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= *<name>lo</name> &amp;&amp; *<name>lo</name> &lt; <name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>normalize_d_s_us</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>d</name></decl></param>, <param><decl><type><name>int</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name> *</type><name>us</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>*<name>us</name> &lt; 0 || *<name>us</name> &gt;= 1000000</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr>1000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>s</name> &lt; 0 || *<name>s</name> &gt;= 24*3600</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>24*3600</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= *<name>s</name> &amp;&amp; *<name>s</name> &lt; 24*3600</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= *<name>us</name> &amp;&amp; *<name>us</name> &lt; 1000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>normalize_y_m_d</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>y</name></decl></param>, <param><decl><type><name>int</name> *</type><name>m</name></decl></param>, <param><decl><type><name>int</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dim</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>m</name> &lt; 1 || *<name>m</name> &gt; 12</expr>)</condition><then> <block>{
<expr_stmt><expr>--*<name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++*<name>m</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>1 &lt;= *<name>m</name> &amp;&amp; *<name>m</name> &lt;= 12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dim</name> = <call><name>days_in_month</name><argument_list>(<argument><expr>*<name>y</name></expr></argument>, <argument><expr>*<name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>d</name> &lt; 1 || *<name>d</name> &gt; <name>dim</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>d</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>--*<name>m</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>m</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr>*<name>d</name> = <call><name>days_in_month</name><argument_list>(<argument><expr>*<name>y</name></expr></argument>, <argument><expr>*<name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr>--*<name>y</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>m</name> = 12</expr>;</expr_stmt>
<expr_stmt><expr>*<name>d</name> = 31</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>*<name>d</name> == <name>dim</name> + 1</expr>)</condition><then> <block>{
<expr_stmt><expr>++*<name>m</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>d</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>m</name> &gt; 12</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>m</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>++*<name>y</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ordinal</name> <init>= <expr><call><name>ymd_to_ord</name><argument_list>(<argument><expr>*<name>y</name></expr></argument>, <argument><expr>*<name>m</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> +
*<name>d</name> - 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ord_to_ymd</name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>m</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>d</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>normalize_date</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>year</name></decl></param>, <param><decl><type><name>int</name> *</type><name>month</name></decl></param>, <param><decl><type><name>int</name> *</type><name>day</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>normalize_y_m_d</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>MINYEAR</name> &lt;= *<name>year</name> &amp;&amp; *<name>year</name> &lt;= <name>MAXYEAR</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>,
<argument><expr>"date value out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>normalize_datetime</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>year</name></decl></param>, <param><decl><type><name>int</name> *</type><name>month</name></decl></param>, <param><decl><type><name>int</name> *</type><name>day</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>hour</name></decl></param>, <param><decl><type><name>int</name> *</type><name>minute</name></decl></param>, <param><decl><type><name>int</name> *</type><name>second</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>microsecond</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>microsecond</name></expr></argument>, <argument><expr>1000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr>60</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr>60</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>normalize_pair</name><argument_list>(<argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr>24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>normalize_date</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_alloc</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>aware</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = (<name>PyObject</name> *)
<call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><name>aware</name> ?
<sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_Time</name></expr></argument>)</argument_list></sizeof> :
<sizeof>sizeof<argument_list>(<argument><expr><name>_PyDateTime_BaseTime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_alloc</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>aware</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = (<name>PyObject</name> *)
<call><name>PyObject_MALLOC</name><argument_list>(<argument><expr><name>aware</name> ?
<sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_DateTime</name></expr></argument>)</argument_list></sizeof> :
<sizeof>sizeof<argument_list>(<argument><expr><name>_PyDateTime_BaseDateTime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyObject_INIT</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_date_fields</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>new_date_ex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>day</name></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call>(<name>PyDateTime_Date</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>set_date_fields</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>(<name>PyObject</name> *) <name>self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>new_date</name><parameter_list>(<param><type><name>year</name></type></param>, <param><type><name>month</name></type></param>, <param><type><name>day</name></type></param>)</parameter_list></cpp:macro> <cpp:value>new_date_ex(year, month, day, &amp;PyDateTime_DateType)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>new_datetime_ex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>year</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>day</name></decl></param>, <param><decl><type><name>int</name></type> <name>hour</name></decl></param>, <param><decl><type><name>int</name></type> <name>minute</name></decl></param>,
<param><decl><type><name>int</name></type> <name>second</name></decl></param>, <param><decl><type><name>int</name></type> <name>usecond</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>aware</name> <init>= <expr><name>tzinfo</name> != <name>Py_None</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call>(<name>PyDateTime_DateTime</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hastzinfo</name></name> = <name>aware</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_date_fields</name><argument_list>(<argument><expr>(<name>PyDateTime_Date</name> *)<name>self</name></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATE_SET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATE_SET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATE_SET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DATE_SET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>usecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>aware</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>tzinfo</name></name> = <name>tzinfo</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>new_datetime</name><parameter_list>(<param><type><name>y</name></type></param>, <param><type><name>m</name></type></param>, <param><type><name>d</name></type></param>, <param><type><name>hh</name></type></param>, <param><type><name>mm</name></type></param>, <param><type><name>ss</name></type></param>, <param><type><name>us</name></type></param>, <param><type><name>tzinfo</name></type></param>)</parameter_list></cpp:macro> <cpp:value>new_datetime_ex(y, m, d, hh, mm, ss, us, tzinfo, &amp;PyDateTime_DateTimeType)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>new_time_ex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hour</name></decl></param>, <param><decl><type><name>int</name></type> <name>minute</name></decl></param>, <param><decl><type><name>int</name></type> <name>second</name></decl></param>, <param><decl><type><name>int</name></type> <name>usecond</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>aware</name> <init>= <expr><name>tzinfo</name> != <name>Py_None</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call>(<name>PyDateTime_Time</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hastzinfo</name></name> = <name>aware</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_SET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_SET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_SET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIME_SET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>usecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>aware</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>tzinfo</name></name> = <name>tzinfo</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>new_time</name><parameter_list>(<param><type><name>hh</name></type></param>, <param><type><name>mm</name></type></param>, <param><type><name>ss</name></type></param>, <param><type><name>us</name></type></param>, <param><type><name>tzinfo</name></type></param>)</parameter_list></cpp:macro> <cpp:value>new_time_ex(hh, mm, ss, us, tzinfo, &amp;PyDateTime_TimeType)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>new_delta_ex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>days</name></decl></param>, <param><decl><type><name>int</name></type> <name>seconds</name></decl></param>, <param><decl><type><name>int</name></type> <name>microseconds</name></decl></param>, <param><decl><type><name>int</name></type> <name>normalize</name></decl></param>,
<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>normalize</name></expr>)</condition><then>
<expr_stmt><expr><call><name>normalize_d_s_us</name><argument_list>(<argument><expr>&amp;<name>days</name></expr></argument>, <argument><expr>&amp;<name>seconds</name></expr></argument>, <argument><expr>&amp;<name>microseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= <name>seconds</name> &amp;&amp; <name>seconds</name> &lt; 24*3600</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= <name>microseconds</name> &amp;&amp; <name>microseconds</name> &lt; 1000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>check_delta_day_range</name><argument_list>(<argument><expr><name>days</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call>(<name>PyDateTime_Delta</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>microseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *) <name>self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>new_delta</name><parameter_list>(<param><type><name>d</name></type></param>, <param><type><name>s</name></type></param>, <param><type><name>us</name></type></param>, <param><type><name>normalize</name></type></param>)</parameter_list></cpp:macro> <cpp:value>new_delta_ex(d, s, us, normalize, &amp;PyDateTime_DeltaType)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_tzinfo_subclass</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>p</name> == <name>Py_None</name> || <call><name>PyTZInfo_Check</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"tzinfo argument must be None or of a tzinfo subclass, "
"not type '%s'"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_tzinfo_method</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>char</name> *</type><name>methname</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfo</name> &amp;&amp; <name>methname</name> &amp;&amp; <name>tzinfoarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tzinfo</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>methname</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>get_tzinfo_member</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>tzinfo</name> = ((<name>PyDateTime_DateTime</name> *)<name>self</name>)-&gt;<name>tzinfo</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyTime_Check</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>tzinfo</name> = ((<name>PyDateTime_Time</name> *)<name>self</name>)-&gt;<name>tzinfo</name></expr>;</expr_stmt></then></if></else></if>
<return>return <expr><name>tzinfo</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_utc_tzinfo_method</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>none</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfo</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTZInfo_Check</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfoarg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>none</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> = <call><name>call_tzinfo_method</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>u</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then>
<else>else <if>if <condition>(<expr><name>u</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>none</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>days</name> <init>= <expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>days</name> &lt; -1 || <name>days</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>result</name> = 24*60</expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><name>days</name> * 24 * 3600 + <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>divmod</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr>60</expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ss</name> || <call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"tzinfo.%s() must return a "
"whole number of minutes"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"tzinfo.%s() must return None or "
"timedelta, not '%s'"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> &lt; -1439 || <name>result</name> &gt; 1439</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"tzinfo.%s() returned %d; must be in "
"-1439 .. 1439"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_utcoffset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>, <param><decl><type><name>int</name> *</type><name>none</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>call_utc_tzinfo_method</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr>"utcoffset"</expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>, <argument><expr><name>none</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>offset_as_timedelta</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfo</name> &amp;&amp; <name>name</name> &amp;&amp; <name>tzinfoarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tzinfo</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>call_utc_tzinfo_method</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>,
<argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>offset</name> &lt; 0 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>result</name> = <call><name>new_delta</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>offset</name> * 60</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>call_dst</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>, <param><decl><type><name>int</name> *</type><name>none</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>call_utc_tzinfo_method</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr>"dst"</expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>, <argument><expr><name>none</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_tzname</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfo</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfoarg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tzinfo</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr>"tzname"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <name>result</name> != <name>Py_None</name> &amp;&amp; ! <call><name>PyString_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"tzinfo.tzname() must "
"return None or a string, not '%s'"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<typedef>typedef <type><enum>enum <block>{
<decl><name>OFFSET_ERROR</name></decl>,
<decl><name>OFFSET_UNKNOWN</name></decl>,
<decl><name>OFFSET_NAIVE</name></decl>,
<decl><name>OFFSET_AWARE</name></decl>
}</block></enum></type> <name>naivety</name>;</typedef>
<function><type><specifier>static</specifier> <name>naivety</name></type>
<name>classify_utcoffset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>op</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>, <param><decl><type><name>int</name> *</type><name>offset</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfoarg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>offset</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>tzinfo</name> = <call><name>get_tzinfo_member</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tzinfo</name> == <name>Py_None</name></expr>)</condition><then>
<return>return <expr><name>OFFSET_NAIVE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>tzinfo</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>(<call><name>PyTime_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> || <call><name>PyDate_Check</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call>) ?
<name>OFFSET_NAIVE</name> : <name>OFFSET_UNKNOWN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>offset</name> = <call><name>call_utcoffset</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>offset</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>OFFSET_ERROR</name></expr>;</return></then></if>
<return>return <expr><name>none</name> ? <name>OFFSET_NAIVE</name> : <name>OFFSET_AWARE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>classify_two_utcoffsets</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>o1</name></decl></param>, <param><decl><type><name>int</name> *</type><name>offset1</name></decl></param>, <param><decl><type><name>naivety</name> *</type><name>n1</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>tzinfoarg1</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>o2</name></decl></param>, <param><decl><type><name>int</name> *</type><name>offset2</name></decl></param>, <param><decl><type><name>naivety</name> *</type><name>n2</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>tzinfoarg2</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>get_tzinfo_member</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> == <call><name>get_tzinfo_member</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>offset1</name> = *<name>offset2</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>n1</name> = *<name>n2</name> = <name>OFFSET_NAIVE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>n1</name> = <call><name>classify_utcoffset</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>tzinfoarg1</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>n1</name> == <name>OFFSET_ERROR</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr>*<name>n2</name> = <call><name>classify_utcoffset</name><argument_list>(<argument><expr><name>o2</name></expr></argument>, <argument><expr><name>tzinfoarg2</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>n2</name> == <name>OFFSET_ERROR</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>append_keyword_tzinfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>repr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tzinfo</name> == <name>Py_None</name></expr>)</condition><then>
<return>return <expr><name>repr</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call><index>[<expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call>-1</expr>]</index> == ')'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>repr</name> = <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>", tzinfo="</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>repr</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>repr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>format_ctime</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>date</name></decl></param>, <param><decl><type><name>int</name></type> <name>hours</name></decl></param>, <param><decl><type><name>int</name></type> <name>minutes</name></decl></param>, <param><decl><type><name>int</name></type> <name>seconds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>DayNames</name><index>[]</index></name> <init>= <expr><block>{
<expr>"Mon"</expr>, <expr>"Tue"</expr>, <expr>"Wed"</expr>, <expr>"Thu"</expr>, <expr>"Fri"</expr>, <expr>"Sat"</expr>, <expr>"Sun"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>MonthNames</name><index>[]</index></name> <init>= <expr><block>{
<expr>"Jan"</expr>, <expr>"Feb"</expr>, <expr>"Mar"</expr>, <expr>"Apr"</expr>, <expr>"May"</expr>, <expr>"Jun"</expr>,
<expr>"Jul"</expr>, <expr>"Aug"</expr>, <expr>"Sep"</expr>, <expr>"Oct"</expr>, <expr>"Nov"</expr>, <expr>"Dec"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wday</name> <init>= <expr><call><name>weekday</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s %s %2d %02d:%02d:%02d %04d"</expr></argument>,
<argument><expr><name><name>DayNames</name><index>[<expr><name>wday</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>MonthNames</name><index>[<expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>format_utcoffset</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>buflen</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minutes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buflen</name> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = <call><name>call_utcoffset</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf</name> = '\0'</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sign</name> = '+'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>sign</name> = '-'</expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = - <name>offset</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>hours</name> = <call><name>divmod</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr>60</expr></argument>, <argument><expr>&amp;<name>minutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%c%02d%s%02d"</expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>make_freplacement</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>object</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>freplacement</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTime_Check</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>, <argument><expr>"%06d"</expr></argument>, <argument><expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>, <argument><expr>"%06d"</expr></argument>, <argument><expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>, <argument><expr>"%06d"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>wrap_strftime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>object</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>format_len</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>timetuple</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfoarg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>zreplacement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>Zreplacement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>freplacement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>newfmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>totalnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>usednew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ptoappend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ntoappend</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>object</name> &amp;&amp; <name>format</name> &amp;&amp; <name>timetuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>long</name></type> <name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyyear</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>timetuple</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pyyear</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>pyyear</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>pyyear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pyyear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>year</name> &lt; 1900</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"year=%ld is before "
"1900; the datetime strftime() "
"methods require year &gt;= 1900"</expr></argument>,
<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block>
<if>if <condition>(<expr><name>format_len</name> &gt; <name>INT_MAX</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>totalnew</name> = <name>format_len</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>newfmt</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>totalnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newfmt</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>pnew</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usednew</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>pin</name> = <name>format</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>ch</name> = *<name>pin</name>++) != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr><name>ch</name> != '%'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ptoappend</name> = <name>pin</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ntoappend</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>ch</name> = *<name>pin</name>++) == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"strftime format "
"ends with raw %"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then>
<else>else <if>if <condition>(<expr><name>ch</name> == 'z'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>zreplacement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><call><name>get_tzinfo_member</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>zreplacement</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zreplacement</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Done</name>;</goto></then></if>
<if>if <condition>(<expr><name>tzinfo</name> != <name>Py_None</name> &amp;&amp; <name>tzinfo</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfoarg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>format_utcoffset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>,
<argument><expr><name>tzinfoarg</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zreplacement</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zreplacement</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Done</name>;</goto></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zreplacement</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptoappend</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ntoappend</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == 'Z'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>Zreplacement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><call><name>get_tzinfo_member</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Zreplacement</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Zreplacement</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Done</name>;</goto></then></if>
<if>if <condition>(<expr><name>tzinfo</name> != <name>Py_None</name> &amp;&amp; <name>tzinfo</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tzinfoarg</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>call_tzname</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>tzinfoarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == <name>NULL</name></expr>)</condition><then> <goto>goto <name>Done</name>;</goto></then></if>
<if>if <condition>(<expr><name>temp</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>Zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Zreplacement</name> = <call><name>PyObject_CallMethod</name><argument_list>(
<argument><expr><name>temp</name></expr></argument>, <argument><expr>"replace"</expr></argument>,
<argument><expr>"ss"</expr></argument>, <argument><expr>"%"</expr></argument>, <argument><expr>"%%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Zreplacement</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>Zreplacement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"tzname.replace() did not return a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Zreplacement</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptoappend</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>Zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ntoappend</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>Zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == 'f'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>freplacement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>freplacement</name> = <call><name>make_freplacement</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>freplacement</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>freplacement</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptoappend</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ntoappend</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ptoappend</name> = <name>pin</name> - 2</expr>;</expr_stmt>
<expr_stmt><expr><name>ntoappend</name> = 2</expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptoappend</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ntoappend</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ntoappend</name> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<while>while <condition>(<expr><name>usednew</name> + <name>ntoappend</name> &gt; <name>totalnew</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>bigger</name> <init>= <expr><name>totalnew</name> &lt;&lt; 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>bigger</name> &gt;&gt; 1) != <name>totalnew</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>newfmt</name></expr></argument>, <argument><expr><name>bigger</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>totalnew</name> = <name>bigger</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pnew</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>)</argument_list></call> + <name>usednew</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pnew</name></expr></argument>, <argument><expr><name>ptoappend</name></expr></argument>, <argument><expr><name>ntoappend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pnew</name> += <name>ntoappend</name></expr>;</expr_stmt>
<expr_stmt><expr><name>usednew</name> += <name>ntoappend</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usednew</name> &lt;= <name>totalnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name>newfmt</name></expr></argument>, <argument><expr><name>usednew</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>time</name> <init>= <expr><call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"time"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>time</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr>"strftime"</expr></argument>, <argument><expr>"OO"</expr></argument>,
<argument><expr><name>newfmt</name></expr></argument>, <argument><expr><name>timetuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<label><name>Done</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>freplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>Zreplacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>newfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>isoformat_date</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>dt</name></decl></param>, <param><decl><type><name>char</name></type> <name><name>buffer</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>bufflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufflen</name></expr></argument>,
<argument><expr>"%04d-%02d-%02d"</expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buffer</name> + <name>x</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>isoformat_time</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>dt</name></decl></param>, <param><decl><type><name>char</name></type> <name><name>buffer</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>bufflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufflen</name></expr></argument>,
<argument><expr>"%02d:%02d:%02d"</expr></argument>,
<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>us</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name> + 8</expr></argument>, <argument><expr><name>bufflen</name> - 8</expr></argument>, <argument><expr>".%06d"</expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_time</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>time</name> <init>= <expr><call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"time"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>time</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr>"time"</expr></argument>, <argument><expr>"()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>build_struct_time</name><parameter_list>(<param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>d</name></decl></param>, <param><decl><type><name>int</name></type> <name>hh</name></decl></param>, <param><decl><type><name>int</name></type> <name>mm</name></decl></param>, <param><decl><type><name>int</name></type> <name>ss</name></decl></param>, <param><decl><type><name>int</name></type> <name>dstflag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>time</name> = <call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"time"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>time</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr>"struct_time"</expr></argument>,
<argument><expr>"((iiiiiiiii))"</expr></argument>,
<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>,
<argument><expr><call><name>weekday</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>days_before_month</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> + <name>d</name></expr></argument>,
<argument><expr><name>dstflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>diff_to_bool</name><parameter_list>(<param><decl><type><name>int</name></type> <name>diff</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>istrue</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
<case>case <expr><name>Py_EQ</name></expr>:
<expr_stmt><expr><name>istrue</name> = <name>diff</name> == 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_NE</name></expr>:
<expr_stmt><expr><name>istrue</name> = <name>diff</name> != 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_LE</name></expr>:
<expr_stmt><expr><name>istrue</name> = <name>diff</name> &lt;= 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_GE</name></expr>:
<expr_stmt><expr><name>istrue</name> = <name>diff</name> &gt;= 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_LT</name></expr>:
<expr_stmt><expr><name>istrue</name> = <name>diff</name> &lt; 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>Py_GT</name></expr>:
<expr_stmt><expr><name>istrue</name> = <name>diff</name> &gt; 0</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! "op unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>istrue</name> = 0</expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name>result</name> = <name>istrue</name> ? <name>Py_True</name> : <name>Py_False</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cmperror</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>a</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't compare %s to %s"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_us</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_ms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_second</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_minute</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_hour</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_day</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>us_per_week</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>seconds_per_day</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_to_microseconds</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x1</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x1</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>x2</name> = <call><name>PyNumber_Multiply</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>seconds_per_day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x2</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x1</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>x3</name> = <call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x3</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> = <name>x2</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> = <call><name>PyNumber_Multiply</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>us_per_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x1</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x3</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x2</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>Done</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>microseconds_to_delta_ex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>pyus</name></decl></param>, <param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tuple</name> = <call><name>PyNumber_Divmod</name><argument_list>(<argument><expr><name>pyus</name></expr></argument>, <argument><expr><name>us_per_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>num</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>temp</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= <name>temp</name> &amp;&amp; <name>temp</name> &lt; 1000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> = (<name>int</name>)<name>temp</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>us</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>num</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tuple</name> = <call><name>PyNumber_Divmod</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>seconds_per_day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>temp</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0 &lt;= <name>temp</name> &amp;&amp; <name>temp</name> &lt; 24*3600</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = (<name>int</name>)<name>temp</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>num</name> = <call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>num</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>d</name> = (<name>int</name>)<name>temp</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>long</name>)<name>d</name> != <name>temp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>, <argument><expr>"normalized days too "
"large to fit in a C int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>new_delta_ex</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>Done</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>microseconds_to_delta</name><parameter_list>(<param><type><name>pymicros</name></type></param>)</parameter_list></cpp:macro> <cpp:value>microseconds_to_delta_ex(pymicros, &amp;PyDateTime_DeltaType)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>multiply_int_timedelta</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>intobj</name></decl></param>, <param><decl><type><name>PyDateTime_Delta</name> *</type><name>delta</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyus_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyus_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pyus_in</name> = <call><name>delta_to_microseconds</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pyus_in</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pyus_out</name> = <call><name>PyNumber_Multiply</name><argument_list>(<argument><expr><name>pyus_in</name></expr></argument>, <argument><expr><name>intobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pyus_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pyus_out</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>microseconds_to_delta</name><argument_list>(<argument><expr><name>pyus_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pyus_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>divide_timedelta_int</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>delta</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>intobj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyus_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyus_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pyus_in</name> = <call><name>delta_to_microseconds</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pyus_in</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>pyus_out</name> = <call><name>PyNumber_FloorDivide</name><argument_list>(<argument><expr><name>pyus_in</name></expr></argument>, <argument><expr><name>intobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pyus_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pyus_out</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>microseconds_to_delta</name><argument_list>(<argument><expr><name>pyus_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pyus_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_add</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>Py_NotImplemented</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> + <call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> + <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>microseconds</name> <init>= <expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> +
<call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>new_delta</name><argument_list>(<argument><expr><name>days</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>microseconds</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>Py_NotImplemented</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_negative</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>new_delta</name><argument_list>(<argument><expr>-<call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>-<call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>-<call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_positive</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>new_delta</name><argument_list>(<argument><expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_abs</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>delta_negative</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <call><name>delta_positive</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_subtract</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>Py_NotImplemented</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>minus_right</name> <init>= <expr><call><name>PyNumber_Negative</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>minus_right</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>delta_add</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>minus_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>minus_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>Py_NotImplemented</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_richcompare</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr>42</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>diff</name> = <call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diff</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>diff</name> = <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diff</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>diff</name> = <call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> -
<call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name> || <name>op</name> == <name>Py_NE</name></expr>)</condition><then>
<expr_stmt><expr><name>diff</name> = 1</expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>cmperror</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<return>return <expr><call><name>diff_to_bool</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>delta_getstate</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>delta_hash</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>hashcode</name></name> == -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><call><name>delta_getstate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>temp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>self</name>-&gt;<name>hashcode</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_multiply</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>Py_NotImplemented</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>multiply_int_timedelta</name><argument_list>(<argument><expr><name>right</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *) <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>multiply_int_timedelta</name><argument_list>(<argument><expr><name>left</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *) <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>result</name> == <name>Py_NotImplemented</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_divide</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>Py_NotImplemented</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>divide_timedelta_int</name><argument_list>(
<argument><expr>(<name>PyDateTime_Delta</name> *)<name>left</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>Py_NotImplemented</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>accum</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>tag</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>sofar</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>num</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>factor</name></decl></param>,
<param><decl><type><name>double</name> *</type><name>leftover</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>prod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>sum</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prod</name> = <call><name>PyNumber_Multiply</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prod</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>sum</name> = <call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sum</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>dnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fracpart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>intpart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dnum</name> = <call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dnum</name> == -1.0 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>fracpart</name> = <call><name>modf</name><argument_list>(<argument><expr><name>dnum</name></expr></argument>, <argument><expr>&amp;<name>intpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyLong_FromDouble</name><argument_list>(<argument><expr><name>intpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>prod</name> = <call><name>PyNumber_Multiply</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prod</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>sum</name> = <call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>sofar</name></expr></argument>, <argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sum</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>fracpart</name> == 0.0</expr>)</condition><then>
<return>return <expr><name>sum</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call> || <call><name>PyLong_Check</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>dnum</name> = (<name>double</name>)<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>dnum</name> = <call><name>PyLong_AsDouble</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>dnum</name> *= <name>fracpart</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fracpart</name> = <call><name>modf</name><argument_list>(<argument><expr><name>dnum</name></expr></argument>, <argument><expr>&amp;<name>intpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyLong_FromDouble</name><argument_list>(<argument><expr><name>intpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>y</name> = <call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>leftover</name> += <name>fracpart</name></expr>;</expr_stmt>
<return>return <expr><name>y</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"unsupported type for timedelta %s component: %s"</expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>day</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>second</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>us</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>minute</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>hour</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>week</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>y</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>leftover_us</name> <init>= <expr>0.0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{
<expr>"days"</expr>, <expr>"seconds"</expr>, <expr>"microseconds"</expr>, <expr>"milliseconds"</expr>,
<expr>"minutes"</expr>, <expr>"hours"</expr>, <expr>"weeks"</expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|OOOOOOO:__new__"</expr></argument>,
<argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>day</name></expr></argument>, <argument><expr>&amp;<name>second</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>,
<argument><expr>&amp;<name>ms</name></expr></argument>, <argument><expr>&amp;<name>minute</name></expr></argument>, <argument><expr>&amp;<name>hour</name></expr></argument>, <argument><expr>&amp;<name>week</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<expr_stmt><expr><name>x</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>Done</name>;</goto></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEANUP</name></cpp:macro> <cpp:value>Py_DECREF(x); x = y; if (x == NULL) goto Done</cpp:value></cpp:define>
<if>if <condition>(<expr><name>us</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"microseconds"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>us_per_us</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ms</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"milliseconds"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>, <argument><expr><name>us_per_ms</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>second</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"seconds"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>us_per_second</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>minute</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"minutes"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>us_per_minute</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>hour</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"hours"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>us_per_hour</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>day</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"days"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>us_per_day</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>week</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>y</name> = <call><name>accum</name><argument_list>(<argument><expr>"weeks"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>week</name></expr></argument>, <argument><expr><name>us_per_week</name></expr></argument>, <argument><expr>&amp;<name>leftover_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>leftover_us</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><call><name>PyLong_FromLong</name><argument_list>(<argument><expr><call><name>round_to_long</name><argument_list>(<argument><expr><name>leftover_us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>temp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Done</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>y</name> = <call><name>PyNumber_Add</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CLEANUP</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>self</name> = <call><name>microseconds_to_delta_ex</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>Done</name>:</label>
<return>return <expr><name>self</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLEANUP</name></cpp:undef>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>delta_nonzero</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> != 0
|| <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> != 0
|| <call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> != 0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_repr</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"%s(%d, %d, %d)"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>,
<argument><expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"%s(%d, %d)"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>,
<argument><expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr>"%s(%d)"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>,
<argument><expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_str</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minutes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pbuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>minutes</name> = <call><name>divmod</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr>60</expr></argument>, <argument><expr>&amp;<name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hours</name> = <call><name>divmod</name><argument_list>(<argument><expr><name>minutes</name></expr></argument>, <argument><expr>60</expr></argument>, <argument><expr>&amp;<name>minutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>days</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%d day%s, "</expr></argument>, <argument><expr><name>days</name></expr></argument>,
<argument><expr>(<name>days</name> == 1 || <name>days</name> == -1) ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0 || (<name>size_t</name>)<name>n</name> &gt;= <name>buflen</name></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><name>pbuf</name> += <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> -= (<name>size_t</name>)<name>n</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%d:%02d:%02d"</expr></argument>,
<argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0 || (<name>size_t</name>)<name>n</name> &gt;= <name>buflen</name></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><name>pbuf</name> += <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> -= (<name>size_t</name>)<name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>us</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>".%06d"</expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0 || (<name>size_t</name>)<name>n</name> &gt;= <name>buflen</name></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><name>pbuf</name> += <name>n</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pbuf</name> - <name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr>"goofy result from PyOS_snprintf"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_getstate</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iii"</expr></argument>, <argument><expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>delta_reduce</name><parameter_list>(<param><decl><type><name>PyDateTime_Delta</name>*</type> <name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ON"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>delta_getstate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<param><type><name>field</name></type></param>)</parameter_list></cpp:macro> <cpp:value>offsetof(PyDateTime_Delta, field)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>delta_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"days"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>days</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Number of days."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"seconds"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Number of seconds (&gt;= 0 and less than 1 day)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"microseconds"</expr>, <expr><name>T_INT</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>microseconds</name></expr></argument>)</argument_list></call></expr>, <expr><name>READONLY</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Number of microseconds (&gt;= 0 and less than 1 second)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>delta_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>delta_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"__reduce__() -&gt; (cls, state)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>delta_doc</name><index>[]</index></name> <init>=
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"Difference between two datetime values."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>delta_as_number</name> <init>= <expr><block>{
<expr><name>delta_add</name></expr>,
<expr><name>delta_subtract</name></expr>,
<expr><name>delta_multiply</name></expr>,
<expr><name>delta_divide</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>unaryfunc</name>)<name>delta_negative</name></expr>,
<expr>(<name>unaryfunc</name>)<name>delta_positive</name></expr>,
<expr>(<name>unaryfunc</name>)<name>delta_abs</name></expr>,
<expr>(<name>inquiry</name>)<name>delta_nonzero</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>delta_divide</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_DeltaType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"datetime.timedelta"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_Delta</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>delta_repr</name></expr>,
<expr>&amp;<name>delta_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>delta_hash</name></expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>delta_str</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name> |
<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr><name>delta_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>richcmpfunc</name>)<name>delta_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>delta_methods</name></expr>,
<expr><name>delta_members</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>delta_new</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_year</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_month</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_day</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>date_getset</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"year"</expr>, <expr>(<name>getter</name>)<name>date_year</name></expr>}</block></expr>,
<expr><block>{<expr>"month"</expr>, <expr>(<name>getter</name>)<name>date_month</name></expr>}</block></expr>,
<expr><block>{<expr>"day"</expr>, <expr>(<name>getter</name>)<name>date_day</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>date_kws</name><index>[]</index></name> <init>= <expr><block>{<expr>"year"</expr>, <expr>"month"</expr>, <expr>"day"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 1 &amp;&amp;
<call><name>PyString_Check</name><argument_list>(<argument><expr><name>state</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> == <name>_PyDateTime_DATE_DATASIZE</name> &amp;&amp;
<call><name>MONTH_IS_SANE</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDateTime_Date</name> *</type><name>me</name></decl>;</decl_stmt>
<expr_stmt><expr><name>me</name> = <call>(<name>PyDateTime_Date</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>me</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pdata</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>me</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>_PyDateTime_DATE_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>hashcode</name></name> = -1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>me</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"iii"</expr></argument>, <argument><expr><name>date_kws</name></expr></argument>,
<argument><expr>&amp;<name>year</name></expr></argument>, <argument><expr>&amp;<name>month</name></expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>check_date_args</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>new_date_ex</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_local_from_time_t</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>double</name></type> <name>ts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tm</name> *</type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> = <call><name>_PyTime_DoubleToTimet</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>t</name> == (<name>time_t</name>)-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tm</name> = <call><name>localtime</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tm</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"iii"</expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_year</name></name> + 1900</expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_mon</name></name> + 1</expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"timestamp out of range for "
"platform localtime() function"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_today</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>time</name> = <call><name>time_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>time</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"fromtimestamp"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_fromtimestamp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"d:fromtimestamp"</expr></argument>, <argument><expr>&amp;<name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>date_local_from_time_t</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_fromordinal</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ordinal</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:fromordinal"</expr></argument>, <argument><expr>&amp;<name>ordinal</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ordinal</name> &lt; 1</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"ordinal must be "
"&gt;= 1"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>ord_to_ymd</name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>, <argument><expr>&amp;<name>year</name></expr></argument>, <argument><expr>&amp;<name>month</name></expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"iii"</expr></argument>,
<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>add_date_timedelta</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>date</name></decl></param>, <param><decl><type><name>PyDateTime_Delta</name> *</type><name>delta</name></decl></param>, <param><decl><type><name>int</name></type> <name>negate</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deltadays</name> <init>= <expr><call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> + (<name>negate</name> ? -<name>deltadays</name> : <name>deltadays</name>)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>normalize_date</name><argument_list>(<argument><expr>&amp;<name>year</name></expr></argument>, <argument><expr>&amp;<name>month</name></expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>new_date</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_add</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> || <call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDate_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>add_date_timedelta</name><argument_list>(<argument><expr>(<name>PyDateTime_Date</name> *) <name>left</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *) <name>right</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>add_date_timedelta</name><argument_list>(<argument><expr>(<name>PyDateTime_Date</name> *) <name>right</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *) <name>left</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_subtract</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> || <call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDate_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyDate_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>left_ord</name> <init>= <expr><call><name>ymd_to_ord</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_ord</name> <init>= <expr><call><name>ymd_to_ord</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>new_delta</name><argument_list>(<argument><expr><name>left_ord</name> - <name>right_ord</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>add_date_timedelta</name><argument_list>(<argument><expr>(<name>PyDateTime_Date</name> *) <name>left</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *) <name>right</name></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_repr</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>1028</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>type_name</name> = <call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s(%d, %d, %d)"</expr></argument>,
<argument><expr><name>type_name</name></expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_isoformat</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>isoformat_date</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_str</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>"isoformat"</expr></argument>, <argument><expr>"()"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_ctime</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>format_ctime</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_strftime</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>format_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"format"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"s#:strftime"</expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr>&amp;<name>format_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>"timetuple"</expr></argument>, <argument><expr>"()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>wrap_strftime</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_format</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>format</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O:__format__"</expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyObject_Unicode</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"__format__ expects str or unicode, not %.200s"</expr></argument>,
<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>"strftime"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_isoweekday</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dow</name> <init>= <expr><call><name>weekday</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>dow</name> + 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_isocalendar</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>week1_monday</name> <init>= <expr><call><name>iso_week1_monday</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>today</name> <init>= <expr><call><name>ymd_to_ord</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>week</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>;</decl_stmt>
<expr_stmt><expr><name>week</name> = <call><name>divmod</name><argument_list>(<argument><expr><name>today</name> - <name>week1_monday</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>week</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>year</name></expr>;</expr_stmt>
<expr_stmt><expr><name>week1_monday</name> = <call><name>iso_week1_monday</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>week</name> = <call><name>divmod</name><argument_list>(<argument><expr><name>today</name> - <name>week1_monday</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>week</name> &gt;= 52 &amp;&amp; <name>today</name> &gt;= <call><name>iso_week1_monday</name><argument_list>(<argument><expr><name>year</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>year</name></expr>;</expr_stmt>
<expr_stmt><expr><name>week</name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iii"</expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>week</name> + 1</expr></argument>, <argument><expr><name>day</name> + 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_richcompare</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr>42</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDate_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>diff</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>((<name>PyDateTime_Date</name> *)<name>other</name>)-&gt;<name>data</name></expr></argument>,
<argument><expr><name>_PyDateTime_DATE_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>"timetuple"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name> || <name>op</name> == <name>Py_NE</name></expr>)</condition><then>
<expr_stmt><expr><name>diff</name> = 1</expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>cmperror</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>
<return>return <expr><call><name>diff_to_bool</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_timetuple</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>build_struct_time</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_replace</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|iii:replace"</expr></argument>, <argument><expr><name>date_kws</name></expr></argument>,
<argument><expr>&amp;<name>year</name></expr></argument>, <argument><expr>&amp;<name>month</name></expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iii"</expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>clone</name> = <call><name>date_new</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>clone</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>date_getstate</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>date_hash</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>hashcode</name></name> == -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><call><name>date_getstate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>temp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>self</name>-&gt;<name>hashcode</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_toordinal</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>ymd_to_ord</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_weekday</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dow</name> <init>= <expr><call><name>weekday</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>dow</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_getstate</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(
<argument><expr>"(N)"</expr></argument>,
<argument><expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>_PyDateTime_DATE_DATASIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>date_reduce</name><parameter_list>(<param><decl><type><name>PyDateTime_Date</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ON)"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>date_getstate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>date_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"fromtimestamp"</expr>, <expr>(<name>PyCFunction</name>)<name>date_fromtimestamp</name></expr>, <expr><name>METH_VARARGS</name> |
<name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"timestamp -&gt; local date from a POSIX timestamp (like "
"time.time())."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"fromordinal"</expr>, <expr>(<name>PyCFunction</name>)<name>date_fromordinal</name></expr>, <expr><name>METH_VARARGS</name> |
<name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"int -&gt; date corresponding to a proleptic Gregorian "
"ordinal."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"today"</expr>, <expr>(<name>PyCFunction</name>)<name>date_today</name></expr>, <expr><name>METH_NOARGS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Current date or datetime: same as "
"self.__class__.fromtimestamp(time.time())."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ctime"</expr>, <expr>(<name>PyCFunction</name>)<name>date_ctime</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return ctime() style string."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"strftime"</expr>, <expr>(<name>PyCFunction</name>)<name>date_strftime</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"format -&gt; strftime() style string."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"__format__"</expr>, <expr>(<name>PyCFunction</name>)<name>date_format</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Formats self with strftime."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"timetuple"</expr>, <expr>(<name>PyCFunction</name>)<name>date_timetuple</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return time tuple, compatible with time.localtime()."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"isocalendar"</expr>, <expr>(<name>PyCFunction</name>)<name>date_isocalendar</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return a 3-tuple containing ISO year, week number, and "
"weekday."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"isoformat"</expr>, <expr>(<name>PyCFunction</name>)<name>date_isoformat</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return string in ISO 8601 format, YYYY-MM-DD."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"isoweekday"</expr>, <expr>(<name>PyCFunction</name>)<name>date_isoweekday</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return the day of the week represented by the date.\n"
"Monday == 1 ... Sunday == 7"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"toordinal"</expr>, <expr>(<name>PyCFunction</name>)<name>date_toordinal</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return proleptic Gregorian ordinal. January 1 of year "
"1 is day 1."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"weekday"</expr>, <expr>(<name>PyCFunction</name>)<name>date_weekday</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return the day of the week represented by the date.\n"
"Monday == 0 ... Sunday == 6"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"replace"</expr>, <expr>(<name>PyCFunction</name>)<name>date_replace</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return date with new specified fields."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>date_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"__reduce__() -&gt; (cls, state)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>date_doc</name><index>[]</index></name> <init>=
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"date(year, month, day) --&gt; date object"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>date_as_number</name> <init>= <expr><block>{
<expr><name>date_add</name></expr>,
<expr><name>date_subtract</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PyDateTime_DateType</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"datetime.date"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_Date</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>date_repr</name></expr>,
<expr>&amp;<name>date_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>date_hash</name></expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>date_str</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name> |
<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr><name>date_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>richcmpfunc</name>)<name>date_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>date_methods</name></expr>,
<expr>0</expr>,
<expr><name>date_getset</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>date_new</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tzinfo_nogo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>methodname</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_NotImplementedError</name></expr></argument>,
<argument><expr>"a tzinfo subclass must implement %s()"</expr></argument>,
<argument><expr><name>methodname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tzinfo_tzname</name><parameter_list>(<param><decl><type><name>PyDateTime_TZInfo</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dt</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>tzinfo_nogo</name><argument_list>(<argument><expr>"tzname"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tzinfo_utcoffset</name><parameter_list>(<param><decl><type><name>PyDateTime_TZInfo</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dt</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>tzinfo_nogo</name><argument_list>(<argument><expr>"utcoffset"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tzinfo_dst</name><parameter_list>(<param><decl><type><name>PyDateTime_TZInfo</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dt</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>tzinfo_nogo</name><argument_list>(<argument><expr>"dst"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tzinfo_fromutc</name><parameter_list>(<param><decl><type><name>PyDateTime_TZInfo</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyDateTime_DateTime</name> *</type><name>dt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"fromutc: argument must be a datetime"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>! <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call> || <name><name>dt</name>-&gt;<name>tzinfo</name></name> != (<name>PyObject</name> *)<name>self</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"fromutc: dt.tzinfo "
"is not self"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>off</name> = <call><name>call_utcoffset</name><argument_list>(<argument><expr><name><name>dt</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>dt</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>off</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"fromutc: non-None "
"utcoffset() result required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dst</name> = <call><name>call_dst</name><argument_list>(<argument><expr><name><name>dt</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>dt</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dst</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"fromutc: non-None "
"dst() result required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>y</name> = <call><name>GET_YEAR</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>GET_MONTH</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <call><name>GET_DAY</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hh</name> = <call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> = <call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> = <call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> = <call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> = <name>off</name> - <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> += <name>delta</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mm</name> &lt; 0 || <name>mm</name> &gt;= 60) &amp;&amp;
<call><name>normalize_datetime</name><argument_list>(<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>hh</name></expr></argument>, <argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>new_datetime</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<expr_stmt><expr><name>dst</name> = <call><name>call_dst</name><argument_list>(<argument><expr><name><name>dt</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dst</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then>
<goto>goto <name>Inconsistent</name>;</goto></then></if>
<if>if <condition>(<expr><name>dst</name> == 0</expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<expr_stmt><expr><name>mm</name> += <name>dst</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mm</name> &lt; 0 || <name>mm</name> &gt;= 60) &amp;&amp;
<call><name>normalize_datetime</name><argument_list>(<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>hh</name></expr></argument>, <argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<goto>goto <name>Fail</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>new_datetime</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<label><name>Inconsistent</name>:</label>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"fromutc: tz.dst() gave"
"inconsistent results; cannot convert"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>Fail</name>:</label>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>tzinfo_reduce</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>, *<decl><type ref="prev"/><name>state</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>getinitargs</name></decl>, *<decl><type ref="prev"/><name>getstate</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>getinitargs</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"__getinitargs__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>getinitargs</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>args</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>getinitargs</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>getinitargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>args</name> = <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>getstate</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"__getstate__"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>getstate</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>state</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>getstate</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>getstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>PyObject</name> **</type><name>dictptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> = <name>Py_None</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dictptr</name> = <call><name>_PyObject_GetDictPtr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dictptr</name> &amp;&amp; *<name>dictptr</name> &amp;&amp; <call><name>PyDict_Size</name><argument_list>(<argument><expr>*<name>dictptr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>state</name> = *<name>dictptr</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ON)"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ONN)"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>tzinfo_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"tzname"</expr>, <expr>(<name>PyCFunction</name>)<name>tzinfo_tzname</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"datetime -&gt; string name of time zone."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"utcoffset"</expr>, <expr>(<name>PyCFunction</name>)<name>tzinfo_utcoffset</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"datetime -&gt; minutes east of UTC (negative for "
"west of UTC)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"dst"</expr>, <expr>(<name>PyCFunction</name>)<name>tzinfo_dst</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"datetime -&gt; DST offset in minutes east of UTC."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"fromutc"</expr>, <expr>(<name>PyCFunction</name>)<name>tzinfo_fromutc</name></expr>, <expr><name>METH_O</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"datetime in UTC -&gt; datetime in local time."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>tzinfo_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"-&gt; (cls, state)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tzinfo_doc</name><index>[]</index></name> <init>=
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"Abstract base class for time zone info objects."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>PyDateTime_TZInfoType</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"datetime.tzinfo"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_TZInfo</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name> |
<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr><name>tzinfo_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>tzinfo_methods</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyType_GenericNew</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_hour</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_minute</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>py_time_second</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_microsecond</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_tzinfo</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>time_getset</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"hour"</expr>, <expr>(<name>getter</name>)<name>time_hour</name></expr>}</block></expr>,
<expr><block>{<expr>"minute"</expr>, <expr>(<name>getter</name>)<name>time_minute</name></expr>}</block></expr>,
<expr><block>{<expr>"second"</expr>, <expr>(<name>getter</name>)<name>py_time_second</name></expr>}</block></expr>,
<expr><block>{<expr>"microsecond"</expr>, <expr>(<name>getter</name>)<name>time_microsecond</name></expr>}</block></expr>,
<expr><block>{<expr>"tzinfo"</expr>, <expr>(<name>getter</name>)<name>time_tzinfo</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>time_kws</name><index>[]</index></name> <init>= <expr><block>{<expr>"hour"</expr>, <expr>"minute"</expr>, <expr>"second"</expr>, <expr>"microsecond"</expr>,
<expr>"tzinfo"</expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>usecond</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt;= 1 &amp;&amp;
<call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt;= 2 &amp;&amp;
<call><name>PyString_Check</name><argument_list>(<argument><expr><name>state</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> == <name>_PyDateTime_TIME_DATASIZE</name> &amp;&amp;
(<call>(<name>unsigned</name> <name>char</name>) <argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call>) &lt; 24</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDateTime_Time</name> *</type><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>aware</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>tzinfo</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bad "
"tzinfo state arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>aware</name> = <call>(<name>char</name>)<argument_list>(<argument><expr><name>tzinfo</name> != <name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>me</name> = <call>(<name>PyDateTime_Time</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>me</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pdata</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>me</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>_PyDateTime_TIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>hashcode</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>hastzinfo</name></name> = <name>aware</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>aware</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>tzinfo</name></name> = <name>tzinfo</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>me</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|iiiiO"</expr></argument>, <argument><expr><name>time_kws</name></expr></argument>,
<argument><expr>&amp;<name>hour</name></expr></argument>, <argument><expr>&amp;<name>minute</name></expr></argument>, <argument><expr>&amp;<name>second</name></expr></argument>, <argument><expr>&amp;<name>usecond</name></expr></argument>,
<argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>check_time_args</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>usecond</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>new_time_ex</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>usecond</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>time_dealloc</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_utcoffset</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>offset_as_timedelta</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>,
<argument><expr>"utcoffset"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_dst</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>offset_as_timedelta</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>,
<argument><expr>"dst"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_tzname</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>call_tzname</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_repr</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_name</name> <init>= <expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>us</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s(%d, %d, %d, %d)"</expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>s</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s(%d, %d, %d)"</expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s(%d, %d)"</expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>append_keyword_tzinfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_str</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>"isoformat"</expr></argument>, <argument><expr>"()"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_isoformat</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDateTime_DateTime</name></type> <name>datetime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyDateTime_DateTime</name> *</type><name>pdatetime</name> <init>= <expr>&amp;<name>datetime</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pdatetime</name>-&gt;<name>data</name></name> + <name>_PyDateTime_DATE_DATASIZE</name></expr></argument>,
<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>_PyDateTime_TIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isoformat_time</name><argument_list>(<argument><expr><name>pdatetime</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name> || ! <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> || <name><name>self</name>-&gt;<name>tzinfo</name></name> == <name>Py_None</name></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>format_utcoffset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_strftime</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>format_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"format"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"s#:strftime"</expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr>&amp;<name>format_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iiiiiiiii"</expr></argument>,
<argument><expr>1900</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call> == 9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>wrap_strftime</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_richcompare</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>naivety</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset1</name></decl>, <decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyTime_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name> || <name>op</name> == <name>Py_NE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>op</name> == <name>Py_EQ</name> ? <name>Py_False</name> : <name>Py_True</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>cmperror</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>classify_two_utcoffsets</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>&amp;<name>offset1</name></expr></argument>, <argument><expr>&amp;<name>n1</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>,
<argument><expr><name>other</name></expr></argument>, <argument><expr>&amp;<name>offset2</name></expr></argument>, <argument><expr>&amp;<name>n2</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n1</name> != <name>OFFSET_UNKNOWN</name> &amp;&amp; <name>n2</name> != <name>OFFSET_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n1</name> == <name>n2</name> &amp;&amp; <name>offset1</name> == <name>offset2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>diff</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>((<name>PyDateTime_Time</name> *)<name>other</name>)-&gt;<name>data</name></expr></argument>,
<argument><expr><name>_PyDateTime_TIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>diff_to_bool</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n1</name> == <name>OFFSET_AWARE</name> &amp;&amp; <name>n2</name> == <name>OFFSET_AWARE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset1</name> != <name>offset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset1</name> = <call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> * 3600 +
(<call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>offset1</name>) * 60 +
<call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset2</name> = <call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> * 3600 +
(<call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call> - <name>offset2</name>) * 60 +
<call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> = <name>offset1</name> - <name>offset2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diff</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>diff</name> = <call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> -
<call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>diff_to_bool</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n1</name> != <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't compare offset-naive and "
"offset-aware times"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>time_hash</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>hashcode</name></name> == -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>naivety</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = <call><name>classify_utcoffset</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> != <name>OFFSET_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == <name>OFFSET_ERROR</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>offset</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>temp</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>_PyDateTime_TIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minute</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> == <name>OFFSET_AWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hour</name> = <call><name>divmod</name><argument_list>(<argument><expr><call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> * 60 +
<call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>offset</name></expr></argument>,
<argument><expr>60</expr></argument>,
<argument><expr>&amp;<name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>0 &lt;= <name>hour</name> &amp;&amp; <name>hour</name> &lt; 24</expr>)</condition><then>
<expr_stmt><expr><name>temp</name> = <call><name>new_time</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>,
<argument><expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>temp</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iiii"</expr></argument>,
<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>,
<argument><expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>temp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>self</name>-&gt;<name>hashcode</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_replace</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hh</name> <init>= <expr><call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mm</name> <init>= <expr><call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|iiiiO:replace"</expr></argument>,
<argument><expr><name>time_kws</name></expr></argument>,
<argument><expr>&amp;<name>hh</name></expr></argument>, <argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>, <argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iiiiO"</expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>clone</name> = <call><name>time_new</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>clone</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>time_nonzero</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> || <call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>offset</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>self</name>-&gt;<name>tzinfo</name></name> != <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>offset</name> = <call><name>call_utcoffset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
}</block></then></if>
<return>return <expr>(<call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>offset</name> + <call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>*60) != 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_getstate</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>basestate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>basestate</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>_PyDateTime_TIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>basestate</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> || <name><name>self</name>-&gt;<name>tzinfo</name></name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>basestate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>basestate</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>basestate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>time_reduce</name><parameter_list>(<param><decl><type><name>PyDateTime_Time</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ON)"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>time_getstate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>time_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"isoformat"</expr>, <expr>(<name>PyCFunction</name>)<name>time_isoformat</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return string in ISO 8601 format, HH:MM:SS[.mmmmmm]"
"[+HH:MM]."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"strftime"</expr>, <expr>(<name>PyCFunction</name>)<name>time_strftime</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"format -&gt; strftime() style string."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"__format__"</expr>, <expr>(<name>PyCFunction</name>)<name>date_format</name></expr>, <expr><name>METH_VARARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Formats self with strftime."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"utcoffset"</expr>, <expr>(<name>PyCFunction</name>)<name>time_utcoffset</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return self.tzinfo.utcoffset(self)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"tzname"</expr>, <expr>(<name>PyCFunction</name>)<name>time_tzname</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return self.tzinfo.tzname(self)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"dst"</expr>, <expr>(<name>PyCFunction</name>)<name>time_dst</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return self.tzinfo.dst(self)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"replace"</expr>, <expr>(<name>PyCFunction</name>)<name>time_replace</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return time with new specified fields."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>time_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"__reduce__() -&gt; (cls, state)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>time_doc</name><index>[]</index></name> <init>=
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object\n\
\n\
All arguments are optional. tzinfo may be None, or an instance of\n\
a tzinfo subclass. The remaining arguments may be ints or longs.\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>time_as_number</name> <init>= <expr><block>{
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>inquiry</name>)<name>time_nonzero</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>PyDateTime_TimeType</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"datetime.time"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_Time</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>time_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>time_repr</name></expr>,
<expr>&amp;<name>time_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>time_hash</name></expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>time_str</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name> |
<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr><name>time_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>richcmpfunc</name>)<name>time_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>time_methods</name></expr>,
<expr>0</expr>,
<expr><name>time_getset</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>time_alloc</name></expr>,
<expr><name>time_new</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_hour</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_minute</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_second</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_microsecond</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_tzinfo</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>datetime_getset</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"hour"</expr>, <expr>(<name>getter</name>)<name>datetime_hour</name></expr>}</block></expr>,
<expr><block>{<expr>"minute"</expr>, <expr>(<name>getter</name>)<name>datetime_minute</name></expr>}</block></expr>,
<expr><block>{<expr>"second"</expr>, <expr>(<name>getter</name>)<name>datetime_second</name></expr>}</block></expr>,
<expr><block>{<expr>"microsecond"</expr>, <expr>(<name>getter</name>)<name>datetime_microsecond</name></expr>}</block></expr>,
<expr><block>{<expr>"tzinfo"</expr>, <expr>(<name>getter</name>)<name>datetime_tzinfo</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>datetime_kws</name><index>[]</index></name> <init>= <expr><block>{
<expr>"year"</expr>, <expr>"month"</expr>, <expr>"day"</expr>, <expr>"hour"</expr>, <expr>"minute"</expr>, <expr>"second"</expr>,
<expr>"microsecond"</expr>, <expr>"tzinfo"</expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>usecond</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &gt;= 1 &amp;&amp;
<call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> &lt;= 2 &amp;&amp;
<call><name>PyString_Check</name><argument_list>(<argument><expr><name>state</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> == <name>_PyDateTime_DATETIME_DATASIZE</name> &amp;&amp;
<call><name>MONTH_IS_SANE</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDateTime_DateTime</name> *</type><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>aware</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>tzinfo</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bad "
"tzinfo state arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>aware</name> = <call>(<name>char</name>)<argument_list>(<argument><expr><name>tzinfo</name> != <name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>me</name> = <call>(<name>PyDateTime_DateTime</name> *) <argument_list>(<argument><expr><call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument> , <argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>me</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pdata</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>me</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>_PyDateTime_DATETIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>hashcode</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>hastzinfo</name></name> = <name>aware</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>aware</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name>-&gt;<name>tzinfo</name></name> = <name>tzinfo</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>me</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"iii|iiiiO"</expr></argument>, <argument><expr><name>datetime_kws</name></expr></argument>,
<argument><expr>&amp;<name>year</name></expr></argument>, <argument><expr>&amp;<name>month</name></expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>, <argument><expr>&amp;<name>hour</name></expr></argument>, <argument><expr>&amp;<name>minute</name></expr></argument>,
<argument><expr>&amp;<name>second</name></expr></argument>, <argument><expr>&amp;<name>usecond</name></expr></argument>, <argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>check_date_args</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>check_time_args</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>usecond</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>new_datetime_ex</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>,
<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>usecond</name></expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<typedef>typedef <function_decl><type>struct <name>tm</name> *</type>(*<name>TM_FUNC</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>time_t</name> *</type><name>timer</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_from_timet_and_us</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>TM_FUNC</name></type> <name>f</name></decl></param>, <param><decl><type><name>time_t</name></type> <name>timet</name></decl></param>, <param><decl><type><name>int</name></type> <name>us</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tm</name> *</type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tm</name> = <call><name>f</name><argument_list>(<argument><expr>&amp;<name>timet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tm</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>tm</name>-&gt;<name>tm_sec</name></name> &gt; 59</expr>)</condition><then>
<expr_stmt><expr><name><name>tm</name>-&gt;<name>tm_sec</name></name> = 59</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"iiiiiiiO"</expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_year</name></name> + 1900</expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_mon</name></name> + 1</expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_hour</name></name></expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_min</name></name></expr></argument>,
<argument><expr><name><name>tm</name>-&gt;<name>tm_sec</name></name></expr></argument>,
<argument><expr><name>us</name></expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"timestamp out of range for "
"platform localtime()/gmtime() function"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_from_timestamp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>TM_FUNC</name></type> <name>f</name></decl></param>, <param><decl><type><name>double</name></type> <name>timestamp</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>timet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>fraction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>us</name></decl>;</decl_stmt>
<expr_stmt><expr><name>timet</name> = <call><name>_PyTime_DoubleToTimet</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timet</name> == (<name>time_t</name>)-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>fraction</name> = <name>timestamp</name> - (<name>double</name>)<name>timet</name></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> = (<name>int</name>)<call><name>round_to_long</name><argument_list>(<argument><expr><name>fraction</name> * 1e6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>us</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>timet</name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> += 1000000</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>us</name> == 1000000</expr>)</condition><then> <block>{
<expr_stmt><expr><name>timet</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>datetime_from_timet_and_us</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>timet</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_best_possible</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>TM_FUNC</name></type> <name>f</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type>struct <name>timeval</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETTIMEOFDAY_NO_TZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr>&amp;<name>t</name></expr></argument>, <argument><expr>(struct <name>timezone</name> *)<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>datetime_from_timet_and_us</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>t</name>.<name>tv_sec</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>t</name>.<name>tv_usec</name></name></expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dtime</name></decl>;</decl_stmt>
<expr_stmt><expr><name>time</name> = <call><name>time_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>time</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>dtime</name> = <call><name>PyFloat_AsDouble</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dtime</name> == -1.0 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>datetime_from_timestamp</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>dtime</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_now</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"tz"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|O:now"</expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>datetime_best_possible</name><argument_list>(<argument><expr><name>cls</name></expr></argument>,
<argument><expr><name>tzinfo</name> == <name>Py_None</name> ? <name>localtime</name> : <name>gmtime</name></expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name> &amp;&amp; <name>tzinfo</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr>"fromutc"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_utcnow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>datetime_best_possible</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>gmtime</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_fromtimestamp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"timestamp"</expr>, <expr>"tz"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"d|O:fromtimestamp"</expr></argument>,
<argument><expr><name>keywords</name></expr></argument>, <argument><expr>&amp;<name>timestamp</name></expr></argument>, <argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>check_tzinfo_subclass</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>datetime_from_timestamp</name><argument_list>(<argument><expr><name>cls</name></expr></argument>,
<argument><expr><name>tzinfo</name> == <name>Py_None</name> ? <name>localtime</name> : <name>gmtime</name></expr></argument>,
<argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> != <name>NULL</name> &amp;&amp; <name>tzinfo</name> != <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><name>self</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr>"fromutc"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>self</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_utcfromtimestamp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"d:utcfromtimestamp"</expr></argument>, <argument><expr>&amp;<name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>datetime_from_timestamp</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>gmtime</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_strptime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init>, *<name>obj</name></decl>, *<decl><type ref="prev"/><name>st</name> <init>= <expr><name>NULL</name></expr></init>, *<name>frac</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl>, *<decl><type ref="prev"/><name>format</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ss:strptime"</expr></argument>, <argument><expr>&amp;<name>string</name></expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>module</name> == <name>NULL</name> &amp;&amp;
(<name>module</name> = <call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"_strptime"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr>"_strptime"</expr></argument>, <argument><expr>"ss"</expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>obj</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>good_timetuple</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name><name>ia</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>PySequence_Size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>st</name> = <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frac</name> = <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>st</name> == <name>NULL</name> || <name>frac</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>good_timetuple</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>good_timetuple</name> &amp;&amp;
<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>PySequence_Size</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call> &gt;= 6</expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; 6</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>p</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>good_timetuple</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>ia</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>good_timetuple</name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else
<expr_stmt><expr><name>good_timetuple</name> = 0</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>frac</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>ia</name><index>[<expr>6</expr>]</index></name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>frac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>good_timetuple</name> = 0</expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>good_timetuple</name> = 0</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>good_timetuple</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"iiiiiii"</expr></argument>,
<argument><expr><name><name>ia</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>ia</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>ia</name><index>[<expr>2</expr>]</index></name></expr></argument>,
<argument><expr><name><name>ia</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>ia</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name><name>ia</name><index>[<expr>5</expr>]</index></name></expr></argument>,
<argument><expr><name><name>ia</name><index>[<expr>6</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>,
<argument><expr>"unexpected value from _strptime._strptime"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>frac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_combine</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>cls</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"date"</expr>, <expr>"time"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"O!O!:combine"</expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>PyDateTime_DateType</name></expr></argument>, <argument><expr>&amp;<name>date</name></expr></argument>,
<argument><expr>&amp;<name>PyDateTime_TimeType</name></expr></argument>, <argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><name>Py_None</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>tzinfo</name> = ((<name>PyDateTime_Time</name> *)<name>time</name>)-&gt;<name>tzinfo</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr>"iiiiiiiO"</expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_HOUR</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_MINUTE</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_SECOND</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>TIME_GET_MICROSECOND</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>datetime_dealloc</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_utcoffset</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>offset_as_timedelta</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>,
<argument><expr>"utcoffset"</expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_dst</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>offset_as_timedelta</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>,
<argument><expr>"dst"</expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_tzname</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>call_tzname</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>add_datetime_timedelta</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>date</name></decl></param>, <param><decl><type><name>PyDateTime_Delta</name> *</type><name>delta</name></decl></param>,
<param><decl><type><name>int</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> + <call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> * <name>factor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> + <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> * <name>factor</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>microsecond</name> <init>= <expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> +
<call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> * <name>factor</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>factor</name> == 1 || <name>factor</name> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>normalize_datetime</name><argument_list>(<argument><expr>&amp;<name>year</name></expr></argument>, <argument><expr>&amp;<name>month</name></expr></argument>, <argument><expr>&amp;<name>day</name></expr></argument>,
<argument><expr>&amp;<name>hour</name></expr></argument>, <argument><expr>&amp;<name>minute</name></expr></argument>, <argument><expr>&amp;<name>second</name></expr></argument>, <argument><expr>&amp;<name>microsecond</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>new_datetime</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>,
<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>microsecond</name></expr></argument>,
<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call> ? <name><name>date</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_add</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>add_datetime_timedelta</name><argument_list>(
<argument><expr>(<name>PyDateTime_DateTime</name> *)<name>left</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *)<name>right</name></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>add_datetime_timedelta</name><argument_list>(<argument><expr>(<name>PyDateTime_DateTime</name> *) <name>right</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *) <name>left</name></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_subtract</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>left</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>right</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>Py_NotImplemented</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>naivety</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset1</name></decl>, <decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta_d</name></decl>, <decl><type ref="prev"/><name>delta_s</name></decl>, <decl><type ref="prev"/><name>delta_us</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>classify_two_utcoffsets</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr>&amp;<name>offset1</name></expr></argument>, <argument><expr>&amp;<name>n1</name></expr></argument>, <argument><expr><name>left</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>, <argument><expr>&amp;<name>offset2</name></expr></argument>, <argument><expr>&amp;<name>n2</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n1</name> != <name>OFFSET_UNKNOWN</name> &amp;&amp; <name>n2</name> != <name>OFFSET_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n1</name> != <name>n2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't subtract offset-naive and "
"offset-aware datetimes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>delta_d</name> = <call><name>ymd_to_ord</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> -
<call><name>ymd_to_ord</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta_s</name> = (<call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> -
<call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call>) * 3600 +
(<call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> -
<call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call>) * 60 +
(<call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> -
<call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><name>delta_us</name> = <call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> -
<call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta_s</name> += (<name>offset2</name> - <name>offset1</name>) * 60</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>new_delta</name><argument_list>(<argument><expr><name>delta_d</name></expr></argument>, <argument><expr><name>delta_s</name></expr></argument>, <argument><expr><name>delta_us</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyDelta_Check</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>add_datetime_timedelta</name><argument_list>(
<argument><expr>(<name>PyDateTime_DateTime</name> *)<name>left</name></expr></argument>,
<argument><expr>(<name>PyDateTime_Delta</name> *)<name>right</name></expr></argument>,
<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>Py_NotImplemented</name></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_repr</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>1000</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_name</name> <init>= <expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<name>tp_name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>baserepr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s(%d, %d, %d, %d, %d, %d, %d)"</expr></argument>,
<argument><expr><name>type_name</name></expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s(%d, %d, %d, %d, %d, %d)"</expr></argument>,
<argument><expr><name>type_name</name></expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>"%s(%d, %d, %d, %d, %d)"</expr></argument>,
<argument><expr><name>type_name</name></expr></argument>,
<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>baserepr</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>baserepr</name> == <name>NULL</name> || ! <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>baserepr</name></expr>;</return></then></if>
<return>return <expr><call><name>append_keyword_tzinfo</name><argument_list>(<argument><expr><name>baserepr</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_str</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>"isoformat"</expr></argument>, <argument><expr>"(s)"</expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_isoformat</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr>'T'</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"sep"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|c:isoformat"</expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>sep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>cp</name> = <call><name>isoformat_date</name><argument_list>(<argument><expr>(<name>PyDateTime_Date</name> *)<name>self</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cp</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name>++ = <name>sep</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>isoformat_time</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> - (<name>cp</name> - <name>buffer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name> || ! <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>result</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>format_utcoffset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyString_ConcatAndDel</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_ctime</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>format_ctime</name><argument_list>(<argument><expr>(<name>PyDateTime_Date</name> *)<name>self</name></expr></argument>,
<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_richcompare</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>other</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>naivety</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset1</name></decl>, <decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyDateTime_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr>"timetuple"</expr></argument>)</argument_list></call> &amp;&amp;
! <call><name>PyDate_Check</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_NotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_NotImplemented</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>op</name> == <name>Py_EQ</name> || <name>op</name> == <name>Py_NE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>op</name> == <name>Py_EQ</name> ? <name>Py_False</name> : <name>Py_True</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>cmperror</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>classify_two_utcoffsets</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>&amp;<name>offset1</name></expr></argument>, <argument><expr>&amp;<name>n1</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>,
<argument><expr><name>other</name></expr></argument>, <argument><expr>&amp;<name>offset2</name></expr></argument>, <argument><expr>&amp;<name>n2</name></expr></argument>,
<argument><expr><name>other</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n1</name> != <name>OFFSET_UNKNOWN</name> &amp;&amp; <name>n2</name> != <name>OFFSET_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n1</name> == <name>n2</name> &amp;&amp; <name>offset1</name> == <name>offset2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>diff</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>((<name>PyDateTime_DateTime</name> *)<name>other</name>)-&gt;<name>data</name></expr></argument>,
<argument><expr><name>_PyDateTime_DATETIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>diff_to_bool</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>n1</name> == <name>OFFSET_AWARE</name> &amp;&amp; <name>n2</name> == <name>OFFSET_AWARE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyDateTime_Delta</name> *</type><name>delta</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset1</name> != <name>offset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> = (<name>PyDateTime_Delta</name> *)<call><name>datetime_subtract</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>,
<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>delta</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>diff</name> = <call><name>GET_TD_DAYS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diff</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>diff</name> = <call><name>GET_TD_SECONDS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> |
<call><name>GET_TD_MICROSECONDS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>diff_to_bool</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n1</name> != <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"can't compare offset-naive and "
"offset-aware datetimes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type>
<name>datetime_hash</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>hashcode</name></name> == -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>naivety</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = <call><name>classify_utcoffset</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> != <name>OFFSET_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == <name>OFFSET_ERROR</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name>n</name> == <name>OFFSET_NAIVE</name></expr>)</condition><then>
<expr_stmt><expr><name>temp</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(
<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>_PyDateTime_DATETIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seconds</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> == <name>OFFSET_AWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> = <call><name>ymd_to_ord</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seconds</name> = <call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> * 3600 +
(<call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> - <name>offset</name>) * 60 +
<call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>new_delta</name><argument_list>(<argument><expr><name>days</name></expr></argument>,
<argument><expr><name>seconds</name></expr></argument>,
<argument><expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>temp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>self</name>-&gt;<name>hashcode</name></name> = <call><name>PyObject_Hash</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>self</name>-&gt;<name>hashcode</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_replace</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tuple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hh</name> <init>= <expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mm</name> <init>= <expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name> <init>= <expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"|iiiiiiiO:replace"</expr></argument>,
<argument><expr><name>datetime_kws</name></expr></argument>,
<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>hh</name></expr></argument>, <argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>,
<argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>tuple</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"iiiiiiiO"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tuple</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>clone</name> = <call><name>datetime_new</name><argument_list>(<argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>clone</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_astimezone</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>tzinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{<expr>"tz"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr>"O!:astimezone"</expr></argument>, <argument><expr><name>keywords</name></expr></argument>,
<argument><expr>&amp;<name>PyDateTime_TZInfoType</name></expr></argument>, <argument><expr>&amp;<name>tzinfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> || <name><name>self</name>-&gt;<name>tzinfo</name></name> == <name>Py_None</name></expr>)</condition><then>
<goto>goto <name>NeedAware</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>tzinfo</name></name> == <name>tzinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>offset</name> = <call><name>call_utcoffset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then>
<goto>goto <name>NeedAware</name>;</goto></then></if>
<expr_stmt><expr><name>y</name> = <call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hh</name> = <call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> = <call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> = <call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us</name> = <call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> -= <name>offset</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mm</name> &lt; 0 || <name>mm</name> &gt;= 60) &amp;&amp;
<call><name>normalize_datetime</name><argument_list>(<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>hh</name></expr></argument>, <argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>new_datetime</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>us</name></expr></argument>, <argument><expr><name>tzinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>tzinfo</name></expr></argument>, <argument><expr>"fromutc"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
<label><name>NeedAware</name>:</label>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"astimezone() cannot be applied to "
"a naive datetime"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_timetuple</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dstflag</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>self</name>-&gt;<name>tzinfo</name></name> != <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dstflag</name> = <call><name>call_dst</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dstflag</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>none</name></expr>)</condition><then>
<expr_stmt><expr><name>dstflag</name> = -1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>dstflag</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>dstflag</name> = 1</expr>;</expr_stmt></then></if></else></if>
}</block></then></if>
<return>return <expr><call><name>build_struct_time</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>dstflag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_getdate</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>new_date</name><argument_list>(<argument><expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_gettime</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>new_time</name><argument_list>(<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_gettimetz</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>new_time</name><argument_list>(<argument><expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DATE_GET_MICROSECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> ? <name><name>self</name>-&gt;<name>tzinfo</name></name> : <name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_utctimetuple</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>GET_YEAR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>GET_MONTH</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>GET_DAY</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hh</name> <init>= <expr><call><name>DATE_GET_HOUR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mm</name> <init>= <expr><call><name>DATE_GET_MINUTE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><call><name>DATE_GET_SECOND</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>us</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>self</name>-&gt;<name>tzinfo</name></name> != <name>Py_None</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> = <call><name>call_utcoffset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr>&amp;<name>none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>offset</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mm</name> -= <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <call><name>normalize_datetime</name><argument_list>(<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>hh</name></expr></argument>, <argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr>&amp;<name>ss</name></expr></argument>, <argument><expr>&amp;<name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><call><name>build_struct_time</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_getstate</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>basestate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>basestate</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>self</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>_PyDateTime_DATETIME_DATASIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>basestate</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>HASTZINFO</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> || <name><name>self</name>-&gt;<name>tzinfo</name></name> == <name>Py_None</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>basestate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = <call><name>PyTuple_Pack</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>basestate</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>tzinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>basestate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>datetime_reduce</name><parameter_list>(<param><decl><type><name>PyDateTime_DateTime</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ON)"</expr></argument>, <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>datetime_getstate</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>datetime_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"now"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_now</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"[tz] -&gt; new datetime with tz's local day and time."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"utcnow"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_utcnow</name></expr>,
<expr><name>METH_NOARGS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return a new datetime representing UTC day and time."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"fromtimestamp"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_fromtimestamp</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"timestamp[, tz] -&gt; tz's local time from POSIX timestamp."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"utcfromtimestamp"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_utcfromtimestamp</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"timestamp -&gt; UTC datetime from a POSIX timestamp "
"(like time.time())."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"strptime"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_strptime</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"string, format -&gt; new datetime parsed from a string "
"(like time.strptime())."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"combine"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_combine</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name> | <name>METH_CLASS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"date, time -&gt; datetime with same date and time fields"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"date"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_getdate</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return date object with same year, month and day."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"time"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_gettime</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return time object with same time but with tzinfo=None."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"timetz"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_gettimetz</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return time object with same time and tzinfo."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ctime"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_ctime</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return ctime() style string."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"timetuple"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_timetuple</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return time tuple, compatible with time.localtime()."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"utctimetuple"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_utctimetuple</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return UTC time tuple, compatible with time.localtime()."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"isoformat"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_isoformat</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"[sep] -&gt; string in ISO 8601 format, "
"YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].\n\n"
"sep is used to separate the year from the time, and "
"defaults to 'T'."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"utcoffset"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_utcoffset</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return self.tzinfo.utcoffset(self)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"tzname"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_tzname</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return self.tzinfo.tzname(self)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"dst"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_dst</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return self.tzinfo.dst(self)."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"replace"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_replace</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"Return datetime with new specified fields."</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"astimezone"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_astimezone</name></expr>, <expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"tz -&gt; convert to local time in new timezone tz\n"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"__reduce__"</expr>, <expr>(<name>PyCFunction</name>)<name>datetime_reduce</name></expr>, <expr><name>METH_NOARGS</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"__reduce__() -&gt; (cls, state)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>datetime_doc</name><index>[]</index></name> <init>=
<expr><call><name>PyDoc_STR</name><argument_list>(<argument><expr>"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\
\n\
The year, month and day arguments are required. tzinfo may be None, or an\n\
instance of a tzinfo subclass. The remaining arguments may be ints or longs.\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyNumberMethods</name></type> <name>datetime_as_number</name> <init>= <expr><block>{
<expr><name>datetime_add</name></expr>,
<expr><name>datetime_subtract</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statichere</name> <name>PyTypeObject</name></type> <name>PyDateTime_DateTimeType</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"datetime.datetime"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyDateTime_DateTime</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>datetime_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>datetime_repr</name></expr>,
<expr>&amp;<name>datetime_as_number</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>hashfunc</name>)<name>datetime_hash</name></expr>,
<expr>0</expr>,
<expr>(<name>reprfunc</name>)<name>datetime_str</name></expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_CHECKTYPES</name> |
<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr><name>datetime_doc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>richcmpfunc</name>)<name>datetime_richcompare</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>datetime_methods</name></expr>,
<expr>0</expr>,
<expr><name>datetime_getset</name></expr>,
<expr>&amp;<name>PyDateTime_DateType</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>datetime_alloc</name></expr>,
<expr><name>datetime_new</name></expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>module_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyDateTime_CAPI</name></type> <name>CAPI</name> <init>= <expr><block>{
<expr>&amp;<name>PyDateTime_DateType</name></expr>,
<expr>&amp;<name>PyDateTime_DateTimeType</name></expr>,
<expr>&amp;<name>PyDateTime_TimeType</name></expr>,
<expr>&amp;<name>PyDateTime_DeltaType</name></expr>,
<expr>&amp;<name>PyDateTime_TZInfoType</name></expr>,
<expr><name>new_date_ex</name></expr>,
<expr><name>new_datetime_ex</name></expr>,
<expr><name>new_time_ex</name></expr>,
<expr><name>new_delta_ex</name></expr>,
<expr><name>datetime_fromtimestamp</name></expr>,
<expr><name>date_fromtimestamp</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initdatetime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"datetime"</expr></argument>, <argument><expr><name>module_methods</name></expr></argument>,
<argument><expr>"Fast implementation of the datetime type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_DateType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_DateTimeType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_DeltaType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_TimeType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_TZInfoType</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <name><name>PyDateTime_DeltaType</name>.<name>tp_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_delta</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"resolution"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_delta</name><argument_list>(<argument><expr>-<name>MAX_DELTA_DAYS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"min"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_delta</name><argument_list>(<argument><expr><name>MAX_DELTA_DAYS</name></expr></argument>, <argument><expr>24*3600-1</expr></argument>, <argument><expr>1000000-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"max"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>PyDateTime_DateType</name>.<name>tp_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_date</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"min"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_date</name><argument_list>(<argument><expr><name>MAXYEAR</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>31</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"max"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_delta</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"resolution"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>PyDateTime_TimeType</name>.<name>tp_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_time</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"min"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_time</name><argument_list>(<argument><expr>23</expr></argument>, <argument><expr>59</expr></argument>, <argument><expr>59</expr></argument>, <argument><expr>999999</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"max"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_delta</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"resolution"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>PyDateTime_DateTimeType</name>.<name>tp_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_datetime</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"min"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_datetime</name><argument_list>(<argument><expr><name>MAXYEAR</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr>31</expr></argument>, <argument><expr>23</expr></argument>, <argument><expr>59</expr></argument>, <argument><expr>59</expr></argument>, <argument><expr>999999</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"max"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>new_delta</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name> || <call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"resolution"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MINYEAR"</expr></argument>, <argument><expr><name>MINYEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddIntConstant</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MAXYEAR"</expr></argument>, <argument><expr><name>MAXYEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_DateType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"date"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>PyDateTime_DateType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_DateTimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"datetime"</expr></argument>,
<argument><expr>(<name>PyObject</name> *)&amp;<name>PyDateTime_DateTimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_TimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"time"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>PyDateTime_TimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_DeltaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"timedelta"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>PyDateTime_DeltaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>PyDateTime_TZInfoType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"tzinfo"</expr></argument>, <argument><expr>(<name>PyObject</name> *) &amp;<name>PyDateTime_TZInfoType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyCObject_FromVoidPtrAndDesc</name><argument_list>(<argument><expr>&amp;<name>CAPI</name></expr></argument>, <argument><expr>(<name>void</name>*) <name>DATETIME_API_MAGIC</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"datetime_CAPI"</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DI4Y</name> == 4 * 365 + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DI4Y</name> == <call><name>days_before_year</name><argument_list>(<argument><expr>4+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DI400Y</name> == 4 * <name>DI100Y</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DI400Y</name> == <call><name>days_before_year</name><argument_list>(<argument><expr>400+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DI100Y</name> == 25 * <name>DI4Y</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DI100Y</name> == <call><name>days_before_year</name><argument_list>(<argument><expr>100+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_per_us</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_per_ms</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_per_second</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>1000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_per_minute</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>60000000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seconds_per_day</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>24 * 3600</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>us_per_us</name> == <name>NULL</name> || <name>us_per_ms</name> == <name>NULL</name> || <name>us_per_second</name> == <name>NULL</name> ||
<name>us_per_minute</name> == <name>NULL</name> || <name>seconds_per_day</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>us_per_hour</name> = <call><name>PyLong_FromDouble</name><argument_list>(<argument><expr>3600000000.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_per_day</name> = <call><name>PyLong_FromDouble</name><argument_list>(<argument><expr>86400000000.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_per_week</name> = <call><name>PyLong_FromDouble</name><argument_list>(<argument><expr>604800000000.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>us_per_hour</name> == <name>NULL</name> || <name>us_per_day</name> == <name>NULL</name> || <name>us_per_week</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
}</block></function>
</unit>
