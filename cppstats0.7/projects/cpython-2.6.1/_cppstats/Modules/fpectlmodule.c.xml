<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/fpectlmodule.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ieeefp.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NEW_STARLET</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;starlet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ieeedef.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WANT_SIGFPE_HANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>jmp_buf</name></type> <name>PyFPE_jbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>PyFPE_counter</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> <name>Sigfunc</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>Sigfunc</name></type> <name>sigfpe_handler</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fpe_reset</name><parameter_list>(<param><decl><type><name>Sigfunc</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>fpe_error</name></decl>;</decl_stmt>
<function_decl><type><name>PyMODINIT_FUNC</name></type> <name>initfpectl</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>turnon_sigfpe</name> <parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>turnoff_sigfpe</name> <parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>fpectl_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"turnon_sigfpe"</expr>, <expr>(<name>PyCFunction</name>) <name>turnon_sigfpe</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"turnoff_sigfpe"</expr>, <expr>(<name>PyCFunction</name>) <name>turnoff_sigfpe</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>turnon_sigfpe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fpe_reset</name><argument_list>(<argument><expr><name>sigfpe_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name> <argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fpe_reset</name><parameter_list>(<param><decl><type><name>Sigfunc</name> *</type><name>handler</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sigfpe.h&gt;</cpp:file></cpp:include>
<typedef>typedef <function_decl><type><name>void</name></type> <name>user_routine</name> <parameter_list>(<param><decl><type><name><name>unsigned</name><index>[<expr>5</expr>]</index></name></type></decl></param>, <param><decl><type><name><name>int</name><index>[<expr>2</expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>abort_routine</name> <parameter_list>(<param><decl><type><name>unsigned</name></type> <name>long</name></decl></param>)</parameter_list>;</function_decl></typedef>
<expr_stmt><expr><call><name>handle_sigfpes</name><argument_list>(<argument><expr><name>_OFF</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>(<name>user_routine</name> *)0</expr></argument>,
<argument><expr><name>_TURN_OFF_HANDLER_ON_ERROR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_sigfpes</name><argument_list>(<argument><expr><name>_ON</name></expr></argument>, <argument><expr><name>_EN_OVERFL</name> | <name>_EN_DIVZERO</name> | <name>_EN_INVALID</name></expr></argument>,
<argument><expr>(<name>user_routine</name> *)0</expr></argument>,
<argument><expr><name>_ABORT_ON_ERROR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_SUNMATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>nonstandard_arithmetic</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ieee_flags</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><name>char</name> **</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>long</name></type> <name>ieee_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>, <param><decl><type><name>sigfpe_handler_type</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> *</type><name>mode</name><init>=<expr>"exception"</expr></init>, *<name>in</name><init>=<expr>"all"</expr></init>, *<name>out</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>nonstandard_arithmetic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>ieee_flags</name><argument_list>(<argument><expr>"clearall"</expr></argument>,<argument><expr><name>mode</name></expr></argument>,<argument><expr><name>in</name></expr></argument>,<argument><expr>&amp;<name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>ieee_handler</name><argument_list>(<argument><expr>"set"</expr></argument>,<argument><expr>"common"</expr></argument>,<argument><expr>(<name>sigfpe_handler_type</name>)<name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hppa</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>hppa</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>fpsetdefaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AIX</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fptrap.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>fp_trap</name><argument_list>(<argument><expr><name>FP_TRAP_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_enable</name><argument_list>(<argument><expr><name>TRP_INVALID</name> | <name>TRP_DIV_BY_ZERO</name> | <name>TRP_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__alpha</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/fpu.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fp_control</name> <init>=
<expr><name>IEEE_TRAP_ENABLE_INV</name> | <name>IEEE_TRAP_ENABLE_DZE</name> | <name>IEEE_TRAP_ENABLE_OVF</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ieee_set_fp_control</name><argument_list>(<argument><expr><name>fp_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__alpha</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/fpu.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fp_control</name> <init>=
<expr><name>IEEE_TRAP_ENABLE_INV</name> | <name>IEEE_TRAP_ENABLE_DZE</name> | <name>IEEE_TRAP_ENABLE_OVF</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ieee_set_fp_control</name><argument_list>(<argument><expr><name>fp_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ALPHA</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>IEEE</name></type> <name>clrmsk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IEEE</name></type> <name>setmsk</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>clrmsk</name>.<name>ieee</name></name><name/>$<name>q_flags</name> =
<name>IEEE</name><name/>$<name>M_TRAP_ENABLE_UNF</name> | <name>IEEE</name><name/>$<name>M_TRAP_ENABLE_INE</name> |
<name>IEEE</name><name/>$<name>M_MAP_UMZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>setmsk</name>.<name>ieee</name></name><name/>$<name>q_flags</name> =
<name>IEEE</name><name/>$<name>M_TRAP_ENABLE_INV</name> | <name>IEEE</name><name/>$<name>M_TRAP_ENABLE_DZE</name> |
<name>IEEE</name><name/>$<name>M_TRAP_ENABLE_OVF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sys</name><name/>$<call><name>ieee_set_fp_control</name><argument_list>(<argument><expr>&amp;<name>clrmsk</name></expr></argument>, <argument><expr>&amp;<name>setmsk</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ia64</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cray</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_LIBMSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>libmset</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>fpresetsticky</name><argument_list>(<argument><expr><call><name>fpgetsticky</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fpsetmask</name><argument_list>(<argument><expr><name>FP_X_INV</name> | <name>FP_X_DZ</name> | <name>FP_X_OFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fpu_control.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;i386/fpu_control.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_FPU_SETCW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>fpu_control_t</name></type> <name>cw</name> <init>= <expr>0x1372</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_FPU_SETCW</name><argument_list>(<argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__setfpucw</name><argument_list>(<argument><expr>0x1372</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cw</name> <init>= <expr><name>_EM_INVALID</name> | <name>_EM_ZERODIVIDE</name> | <name>_EM_OVERFLOW</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>)<call><name>_controlfp</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyOS_setsig</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"Operation not implemented\n"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>turnoff_sigfpe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fpresetsticky</name><argument_list>(<argument><expr><call><name>fpgetsticky</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fpsetmask</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>IEEE</name></type> <name>clrmsk</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>clrmsk</name>.<name>ieee</name></name><name/>$<name>q_flags</name> =
<name>IEEE</name><name/>$<name>M_TRAP_ENABLE_UNF</name> | <name>IEEE</name><name/>$<name>M_TRAP_ENABLE_INE</name> |
<name>IEEE</name><name/>$<name>M_MAP_UMZ</name> | <name>IEEE</name><name/>$<name>M_TRAP_ENABLE_INV</name> |
<name>IEEE</name><name/>$<name>M_TRAP_ENABLE_DZE</name> | <name>IEEE</name><name/>$<name>M_TRAP_ENABLE_OVF</name> |
<name>IEEE</name><name/>$<name>M_INHERIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sys</name><name/>$<call><name>ieee_set_fp_control</name><argument_list>(<argument><expr>&amp;<name>clrmsk</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"Operation not implemented\n"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sigfpe_handler</name><parameter_list>(<param><decl><type><name>int</name></type> <name>signo</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fpe_reset</name><argument_list>(<argument><expr><name>sigfpe_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name>PyFPE_counter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>PyFPE_jbuf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"Unprotected floating point exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>PyMODINIT_FUNC</name></type> <name>initfpectl</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"fpectl"</expr></argument>, <argument><expr><name>fpectl_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fpe_error</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"fpectl.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fpe_error</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>fpe_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
