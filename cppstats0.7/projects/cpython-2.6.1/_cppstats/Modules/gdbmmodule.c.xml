<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/gdbmmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdbmerrno.h"</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>gdbm_strerror</name><parameter_list>(<param><decl><type><name>gdbm_error</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>gdbmmodule__doc__</name></expr></argument>,
<argument><expr>"This module provides an interface to the GNU DBM (GDBM) library.\n\
\n\
This module is quite similar to the dbm module, but uses GDBM instead to\n\
provide some additional functionality. Please note that the file formats\n\
created by GDBM and dbm are incompatible. \n\
\n\
GDBM objects behave like mappings (dictionaries), except that keys and\n\
values are always strings. Printing a GDBM object doesn't print the\n\
keys and values, and the items() and values() methods are not\n\
supported."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>int</name></type> <name>di_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>di_dbm</name></decl>;</decl_stmt>
}</block></struct></type> <name>dbmobject</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Dbmtype</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_dbmobject</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(Py_TYPE(v) == &amp;Dbmtype)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_dbmobject_open</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if ((v)-&gt;di_dbm == NULL) { PyErr_SetString(DbmError, "GDBM object has already been closed"); return NULL; }</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>DbmError</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>gdbm_object__doc__</name></expr></argument>,
<argument><expr>"This object represents a GDBM database.\n\
GDBM objects behave like mappings (dictionaries), except that keys and\n\
values are always strings. Printing a GDBM object doesn't print the\n\
keys and values, and the items() and values() methods are not\n\
supported.\n\
\n\
GDBM objects also support additional operations such as firstkey,\n\
nextkey, reorganize, and sync."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>newdbmobject</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dbmobject</name> *</type><name>dp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dp</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>dbmobject</name></expr></argument>, <argument><expr>&amp;<name>Dbmtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>dp</name>-&gt;<name>di_dbm</name></name> = <call><name>gdbm_open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>errno</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<name>dp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dbm_dealloc</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>gdbm_close</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>dbm_length</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr>"GDBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_size</name></name> &lt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>,<decl><type ref="prev"/><name>okey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>okey</name>.<name>dsize</name></name>=0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>okey</name>.<name>dptr</name></name>=<name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>key</name>=<call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>key</name>.<name>dptr</name></name></expr>;</condition>
<incr><expr><name>key</name> = <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>,<argument><expr><name>okey</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><name>size</name>++</expr>;</expr_stmt>
<if>if<condition>(<expr><name><name>okey</name>.<name>dsize</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>okey</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>okey</name>=<name>key</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = <name>size</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>dp</name>-&gt;<name>di_size</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_subscript</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>register</name> <name>PyObject</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>datum</name></type> <name>drec</name></decl>, <decl><type ref="prev"/><name>krec</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>krec</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name><name>krec</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
<argument><expr>"GDBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>drec</name> = <call><name>gdbm_fetch</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>krec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>drec</name>.<name>dptr</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>drec</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>drec</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drec</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbm_ass_sub</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>datum</name></type> <name>krec</name></decl>, <decl><type ref="prev"/><name>drec</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>krec</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name><name>krec</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"gdbm mappings have string indices only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
<argument><expr>"GDBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_size</name></name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>gdbm_delete</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>krec</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_KeyError</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr>(<name>PyStringObject</name> *)<name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_Parse</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"s#"</expr></argument>, <argument><expr>&amp;<name><name>drec</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name><name>drec</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"gdbm mappings have string elements only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>gdbm_store</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>krec</name></expr></argument>, <argument><expr><name>drec</name></expr></argument>, <argument><expr><name>GDBM_REPLACE</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>errno</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
<argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbm_contains</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>(<name>dp</name>)-&gt;<name>di_dbm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
<argument><expr>"GDBM object has already been closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"gdbm key must be string, not %.100s"</expr></argument>,
<argument><expr><name><name>arg</name>-&gt;<name>ob_type</name>-&gt;<name>tp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gdbm_exists</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>dbm_as_sequence</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>dbm_length</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>(<name>objobjproc</name>)<name>dbm_contains</name></expr>,
<expr>0</expr>,
<expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>dbm_as_mapping</name> <init>= <expr><block>{
<expr>(<name>lenfunc</name>)<name>dbm_length</name></expr>,
<expr>(<name>binaryfunc</name>)<name>dbm_subscript</name></expr>,
<expr>(<name>objobjargproc</name>)<name>dbm_ass_sub</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_close__doc__</name></expr></argument>,
<argument><expr>"close() -&gt; None\n\
Closes the database."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_close</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>gdbm_close</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_keys__doc__</name></expr></argument>,
<argument><expr>"keys() -&gt; list_of_keys\n\
Get a list of all keys in the database."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_keys</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>nextkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dp</name> == <name>NULL</name> || !<call><name>is_dbmobject</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_BadInternalCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>key</name> = <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>key</name>.<name>dptr</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>item</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>item</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>PyList_Append</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>nextkey</name> = <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <name>nextkey</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_has_key__doc__</name></expr></argument>,
<argument><expr>"has_key(key) -&gt; boolean\n\
Find out whether or not the database contains a given key."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_has_key</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:has_key"</expr></argument>, <argument><expr>&amp;<name><name>key</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <call><name>gdbm_exists</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_firstkey__doc__</name></expr></argument>,
<argument><expr>"firstkey() -&gt; key\n\
It's possible to loop over every key in the database using this method\n\
and the nextkey() method. The traversal is ordered by GDBM's internal\n\
hash values, and won't be sorted by the key values. This method\n\
returns the starting key."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_firstkey</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>key</name>.<name>dptr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></else></if>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_nextkey__doc__</name></expr></argument>,
<argument><expr>"nextkey(key) -&gt; next_key\n\
Returns the key that follows key in the traversal.\n\
The following code prints every key in the database db, without having\n\
to create a list in memory that contains them all:\n\
\n\
k = db.firstkey()\n\
while k != None:\n\
print k\n\
k = db.nextkey(k)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_nextkey</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>PyObject</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>nextkey</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s#:nextkey"</expr></argument>, <argument><expr>&amp;<name><name>key</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextkey</name> = <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>nextkey</name>.<name>dptr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>nextkey</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>nextkey</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>nextkey</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></else></if>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_reorganize__doc__</name></expr></argument>,
<argument><expr>"reorganize() -&gt; None\n\
If you have carried out a lot of deletions and would like to shrink\n\
the space used by the GDBM file, this routine will reorganize the\n\
database. GDBM will not shorten the length of a database file except\n\
by using this reorganization; otherwise, deleted file space will be\n\
kept and reused as new (key,value) pairs are added."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_reorganize</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>gdbm_reorganize</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>errno</name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>PyErr_SetFromErrno</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbm_sync__doc__</name></expr></argument>,
<argument><expr>"sync() -&gt; None\n\
When the database has been opened in fast mode, this method forces\n\
any unwritten data to be written to the disk."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_sync</name><parameter_list>(<param><decl><type><name>register</name> <name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>check_dbmobject_open</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdbm_sync</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>dbm_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"close"</expr>, <expr>(<name>PyCFunction</name>)<name>dbm_close</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>dbm_close__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"keys"</expr>, <expr>(<name>PyCFunction</name>)<name>dbm_keys</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>dbm_keys__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"has_key"</expr>, <expr>(<name>PyCFunction</name>)<name>dbm_has_key</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>dbm_has_key__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"firstkey"</expr>, <expr>(<name>PyCFunction</name>)<name>dbm_firstkey</name></expr>,<expr><name>METH_NOARGS</name></expr>, <expr><name>dbm_firstkey__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"nextkey"</expr>, <expr>(<name>PyCFunction</name>)<name>dbm_nextkey</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>dbm_nextkey__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"reorganize"</expr>,<expr>(<name>PyCFunction</name>)<name>dbm_reorganize</name></expr>,<expr><name>METH_NOARGS</name></expr>, <expr><name>dbm_reorganize__doc__</name></expr>}</block></expr>,
<expr><block>{<expr>"sync"</expr>, <expr>(<name>PyCFunction</name>)<name>dbm_sync</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>dbm_sync__doc__</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbm_getattr</name><parameter_list>(<param><decl><type><name>dbmobject</name> *</type><name>dp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>dbm_methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>dp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>Dbmtype</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"gdbm.gdbm"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbmobject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>dbm_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>dbm_getattr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>&amp;<name>dbm_as_sequence</name></expr>,
<expr>&amp;<name>dbm_as_mapping</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr><name>gdbm_object__doc__</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>dbmopen__doc__</name></expr></argument>,
<argument><expr>"open(filename, [flags, [mode]]) -&gt; dbm_object\n\
Open a dbm database and return a dbm object. The filename argument is\n\
the name of the database file.\n\
\n\
The optional flags argument can be 'r' (to open an existing database\n\
for reading only -- default), 'w' (to open an existing database for\n\
reading and writing), 'c' (which creates the database if it doesn't\n\
exist), or 'n' (which always creates a new empty database).\n\
\n\
Some versions of gdbm support additional flags which must be\n\
appended to one of the flags described above. The module constant\n\
'open_flags' is a string of valid additional flags. The 'f' flag\n\
opens the database in fast mode; altered data will not automatically\n\
be written to the disk after every change. This results in faster\n\
writes to the database, but may result in an inconsistent database\n\
if the program crashes while the database is still open. Use the\n\
sync() method to force any unwritten data to be written to the disk.\n\
The 's' flag causes all database operations to be synchronized to\n\
disk. The 'u' flag disables locking of the database file.\n\
\n\
The optional mode argument is the Unix mode of the file, used only\n\
when the database has to be created. It defaults to octal 0666. "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>dbmopen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>flags</name> <init>= <expr>"r"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>0666</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|si:open"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name><name>flags</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'r'</expr>:
<expr_stmt><expr><name>iflags</name> = <name>GDBM_READER</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'w'</expr>:
<expr_stmt><expr><name>iflags</name> = <name>GDBM_WRITER</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'c'</expr>:
<expr_stmt><expr><name>iflags</name> = <name>GDBM_WRCREAT</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name>iflags</name> = <name>GDBM_NEWDB</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>,
<argument><expr>"First flag must be one of 'r', 'w', 'c' or 'n'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<for>for (<init><expr><name>flags</name>++</expr>;</init> <condition><expr>*<name>flags</name> != '\0'</expr>;</condition> <incr><expr><name>flags</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>40</expr>]</index></name></decl>;</decl_stmt>
<switch>switch <condition>(<expr>*<name>flags</name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr>'f'</expr>:
<expr_stmt><expr><name>iflags</name> |= <name>GDBM_FAST</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name>iflags</name> |= <name>GDBM_SYNC</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_NOLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
</case><case>case <expr>'u'</expr>:
<expr_stmt><expr><name>iflags</name> |= <name>GDBM_NOLOCK</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>PyOS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"Flag '%c' is not supported."</expr></argument>,
<argument><expr>*<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>DbmError</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></for>
<return>return <expr><call><name>newdbmobject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dbmmodule_open_flags</name><index>[]</index></name> <init>= <expr>"rwcn"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
"f"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
"s"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_NOLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
"u"</expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>dbmmodule_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"open"</expr>, <expr>(<name>PyCFunction</name>)<name>dbmopen</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>dbmopen__doc__</name></expr>}</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initgdbm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Dbmtype</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"gdbm"</expr></argument>, <argument><expr><name>dbmmodule_methods</name></expr></argument>,
<argument><expr><name>gdbmmodule__doc__</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>NULL</name></expr></argument>,
<argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DbmError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"gdbm.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>DbmError</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>DbmError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>dbmmodule_open_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"open_flags"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
</unit>
