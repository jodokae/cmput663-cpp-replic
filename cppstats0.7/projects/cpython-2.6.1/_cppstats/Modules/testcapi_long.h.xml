<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/testcapi_long.h"><function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>TESTNAME</name><parameter_list>(<param><function_decl><type><name>PyObject</name> *</type><name>error</name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name>*</decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NBITS</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TYPENAME</name></expr></argument>)</argument_list></sizeof> * 8</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>TYPENAME</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pyresult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>base</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init>
<condition><expr><name>i</name> &lt; <name>NBITS</name> + 1</expr>;</condition>
<incr><expr>++<name>i</name></expr>, <expr><name>base</name> &lt;&lt;= 1</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 6</expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>TYPENAME</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>TYPENAME</name></type> <name>uin</name></decl>, <decl><type ref="prev"/><name>uout</name></decl>;</decl_stmt>
<expr_stmt><expr><name>uin</name> = <name>j</name> &lt; 3 ? <name>base</name>
: <call>(<name>unsigned</name> <name>TYPENAME</name>)<argument_list>(<argument><expr>-(<name>TYPENAME</name>)<name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uin</name> += <call><call>(<name>unsigned</name> <name>TYPENAME</name>)<argument_list>(<argument><expr><name>TYPENAME</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>j</name> % 3 - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pyresult</name> = <call><name>F_U_TO_PY</name><argument_list>(<argument><expr><name>uin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pyresult</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unsigned unexpected null result"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>uout</name> = <call><name>F_PY_TO_U</name><argument_list>(<argument><expr><name>pyresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>uout</name> == (<name>unsigned</name> <name>TYPENAME</name>)-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unsigned unexpected -1 result"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>uout</name> != <name>uin</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unsigned output != input"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>pyresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> = (<name>TYPENAME</name>)<name>uin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pyresult</name> = <call><name>F_S_TO_PY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pyresult</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"signed unexpected null result"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>out</name> = <call><name>F_PY_TO_S</name><argument_list>(<argument><expr><name>pyresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> == (<name>TYPENAME</name>)-1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"signed unexpected -1 result"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>out</name> != <name>in</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"signed output != input"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>pyresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
<block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>one</name></decl>, *<decl><type ref="prev"/><name>x</name></decl>, *<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TYPENAME</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>TYPENAME</name></type> <name>uout</name></decl>;</decl_stmt>
<expr_stmt><expr><name>one</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>one</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyLong_FromLong"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>x</name> = <call><name>PyNumber_Negative</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyNumber_Negative"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>uout</name> = <call><name>F_PY_TO_U</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>uout</name> != (<name>unsigned</name> <name>TYPENAME</name>)-1 || !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"PyLong_AsUnsignedXXX(-1) didn't complain"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>NBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>y</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyLong_FromLong"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>x</name> = <call><name>PyNumber_Lshift</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyNumber_Lshift"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>uout</name> = <call><name>F_PY_TO_U</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>uout</name> != (<name>unsigned</name> <name>TYPENAME</name>)-1 || !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"PyLong_AsUnsignedXXX(2**NBITS) didn't "
"complain"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = <call><name>PyNumber_Rshift</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>y</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyNumber_Rshift"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>out</name> = <call><name>F_PY_TO_S</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> != (<name>TYPENAME</name>)-1 || !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"PyLong_AsXXX(2**(NBITS-1)) didn't "
"complain"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = <call><name>PyNumber_Negative</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyNumber_Negative"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>y</name> = <call><name>PyNumber_Subtract</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>y</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"unexpected NULL from PyNumber_Subtract"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>out</name> = <call><name>F_PY_TO_S</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>out</name> != (<name>TYPENAME</name>)-1 || !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>error</name><argument_list>(
<argument><expr>"PyLong_AsXXX(-2**(NBITS-1)-1) didn't "
"complain"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNBIND</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
</unit>
