<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/cjkcodecs/multibytecodec.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_PYTHON_MULTIBYTECODEC_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PYTHON_MULTIBYTECODEC_H_</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>uint32_t</name></type> <name>ucs4_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ucs4_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>uint16_t</name></type> <name>ucs2_t</name>, <name>DBCHAR</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>ucs2_t</name>, <name>DBCHAR</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucs2_t</name></type> <name><name>u2</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucs4_t</name></type> <name><name>u4</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
}</block></union></type> <name>MultibyteCodec_State</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>mbcodec_init</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>mbencode_func</name>)<parameter_list>(<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> **</type><name>inbuf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>inleft</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> **</type><name>outbuf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>outleft</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>mbencodeinit_func</name>)<parameter_list>(<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>mbencodereset_func</name>)<parameter_list>(<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> **</type><name>outbuf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>outleft</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>mbdecode_func</name>)<parameter_list>(<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> **</type><name>inbuf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>inleft</name></decl></param>,
<param><decl><type><name>Py_UNICODE</name> **</type><name>outbuf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>outleft</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>mbdecodeinit_func</name>)<parameter_list>(<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>Py_ssize_t</name></type> (*<name>mbdecodereset_func</name>)<parameter_list>(<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbcodec_init</name></type> <name>codecinit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbencode_func</name></type> <name>encode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbencodeinit_func</name></type> <name>encinit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbencodereset_func</name></type> <name>encreset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbdecode_func</name></type> <name>decode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbdecodeinit_func</name></type> <name>decinit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbdecodereset_func</name></type> <name>decreset</name></decl>;</decl_stmt>
}</block></struct></type> <name>MultibyteCodec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>MultibyteCodec</name> *</type><name>codec</name></decl>;</decl_stmt>
}</block></struct></type> <name>MultibyteCodecObject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MultibyteCodec_Check</name><parameter_list>(<param><type><name>op</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((op)-&gt;ob_type == &amp;MultibyteCodec_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MultibyteStatefulCodec_HEAD</name></cpp:macro> <cpp:value>PyObject_HEAD MultibyteCodec *codec; MultibyteCodec_State state; PyObject *errors;</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>_MultibyteStatefulCodec_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>MultibyteStatefulCodecContext</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXENCPENDING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MultibyteStatefulEncoder_HEAD</name></cpp:macro> <cpp:value>_MultibyteStatefulCodec_HEAD Py_UNICODE pending[MAXENCPENDING]; Py_ssize_t pendingsize;</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>_MultibyteStatefulEncoder_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>MultibyteStatefulEncoderContext</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXDECPENDING</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MultibyteStatefulDecoder_HEAD</name></cpp:macro> <cpp:value>_MultibyteStatefulCodec_HEAD unsigned char pending[MAXDECPENDING]; Py_ssize_t pendingsize;</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>_MultibyteStatefulDecoder_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>MultibyteStatefulDecoderContext</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>_MultibyteStatefulEncoder_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>MultibyteIncrementalEncoderObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>_MultibyteStatefulDecoder_HEAD</name></expr></expr_stmt>
}</block></struct></type> <name>MultibyteIncrementalDecoderObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>_MultibyteStatefulDecoder_HEAD</name>
<name>PyObject</name> *</type><name>stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>MultibyteStreamReaderObject</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>_MultibyteStatefulEncoder_HEAD</name>
<name>PyObject</name> *</type><name>stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>MultibyteStreamWriterObject</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBERR_TOOSMALL</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBERR_TOOFEW</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBERR_INTERNAL</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_STRICT</name></cpp:macro> <cpp:value>(PyObject *)(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_IGNORE</name></cpp:macro> <cpp:value>(PyObject *)(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_REPLACE</name></cpp:macro> <cpp:value>(PyObject *)(3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_ISCUSTOM</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((p) &lt; ERROR_STRICT || ERROR_REPLACE &lt; (p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_DECREF</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (p != NULL &amp;&amp; ERROR_ISCUSTOM(p)) { Py_DECREF(p); } } while (0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBENC_FLUSH</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBENC_MAX</name></cpp:macro> <cpp:value>MBENC_FLUSH</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
