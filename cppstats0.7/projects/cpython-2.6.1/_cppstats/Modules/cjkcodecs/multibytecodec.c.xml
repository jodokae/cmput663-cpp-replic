<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/cjkcodecs/multibytecodec.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_SSIZE_T_CLEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"structmember.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multibytecodec.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>inbuf</name></decl>, *<name>inbuf_top</name>, *<name>inbuf_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>outbuf</name></decl>, *<name>outbuf_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>excobj</name></decl>, *<name>outobj</name>;</decl_stmt>
}</block></struct></type> <name>MultibyteEncodeBuffer</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>inbuf</name></decl>, *<name>inbuf_top</name>, *<name>inbuf_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>outbuf</name></decl>, *<name>outbuf_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>excobj</name></decl>, *<name>outobj</name>;</decl_stmt>
}</block></struct></type> <name>MultibyteDecodeBuffer</name>;</typedef>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>MultibyteCodec_Encode__doc__</name></expr></argument>,
<argument><expr>"I.encode(unicode[, errors]) -&gt; (string, length consumed)\n\
\n\
Return an encoded string version of `unicode'. errors may be given to\n\
set a different error handling scheme. Default is 'strict' meaning that\n\
encoding errors raise a UnicodeEncodeError. Other possible values are\n\
'ignore', 'replace' and 'xmlcharrefreplace' as well as any other name\n\
registered with codecs.register_error that can handle UnicodeEncodeErrors."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>MultibyteCodec_Decode__doc__</name></expr></argument>,
<argument><expr>"I.decode(string[, errors]) -&gt; (unicodeobject, length consumed)\n\
\n\
Decodes `string' using I, an MultibyteCodec instance. errors may be given\n\
to set a different error handling scheme. Default is 'strict' meaning\n\
that encoding errors raise a UnicodeDecodeError. Other possible values\n\
are 'ignore' and 'replace' as well as any other name registered with\n\
codecs.register_error that is able to handle UnicodeDecodeErrors."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>codeckwarglist</name><index>[]</index></name> <init>= <expr><block>{<expr>"input"</expr>, <expr>"errors"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>incnewkwarglist</name><index>[]</index></name> <init>= <expr><block>{<expr>"errors"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>incrementalkwarglist</name><index>[]</index></name> <init>= <expr><block>{<expr>"input"</expr>, <expr>"final"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>streamkwarglist</name><index>[]</index></name> <init>= <expr><block>{<expr>"stream"</expr>, <expr>"errors"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>multibytecodec_encode</name><parameter_list>(<param><decl><type><name>MultibyteCodec</name> *</type></decl></param>,
<param><decl><type><name>MultibyteCodec_State</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>Py_UNICODE</name> **</decl></param>, <param><decl><type><name>Py_ssize_t</name></type></decl></param>,
<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBENC_RESET</name></cpp:macro> <cpp:value>MBENC_MAX&lt;&lt;1</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>make_tuple</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>object</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>v</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>object</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>v</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> = <call><name>PyInt_FromSsize_t</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>w</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>internal_error_callback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errors</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>errors</name> == <name>NULL</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr>"strict"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>ERROR_STRICT</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr>"ignore"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>ERROR_IGNORE</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr>"replace"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>ERROR_REPLACE</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>call_error_callback</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>errors</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>exc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>args</name></decl>, *<decl><type ref="prev"/><name>cb</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> = <call><name>PyCodec_LookupError</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cb</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>PyTuple_SET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>codecctx_errors_get</name><parameter_list>(<param><decl><type><name>MultibyteStatefulCodecContext</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errors</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>ERROR_STRICT</name></expr>)</condition><then>
<expr_stmt><expr><name>errors</name> = "strict"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>ERROR_IGNORE</name></expr>)</condition><then>
<expr_stmt><expr><name>errors</name> = "ignore"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>ERROR_REPLACE</name></expr>)</condition><then>
<expr_stmt><expr><name>errors</name> = "replace"</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>self</name>-&gt;<name>errors</name></name></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>codecctx_errors_set</name><parameter_list>(<param><decl><type><name>MultibyteStatefulCodecContext</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>cb</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"errors must be a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cb</name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cb</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>errors</name></name> = <name>cb</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyGetSetDef</name></type> <name><name>codecctx_getsets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"errors"</expr>, <expr>(<name>getter</name>)<name>codecctx_errors_get</name></expr>,
<expr>(<name>setter</name>)<name>codecctx_errors_set</name></expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"how to treat errors"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>expand_encodebuffer</name><parameter_list>(<param><decl><type><name>MultibyteEncodeBuffer</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>esize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>orgpos</name></decl>, <decl><type ref="prev"/><name>orgsize</name></decl>, <decl><type ref="prev"/><name>incsize</name></decl>;</decl_stmt>
<expr_stmt><expr><name>orgpos</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr>(<name>char</name> *)<name><name>buf</name>-&gt;<name>outbuf</name></name> -
<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orgsize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incsize</name> = (<name>esize</name> &lt; (<name>orgsize</name> &gt;&gt; 1) ? (<name>orgsize</name> &gt;&gt; 1) | 1 : <name>esize</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>orgsize</name> &gt; <name>PY_SSIZE_T_MAX</name> - <name>incsize</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>, <argument><expr><name>orgsize</name> + <name>incsize</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf</name></name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call> +<name>orgpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf_end</name></name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call>
+ <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_ENCODEBUFFER</name><parameter_list>(<param><type><name>buf</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if ((s) &lt; 1 || (buf)-&gt;outbuf + (s) &gt; (buf)-&gt;outbuf_end) if (expand_encodebuffer(buf, s) == -1) goto errorexit; }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>expand_decodebuffer</name><parameter_list>(<param><decl><type><name>MultibyteDecodeBuffer</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>esize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>orgpos</name></decl>, <decl><type ref="prev"/><name>orgsize</name></decl>;</decl_stmt>
<expr_stmt><expr><name>orgpos</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outbuf</name></name> - <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orgsize</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyUnicode_Resize</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>, <argument><expr><name>orgsize</name> + (
<name>esize</name> &lt; (<name>orgsize</name> &gt;&gt; 1) ? (<name>orgsize</name> &gt;&gt; 1) | 1 : <name>esize</name>)</expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf</name></name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call> + <name>orgpos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf_end</name></name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call>
+ <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_DECODEBUFFER</name><parameter_list>(<param><type><name>buf</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ if ((s) &lt; 1 || (buf)-&gt;outbuf + (s) &gt; (buf)-&gt;outbuf_end) if (expand_decodebuffer(buf, s) == -1) goto errorexit; }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>multibytecodec_encerror</name><parameter_list>(<param><decl><type><name>MultibyteCodec</name> *</type><name>codec</name></decl></param>,
<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><name>MultibyteEncodeBuffer</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>errors</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>retobj</name> <init>= <expr><name>NULL</name></expr></init>, *<name>retstr</name> <init>= <expr><name>NULL</name></expr></init>, *<name>tobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>retstrsize</name></decl>, <decl><type ref="prev"/><name>newpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>esize</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>e</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "illegal multibyte sequence"</expr>;</expr_stmt>
<expr_stmt><expr><name>esize</name> = <name>e</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<switch>switch <condition>(<expr><name>e</name></expr>)</condition> <block>{
<case>case <expr><name>MBERR_TOOSMALL</name></expr>:
<expr_stmt><expr><call><name>REQUIRE_ENCODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>MBERR_TOOFEW</name></expr>:
<expr_stmt><expr><name>reason</name> = "incomplete multibyte sequence"</expr>;</expr_stmt>
<expr_stmt><expr><name>esize</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MBERR_INTERNAL</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"internal codec error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"unknown runtime error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
</default>}</block></switch>
}</block></else></if>
<if>if <condition>(<expr><name>errors</name> == <name>ERROR_REPLACE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name></type> <name>replchar</name> <init>= <expr>'?'</expr></init>, *<name>inbuf</name> <init>= <expr>&amp;<name>replchar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>outleft</name></decl>;</decl_stmt>
<expr_stmt><expr><name>outleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outbuf_end</name></name> - <name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name><name>codec</name>-&gt;<name>encode</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>codec</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr>&amp;<name>inbuf</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr>&amp;<name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr><name>outleft</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == <name>MBERR_TOOSMALL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>REQUIRE_ENCODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else
<break>break;</break></else></if>
}</block></for>
<if>if <condition>(<expr><name>r</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>REQUIRE_ENCODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>buf</name>-&gt;<name>outbuf</name></name>++ = '?'</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>errors</name> == <name>ERROR_IGNORE</name> || <name>errors</name> == <name>ERROR_REPLACE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> += <name>esize</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>start</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> - <name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name>start</name> + <name>esize</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>excobj</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name>-&gt;<name>excobj</name></name> = <call><name>PyUnicodeEncodeError_Create</name><argument_list>(<argument><expr><name><name>codec</name>-&gt;<name>encoding</name></name></expr></argument>,
<argument><expr><name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>,
<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>,
<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>excobj</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyUnicodeEncodeError_SetStart</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> != 0 ||
<call><name>PyUnicodeEncodeError_SetEnd</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> != 0 ||
<call><name>PyUnicodeEncodeError_SetReason</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></else></if>
<if>if <condition>(<expr><name>errors</name> == <name>ERROR_STRICT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyCodec_StrictErrors</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>retobj</name> = <call><name>call_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retobj</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call> != 2 ||
!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr>(<name>tobj</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call> ||
!(<call><name>PyInt_Check</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
<call><name>PyLong_Check</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"encoding error handler must return "
"(unicode, int) tuple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>uraw</name> <init>= <expr><call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>retstr</name> = <call><name>multibytecodec_encode</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr>&amp;<name>uraw</name></expr></argument>,
<argument><expr><call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ERROR_STRICT</name></expr></argument>,
<argument><expr><name>MBENC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retstr</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
}</block>
<expr_stmt><expr><name>retstrsize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>retstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ENCODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>retstrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>retstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>retstrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf</name></name> += <name>retstrsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newpos</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newpos</name> &lt; 0 &amp;&amp; !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>newpos</name> += <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>newpos</name> &lt; 0 || <name><name>buf</name>-&gt;<name>inbuf_top</name></name> + <name>newpos</name> &gt; <name><name>buf</name>-&gt;<name>inbuf_end</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"position %zd from error handler out of bounds"</expr></argument>,
<argument><expr><name>newpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> = <name><name>buf</name>-&gt;<name>inbuf_top</name></name> + <name>newpos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>retstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>multibytecodec_decerror</name><parameter_list>(<param><decl><type><name>MultibyteCodec</name> *</type><name>codec</name></decl></param>,
<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><name>MultibyteDecodeBuffer</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>errors</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>retobj</name> <init>= <expr><name>NULL</name></expr></init>, *<name>retuni</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>retunisize</name></decl>, <decl><type ref="prev"/><name>newpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>esize</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>e</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "illegal multibyte sequence"</expr>;</expr_stmt>
<expr_stmt><expr><name>esize</name> = <name>e</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<switch>switch <condition>(<expr><name>e</name></expr>)</condition> <block>{
<case>case <expr><name>MBERR_TOOSMALL</name></expr>:
<expr_stmt><expr><call><name>REQUIRE_DECODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>MBERR_TOOFEW</name></expr>:
<expr_stmt><expr><name>reason</name> = "incomplete multibyte sequence"</expr>;</expr_stmt>
<expr_stmt><expr><name>esize</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MBERR_INTERNAL</name></expr>:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"internal codec error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_RuntimeError</name></expr></argument>,
<argument><expr>"unknown runtime error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
</default>}</block></switch>
}</block></else></if>
<if>if <condition>(<expr><name>errors</name> == <name>ERROR_REPLACE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>REQUIRE_DECODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>buf</name>-&gt;<name>outbuf</name></name>++ = <name>Py_UNICODE_REPLACEMENT_CHARACTER</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>errors</name> == <name>ERROR_IGNORE</name> || <name>errors</name> == <name>ERROR_REPLACE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> += <name>esize</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>start</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> - <name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name>start</name> + <name>esize</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>excobj</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name>-&gt;<name>excobj</name></name> = <call><name>PyUnicodeDecodeError_Create</name><argument_list>(<argument><expr><name><name>codec</name>-&gt;<name>encoding</name></name></expr></argument>,
<argument><expr>(const <name>char</name> *)<name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>,
<argument><expr><call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>excobj</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>PyUnicodeDecodeError_SetStart</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> ||
<call><name>PyUnicodeDecodeError_SetEnd</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> ||
<call><name>PyUnicodeDecodeError_SetReason</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></else></if>
<if>if <condition>(<expr><name>errors</name> == <name>ERROR_STRICT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyCodec_StrictErrors</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>retobj</name> = <call><name>call_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retobj</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call> || <call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call> != 2 ||
!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr>(<name>retuni</name> = <call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call> ||
!(<call><name>PyInt_Check</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
<call><name>PyLong_Check</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"decoding error handler must return "
"(unicode, int) tuple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>retunisize</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>retuni</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retunisize</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>REQUIRE_DECODEBUFFER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>retunisize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr><call><name>PyUnicode_AS_DATA</name><argument_list>(<argument><expr><name>retuni</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>retunisize</name> * <name>Py_UNICODE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf</name></name> += <name>retunisize</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>newpos</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newpos</name> &lt; 0 &amp;&amp; !<call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>newpos</name> += <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>newpos</name> &lt; 0 || <name><name>buf</name>-&gt;<name>inbuf_top</name></name> + <name>newpos</name> &gt; <name><name>buf</name>-&gt;<name>inbuf_end</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_IndexError</name></expr></argument>,
<argument><expr>"position %zd from error handler out of bounds"</expr></argument>,
<argument><expr><name>newpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> = <name><name>buf</name>-&gt;<name>inbuf_top</name></name> + <name>newpos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>retobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>multibytecodec_encode</name><parameter_list>(<param><decl><type><name>MultibyteCodec</name> *</type><name>codec</name></decl></param>,
<param><decl><type><name>MultibyteCodec_State</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> **</type><name>data</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>datalen</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>errors</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteEncodeBuffer</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>finalsize</name></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>datalen</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>buf</name>.<name>excobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>inbuf</name></name> = <name><name>buf</name>.<name>inbuf_top</name></name> = *<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>inbuf_end</name></name> = <name><name>buf</name>.<name>inbuf_top</name></name> + <name>datalen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>datalen</name> &gt; (<name>PY_SSIZE_T_MAX</name> - 16) / 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name>.<name>outobj</name></name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>datalen</name> * 2 + 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>.<name>outobj</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><name><name>buf</name>.<name>outbuf</name></name> = (<name>unsigned</name> <name>char</name> *)<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>outbuf_end</name></name> = <name><name>buf</name>.<name>outbuf</name></name> + <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>buf</name>.<name>inbuf</name></name> &lt; <name><name>buf</name>.<name>inbuf_end</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>inleft</name></decl>, <decl><type ref="prev"/><name>outleft</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>inbuf_end</name></name> - <name><name>buf</name>.<name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>outbuf_end</name></name> - <name><name>buf</name>.<name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name><name>codec</name>-&gt;<name>encode</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>codec</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr>&amp;<name><name>buf</name>.<name>inbuf</name></name></expr></argument>, <argument><expr><name>inleft</name></expr></argument>,
<argument><expr>&amp;<name><name>buf</name>.<name>outbuf</name></name></expr></argument>, <argument><expr><name>outleft</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>data</name> = <name><name>buf</name>.<name>inbuf</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>r</name> == 0) || (<name>r</name> == <name>MBERR_TOOFEW</name> &amp;&amp; !(<name>flags</name> &amp; <name>MBENC_FLUSH</name>))</expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><call><name>multibytecodec_encerror</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then>
<else>else <if>if <condition>(<expr><name>r</name> == <name>MBERR_TOOFEW</name></expr>)</condition><then>
<break>break;</break></then></if></else></if></else></if>
}</block></while>
<if>if <condition>(<expr><name><name>codec</name>-&gt;<name>encreset</name></name> != <name>NULL</name></expr>)</condition><then>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>outleft</name></decl>;</decl_stmt>
<expr_stmt><expr><name>outleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>outbuf_end</name></name> - <name><name>buf</name>.<name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name><name>codec</name>-&gt;<name>encreset</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>codec</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr>&amp;<name><name>buf</name>.<name>outbuf</name></name></expr></argument>,
<argument><expr><name>outleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == 0</expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><call><name>multibytecodec_encerror</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>state</name></expr></argument>,
<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></else></if>
}</block></for></then></if>
<expr_stmt><expr><name>finalsize</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr>(<name>char</name> *)<name><name>buf</name>.<name>outbuf</name></name> -
<call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>finalsize</name> != <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>_PyString_Resize</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>.<name>outobj</name></name></expr></argument>, <argument><expr><name>finalsize</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name>.<name>outobj</name></name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MultibyteCodec_Encode</name><parameter_list>(<param><decl><type><name>MultibyteCodecObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteCodec_State</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>errorcb</name></decl>, *<decl><type ref="prev"/><name>r</name></decl>, *<decl><type ref="prev"/><name>arg</name></decl>, *<decl><type ref="prev"/><name>ucvt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>datalen</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|z:encode"</expr></argument>,
<argument><expr><name>codeckwarglist</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ucvt</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>arg</name> = <name>ucvt</name> = <call><name>PyObject_Unicode</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else <if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"couldn't convert the object to unicode."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
}</block></else></if>
<expr_stmt><expr><name>data</name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>datalen</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errorcb</name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errorcb</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>encinit</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>encinit</name></name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><name>r</name> = <call><name>multibytecodec_encode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>,
<argument><expr>(const <name>Py_UNICODE</name> **)&amp;<name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><name>errorcb</name></expr></argument>,
<argument><expr><name>MBENC_FLUSH</name> | <name>MBENC_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name>errorcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name>errorcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>MultibyteCodec_Decode</name><parameter_list>(<param><decl><type><name>MultibyteCodecObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteCodec_State</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultibyteDecodeBuffer</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>errorcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_buffer</name></type> <name>pdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>, *<decl><type ref="prev"/><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>datalen</name></decl>, <decl><type ref="prev"/><name>finalsize</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s*|z:decode"</expr></argument>,
<argument><expr><name>codeckwarglist</name></expr></argument>, <argument><expr>&amp;<name>pdata</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>data</name> = <name><name>pdata</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>datalen</name> = <name><name>pdata</name>.<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>errorcb</name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errorcb</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr>&amp;<name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>datalen</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr>&amp;<name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name>errorcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name>.<name>excobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>inbuf</name></name> = <name><name>buf</name>.<name>inbuf_top</name></name> = (<name>unsigned</name> <name>char</name> *)<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>inbuf_end</name></name> = <name><name>buf</name>.<name>inbuf_top</name></name> + <name>datalen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>outobj</name></name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>.<name>outobj</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><name><name>buf</name>.<name>outbuf</name></name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>outbuf_end</name></name> = <name><name>buf</name>.<name>outbuf</name></name> + <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decinit</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decinit</name></name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<while>while <condition>(<expr><name><name>buf</name>.<name>inbuf</name></name> &lt; <name><name>buf</name>.<name>inbuf_end</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>inleft</name></decl>, <decl><type ref="prev"/><name>outleft</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>inbuf_end</name></name> - <name><name>buf</name>.<name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>outbuf_end</name></name> - <name><name>buf</name>.<name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decode</name></name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>,
<argument><expr>&amp;<name><name>buf</name>.<name>inbuf</name></name></expr></argument>, <argument><expr><name>inleft</name></expr></argument>, <argument><expr>&amp;<name><name>buf</name>.<name>outbuf</name></name></expr></argument>, <argument><expr><name>outleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == 0</expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><call><name>multibytecodec_decerror</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>,
<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>errorcb</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></else></if>
}</block></while>
<expr_stmt><expr><name>finalsize</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>outbuf</name></name> -
<call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>finalsize</name> != <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>PyUnicode_Resize</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>.<name>outobj</name></name></expr></argument>, <argument><expr><name>finalsize</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></then></if>
<expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr>&amp;<name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name>errorcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr>&amp;<name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name>errorcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>multibytecodec_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"encode"</expr>, <expr>(<name>PyCFunction</name>)<name>MultibyteCodec_Encode</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>MultibyteCodec_Encode__doc__</name></expr>
}</block></expr>,
<expr><block>{
<expr>"decode"</expr>, <expr>(<name>PyCFunction</name>)<name>MultibyteCodec_Decode</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>,
<expr><name>MultibyteCodec_Decode__doc__</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>multibytecodec_dealloc</name><parameter_list>(<param><decl><type><name>MultibyteCodecObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_Del</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MultibyteCodec_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"MultibyteCodec"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultibyteCodecObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>multibytecodec_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>multibytecodec_methods</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATEFUL_DCTX</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((MultibyteStatefulDecoderContext *)(o))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATEFUL_ECTX</name><parameter_list>(<param><type><name>o</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((MultibyteStatefulEncoderContext *)(o))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>encoder_encode_stateful</name><parameter_list>(<param><decl><type><name>MultibyteStatefulEncoderContext</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>unistr</name></decl></param>, <param><decl><type><name>int</name></type> <name>final</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ucvt</name></decl>, *<decl><type ref="prev"/><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_UNICODE</name> *</type><name>inbuf</name></decl>, *<decl><type ref="prev"/><name>inbuf_end</name></decl>, *<decl><type ref="prev"/><name>inbuf_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>datalen</name></decl>, <decl><type ref="prev"/><name>origpending</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ucvt</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>unistr</name> = <name>ucvt</name> = <call><name>PyObject_Unicode</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>unistr</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else <if>if <condition>(<expr>!<call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"couldn't convert the object to unicode."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
}</block></else></if>
<expr_stmt><expr><name>datalen</name> = <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>origpending</name> = <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>origpending</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>datalen</name> &gt; <name>PY_SSIZE_T_MAX</name> - <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>inbuf_tmp</name> = <call><name>PyMem_New</name><argument_list>(<argument><expr><name>Py_UNICODE</name></expr></argument>, <argument><expr><name>datalen</name> + <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>inbuf_tmp</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>inbuf_tmp</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pending</name></name></expr></argument>,
<argument><expr><name>Py_UNICODE_SIZE</name> * <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>inbuf_tmp</name> + <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr></argument>,
<argument><expr><call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Py_UNICODE_SIZE</name> * <name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>datalen</name> += <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>inbuf</name> = <name>inbuf_tmp</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>inbuf</name> = (<name>Py_UNICODE</name> *)<call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name>unistr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>inbuf_end</name> = <name>inbuf</name> + <name>datalen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>multibytecodec_encode</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr>(const <name>Py_UNICODE</name> **)&amp;<name>inbuf</name></expr></argument>,
<argument><expr><name>datalen</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>errors</name></name></expr></argument>, <argument><expr><name>final</name> ? <name>MBENC_FLUSH</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>origpending</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pending</name></name></expr></argument>, <argument><expr><name>inbuf_tmp</name></expr></argument>,
<argument><expr><name>Py_UNICODE_SIZE</name> * <name>origpending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> = <name>origpending</name></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>inbuf</name> &lt; <name>inbuf_end</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name>inbuf_end</name> - <name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> &gt; <name>MAXENCPENDING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_UnicodeError</name></expr></argument>,
<argument><expr>"pending buffer overflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pending</name></name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> * <name>Py_UNICODE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>inbuf_tmp</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_Del</name><argument_list>(<argument><expr><name>inbuf_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
<label><name>errorexit</name>:</label>
<if>if <condition>(<expr><name>inbuf_tmp</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_Del</name><argument_list>(<argument><expr><name>inbuf_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ucvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>decoder_append_pending</name><parameter_list>(<param><decl><type><name>MultibyteStatefulDecoderContext</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>MultibyteDecodeBuffer</name> *</type><name>buf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>npendings</name></decl>;</decl_stmt>
<expr_stmt><expr><name>npendings</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>npendings</name> + <name><name>ctx</name>-&gt;<name>pendingsize</name></name> &gt; <name>MAXDECPENDING</name> ||
<name>npendings</name> &gt; <name>PY_SSIZE_T_MAX</name> - <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_UnicodeError</name></expr></argument>, <argument><expr>"pending buffer overflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pending</name></name> + <name><name>ctx</name>-&gt;<name>pendingsize</name></name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>inbuf</name></name></expr></argument>, <argument><expr><name>npendings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pendingsize</name></name> += <name>npendings</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>decoder_prepare_buffer</name><parameter_list>(<param><decl><type><name>MultibyteDecodeBuffer</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>buf</name>-&gt;<name>inbuf</name></name> = <name><name>buf</name>-&gt;<name>inbuf_top</name></name> = (const <name>unsigned</name> <name>char</name> *)<name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> = <name><name>buf</name>-&gt;<name>inbuf_top</name></name> + <name>size</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>outobj</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outobj</name></name> = <call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>outobj</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf</name></name> = <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outbuf_end</name></name> = <name><name>buf</name>-&gt;<name>outbuf</name></name> +
<call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>decoder_feed_buffer</name><parameter_list>(<param><decl><type><name>MultibyteStatefulDecoderContext</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>MultibyteDecodeBuffer</name> *</type><name>buf</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name><name>buf</name>-&gt;<name>inbuf</name></name> &lt; <name><name>buf</name>-&gt;<name>inbuf_end</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>inleft</name></decl>, <decl><type ref="prev"/><name>outleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>inbuf_end</name></name> - <name><name>buf</name>-&gt;<name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outleft</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>outbuf_end</name></name> - <name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name><name>ctx</name>-&gt;<name>codec</name>-&gt;<name>decode</name></name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>,
<argument><expr>&amp;<name><name>buf</name>-&gt;<name>inbuf</name></name></expr></argument>, <argument><expr><name>inleft</name></expr></argument>, <argument><expr>&amp;<name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr><name>outleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == 0 || <name>r</name> == <name>MBERR_TOOFEW</name></expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><call><name>multibytecodec_decerror</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>errors</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbiencoder_encode</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalEncoderObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>final</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"O|i:encode"</expr></argument>,
<argument><expr><name>incrementalkwarglist</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>final</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>encoder_encode_stateful</name><argument_list>(<argument><expr><call><name>STATEFUL_ECTX</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbiencoder_reset</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalEncoderObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decreset</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decreset</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>mbiencoder_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"encode"</expr>, <expr>(<name>PyCFunction</name>)<name>mbiencoder_encode</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"reset"</expr>, <expr>(<name>PyCFunction</name>)<name>mbiencoder_reset</name></expr>,
<expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbiencoder_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteIncrementalEncoderObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"|s:IncrementalEncoder"</expr></argument>,
<argument><expr><name>incnewkwarglist</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = (<name>MultibyteIncrementalEncoderObject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>codec</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>type</name></expr></argument>, <argument><expr>"codec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>codec</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>MultibyteCodec_Check</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"codec is unexpected type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>codec</name></name> = ((<name>MultibyteCodecObject</name> *)<name>codec</name>)-&gt;<name>codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>errors</name></name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>encinit</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>encinit</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbiencoder_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbiencoder_traverse</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalEncoderObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ERROR_ISCUSTOM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mbiencoder_dealloc</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalEncoderObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MultibyteIncrementalEncoder_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"MultibyteIncrementalEncoder"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultibyteIncrementalEncoderObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>mbiencoder_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name>
| <name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>mbiencoder_traverse</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbiencoder_methods</name></expr>,
<expr>0</expr>,
<expr><name>codecctx_getsets</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbiencoder_init</name></expr>,
<expr>0</expr>,
<expr><name>mbiencoder_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbidecoder_decode</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalDecoderObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteDecodeBuffer</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>, *<decl><type ref="prev"/><name>wdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_buffer</name></type> <name>pdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>wsize</name></decl>, <decl><type ref="prev"/><name>finalsize</name> <init>= <expr>0</expr></init>, <name>size</name></decl>, <decl><type ref="prev"/><name>origpending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>final</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr>"s*|i:decode"</expr></argument>,
<argument><expr><name>incrementalkwarglist</name></expr></argument>, <argument><expr>&amp;<name>pdata</name></expr></argument>, <argument><expr>&amp;<name>final</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>data</name> = <name><name>pdata</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <name><name>pdata</name>.<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>.<name>outobj</name></name> = <name><name>buf</name>.<name>excobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>origpending</name> = <name><name>self</name>-&gt;<name>pendingsize</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>pendingsize</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>wsize</name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wdata</name> = <name>data</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>size</name> &gt; <name>PY_SSIZE_T_MAX</name> - <name><name>self</name>-&gt;<name>pendingsize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>wsize</name> = <name>size</name> + <name><name>self</name>-&gt;<name>pendingsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wdata</name> = <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>wsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wdata</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wdata</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pending</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pendingsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wdata</name> + <name><name>self</name>-&gt;<name>pendingsize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>decoder_prepare_buffer</name><argument_list>(<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>wdata</name></expr></argument>, <argument><expr><name>wsize</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><call><name>decoder_feed_buffer</name><argument_list>(<argument><expr><call><name>STATEFUL_DCTX</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name>final</name> &amp;&amp; <name><name>buf</name>.<name>inbuf</name></name> &lt; <name><name>buf</name>.<name>inbuf_end</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>multibytecodec_decerror</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>, <argument><expr><name>MBERR_TOOFEW</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>pending</name></name></expr></argument>, <argument><expr><name>wdata</name></expr></argument>, <argument><expr><name>origpending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = <name>origpending</name></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>buf</name>.<name>inbuf</name></name> &lt; <name><name>buf</name>.<name>inbuf_end</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>decoder_append_pending</name><argument_list>(<argument><expr><call><name>STATEFUL_DCTX</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><name>finalsize</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>outbuf</name></name> - <call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>finalsize</name> != <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>PyUnicode_Resize</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>.<name>outobj</name></name></expr></argument>, <argument><expr><name>finalsize</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></then></if>
<expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr>&amp;<name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wdata</name> != <name>data</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_Del</name><argument_list>(<argument><expr><name>wdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name>.<name>outobj</name></name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>PyBuffer_Release</name><argument_list>(<argument><expr>&amp;<name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wdata</name> != <name>NULL</name> &amp;&amp; <name>wdata</name> != <name>data</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyMem_Del</name><argument_list>(<argument><expr><name>wdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbidecoder_reset</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalDecoderObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decreset</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decreset</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>mbidecoder_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"decode"</expr>, <expr>(<name>PyCFunction</name>)<name>mbidecoder_decode</name></expr>,
<expr><name>METH_VARARGS</name> | <name>METH_KEYWORDS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"reset"</expr>, <expr>(<name>PyCFunction</name>)<name>mbidecoder_reset</name></expr>,
<expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbidecoder_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteIncrementalDecoderObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"|s:IncrementalDecoder"</expr></argument>,
<argument><expr><name>incnewkwarglist</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = (<name>MultibyteIncrementalDecoderObject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>codec</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>type</name></expr></argument>, <argument><expr>"codec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>codec</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>MultibyteCodec_Check</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"codec is unexpected type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>codec</name></name> = ((<name>MultibyteCodecObject</name> *)<name>codec</name>)-&gt;<name>codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>errors</name></name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decinit</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decinit</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbidecoder_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbidecoder_traverse</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalDecoderObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ERROR_ISCUSTOM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mbidecoder_dealloc</name><parameter_list>(<param><decl><type><name>MultibyteIncrementalDecoderObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MultibyteIncrementalDecoder_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"MultibyteIncrementalDecoder"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultibyteIncrementalDecoderObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>mbidecoder_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name>
| <name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>mbidecoder_traverse</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbidecoder_methods</name></expr>,
<expr>0</expr>,
<expr><name>codecctx_getsets</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbidecoder_init</name></expr>,
<expr>0</expr>,
<expr><name>mbidecoder_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamreader_iread</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><name>Py_ssize_t</name></type> <name>sizehint</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteDecodeBuffer</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>cres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>rsize</name></decl>, <decl><type ref="prev"/><name>finalsize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sizehint</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>PyUnicode_FromUnicode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>buf</name>.<name>outobj</name></name> = <name><name>buf</name>.<name>excobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cres</name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>endoffile</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sizehint</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>cres</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>cres</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>method</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr><name>sizehint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>cres</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"stream function returned a "
"non-string object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>endoffile</name> = (<call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>pendingsize</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>ctr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ctrdata</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call> &gt; <name>PY_SSIZE_T_MAX</name> - <name><name>self</name>-&gt;<name>pendingsize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>rsize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call> + <name><name>self</name>-&gt;<name>pendingsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctr</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ctr</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><name>ctrdata</name> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ctrdata</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pending</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pendingsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ctrdata</name> + <name><name>self</name>-&gt;<name>pendingsize</name></name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cres</name> = <name>ctr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rsize</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>decoder_prepare_buffer</name><argument_list>(<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rsize</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name>rsize</name> &gt; 0 &amp;&amp; <call><name>decoder_feed_buffer</name><argument_list>(
<argument><expr>(<name>MultibyteStatefulDecoderContext</name> *)<name>self</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name>endoffile</name> || <name>sizehint</name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>buf</name>.<name>inbuf</name></name> &lt; <name><name>buf</name>.<name>inbuf_end</name></name> &amp;&amp;
<call><name>multibytecodec_decerror</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>, <argument><expr><name>MBERR_TOOFEW</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>buf</name>.<name>inbuf</name></name> &lt; <name><name>buf</name>.<name>inbuf_end</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>decoder_append_pending</name><argument_list>(<argument><expr><call><name>STATEFUL_DCTX</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
}</block></then></if>
<expr_stmt><expr><name>finalsize</name> = <call>(<name>Py_ssize_t</name>)<argument_list>(<argument><expr><name><name>buf</name>.<name>outbuf</name></name> -
<call><name>PyUnicode_AS_UNICODE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cres</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sizehint</name> &lt; 0 || <name>finalsize</name> != 0 || <name>rsize</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>sizehint</name> = 1</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>finalsize</name> != <call><name>PyUnicode_GET_SIZE</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>PyUnicode_Resize</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>.<name>outobj</name></name></expr></argument>, <argument><expr><name>finalsize</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if></then></if>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name>.<name>outobj</name></name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>cres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>excobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>buf</name>.<name>outobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamreader_read</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>sizeobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"read"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>sizeobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>sizeobj</name> == <name>Py_None</name> || <name>sizeobj</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>size</name> = -1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>sizeobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>size</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>sizeobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg 1 must be an integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><call><name>mbstreamreader_iread</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"read"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamreader_readline</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>sizeobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"readline"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>sizeobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>sizeobj</name> == <name>Py_None</name> || <name>sizeobj</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>size</name> = -1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>sizeobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>size</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>sizeobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg 1 must be an integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><call><name>mbstreamreader_iread</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"readline"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamreader_readlines</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>sizehintobj</name> <init>= <expr><name>NULL</name></expr></init>, *<name>r</name></decl>, *<decl><type ref="prev"/><name>sr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>sizehint</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_UnpackTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"readlines"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>sizehintobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>sizehintobj</name> == <name>Py_None</name> || <name>sizehintobj</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>sizehint</name> = -1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>sizehintobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>sizehint</name> = <call><name>PyInt_AsSsize_t</name><argument_list>(<argument><expr><name>sizehintobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"arg 1 must be an integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>r</name> = <call><name>mbstreamreader_iread</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>"read"</expr></argument>, <argument><expr><name>sizehint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>sr</name> = <call><name>PyUnicode_Splitlines</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamreader_reset</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decreset</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decreset</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>mbstreamreader_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"read"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamreader_read</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"readline"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamreader_readline</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"readlines"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamreader_readlines</name></expr>,
<expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"reset"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamreader_reset</name></expr>,
<expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>mbstreamreader_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"stream"</expr>, <expr><name>T_OBJECT</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MultibyteStreamReaderObject</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>,
<expr><name>READONLY</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamreader_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>stream</name></decl>, *<decl><type ref="prev"/><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"O|s:StreamReader"</expr></argument>,
<argument><expr><name>streamkwarglist</name></expr></argument>, <argument><expr>&amp;<name>stream</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = (<name>MultibyteStreamReaderObject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>codec</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>type</name></expr></argument>, <argument><expr>"codec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>codec</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>MultibyteCodec_Check</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"codec is unexpected type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>codec</name></name> = ((<name>MultibyteCodecObject</name> *)<name>codec</name>)-&gt;<name>codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>stream</name></name> = <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>errors</name></name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decinit</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>decinit</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbstreamreader_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbstreamreader_traverse</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ERROR_ISCUSTOM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mbstreamreader_dealloc</name><parameter_list>(<param><decl><type><name>MultibyteStreamReaderObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MultibyteStreamReader_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"MultibyteStreamReader"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultibyteStreamReaderObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>mbstreamreader_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name>
| <name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>mbstreamreader_traverse</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbstreamreader_methods</name></expr>,
<expr><name>mbstreamreader_members</name></expr>,
<expr><name>codecctx_getsets</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbstreamreader_init</name></expr>,
<expr>0</expr>,
<expr><name>mbstreamreader_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbstreamwriter_iwrite</name><parameter_list>(<param><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>PyObject</name> *</type><name>unistr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>str</name></decl>, *<decl><type ref="prev"/><name>wr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>encoder_encode_stateful</name><argument_list>(<argument><expr><call><name>STATEFUL_ECTX</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unistr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>wr</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr>"write"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wr</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamwriter_write</name><parameter_list>(<param><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>strobj</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>mbstreamwriter_iwrite</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>strobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamwriter_writelines</name><parameter_list>(<param><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>lines</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>strobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"arg must be a sequence object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>strobj</name> = <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>strobj</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>r</name> = <call><name>mbstreamwriter_iwrite</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>strobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>strobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> == -1</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamwriter_reset</name><parameter_list>(<param><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Py_UNICODE</name> *</type><name>pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>pwrt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pending</name> = <name><name>self</name>-&gt;<name>pending</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pwrt</name> = <call><name>multibytecodec_encode</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>codec</name></name></expr></argument>, <argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr>&amp;<name>pending</name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>pendingsize</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>,
<argument><expr><name>MBENC_FLUSH</name> | <name>MBENC_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>pwrt</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyString_Size</name><argument_list>(<argument><expr><name>pwrt</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>wr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>wr</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr>"write"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>pwrt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pwrt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>pwrt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>mbstreamwriter_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>stream</name></decl>, *<decl><type ref="prev"/><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>errors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr>"O|s:StreamWriter"</expr></argument>,
<argument><expr><name>streamkwarglist</name></expr></argument>, <argument><expr>&amp;<name>stream</name></expr></argument>, <argument><expr>&amp;<name>errors</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = (<name>MultibyteStreamWriterObject</name> *)<call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>codec</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>type</name></expr></argument>, <argument><expr>"codec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>codec</name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr>!<call><name>MultibyteCodec_Check</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"codec is unexpected type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>errorexit</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>codec</name></name> = ((<name>MultibyteCodecObject</name> *)<name>codec</name>)-&gt;<name>codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>stream</name></name> = <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>pendingsize</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>self</name>-&gt;<name>errors</name></name> = <call><name>internal_error_callback</name><argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>errors</name></name> == <name>NULL</name></expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>encinit</name></name> != <name>NULL</name> &amp;&amp;
<call><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>encinit</name></name><argument_list>(<argument><expr>&amp;<name><name>self</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name><name>self</name>-&gt;<name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>errorexit</name>;</goto></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
<label><name>errorexit</name>:</label>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbstreamwriter_init</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>kwds</name></decl></param>)</parameter_list> <block>{
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mbstreamwriter_traverse</name><parameter_list>(<param><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl></param>,
<param><decl><type><name>visitproc</name></type> <name>visit</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ERROR_ISCUSTOM</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>Py_VISIT</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mbstreamwriter_dealloc</name><parameter_list>(<param><decl><type><name>MultibyteStreamWriterObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>PyObject_GC_UnTrack</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call>-&gt;<call><name>tp_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>mbstreamwriter_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"write"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamwriter_write</name></expr>,
<expr><name>METH_O</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"writelines"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamwriter_writelines</name></expr>,
<expr><name>METH_O</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{
<expr>"reset"</expr>, <expr>(<name>PyCFunction</name>)<name>mbstreamwriter_reset</name></expr>,
<expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMemberDef</name></type> <name><name>mbstreamwriter_members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"stream"</expr>, <expr><name>T_OBJECT</name></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MultibyteStreamWriterObject</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>,
<expr><name>READONLY</name></expr>, <expr><name>NULL</name></expr>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>,}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>MultibyteStreamWriter_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"MultibyteStreamWriter"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultibyteStreamWriterObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>mbstreamwriter_dealloc</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name> | <name>Py_TPFLAGS_HAVE_GC</name>
| <name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>(<name>traverseproc</name>)<name>mbstreamwriter_traverse</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbstreamwriter_methods</name></expr>,
<expr><name>mbstreamwriter_members</name></expr>,
<expr><name>codecctx_getsets</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>mbstreamwriter_init</name></expr>,
<expr>0</expr>,
<expr><name>mbstreamwriter_new</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>__create_codec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ignore</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MultibyteCodecObject</name> *</type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultibyteCodec</name> *</type><name>codec</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyCObject_Check</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"argument type invalid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>codec</name> = <call><name>PyCObject_AsVoidPtr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>codec</name>-&gt;<name>codecinit</name></name> != <name>NULL</name> &amp;&amp; <call><name><name>codec</name>-&gt;<name>codecinit</name></name><argument_list>(<argument><expr><name><name>codec</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>self</name> = <call><name>PyObject_New</name><argument_list>(<argument><expr><name>MultibyteCodecObject</name></expr></argument>, <argument><expr>&amp;<name>MultibyteCodec_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>self</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>self</name>-&gt;<name>codec</name></name> = <name>codec</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>self</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>__methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"__create_codec"</expr>, <expr>(<name>PyCFunction</name>)<name>__create_codec</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_multibytecodec</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name> *</type><name><name>typelist</name><index>[]</index></name> <init>= <expr><block>{
<expr>&amp;<name>MultibyteIncrementalEncoder_Type</name></expr>,
<expr>&amp;<name>MultibyteIncrementalDecoder_Type</name></expr>,
<expr>&amp;<name>MultibyteStreamReader_Type</name></expr>,
<expr>&amp;<name>MultibyteStreamWriter_Type</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>MultibyteCodec_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_multibytecodec"</expr></argument>, <argument><expr><name>__methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>tp_name</name></expr></argument>,
<argument><expr>(<name>PyObject</name> *)<name><name>typelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"can't initialize the _multibytecodec module"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
