<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/cjkcodecs/_codecs_jp.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_BINARY_PAIR_SEARCH</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPBASE</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cjkcodecs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mappings_jp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mappings_jisx0213_pair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alg_jisx0201.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu_jisx0213_2000.h"</cpp:file></cpp:include>
<macro><name>ENCODER</name><argument_list>(<argument>cp932</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt;= 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xff61 &amp;&amp; <name>c</name> &lt;= 0xff9f</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>c - 0xfec0</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xf8f0 &amp;&amp; <name>c</name> &lt;= 0xf8f3</expr>)</condition><then> <block>{
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> == 0xf8f0</expr>)</condition><then>
<macro><name>OUT1</name><argument_list>(<argument>0xa0</argument>)</argument_list></macro></then>
<else>else
<macro><name>OUT1</name><argument_list>(<argument>c - 0xfef1 + 0xfd</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue></else></if>
}</block></then></if></else></if></else></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<macro><name>TRYMAP_ENC</name><argument_list>(<argument>cp932ext</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<macro><name>OUT1</name><argument_list>(<argument>code &gt;&gt; 8</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>code &amp; 0xff</argument>)</argument_list></macro>
}</block>
<else>else <macro><name>TRYMAP_ENC</name><argument_list>(<argument>jisxcommon</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>code</name> &amp; 0x8000</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>c1</name> = <name>code</name> &gt;&gt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = <name>code</name> &amp; 0xff</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (((<name>c1</name> - 0x21) &amp; 1) ? 0x5e : 0) + (<name>c2</name> - 0x21)</expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> = (<name>c1</name> - 0x21) &gt;&gt; 1</expr>;</expr_stmt>
<macro><name>OUT1</name><argument_list>(<argument>c1 &lt; 0x1f ? c1 + 0x81 : c1 + 0xc1</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>c2 &lt; 0x3f ? c2 + 0x40 : c2 + 0x41</argument>)</argument_list></macro>
}</block></else>
<else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xe000 &amp;&amp; <name>c</name> &lt; 0xe758</expr>)</condition><then> <block>{
<expr_stmt><expr><name>c1</name> = <call>(<name>Py_UNICODE</name>)<argument_list>(<argument><expr><name>c</name> - 0xe000</expr></argument>)</argument_list></call> / 188</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = <call>(<name>Py_UNICODE</name>)<argument_list>(<argument><expr><name>c</name> - 0xe000</expr></argument>)</argument_list></call> % 188</expr>;</expr_stmt>
<macro><name>OUT1</name><argument_list>(<argument>c1 + 0xf0</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>c2 &lt; 0x3f ? c2 + 0x40 : c2 + 0x41</argument>)</argument_list></macro>
}</block></then> <else>else
<return>return <expr>1</expr>;</return></else></if></else>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>cp932</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init>, <name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt;= 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xa0 &amp;&amp; <name>c</name> &lt;= 0xdf</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> == 0xa0</expr>)</condition><then>
<macro><name>OUT1</name><argument_list>(<argument>0xf8f0</argument>)</argument_list></macro></then>
<else>else
<macro><name>OUT1</name><argument_list>(<argument>0xfec0 + c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xfd</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>0xf8f1 - 0xfd + c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if></else></if></else></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>cp932ext</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <if>if <condition>(<expr>(<name>c</name> &gt;= 0x81 &amp;&amp; <name>c</name> &lt;= 0x9f) || (<name>c</name> &gt;= 0xe0 &amp;&amp; <name>c</name> &lt;= 0xea)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c2</name> &lt; 0x40 || (<name>c2</name> &gt; 0x7e &amp;&amp; <name>c2</name> &lt; 0x80) || <name>c2</name> &gt; 0xfc</expr>)</condition><then>
<return>return <expr>2</expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = (<name>c</name> &lt; 0xe0 ? <name>c</name> - 0x81 : <name>c</name> - 0xc1)</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>c2</name> &lt; 0x80 ? <name>c2</name> - 0x40 : <name>c2</name> - 0x41)</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (2 * <name>c</name> + (<name>c2</name> &lt; 0x5e ? 0 : 1) + 0x21)</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>c2</name> &lt; 0x5e ? <name>c2</name> : <name>c2</name> - 0x5e) + 0x21</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0208</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <return>return <expr>2</expr>;</return></else>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xf0 &amp;&amp; <name>c</name> &lt;= 0xf9</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>c2</name> &gt;= 0x40 &amp;&amp; <name>c2</name> &lt;= 0x7e) ||
(<name>c2</name> &gt;= 0x80 &amp;&amp; <name>c2</name> &lt;= 0xfc)</expr>)</condition><then>
<macro><name>OUT1</name><argument_list>(<argument>0xe000 + 188 * (c - 0xf0) +
(c2 &lt; 0x80 ? c2 - 0x40 : c2 - 0x41)</argument>)</argument_list></macro></then>
<else>else
<return>return <expr>2</expr>;</return></else></if>
}</block></then> <else>else
<return>return <expr>2</expr>;</return></else></if></else></if></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>ENCODER</name><argument_list>(<argument>euc_jis_2004</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>ucs4_t</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>insize</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>DECODE_SURROGATE</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<expr_stmt><expr><name>insize</name> = <call><name>GET_INSIZE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> &lt;= 0xFFFF</expr>)</condition><then> <block>{
<macro><name>EMULATE_JISX0213_2000_ENCODE_BMP</name><argument_list>(<argument>code</argument>, <argument>c</argument>)</argument_list></macro>
<else>else <macro><name>TRYMAP_ENC</name><argument_list>(<argument>jisx0213_bmp</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>code</name> == <name>MULTIC</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>inleft</name> &lt; 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>MBENC_FLUSH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>code</name> = <call><name>find_pairencmap</name><argument_list>(
<argument><expr>(<name>ucs2_t</name>)<name>c</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>jisx0213_pair_encmap</name></expr></argument>,
<argument><expr><name>JISX0213_ENCPAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>DBCINV</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><name>MBERR_TOOFEW</name></expr>;</return></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>code</name> = <call><name>find_pairencmap</name><argument_list>(
<argument><expr>(<name>ucs2_t</name>)<name>c</name></expr></argument>, <argument><expr>(*<name>inbuf</name>)<index>[<expr>1</expr>]</index></expr></argument>,
<argument><expr><name>jisx0213_pair_encmap</name></expr></argument>,
<argument><expr><name>JISX0213_ENCPAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>DBCINV</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>code</name> = <call><name>find_pairencmap</name><argument_list>(
<argument><expr>(<name>ucs2_t</name>)<name>c</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>jisx0213_pair_encmap</name></expr></argument>,
<argument><expr><name>JISX0213_ENCPAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>DBCINV</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>insize</name> = 2</expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then></if>
}</block></else>
<else>else <expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>jisxcommon</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xff61 &amp;&amp; <name>c</name> &lt;= 0xff9f</expr>)</condition><then> <block>{
<macro><name>WRITE2</name><argument_list>(<argument>0x8e</argument>, <argument>c - 0xfec0</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == 0xff3c</expr>)</condition><then>
<expr_stmt><expr><name>code</name> = 0x2140</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> == 0xff5e</expr>)</condition><then>
<expr_stmt><expr><name>code</name> = 0x2232</expr>;</expr_stmt></then>
<else>else
<return>return <expr>1</expr>;</return></else></if></else></if></else></if></else>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;&gt; 16 == <name>EMPBASE</name> &gt;&gt; 16</expr>)</condition><then> <block>{
<macro><name>EMULATE_JISX0213_2000_ENCODE_EMP</name><argument_list>(<argument>code</argument>, <argument>c</argument>)</argument_list></macro>
<else>else <expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>jisx0213_emp</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name> &amp; 0xffff</expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <return>return <expr><name>insize</name></expr>;</return></else>
}</block></then> <else>else
<return>return <expr><name>insize</name></expr>;</return></else></if></else></if>
<if>if <condition>(<expr><name>code</name> &amp; 0x8000</expr>)</condition><then> <block>{
<macro><name>WRITE3</name><argument_list>(<argument>0x8f</argument>, <argument>code &gt;&gt; 8</argument>, <argument>(code &amp; 0xFF) | 0x80</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>insize</argument>, <argument>3</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<macro><name>WRITE2</name><argument_list>(<argument>(code &gt;&gt; 8) | 0x80</argument>, <argument>(code &amp; 0xFF) | 0x80</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>insize</argument>, <argument>2</argument>)</argument_list></macro>
}</block></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>euc_jis_2004</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucs4_t</name></type> <name>code</name></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>c</name> == 0x8e</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c2</name> &gt;= 0xa1 &amp;&amp; <name>c2</name> &lt;= 0xdf</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>0xfec0 + c2</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></then> <else>else
<return>return <expr>2</expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == 0x8f</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>3</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name> ^ 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> = <name>IN3</name> ^ 0x80</expr>;</expr_stmt>
<macro><name>EMULATE_JISX0213_2000_DECODE_PLANE2</name><argument_list>(<argument>**outbuf</argument>, <argument>c2</argument>, <argument>c3</argument>)</argument_list></macro>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0213_2_bmp</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_2_emp</argument>, <argument>code</argument>, <argument>c2</argument>, <argument>c3</argument>)</argument_list></macro> <block>{
<macro><name>WRITEUCS4</name><argument_list>(<argument>EMPBASE | code</argument>)</argument_list></macro>
<macro><name>NEXT_IN</name><argument_list>(<argument>3</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></else>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0212</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></else>
<else>else <return>return <expr>3</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>3</argument>, <argument>1</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c</name> ^= 0x80</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = <name>IN2</name> ^ 0x80</expr>;</expr_stmt>
<macro><name>EMULATE_JISX0213_2000_DECODE_PLANE1</name><argument_list>(<argument>**outbuf</argument>, <argument>c</argument>, <argument>c2</argument>)</argument_list></macro>
<else>else <if>if <condition>(<expr><name>c</name> == 0x21 &amp;&amp; <name>c2</name> == 0x40</expr>)</condition><then> <expr_stmt><expr>**<name>outbuf</name> = 0xff3c</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> == 0x22 &amp;&amp; <name>c2</name> == 0x32</expr>)</condition><then> <expr_stmt><expr>**<name>outbuf</name> = 0xff5e</expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0208</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0213_1_bmp</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_1_emp</argument>, <argument>code</argument>, <argument>c</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>WRITEUCS4</name><argument_list>(<argument>EMPBASE | code</argument>)</argument_list></macro>
<macro><name>NEXT_IN</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_pair</argument>, <argument>code</argument>, <argument>c</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>WRITE2</name><argument_list>(<argument>code &gt;&gt; 16</argument>, <argument>code &amp; 0xffff</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>2</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></else>
<else>else <return>return <expr>2</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></else></if></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>ENCODER</name><argument_list>(<argument>euc_jp</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>jisxcommon</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <if>if <condition>(<expr><name>c</name> &gt;= 0xff61 &amp;&amp; <name>c</name> &lt;= 0xff9f</expr>)</condition><then> <block>{
<macro><name>WRITE2</name><argument_list>(<argument>0x8e</argument>, <argument>c - 0xfec0</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name>c</name> == 0xff3c</expr>)</condition><then>
<expr_stmt><expr><name>code</name> = 0x2140</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> == 0xa5</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>WRITE1</name><argument_list>(<argument><expr>0x5c</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == 0x203e</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>WRITE1</name><argument_list>(<argument><expr>0x7e</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<return>return <expr>1</expr>;</return></else></if></else></if></else></if></else></if></else>
<if>if <condition>(<expr><name>code</name> &amp; 0x8000</expr>)</condition><then> <block>{
<macro><name>WRITE3</name><argument_list>(<argument>0x8f</argument>, <argument>code &gt;&gt; 8</argument>, <argument>(code &amp; 0xFF) | 0x80</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>3</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<macro><name>WRITE2</name><argument_list>(<argument>(code &gt;&gt; 8) | 0x80</argument>, <argument>(code &amp; 0xFF) | 0x80</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>euc_jp</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>c</name> == 0x8e</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c2</name> &gt;= 0xa1 &amp;&amp; <name>c2</name> &lt;= 0xdf</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>0xfec0 + c2</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></then> <else>else
<return>return <expr>2</expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == 0x8f</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>3</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> = <name>IN3</name></expr>;</expr_stmt>
<macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0212</argument>, <argument>**outbuf</argument>, <argument>c2 ^ 0x80</argument>, <argument>c3 ^ 0x80</argument>)</argument_list></macro> <block>{
<macro><name>NEXT</name><argument_list>(<argument>3</argument>, <argument>1</argument>)</argument_list></macro>
}</block>
<else>else
<return>return <expr>3</expr>;</return></else>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>c</name> == 0xa1 &amp;&amp; <name>c2</name> == 0xc0</expr>)</condition><then>
<expr_stmt><expr>**<name>outbuf</name> = 0xff3c</expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0208</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>,
<argument><expr><name>c</name> ^ 0x80</expr></argument>, <argument><expr><name>c2</name> ^ 0x80</expr></argument>)</argument_list></call></expr> ;</expr_stmt></else></if>
<else>else <return>return <expr>2</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></else></if></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>ENCODER</name><argument_list>(<argument>shift_jis</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>JISX0201_R_ENCODE</name><argument_list>(<argument>c</argument>, <argument>code</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <expr_stmt><expr><name>code</name> = <name>c</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> == 0x00a5</expr>)</condition><then> <expr_stmt><expr><name>code</name> = 0x5c</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> == 0x203e</expr>)</condition><then> <expr_stmt><expr><name>code</name> = 0x7e</expr>;</expr_stmt></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <macro><name>JISX0201_K_ENCODE</name><argument_list>(<argument>c</argument>, <argument>code</argument>)</argument_list></macro>
<else>else <macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<else>else <expr_stmt><expr><name>code</name> = <name>NOCHAR</name></expr>;</expr_stmt></else></else></else></if></else></if></else></if>
<if>if <condition>(<expr><name>code</name> &lt; 0x80 || (<name>code</name> &gt;= 0xa1 &amp;&amp; <name>code</name> &lt;= 0xdf)</expr>)</condition><then> <block>{
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<macro><name>OUT1</name><argument_list>(<argument>(unsigned char)code</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>code</name> == <name>NOCHAR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>jisxcommon</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name>c</name> == 0xff3c</expr>)</condition><then>
<expr_stmt><expr><name>code</name> = 0x2140</expr>;</expr_stmt></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<return>return <expr>1</expr>;</return></else></if></else>
<if>if <condition>(<expr><name>code</name> &amp; 0x8000</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>c1</name> = <name>code</name> &gt;&gt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = <name>code</name> &amp; 0xff</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (((<name>c1</name> - 0x21) &amp; 1) ? 0x5e : 0) + (<name>c2</name> - 0x21)</expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> = (<name>c1</name> - 0x21) &gt;&gt; 1</expr>;</expr_stmt>
<macro><name>OUT1</name><argument_list>(<argument>c1 &lt; 0x1f ? c1 + 0x81 : c1 + 0xc1</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>c2 &lt; 0x3f ? c2 + 0x40 : c2 + 0x41</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>shift_jis</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>JISX0201_R_DECODE</name><argument_list>(<argument>c</argument>, <argument>**outbuf</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <expr_stmt><expr>**<name>outbuf</name> = <name>c</name></expr>;</expr_stmt></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <macro><name>JISX0201_K_DECODE</name><argument_list>(<argument>c</argument>, <argument>**outbuf</argument>)</argument_list></macro>
<else>else <if>if <condition>(<expr>(<name>c</name> &gt;= 0x81 &amp;&amp; <name>c</name> &lt;= 0x9f) || (<name>c</name> &gt;= 0xe0 &amp;&amp; <name>c</name> &lt;= 0xea)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c2</name> &lt; 0x40 || (<name>c2</name> &gt; 0x7e &amp;&amp; <name>c2</name> &lt; 0x80) || <name>c2</name> &gt; 0xfc</expr>)</condition><then>
<return>return <expr>2</expr>;</return></then></if>
<expr_stmt><expr><name>c1</name> = (<name>c</name> &lt; 0xe0 ? <name>c</name> - 0x81 : <name>c</name> - 0xc1)</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>c2</name> &lt; 0x80 ? <name>c2</name> - 0x40 : <name>c2</name> - 0x41)</expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> = (2 * <name>c1</name> + (<name>c2</name> &lt; 0x5e ? 0 : 1) + 0x21)</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>c2</name> &lt; 0x5e ? <name>c2</name> : <name>c2</name> - 0x5e) + 0x21</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>c1</name> == 0x21 &amp;&amp; <name>c2</name> == 0x40</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>0xff3c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0208</argument>, <argument>**outbuf</argument>, <argument>c1</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block>
<else>else
<return>return <expr>2</expr>;</return></else>
}</block></then> <else>else
<return>return <expr>2</expr>;</return></else></if></else></else></if>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>ENCODER</name><argument_list>(<argument>shift_jis_2004</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>ucs4_t</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name> <init>= <expr><name>NOCHAR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>insize</name></decl>;</decl_stmt>
<macro><name>JISX0201_ENCODE</name><argument_list>(<argument>c</argument>, <argument>code</argument>)</argument_list></macro>
<else>else <macro><name>DECODE_SURROGATE</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>code</name> &lt; 0x80 || (<name>code</name> &gt;= 0xa1 &amp;&amp; <name>code</name> &lt;= 0xdf)</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)code</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if></else>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>insize</name> = <call><name>GET_INSIZE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>NOCHAR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> &lt;= 0xffff</expr>)</condition><then> <block>{
<macro><name>EMULATE_JISX0213_2000_ENCODE_BMP</name><argument_list>(<argument>code</argument>, <argument>c</argument>)</argument_list></macro>
<else>else <macro><name>TRYMAP_ENC</name><argument_list>(<argument>jisx0213_bmp</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>code</name> == <name>MULTIC</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>inleft</name> &lt; 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>MBENC_FLUSH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>code</name> = <call><name>find_pairencmap</name>
<argument_list>(<argument><expr>(<name>ucs2_t</name>)<name>c</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>jisx0213_pair_encmap</name></expr></argument>,
<argument><expr><name>JISX0213_ENCPAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>DBCINV</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><name>MBERR_TOOFEW</name></expr>;</return></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>code</name> = <call><name>find_pairencmap</name><argument_list>(
<argument><expr>(<name>ucs2_t</name>)<name>c</name></expr></argument>, <argument><expr><name>IN2</name></expr></argument>,
<argument><expr><name>jisx0213_pair_encmap</name></expr></argument>,
<argument><expr><name>JISX0213_ENCPAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>DBCINV</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>code</name> = <call><name>find_pairencmap</name><argument_list>(
<argument><expr>(<name>ucs2_t</name>)<name>c</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>jisx0213_pair_encmap</name></expr></argument>,
<argument><expr><name>JISX0213_ENCPAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == <name>DBCINV</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>insize</name> = 2</expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then></if>
}</block></else>
<else>else <macro><name>TRYMAP_ENC</name><argument_list>(<argument>jisxcommon</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>code</name> &amp; 0x8000</expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></else>
<else>else <return>return <expr>1</expr>;</return></else>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;&gt; 16 == <name>EMPBASE</name> &gt;&gt; 16</expr>)</condition><then> <block>{
<macro><name>EMULATE_JISX0213_2000_ENCODE_EMP</name><argument_list>(<argument>code</argument>, <argument>c</argument>)</argument_list></macro>
<else>else <expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>jisx0213_emp</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name>&amp;0xffff</expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <return>return <expr><name>insize</name></expr>;</return></else>
}</block></then> <else>else
<return>return <expr><name>insize</name></expr>;</return></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><name>c1</name> = <name>code</name> &gt;&gt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>code</name> &amp; 0xff) - 0x21</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c1</name> &amp; 0x80</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c1</name> &gt;= 0xee</expr>)</condition><then> <expr_stmt><expr><name>c1</name> -= 0x87</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c1</name> &gt;= 0xac || <name>c1</name> == 0xa8</expr>)</condition><then> <expr_stmt><expr><name>c1</name> -= 0x49</expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>c1</name> -= 0x43</expr>;</expr_stmt></else></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>c1</name> -= 0x21</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>c1</name> &amp; 1</expr>)</condition><then> <expr_stmt><expr><name>c2</name> += 0x5e</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>c1</name> &gt;&gt;= 1</expr>;</expr_stmt>
<macro><name>OUT1</name><argument_list>(<argument>c1 + (c1 &lt; 0x1f ? 0x81 : 0xc1)</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>c2 + (c2 &lt; 0x3f ? 0x40 : 0x41)</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>insize</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>shift_jis_2004</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<macro><name>JISX0201_DECODE</name><argument_list>(<argument>c</argument>, <argument>**outbuf</argument>)</argument_list></macro>
<else>else <if>if <condition>(<expr>(<name>c</name> &gt;= 0x81 &amp;&amp; <name>c</name> &lt;= 0x9f) || (<name>c</name> &gt;= 0xe0 &amp;&amp; <name>c</name> &lt;= 0xfc)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucs4_t</name></type> <name>code</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c2</name> &lt; 0x40 || (<name>c2</name> &gt; 0x7e &amp;&amp; <name>c2</name> &lt; 0x80) || <name>c2</name> &gt; 0xfc</expr>)</condition><then>
<return>return <expr>2</expr>;</return></then></if>
<expr_stmt><expr><name>c1</name> = (<name>c</name> &lt; 0xe0 ? <name>c</name> - 0x81 : <name>c</name> - 0xc1)</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>c2</name> &lt; 0x80 ? <name>c2</name> - 0x40 : <name>c2</name> - 0x41)</expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> = (2 * <name>c1</name> + (<name>c2</name> &lt; 0x5e ? 0 : 1))</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = (<name>c2</name> &lt; 0x5e ? <name>c2</name> : <name>c2</name> - 0x5e) + 0x21</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c1</name> &lt; 0x5e</expr>)</condition><then> <block>{
<expr_stmt><expr><name>c1</name> += 0x21</expr>;</expr_stmt>
<macro><name>EMULATE_JISX0213_2000_DECODE_PLANE1</name><argument_list>(<argument>**outbuf</argument>,
<argument>c1</argument>, <argument>c2</argument>)</argument_list></macro>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0208</argument>, <argument>**outbuf</argument>, <argument>c1</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>NEXT_OUT</name><argument_list>(<argument>1</argument>)</argument_list></macro>
}</block></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_1_bmp</argument>, <argument>**outbuf</argument>,
<argument>c1</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>NEXT_OUT</name><argument_list>(<argument>1</argument>)</argument_list></macro>
}</block></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_1_emp</argument>, <argument>code</argument>, <argument>c1</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>WRITEUCS4</name><argument_list>(<argument>EMPBASE | code</argument>)</argument_list></macro>
}</block></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_pair</argument>, <argument>code</argument>, <argument>c1</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>WRITE2</name><argument_list>(<argument>code &gt;&gt; 16</argument>, <argument>code &amp; 0xffff</argument>)</argument_list></macro>
<macro><name>NEXT_OUT</name><argument_list>(<argument>2</argument>)</argument_list></macro>
}</block></else>
<else>else
<return>return <expr>2</expr>;</return></else>
<macro><name>NEXT_IN</name><argument_list>(<argument>2</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>c1</name> &gt;= 0x67</expr>)</condition><then> <expr_stmt><expr><name>c1</name> += 0x07</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c1</name> &gt;= 0x63 || <name>c1</name> == 0x5f</expr>)</condition><then> <expr_stmt><expr><name>c1</name> -= 0x37</expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><name>c1</name> -= 0x3d</expr>;</expr_stmt></else></if></else></if>
<macro><name>EMULATE_JISX0213_2000_DECODE_PLANE2</name><argument_list>(<argument>**outbuf</argument>,
<argument>c1</argument>, <argument>c2</argument>)</argument_list></macro>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>jisx0213_2_bmp</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>,
<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></else>
<else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>jisx0213_2_emp</argument>, <argument>code</argument>, <argument>c1</argument>, <argument>c2</argument>)</argument_list></macro> <block>{
<macro><name>WRITEUCS4</name><argument_list>(<argument>EMPBASE | code</argument>)</argument_list></macro>
<macro><name>NEXT_IN</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></else>
<else>else
<return>return <expr>2</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></else></if>
<continue>continue;</continue>
}</block></then> <else>else
<return>return <expr>2</expr>;</return></else></if></else>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<decl_stmt><decl><type><name>BEGIN_MAPPINGS_LIST</name></type>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>jisx0208</name></expr></argument>)</argument_list>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>jisx0212</name></expr></argument>)</argument_list>
<name>MAPPING_ENCONLY</name><argument_list>(<argument><expr><name>jisxcommon</name></expr></argument>)</argument_list>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>jisx0213_1_bmp</name></expr></argument>)</argument_list>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>jisx0213_2_bmp</name></expr></argument>)</argument_list>
<name>MAPPING_ENCONLY</name><argument_list>(<argument><expr><name>jisx0213_bmp</name></expr></argument>)</argument_list>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>jisx0213_1_emp</name></expr></argument>)</argument_list>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>jisx0213_2_emp</name></expr></argument>)</argument_list>
<name>MAPPING_ENCONLY</name><argument_list>(<argument><expr><name>jisx0213_emp</name></expr></argument>)</argument_list>
<name>MAPPING_ENCDEC</name><argument_list>(<argument><expr><name>jisx0213_pair</name></expr></argument>)</argument_list>
<name>MAPPING_ENCDEC</name><argument_list>(<argument><expr><name>cp932ext</name></expr></argument>)</argument_list>
<name>END_MAPPINGS_LIST</name>
<name>BEGIN_CODECS_LIST</name>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>shift_jis</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>cp932</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>euc_jp</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>shift_jis_2004</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>euc_jis_2004</name></expr></argument>)</argument_list>
<block>{ <expr_stmt><expr>"euc_jisx0213"</expr>, <expr>(<name>void</name> *)2000</expr>, <expr><name>NULL</name></expr>, <macro><name>_STATELESS_METHODS</name><argument_list>(<argument>euc_jis_2004</argument>)</argument_list></macro></expr_stmt> }</block></decl></decl_stmt>,
<block>{ <expr_stmt><expr>"shift_jisx0213"</expr>, <expr>(<name>void</name> *)2000</expr>, <expr><name>NULL</name></expr>, <macro><name>_STATELESS_METHODS</name><argument_list>(<argument>shift_jis_2004</argument>)</argument_list></macro></expr_stmt> }</block>,
<decl_stmt><decl><type><name>END_CODECS_LIST</name></type>
<name>I_AM_A_MODULE_FOR</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></decl></decl_stmt>
</unit>
