<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/cjkcodecs/_codecs_hk.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_IMPORTED_MAPS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cjkcodecs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mappings_hk.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>encode_map</name> *</type><name>big5_encmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>decode_map</name> *</type><name>big5_decmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>CODEC_INIT</name><argument_list>(<argument>big5hkscs</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>initialized</name> &amp;&amp; <call><name>IMPORT_MAP</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>big5</name></expr></argument>, <argument><expr>&amp;<name>big5_encmap</name></expr></argument>, <argument><expr>&amp;<name>big5_decmap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>initialized</name> = 1</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DBCHAR</name></type> <name><name>big5hkscs_pairenc_table</name><index>[<expr>4</expr>]</index></name> <init>= <expr><block>{<expr>0x8862</expr>, <expr>0x8864</expr>, <expr>0x88a3</expr>, <expr>0x88a5</expr>}</block></expr></init></decl>;</decl_stmt>
<macro><name>ENCODER</name><argument_list>(<argument>big5hkscs</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>ucs4_t</name></type> <name>c</name> <init>= <expr>**<name>inbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>insize</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>REQUIRE_OUTBUF</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>
**<name>outbuf</name> = (<name>unsigned</name> <name>char</name>)<name>c</name></expr>;</expr_stmt>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>DECODE_SURROGATE</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<expr_stmt><expr><name>insize</name> = <call><name>GET_INSIZE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x10000</expr>)</condition><then> <block>{
<macro><name>TRYMAP_ENC</name><argument_list>(<argument>big5hkscs_bmp</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>code</name> == <name>MULTIC</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>inleft</name> &gt;= 2 &amp;&amp;
((<name>c</name> &amp; 0xffdf) == 0x00ca) &amp;&amp;
(((*<name>inbuf</name>)<index>[<expr>1</expr>]</index> &amp; 0xfff7) == 0x0304)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>code</name> = <name><name>big5hkscs_pairenc_table</name><index>[
<expr>((<name>c</name> &gt;&gt; 4) |
((*<name>inbuf</name>)<index>[<expr>1</expr>]</index> &gt;&gt; 3)) &amp; 3</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>insize</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>inleft</name> &lt; 2 &amp;&amp;
!(<name>flags</name> &amp; <name>MBENC_FLUSH</name>)</expr>)</condition><then>
<return>return <expr><name>MBERR_TOOFEW</name></expr>;</return></then>
<else>else <block>{
<if>if <condition>(<expr><name>c</name> == 0xca</expr>)</condition><then>
<expr_stmt><expr><name>code</name> = 0x8866</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>code</name> = 0x88a7</expr>;</expr_stmt></else></if>
}</block></else></if></else></if>
}</block></then></if>
}</block>
<else>else <expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>big5</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <return>return <expr>1</expr>;</return></else>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &lt; 0x20000</expr>)</condition><then>
<return>return <expr><name>insize</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>c</name> &lt; 0x30000</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>big5hkscs_nonbmp</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name> &amp; 0xffff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <return>return <expr><name>insize</name></expr>;</return></else>
}</block></then> <else>else
<return>return <expr><name>insize</name></expr>;</return></else></if></else></if></else></if>
<macro><name>OUT1</name><argument_list>(<argument>code &gt;&gt; 8</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>code &amp; 0xFF</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>insize</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH2S</name><parameter_list>(<param><type><name>c1</name></type></param>, <param><type><name>c2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((c1) - 0x87) * (0xfe - 0x40 + 1) + ((c2) - 0x40))</cpp:value></cpp:define>
<macro><name>DECODER</name><argument_list>(<argument>big5hkscs</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucs4_t</name></type> <name>decoded</name></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<if>if <condition>(<expr>0xc6 &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= 0xc8 &amp;&amp; (<name>c</name> &gt;= 0xc7 || <name>IN2</name> &gt;= 0xa1)</expr>)</condition><then>
<goto>goto <name>hkscsdec</name>;</goto></then></if>
<macro><name>TRYMAP_DEC</name><argument_list>(<argument>big5</argument>, <argument>**outbuf</argument>, <argument>c</argument>, <argument>IN2</argument>)</argument_list></macro> <block>{
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block>
<else>else
<label><name>hkscsdec</name>:</label>
<macro><name>TRYMAP_DEC</name><argument_list>(<argument>big5hkscs</argument>, <argument>decoded</argument>, <argument>c</argument>, <argument>IN2</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>BH2S</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>IN2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>hintbase</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0x87 &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= 0xfe</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0x40 &lt;= <name>IN2</name> &amp;&amp; <name>IN2</name> &lt;= 0xfe</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>BH2S</name><argument_list>(<argument><expr>0x87</expr></argument>, <argument><expr>0x40</expr></argument>)</argument_list></call> &lt;= <name>s</name> &amp;&amp; <name>s</name> &lt;= <call><name>BH2S</name><argument_list>(<argument><expr>0xa0</expr></argument>, <argument><expr>0xfe</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hintbase</name> = <name>big5hkscs_phint_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> -= <call><name>BH2S</name><argument_list>(<argument><expr>0x87</expr></argument>, <argument><expr>0x40</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>BH2S</name><argument_list>(<argument><expr>0xc6</expr></argument>,<argument><expr>0xa1</expr></argument>)</argument_list></call> &lt;= <name>s</name> &amp;&amp; <name>s</name> &lt;= <call><name>BH2S</name><argument_list>(<argument><expr>0xc8</expr></argument>,<argument><expr>0xfe</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hintbase</name> = <name>big5hkscs_phint_12130</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> -= <call><name>BH2S</name><argument_list>(<argument><expr>0xc6</expr></argument>, <argument><expr>0xa1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>BH2S</name><argument_list>(<argument><expr>0xf9</expr></argument>,<argument><expr>0xd6</expr></argument>)</argument_list></call> &lt;= <name>s</name> &amp;&amp; <name>s</name> &lt;= <call><name>BH2S</name><argument_list>(<argument><expr>0xfe</expr></argument>,<argument><expr>0xfe</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hintbase</name> = <name>big5hkscs_phint_21924</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> -= <call><name>BH2S</name><argument_list>(<argument><expr>0xf9</expr></argument>, <argument><expr>0xd6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>MBERR_INTERNAL</name></expr>;</return></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>hintbase</name><index>[<expr><name>s</name> &gt;&gt; 3</expr>]</index></name> &amp; (1 &lt;&lt; (<name>s</name> &amp; 7))</expr>)</condition><then> <block>{
<macro><name>WRITEUCS4</name><argument_list>(<argument>decoded | 0x20000</argument>)</argument_list></macro>
<macro><name>NEXT_IN</name><argument_list>(<argument>2</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<macro><name>OUT1</name><argument_list>(<argument>decoded</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></else></if>
}</block></else>
<else>else <block>{
<switch>switch <condition>(<expr>(<name>c</name> &lt;&lt; 8) | <name>IN2</name></expr>)</condition> <block>{
<case>case <expr>0x8862</expr>:
<expr_stmt><expr><call><name>WRITE2</name><argument_list>(<argument><expr>0x00ca</expr></argument>, <argument><expr>0x0304</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>0x8864</expr>:
<expr_stmt><expr><call><name>WRITE2</name><argument_list>(<argument><expr>0x00ca</expr></argument>, <argument><expr>0x030c</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>0x88a3</expr>:
<expr_stmt><expr><call><name>WRITE2</name><argument_list>(<argument><expr>0x00ea</expr></argument>, <argument><expr>0x0304</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>0x88a5</expr>:
<expr_stmt><expr><call><name>WRITE2</name><argument_list>(<argument><expr>0x00ea</expr></argument>, <argument><expr>0x030c</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr>2</expr>;</return>
</default>}</block></switch>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>2</argument>)</argument_list></macro>
}</block></else>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<decl_stmt><decl><type><name>BEGIN_MAPPINGS_LIST</name></type>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>big5hkscs</name></expr></argument>)</argument_list>
<name>MAPPING_ENCONLY</name><argument_list>(<argument><expr><name>big5hkscs_bmp</name></expr></argument>)</argument_list>
<name>MAPPING_ENCONLY</name><argument_list>(<argument><expr><name>big5hkscs_nonbmp</name></expr></argument>)</argument_list>
<name>END_MAPPINGS_LIST</name>
<name>BEGIN_CODECS_LIST</name>
<name>CODEC_STATELESS_WINIT</name><argument_list>(<argument><expr><name>big5hkscs</name></expr></argument>)</argument_list>
<name>END_CODECS_LIST</name>
<name>I_AM_A_MODULE_FOR</name><argument_list>(<argument><expr><name>hk</name></expr></argument>)</argument_list></decl></decl_stmt>
</unit>
