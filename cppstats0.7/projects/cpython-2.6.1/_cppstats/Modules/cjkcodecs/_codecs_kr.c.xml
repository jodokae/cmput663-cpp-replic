<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/cjkcodecs/_codecs_kr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cjkcodecs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mappings_kr.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EUCKR_JAMO_FIRSTBYTE</name></cpp:macro> <cpp:value>0xA4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EUCKR_JAMO_FILLER</name></cpp:macro> <cpp:value>0xD4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>u2cgk_choseong</name><index>[<expr>19</expr>]</index></name> <init>= <expr><block>{
<expr>0xa1</expr>, <expr>0xa2</expr>, <expr>0xa4</expr>, <expr>0xa7</expr>, <expr>0xa8</expr>, <expr>0xa9</expr>, <expr>0xb1</expr>, <expr>0xb2</expr>,
<expr>0xb3</expr>, <expr>0xb5</expr>, <expr>0xb6</expr>, <expr>0xb7</expr>, <expr>0xb8</expr>, <expr>0xb9</expr>, <expr>0xba</expr>, <expr>0xbb</expr>,
<expr>0xbc</expr>, <expr>0xbd</expr>, <expr>0xbe</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>u2cgk_jungseong</name><index>[<expr>21</expr>]</index></name> <init>= <expr><block>{
<expr>0xbf</expr>, <expr>0xc0</expr>, <expr>0xc1</expr>, <expr>0xc2</expr>, <expr>0xc3</expr>, <expr>0xc4</expr>, <expr>0xc5</expr>, <expr>0xc6</expr>,
<expr>0xc7</expr>, <expr>0xc8</expr>, <expr>0xc9</expr>, <expr>0xca</expr>, <expr>0xcb</expr>, <expr>0xcc</expr>, <expr>0xcd</expr>, <expr>0xce</expr>,
<expr>0xcf</expr>, <expr>0xd0</expr>, <expr>0xd1</expr>, <expr>0xd2</expr>, <expr>0xd3</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>u2cgk_jongseong</name><index>[<expr>28</expr>]</index></name> <init>= <expr><block>{
<expr>0xd4</expr>, <expr>0xa1</expr>, <expr>0xa2</expr>, <expr>0xa3</expr>, <expr>0xa4</expr>, <expr>0xa5</expr>, <expr>0xa6</expr>, <expr>0xa7</expr>,
<expr>0xa9</expr>, <expr>0xaa</expr>, <expr>0xab</expr>, <expr>0xac</expr>, <expr>0xad</expr>, <expr>0xae</expr>, <expr>0xaf</expr>, <expr>0xb0</expr>,
<expr>0xb1</expr>, <expr>0xb2</expr>, <expr>0xb4</expr>, <expr>0xb5</expr>, <expr>0xb6</expr>, <expr>0xb7</expr>, <expr>0xb8</expr>, <expr>0xba</expr>,
<expr>0xbb</expr>, <expr>0xbc</expr>, <expr>0xbd</expr>, <expr>0xbe</expr>
}</block></expr></init></decl>;</decl_stmt>
<macro><name>ENCODER</name><argument_list>(<argument>euc_kr</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>cp949</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <return>return <expr>1</expr>;</return></else>
<if>if <condition>(<expr>(<name>code</name> &amp; 0x8000) == 0</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>(code &gt;&gt; 8) | 0x80</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>(code &amp; 0xFF) | 0x80</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>8</argument>)</argument_list></macro>
<macro><name>OUT1</name><argument_list>(<argument>EUCKR_JAMO_FIRSTBYTE</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>EUCKR_JAMO_FILLER</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0xac00 &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= 0xd7a3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> -= 0xac00</expr>;</expr_stmt>
<macro><name>OUT3</name><argument_list>(<argument>EUCKR_JAMO_FIRSTBYTE</argument>)</argument_list></macro>
<macro><name>OUT4</name><argument_list>(<argument>u2cgk_choseong[c / 588]</argument>)</argument_list></macro>
<macro><name>NEXT_OUT</name><argument_list>(<argument>4</argument>)</argument_list></macro>
<macro><name>OUT1</name><argument_list>(<argument>EUCKR_JAMO_FIRSTBYTE</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>u2cgk_jungseong[(c / 28) % 21]</argument>)</argument_list></macro>
<macro><name>OUT3</name><argument_list>(<argument>EUCKR_JAMO_FIRSTBYTE</argument>)</argument_list></macro>
<macro><name>OUT4</name><argument_list>(<argument>u2cgk_jongseong[c % 28]</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>4</argument>)</argument_list></macro>
}</block></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONE</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cgk2u_choseong</name><index>[]</index></name> <init>= <expr><block>{
<expr>0</expr>, <expr>1</expr>, <expr><name>NONE</name></expr>, <expr>2</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>3</expr>, <expr>4</expr>,
<expr>5</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
<expr>6</expr>, <expr>7</expr>, <expr>8</expr>, <expr><name>NONE</name></expr>, <expr>9</expr>, <expr>10</expr>, <expr>11</expr>, <expr>12</expr>,
<expr>13</expr>, <expr>14</expr>, <expr>15</expr>, <expr>16</expr>, <expr>17</expr>, <expr>18</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cgk2u_jongseong</name><index>[]</index></name> <init>= <expr><block>{
<expr>1</expr>, <expr>2</expr>, <expr>3</expr>, <expr>4</expr>, <expr>5</expr>, <expr>6</expr>, <expr>7</expr>, <expr><name>NONE</name></expr>,
<expr>8</expr>, <expr>9</expr>, <expr>10</expr>, <expr>11</expr>, <expr>12</expr>, <expr>13</expr>, <expr>14</expr>, <expr>15</expr>,
<expr>16</expr>, <expr>17</expr>, <expr><name>NONE</name></expr>, <expr>18</expr>, <expr>19</expr>, <expr>20</expr>, <expr>21</expr>, <expr>22</expr>,
<expr><name>NONE</name></expr>, <expr>23</expr>, <expr>24</expr>, <expr>25</expr>, <expr>26</expr>, <expr>27</expr>
}</block></expr></init></decl>;</decl_stmt>
<macro><name>DECODER</name><argument_list>(<argument>euc_kr</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> == <name>EUCKR_JAMO_FIRSTBYTE</name> &amp;&amp;
<name>IN2</name> == <name>EUCKR_JAMO_FILLER</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>cho</name></decl>, <decl><type ref="prev"/><name>jung</name></decl>, <decl><type ref="prev"/><name>jong</name></decl>;</decl_stmt>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>8</argument>)</argument_list></macro>
<if>if <condition>(<expr>(*<name>inbuf</name>)<index>[<expr>2</expr>]</index> != <name>EUCKR_JAMO_FIRSTBYTE</name> ||
(*<name>inbuf</name>)<index>[<expr>4</expr>]</index> != <name>EUCKR_JAMO_FIRSTBYTE</name> ||
(*<name>inbuf</name>)<index>[<expr>6</expr>]</index> != <name>EUCKR_JAMO_FIRSTBYTE</name></expr>)</condition><then>
<return>return <expr>8</expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = (*<name>inbuf</name>)<index>[<expr>3</expr>]</index></expr>;</expr_stmt>
<if>if <condition>(<expr>0xa1 &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= 0xbe</expr>)</condition><then>
<expr_stmt><expr><name>cho</name> = <name><name>cgk2u_choseong</name><index>[<expr><name>c</name> - 0xa1</expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>cho</name> = <name>NONE</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>c</name> = (*<name>inbuf</name>)<index>[<expr>5</expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>jung</name> = (0xbf &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= 0xd3) ? <name>c</name> - 0xbf : <name>NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = (*<name>inbuf</name>)<index>[<expr>7</expr>]</index></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == <name>EUCKR_JAMO_FILLER</name></expr>)</condition><then>
<expr_stmt><expr><name>jong</name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>0xa1 &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= 0xbe</expr>)</condition><then>
<expr_stmt><expr><name>jong</name> = <name><name>cgk2u_jongseong</name><index>[<expr><name>c</name> - 0xa1</expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>jong</name> = <name>NONE</name></expr>;</expr_stmt></else></if></else></if>
<if>if <condition>(<expr><name>cho</name> == <name>NONE</name> || <name>jung</name> == <name>NONE</name> || <name>jong</name> == <name>NONE</name></expr>)</condition><then>
<return>return <expr>8</expr>;</return></then></if>
<expr_stmt><expr><call><name>OUT1</name><argument_list>(<argument><expr>0xac00 + <name>cho</name>*588 + <name>jung</name>*28 + <name>jong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>NEXT</name><argument_list>(<argument>8</argument>, <argument>1</argument>)</argument_list></macro>
}</block></then> <else>else <macro><name>TRYMAP_DEC</name><argument_list>(<argument>ksx1001</argument>, <argument>**outbuf</argument>, <argument>c ^ 0x80</argument>, <argument>IN2 ^ 0x80</argument>)</argument_list></macro> <block>{
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></else></if>
<else>else
<return>return <expr>2</expr>;</return></else>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NONE</name></cpp:undef>
<macro><name>ENCODER</name><argument_list>(<argument>cp949</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>cp949</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <return>return <expr>1</expr>;</return></else>
<macro><name>OUT1</name><argument_list>(<argument>(code &gt;&gt; 8) | 0x80</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>code</name> &amp; 0x8000</expr>)</condition><then>
<macro><name>OUT2</name><argument_list>(<argument>code &amp; 0xFF</argument>)</argument_list></macro></then>
<else>else
<macro><name>OUT2</name><argument_list>(<argument>(code &amp; 0xFF) | 0x80</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>cp949</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>ksx1001</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name> ^ 0x80</expr></argument>, <argument><expr><name>IN2</name> ^ 0x80</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>cp949ext</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>IN2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <return>return <expr>2</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>u2johabidx_choseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr>0x02</expr>, <expr>0x03</expr>, <expr>0x04</expr>, <expr>0x05</expr>, <expr>0x06</expr>, <expr>0x07</expr>,
<expr>0x08</expr>, <expr>0x09</expr>, <expr>0x0a</expr>, <expr>0x0b</expr>, <expr>0x0c</expr>, <expr>0x0d</expr>, <expr>0x0e</expr>, <expr>0x0f</expr>,
<expr>0x10</expr>, <expr>0x11</expr>, <expr>0x12</expr>, <expr>0x13</expr>, <expr>0x14</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>u2johabidx_jungseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr>0x03</expr>, <expr>0x04</expr>, <expr>0x05</expr>, <expr>0x06</expr>, <expr>0x07</expr>,
<expr>0x0a</expr>, <expr>0x0b</expr>, <expr>0x0c</expr>, <expr>0x0d</expr>, <expr>0x0e</expr>, <expr>0x0f</expr>,
<expr>0x12</expr>, <expr>0x13</expr>, <expr>0x14</expr>, <expr>0x15</expr>, <expr>0x16</expr>, <expr>0x17</expr>,
<expr>0x1a</expr>, <expr>0x1b</expr>, <expr>0x1c</expr>, <expr>0x1d</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>u2johabidx_jongseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr>0x01</expr>, <expr>0x02</expr>, <expr>0x03</expr>, <expr>0x04</expr>, <expr>0x05</expr>, <expr>0x06</expr>, <expr>0x07</expr>,
<expr>0x08</expr>, <expr>0x09</expr>, <expr>0x0a</expr>, <expr>0x0b</expr>, <expr>0x0c</expr>, <expr>0x0d</expr>, <expr>0x0e</expr>, <expr>0x0f</expr>,
<expr>0x10</expr>, <expr>0x11</expr>, <expr>0x13</expr>, <expr>0x14</expr>, <expr>0x15</expr>, <expr>0x16</expr>, <expr>0x17</expr>,
<expr>0x18</expr>, <expr>0x19</expr>, <expr>0x1a</expr>, <expr>0x1b</expr>, <expr>0x1c</expr>, <expr>0x1d</expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DBCHAR</name></type> <name><name>u2johabjamo</name><index>[]</index></name> <init>= <expr><block>{
<expr>0x8841</expr>, <expr>0x8c41</expr>, <expr>0x8444</expr>, <expr>0x9041</expr>, <expr>0x8446</expr>, <expr>0x8447</expr>, <expr>0x9441</expr>,
<expr>0x9841</expr>, <expr>0x9c41</expr>, <expr>0x844a</expr>, <expr>0x844b</expr>, <expr>0x844c</expr>, <expr>0x844d</expr>, <expr>0x844e</expr>, <expr>0x844f</expr>,
<expr>0x8450</expr>, <expr>0xa041</expr>, <expr>0xa441</expr>, <expr>0xa841</expr>, <expr>0x8454</expr>, <expr>0xac41</expr>, <expr>0xb041</expr>, <expr>0xb441</expr>,
<expr>0xb841</expr>, <expr>0xbc41</expr>, <expr>0xc041</expr>, <expr>0xc441</expr>, <expr>0xc841</expr>, <expr>0xcc41</expr>, <expr>0xd041</expr>, <expr>0x8461</expr>,
<expr>0x8481</expr>, <expr>0x84a1</expr>, <expr>0x84c1</expr>, <expr>0x84e1</expr>, <expr>0x8541</expr>, <expr>0x8561</expr>, <expr>0x8581</expr>, <expr>0x85a1</expr>,
<expr>0x85c1</expr>, <expr>0x85e1</expr>, <expr>0x8641</expr>, <expr>0x8661</expr>, <expr>0x8681</expr>, <expr>0x86a1</expr>, <expr>0x86c1</expr>, <expr>0x86e1</expr>,
<expr>0x8741</expr>, <expr>0x8761</expr>, <expr>0x8781</expr>, <expr>0x87a1</expr>,
}</block></expr></init></decl>;</decl_stmt>
<macro><name>ENCODER</name><argument_list>(<argument>johab</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &gt;= 0xac00 &amp;&amp; <name>c</name> &lt;= 0xd7a3</expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> -= 0xac00</expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> = 0x8000 |
(<name><name>u2johabidx_choseong</name><index>[<expr><name>c</name> / 588</expr>]</index></name> &lt;&lt; 10) |
(<name><name>u2johabidx_jungseong</name><index>[<expr>(<name>c</name> / 28) % 21</expr>]</index></name> &lt;&lt; 5) |
<name><name>u2johabidx_jongseong</name><index>[<expr><name>c</name> % 28</expr>]</index></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 0x3131 &amp;&amp; <name>c</name> &lt;= 0x3163</expr>)</condition><then>
<expr_stmt><expr><name>code</name> = <name><name>u2johabjamo</name><index>[<expr><name>c</name> - 0x3131</expr>]</index></name></expr>;</expr_stmt></then>
<else>else <macro><name>TRYMAP_ENC</name><argument_list>(<argument>cp949</argument>, <argument>code</argument>, <argument>c</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>t1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>(<name>code</name> &amp; 0x8000) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> = <name>code</name> &gt;&gt; 8</expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = <name>code</name> &amp; 0xff</expr>;</expr_stmt>
<if>if <condition>(<expr>((<name>c1</name> &gt;= 0x21 &amp;&amp; <name>c1</name> &lt;= 0x2c) ||
(<name>c1</name> &gt;= 0x4a &amp;&amp; <name>c1</name> &lt;= 0x7d)) &amp;&amp;
(<name>c2</name> &gt;= 0x21 &amp;&amp; <name>c2</name> &lt;= 0x7e)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>t1</name> = (<name>c1</name> &lt; 0x4a ? (<name>c1</name> - 0x21 + 0x1b2) :
(<name>c1</name> - 0x21 + 0x197))</expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> = ((<name>t1</name> &amp; 1) ? 0x5e : 0) + (<name>c2</name> - 0x21)</expr>;</expr_stmt>
<macro><name>OUT1</name><argument_list>(<argument>t1 &gt;&gt; 1</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>t2 &lt; 0x4e ? t2 + 0x31 : t2 + 0x43</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then> <else>else
<return>return <expr>1</expr>;</return></else></if>
}</block></else></if></else></if>
<else>else
<return>return <expr>1</expr>;</return></else>
<macro><name>OUT1</name><argument_list>(<argument>code &gt;&gt; 8</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>code &amp; 0xff</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name></cpp:macro> <cpp:value>0xfd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONE</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>johabidx_choseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr><name>NONE</name></expr>, <expr><name>FILL</name></expr>, <expr>0x00</expr>, <expr>0x01</expr>, <expr>0x02</expr>, <expr>0x03</expr>, <expr>0x04</expr>, <expr>0x05</expr>,
<expr>0x06</expr>, <expr>0x07</expr>, <expr>0x08</expr>, <expr>0x09</expr>, <expr>0x0a</expr>, <expr>0x0b</expr>, <expr>0x0c</expr>, <expr>0x0d</expr>,
<expr>0x0e</expr>, <expr>0x0f</expr>, <expr>0x10</expr>, <expr>0x11</expr>, <expr>0x12</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>johabidx_jungseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>FILL</name></expr>, <expr>0x00</expr>, <expr>0x01</expr>, <expr>0x02</expr>, <expr>0x03</expr>, <expr>0x04</expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>0x05</expr>, <expr>0x06</expr>, <expr>0x07</expr>, <expr>0x08</expr>, <expr>0x09</expr>, <expr>0x0a</expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>0x0b</expr>, <expr>0x0c</expr>, <expr>0x0d</expr>, <expr>0x0e</expr>, <expr>0x0f</expr>, <expr>0x10</expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>0x11</expr>, <expr>0x12</expr>, <expr>0x13</expr>, <expr>0x14</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>johabidx_jongseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr><name>NONE</name></expr>, <expr><name>FILL</name></expr>, <expr>0x01</expr>, <expr>0x02</expr>, <expr>0x03</expr>, <expr>0x04</expr>, <expr>0x05</expr>, <expr>0x06</expr>,
<expr>0x07</expr>, <expr>0x08</expr>, <expr>0x09</expr>, <expr>0x0a</expr>, <expr>0x0b</expr>, <expr>0x0c</expr>, <expr>0x0d</expr>, <expr>0x0e</expr>,
<expr>0x0f</expr>, <expr>0x10</expr>, <expr><name>NONE</name></expr>, <expr>0x11</expr>, <expr>0x12</expr>, <expr>0x13</expr>, <expr>0x14</expr>, <expr>0x15</expr>,
<expr>0x16</expr>, <expr>0x17</expr>, <expr>0x18</expr>, <expr>0x19</expr>, <expr>0x1a</expr>, <expr>0x1b</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>johabjamo_choseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr><name>NONE</name></expr>, <expr><name>FILL</name></expr>, <expr>0x31</expr>, <expr>0x32</expr>, <expr>0x34</expr>, <expr>0x37</expr>, <expr>0x38</expr>, <expr>0x39</expr>,
<expr>0x41</expr>, <expr>0x42</expr>, <expr>0x43</expr>, <expr>0x45</expr>, <expr>0x46</expr>, <expr>0x47</expr>, <expr>0x48</expr>, <expr>0x49</expr>,
<expr>0x4a</expr>, <expr>0x4b</expr>, <expr>0x4c</expr>, <expr>0x4d</expr>, <expr>0x4e</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>johabjamo_jungseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr><name>FILL</name></expr>, <expr>0x4f</expr>, <expr>0x50</expr>, <expr>0x51</expr>, <expr>0x52</expr>, <expr>0x53</expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>0x54</expr>, <expr>0x55</expr>, <expr>0x56</expr>, <expr>0x57</expr>, <expr>0x58</expr>, <expr>0x59</expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>0x5a</expr>, <expr>0x5b</expr>, <expr>0x5c</expr>, <expr>0x5d</expr>, <expr>0x5e</expr>, <expr>0x5f</expr>,
<expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>, <expr>0x60</expr>, <expr>0x61</expr>, <expr>0x62</expr>, <expr>0x63</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>johabjamo_jongseong</name><index>[<expr>32</expr>]</index></name> <init>= <expr><block>{
<expr><name>NONE</name></expr>, <expr><name>FILL</name></expr>, <expr>0x31</expr>, <expr>0x32</expr>, <expr>0x33</expr>, <expr>0x34</expr>, <expr>0x35</expr>, <expr>0x36</expr>,
<expr>0x37</expr>, <expr>0x39</expr>, <expr>0x3a</expr>, <expr>0x3b</expr>, <expr>0x3c</expr>, <expr>0x3d</expr>, <expr>0x3e</expr>, <expr>0x3f</expr>,
<expr>0x40</expr>, <expr>0x41</expr>, <expr><name>NONE</name></expr>, <expr>0x42</expr>, <expr>0x44</expr>, <expr>0x45</expr>, <expr>0x46</expr>, <expr>0x47</expr>,
<expr>0x48</expr>, <expr>0x4a</expr>, <expr>0x4b</expr>, <expr>0x4c</expr>, <expr>0x4d</expr>, <expr>0x4e</expr>, <expr><name>NONE</name></expr>, <expr><name>NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<macro><name>DECODER</name><argument_list>(<argument>johab</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init>, <name>c2</name></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><name>c2</name> = <name>IN2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0xd8</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c_cho</name></decl>, <decl><type ref="prev"/><name>c_jung</name></decl>, <decl><type ref="prev"/><name>c_jong</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i_cho</name></decl>, <decl><type ref="prev"/><name>i_jung</name></decl>, <decl><type ref="prev"/><name>i_jong</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c_cho</name> = (<name>c</name> &gt;&gt; 2) &amp; 0x1f</expr>;</expr_stmt>
<expr_stmt><expr><name>c_jung</name> = ((<name>c</name> &lt;&lt; 3) | <name>c2</name> &gt;&gt; 5) &amp; 0x1f</expr>;</expr_stmt>
<expr_stmt><expr><name>c_jong</name> = <name>c2</name> &amp; 0x1f</expr>;</expr_stmt>
<expr_stmt><expr><name>i_cho</name> = <name><name>johabidx_choseong</name><index>[<expr><name>c_cho</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_jung</name> = <name><name>johabidx_jungseong</name><index>[<expr><name>c_jung</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_jong</name> = <name><name>johabidx_jongseong</name><index>[<expr><name>c_jong</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i_cho</name> == <name>NONE</name> || <name>i_jung</name> == <name>NONE</name> || <name>i_jong</name> == <name>NONE</name></expr>)</condition><then>
<return>return <expr>2</expr>;</return></then></if>
<if>if <condition>(<expr><name>i_cho</name> == <name>FILL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>i_jung</name> == <name>FILL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>i_jong</name> == <name>FILL</name></expr>)</condition><then>
<macro><name>OUT1</name><argument_list>(<argument>0x3000</argument>)</argument_list></macro></then>
<else>else
<macro><name>OUT1</name><argument_list>(<argument>0x3100 |
johabjamo_jongseong[c_jong]</argument>)</argument_list></macro></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>i_jong</name> == <name>FILL</name></expr>)</condition><then>
<macro><name>OUT1</name><argument_list>(<argument>0x3100 |
johabjamo_jungseong[c_jung]</argument>)</argument_list></macro></then>
<else>else
<return>return <expr>2</expr>;</return></else></if>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>i_jung</name> == <name>FILL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>i_jong</name> == <name>FILL</name></expr>)</condition><then>
<macro><name>OUT1</name><argument_list>(<argument>0x3100 |
johabjamo_choseong[c_cho]</argument>)</argument_list></macro></then>
<else>else
<return>return <expr>2</expr>;</return></else></if>
}</block></then> <else>else
<macro><name>OUT1</name><argument_list>(<argument>0xac00 +
i_cho * 588 +
i_jung * 28 +
(i_jong == FILL ? 0 : i_jong)</argument>)</argument_list></macro></else></if>
}</block></else></if>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>c</name> == 0xdf || <name>c</name> &gt; 0xf9 ||
<name>c2</name> &lt; 0x31 || (<name>c2</name> &gt;= 0x80 &amp;&amp; <name>c2</name> &lt; 0x91) ||
(<name>c2</name> &amp; 0x7f) == 0x7f ||
(<name>c</name> == 0xda &amp;&amp; (<name>c2</name> &gt;= 0xa1 &amp;&amp; <name>c2</name> &lt;= 0xd3))</expr>)</condition><then>
<return>return <expr>2</expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t1</name> = (<name>c</name> &lt; 0xe0 ? 2 * (<name>c</name> - 0xd9) :
2 * <name>c</name> - 0x197)</expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> = (<name>c2</name> &lt; 0x91 ? <name>c2</name> - 0x31 : <name>c2</name> - 0x43)</expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> = <name>t1</name> + (<name>t2</name> &lt; 0x5e ? 0 : 1) + 0x21</expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> = (<name>t2</name> &lt; 0x5e ? <name>t2</name> : <name>t2</name> - 0x5e) + 0x21</expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>ksx1001</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <return>return <expr>2</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></else></if>
}</block></else></if>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NONE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILL</name></cpp:undef>
<decl_stmt><decl><type><name>BEGIN_MAPPINGS_LIST</name></type>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>ksx1001</name></expr></argument>)</argument_list>
<name>MAPPING_ENCONLY</name><argument_list>(<argument><expr><name>cp949</name></expr></argument>)</argument_list>
<name>MAPPING_DECONLY</name><argument_list>(<argument><expr><name>cp949ext</name></expr></argument>)</argument_list>
<name>END_MAPPINGS_LIST</name>
<name>BEGIN_CODECS_LIST</name>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>euc_kr</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>cp949</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>johab</name></expr></argument>)</argument_list>
<name>END_CODECS_LIST</name>
<name>I_AM_A_MODULE_FOR</name><argument_list>(<argument><expr><name>kr</name></expr></argument>)</argument_list></decl></decl_stmt>
</unit>
