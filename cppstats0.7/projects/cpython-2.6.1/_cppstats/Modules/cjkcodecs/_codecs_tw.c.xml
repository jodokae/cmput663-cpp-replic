<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/cjkcodecs/_codecs_tw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cjkcodecs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mappings_tw.h"</cpp:file></cpp:include>
<macro><name>ENCODER</name><argument_list>(<argument>big5</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr>**<name>inbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>REQUIRE_OUTBUF</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>
**<name>outbuf</name> = (<name>unsigned</name> <name>char</name>)<name>c</name></expr>;</expr_stmt>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>big5</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <return>return <expr>1</expr>;</return></else>
<macro><name>OUT1</name><argument_list>(<argument>code &gt;&gt; 8</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>code &amp; 0xFF</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>big5</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<macro><name>TRYMAP_DEC</name><argument_list>(<argument>big5</argument>, <argument>**outbuf</argument>, <argument>c</argument>, <argument>IN2</argument>)</argument_list></macro> <block>{
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block>
<else>else <return>return <expr>2</expr>;</return></else>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>ENCODER</name><argument_list>(<argument>cp950</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>Py_UNICODE</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBCHAR</name></type> <name>code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>WRITE1</name><argument_list>(<argument>(unsigned char)c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>UCS4INVALID</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>cp950ext</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <expr_stmt><expr><call><name>TRYMAP_ENC</name><argument_list>(<argument><expr><name>big5</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <return>return <expr>1</expr>;</return></else>
<macro><name>OUT1</name><argument_list>(<argument>code &gt;&gt; 8</argument>)</argument_list></macro>
<macro><name>OUT2</name><argument_list>(<argument>code &amp; 0xFF</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>2</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>DECODER</name><argument_list>(<argument>cp950</argument>)</argument_list></macro> <block>{
<while>while <condition>(<expr><name>inleft</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>IN1</name></expr></init></decl>;</decl_stmt>
<macro><name>REQUIRE_OUTBUF</name><argument_list>(<argument>1</argument>)</argument_list></macro>
<if>if <condition>(<expr><name>c</name> &lt; 0x80</expr>)</condition><then> <block>{
<macro><name>OUT1</name><argument_list>(<argument>c</argument>)</argument_list></macro>
<macro><name>NEXT</name><argument_list>(<argument>1</argument>, <argument>1</argument>)</argument_list></macro>
<continue>continue;</continue>
}</block></then></if>
<macro><name>REQUIRE_INBUF</name><argument_list>(<argument>2</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>cp950ext</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>IN2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>else <expr_stmt><expr><call><name>TRYMAP_DEC</name><argument_list>(<argument><expr><name>big5</name></expr></argument>, <argument><expr>**<name>outbuf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>IN2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else>
<else>else <return>return <expr>2</expr>;</return></else>
<macro><name>NEXT</name><argument_list>(<argument>2</argument>, <argument>1</argument>)</argument_list></macro>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block>
<decl_stmt><decl><type><name>BEGIN_MAPPINGS_LIST</name></type>
<name>MAPPING_ENCDEC</name><argument_list>(<argument><expr><name>big5</name></expr></argument>)</argument_list>
<name>MAPPING_ENCDEC</name><argument_list>(<argument><expr><name>cp950ext</name></expr></argument>)</argument_list>
<name>END_MAPPINGS_LIST</name>
<name>BEGIN_CODECS_LIST</name>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>big5</name></expr></argument>)</argument_list>
<name>CODEC_STATELESS</name><argument_list>(<argument><expr><name>cp950</name></expr></argument>)</argument_list>
<name>END_CODECS_LIST</name>
<name>I_AM_A_MODULE_FOR</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></decl></decl_stmt>
</unit>
