<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/fpetestmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>fpe_error</name></decl>;</decl_stmt>
<function_decl><type><name>PyMODINIT_FUNC</name></type> <name>initfpetest</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>test</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>db0</name><parameter_list>(<param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>overflow</name><parameter_list>(<param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>nest1</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>nest2</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>nest3</name><parameter_list>(<param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printerr</name><parameter_list>(<param><decl><type><name>double</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>fpetest_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"test"</expr>, <expr>(<name>PyCFunction</name>) <name>test</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>test</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>,<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"overflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>overflow</name><argument_list>(<argument><expr>1.e160</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\ndiv by 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>db0</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\nnested outer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>nest1</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\nnested inner"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>nest1</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\ntrailing outer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>nest1</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\nnested prior"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>nest2</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\nnested interior"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>nest2</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\nnested trailing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>nest2</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name> <argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printerr</name><parameter_list>(<param><decl><type><name>double</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
<if>if<condition>(<expr><name>r</name> == 3.1416</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\tPASS\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyErr_Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"\tFAIL\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>nest1</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr>1.0</expr></init></decl>;</decl_stmt>
<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"Division by zero, outer zone"</argument>, <argument>return 3.1416</argument>)</argument_list></macro>
<if>if<condition>(<expr><name>i</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>a</name> = 1./<name>x</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>(<expr><name>i</name> == 1</expr>)</condition><then> <block>{
<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"Division by zero, inner zone"</argument>, <argument>return 3.1416</argument>)</argument_list></macro>
<expr_stmt><expr><name>a</name> = 1./(1. - <name>x</name>)</expr>;</expr_stmt>
<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>a</argument>)</argument_list></macro>
}</block></then> <else>else <if>if<condition>(<expr><name>i</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>a</name> = 1./(2. - <name>x</name>)</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>a</argument>)</argument_list></macro>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>nest2</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr>1.0</expr></init></decl>;</decl_stmt>
<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"Division by zero, prior error"</argument>, <argument>return 3.1416</argument>)</argument_list></macro>
<if>if<condition>(<expr><name>i</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>a</name> = 1./<name>x</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>(<expr><name>i</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>a</name> = <call><name>nest3</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>(<expr><name>i</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>a</name> = 1./(2. - <name>x</name>)</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>a</argument>)</argument_list></macro>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>nest3</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>
<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"Division by zero, nest3 error"</argument>, <argument>return 3.1416</argument>)</argument_list></macro>
<expr_stmt><expr><name>result</name> = 1./(1. - <name>x</name>)</expr>;</expr_stmt>
<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>result</argument>)</argument_list></macro>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>db0</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>;</decl_stmt>
<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"Division by zero"</argument>, <argument>return 3.1416</argument>)</argument_list></macro>
<expr_stmt><expr><name>a</name> = 1./<name>x</name></expr>;</expr_stmt>
<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>a</argument>)</argument_list></macro>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>overflow</name><parameter_list>(<param><decl><type><name>double</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>;</decl_stmt>
<macro><name>PyFPE_START_PROTECT</name><argument_list>(<argument>"Overflow"</argument>, <argument>return 3.1416</argument>)</argument_list></macro>
<expr_stmt><expr><name>a</name> = <name>b</name>*<name>b</name></expr>;</expr_stmt>
<macro><name>PyFPE_END_PROTECT</name><argument_list>(<argument>a</argument>)</argument_list></macro>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>PyMODINIT_FUNC</name></type> <name>initfpetest</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"fpetest"</expr></argument>, <argument><expr><name>fpetest_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fpe_error</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"fpetest.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fpe_error</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>fpe_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
