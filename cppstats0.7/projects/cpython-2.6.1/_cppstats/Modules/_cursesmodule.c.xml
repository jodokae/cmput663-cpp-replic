<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Modules/_cursesmodule.c"><decl_stmt><decl><type><name>char</name> *</type><name>PyCursesVersion</name> <init>= <expr>"2.2"</expr></init></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_SYSV_CURSES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_SYSV_CURSES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSES_MODULE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"py_curses.h"</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>setupterm</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;term.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_H</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>sgi</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SCO5</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_SYSV_CURSES</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>chtype</name></type> <name>attr_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_SYSV_CURSES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>PyCursesError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialised_setupterm</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialised</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialisedcolors</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesSetupTermCalled</name></cpp:macro> <cpp:value>if (initialised_setupterm != TRUE) { PyErr_SetString(PyCursesError, "must call (at least) setupterm() first"); return 0; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesInitialised</name></cpp:macro> <cpp:value>if (initialised != TRUE) { PyErr_SetString(PyCursesError, "must call initscr() first"); return 0; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCursesInitialisedColor</name></cpp:macro> <cpp:value>if (initialisedcolors != TRUE) { PyErr_SetString(PyCursesError, "must call start_color() first"); return 0; }</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesCheckERR</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>, <param><decl><type><name>char</name> *</type><name>fname</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>code</name> != <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>fname</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"%s() returned ERR"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>PyCurses_ConvertToChtype</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>chtype</name> *</type><name>ch</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ch</name> = (<name>chtype</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if<condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>
&amp;&amp; (<call><name>PyString_Size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> == 1)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ch</name> = (<name>chtype</name>) *<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>0</expr>;</return>
}</block></else></if></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>func_PyCursesSetupTermCalled</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>PyCursesSetupTermCalled</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>func_PyCursesInitialised</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>PyCursesInitialised</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>func_PyCursesInitialisedColor</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>PyCursesInitialisedColor</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCursesWindow_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_NoArgNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject *PyCursesWindow_ ##X (PyCursesWindowObject *self, PyObject *args) { return PyCursesCheckERR(X(self-&gt;win), #X); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_NoArgTrueFalseFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * PyCursesWindow_ ##X (PyCursesWindowObject *self) { if (X (self-&gt;win) == FALSE) { Py_INCREF(Py_False); return Py_False; } else { Py_INCREF(Py_True); return Py_True; } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_NoArgNoReturnVoidFunction</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * PyCursesWindow_ ##X (PyCursesWindowObject *self) { X(self-&gt;win); Py_INCREF(Py_None); return Py_None; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_NoArg2TupleReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>, <param><type><name>TYPE</name></type></param>, <param><type><name>ERGSTR</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * PyCursesWindow_ ##X (PyCursesWindowObject *self) { TYPE arg1, arg2; X(self-&gt;win,arg1,arg2); return Py_BuildValue(ERGSTR, arg1, arg2); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_OneArgNoReturnVoidFunction</name><parameter_list>(<param><type><name>X</name></type></param>, <param><type><name>TYPE</name></type></param>, <param><type><name>PARSESTR</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * PyCursesWindow_ ##X (PyCursesWindowObject *self, PyObject *args) { TYPE arg1; if (!PyArg_ParseTuple(args, PARSESTR, &amp;arg1)) return NULL; X(self-&gt;win,arg1); Py_INCREF(Py_None); return Py_None; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_OneArgNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>, <param><type><name>TYPE</name></type></param>, <param><type><name>PARSESTR</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * PyCursesWindow_ ##X (PyCursesWindowObject *self, PyObject *args) { TYPE arg1; if (!PyArg_ParseTuple(args,PARSESTR, &amp;arg1)) return NULL; return PyCursesCheckERR(X(self-&gt;win, arg1), #X); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Window_TwoArgNoReturnFunction</name><parameter_list>(<param><type><name>X</name></type></param>, <param><type><name>TYPE</name></type></param>, <param><type><name>PARSESTR</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static PyObject * PyCursesWindow_ ##X (PyCursesWindowObject *self, PyObject *args) { TYPE arg1, arg2; if (!PyArg_ParseTuple(args,PARSESTR, &amp;arg1, &amp;arg2)) return NULL; return PyCursesCheckERR(X(self-&gt;win, arg1, arg2), #X); }</cpp:value></cpp:define>
<macro><name>Window_NoArgNoReturnFunction</name><argument_list>(<argument>untouchwin</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnFunction</name><argument_list>(<argument>touchwin</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnFunction</name><argument_list>(<argument>redrawwin</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnFunction</name><argument_list>(<argument>winsertln</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnFunction</name><argument_list>(<argument>werase</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnFunction</name><argument_list>(<argument>wdeleteln</argument>)</argument_list></macro>
<macro><name>Window_NoArgTrueFalseFunction</name><argument_list>(<argument>is_wintouched</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wsyncup</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wsyncdown</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wstandend</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wstandout</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wcursyncup</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wclrtoeol</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wclrtobot</argument>)</argument_list></macro>
<macro><name>Window_NoArgNoReturnVoidFunction</name><argument_list>(<argument>wclear</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnVoidFunction</name><argument_list>(<argument>idcok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnVoidFunction</name><argument_list>(<argument>immedok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnVoidFunction</name><argument_list>(<argument>wtimeout</argument>, <argument>int</argument>, <argument>"i;delay"</argument>)</argument_list></macro>
<macro><name>Window_NoArg2TupleReturnFunction</name><argument_list>(<argument>getyx</argument>, <argument>int</argument>, <argument>"ii"</argument>)</argument_list></macro>
<macro><name>Window_NoArg2TupleReturnFunction</name><argument_list>(<argument>getbegyx</argument>, <argument>int</argument>, <argument>"ii"</argument>)</argument_list></macro>
<macro><name>Window_NoArg2TupleReturnFunction</name><argument_list>(<argument>getmaxyx</argument>, <argument>int</argument>, <argument>"ii"</argument>)</argument_list></macro>
<macro><name>Window_NoArg2TupleReturnFunction</name><argument_list>(<argument>getparyx</argument>, <argument>int</argument>, <argument>"ii"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>clearok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>idlok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>Window_OneArgNoReturnVoidFunction</name><argument_list>(<argument>keypad</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>keypad</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>leaveok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>Window_OneArgNoReturnVoidFunction</name><argument_list>(<argument>nodelay</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>nodelay</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>notimeout</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>scrollok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>winsdelln</argument>, <argument>int</argument>, <argument>"i;nlines"</argument>)</argument_list></macro>
<macro><name>Window_OneArgNoReturnFunction</name><argument_list>(<argument>syncok</argument>, <argument>int</argument>, <argument>"i;True(1) or False(0)"</argument>)</argument_list></macro>
<macro><name>Window_TwoArgNoReturnFunction</name><argument_list>(<argument>mvwin</argument>, <argument>int</argument>, <argument>"ii;y,x"</argument>)</argument_list></macro>
<macro><name>Window_TwoArgNoReturnFunction</name><argument_list>(<argument>mvderwin</argument>, <argument>int</argument>, <argument>"ii;y,x"</argument>)</argument_list></macro>
<macro><name>Window_TwoArgNoReturnFunction</name><argument_list>(<argument>wmove</argument>, <argument>int</argument>, <argument>"ii;y,x"</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>Window_TwoArgNoReturnFunction</name><argument_list>(<argument>wresize</argument>, <argument>int</argument>, <argument>"ii;lines,columns"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_New</name><parameter_list>(<param><decl><type><name>WINDOW</name> *</type><name>win</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCursesWindowObject</name> *</type><name>wo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>wo</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>PyCursesWindowObject</name></expr></argument>, <argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wo</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>wo</name>-&gt;<name>win</name></name> = <name>win</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>wo</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PyCursesWindow_Dealloc</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>wo</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>wo</name>-&gt;<name>win</name></name> != <name>stdscr</name></expr>)</condition><then> <expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name><name>wo</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PyObject_DEL</name><argument_list>(<argument><expr><name>wo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_AddCh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O;ch or int"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Ol;ch or int,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iiO;y,x,ch or int"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iiOl;y,x,ch or int, attr"</expr></argument>,
<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"addch requires 1 to 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument 1 or 3 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwaddch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>waddch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"addch"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_AddStr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init> , <name>attr_old</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init>, <name>use_attr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s;str"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"sl;str,attr"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iis;int,int,str"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iisl;int,int,str,attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"addstr requires 1 to 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>attr_old</name> = <call><name>getattrs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwaddstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rtn</name> = <call><name>waddstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"addstr"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_AddNStr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init> , <name>attr_old</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init>, <name>use_attr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"si;str,n"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"sil;str,n,attr"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iisi;y,x,str,n"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>5</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iisil;y,x,str,n,attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"addnstr requires 2 to 5 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>attr_old</name> = <call><name>getattrs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwaddnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rtn</name> = <call><name>waddnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"addnstr"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Bkgd</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>bkgd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O;ch or int"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"Ol;ch or int,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bkgd requires 1 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>bkgd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument 1 or 3 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wbkgd</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>bkgd</name> | <name>attr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"bkgd"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_AttrOff</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"l;attr"</expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wattroff</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr>(<name>attr_t</name>)<name>lattr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"attroff"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_AttrOn</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"l;attr"</expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wattron</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr>(<name>attr_t</name>)<name>lattr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"attron"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_AttrSet</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"l;attr"</expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr>(<name>attr_t</name>)<name>lattr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"attrset"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_BkgdSet</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>bkgd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O;ch or int"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"Ol;ch or int,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"bkgdset requires 1 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>bkgd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument 1 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>wbkgdset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>bkgd</name> | <name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"bkgdset"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Border</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name><name>temp</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name><name>ch</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;8</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"|OOOOOOOO;ls,rs,ts,bs,tl,tr,bl,br"</expr></argument>,
<argument><expr>&amp;<name><name>temp</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>temp</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>temp</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>temp</name><index>[<expr>3</expr>]</index></name></expr></argument>,
<argument><expr>&amp;<name><name>temp</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>temp</name><index>[<expr>5</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>temp</name><index>[<expr>6</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>temp</name><index>[<expr>7</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;8</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name> &amp;&amp; !<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"argument %i must be a ch or an int"</expr></argument>, <argument><expr><name>i</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>wborder</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,
<argument><expr><name><name>ch</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr>3</expr>]</index></name></expr></argument>,
<argument><expr><name><name>ch</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr>5</expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr>6</expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr>7</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Box</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>chtype</name></type> <name>ch1</name><init>=<expr>0</expr></init>,<name>ch2</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ll;vertint,horint"</expr></argument>, <argument><expr>&amp;<name>ch1</name></expr></argument>, <argument><expr>&amp;<name>ch2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
</default>}</block></switch>
<expr_stmt><expr><call><name>box</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>ch1</name></expr></argument>,<argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_H</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>MVWDELCH_IS_EXPRESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>py_mvwdelch</name></cpp:macro> <cpp:value>mvwdelch</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>py_mvwdelch</name><parameter_list>(<param><decl><type><name>WINDOW</name> *</type><name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>mvwdelch</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_ChgAt</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"l;attr"</expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"il;n,attr"</expr></argument>, <argument><expr>&amp;<name>num</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iil;int,int,attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iiil;int,int,n,attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>num</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"chgat requires 1 to 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>color</name> = <call>(<name>short</name>)<argument_list>(<argument><expr>(<name>attr</name> &gt;&gt; 8) &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> = <name>attr</name> - (<name>color</name> &lt;&lt; 8)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>mvwchgat</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name>attr</name></expr></argument>,<argument><expr><name>color</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>touchline</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>getyx</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn</name> = <call><name>wchgat</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name>attr</name></expr></argument>,<argument><expr><name>color</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>touchline</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"chgat"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_DelCh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>rtn</name> = <call><name>wdelch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rtn</name> = <call><name>py_mvwdelch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"delch requires 0 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"[mv]wdelch"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_DerWin</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>begin_y</name></decl>, <decl><type ref="prev"/><name>begin_x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nlines</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ncols</name> = 0</expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;begin_y,begin_x"</expr></argument>,<argument><expr>&amp;<name>begin_y</name></expr></argument>,<argument><expr>&amp;<name>begin_x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiii;nlines,ncols,begin_y,begin_x"</expr></argument>,
<argument><expr>&amp;<name>nlines</name></expr></argument>,<argument><expr>&amp;<name>ncols</name></expr></argument>,<argument><expr>&amp;<name>begin_y</name></expr></argument>,<argument><expr>&amp;<name>begin_x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"derwin requires 2 or 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>win</name> = <call><name>derwin</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>nlines</name></expr></argument>,<argument><expr><name>ncols</name></expr></argument>,<argument><expr><name>begin_y</name></expr></argument>,<argument><expr><name>begin_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>win</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_EchoChar</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"O;ch or int"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"Ol;ch or int,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"echochar requires 1 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument 1 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOW_HAS_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>win</name>-&gt;<name>_flags</name></name> &amp; <name>_ISPAD</name></expr>)</condition><then>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>pechochar</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"echochar"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wechochar</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"echochar"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Enclose</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>( <argument><expr><call><name>wenclose</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_GetBkgd</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <call><name>getbkgd</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_GetCh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>wgetch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>mvwgetch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"getch requires 0 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>)<name>rtn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_GetKey</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>wgetch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>mvwgetch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"getkey requires 0 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>rtn</name> == <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"no input"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rtn</name>&lt;=255</expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"c"</expr></argument>, <argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>unctrl</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>(<name>char</name> *)<call><name>keyname</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_GetStr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rtn</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn2</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn2</name> <init>= <expr><call><name>wgetnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>rtn</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;n"</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn2</name> <init>= <expr><call><name>wgetnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>rtn</name></expr></argument>,<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>rtn2</name> <init>= <expr><call><name>wmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call>==<name>ERR</name> ? <name>ERR</name> : <call><name>wgetnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>rtn</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rtn2</name> = <call><name>mvwgetnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>rtn</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iii;y,x,n"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn2</name> <init>= <expr><call><name>wmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call>==<name>ERR</name> ? <name>ERR</name> :
<call><name>wgetnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>rtn</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn2</name> <init>= <expr><call><name>mvwgetnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>rtn</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"getstr requires 0 to 3 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>rtn2</name> == <name>ERR</name></expr>)</condition><then>
<expr_stmt><expr><name><name>rtn</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Hline</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>code</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oi;ch or int,n"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oil;ch or int,n,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiOi;y,x,ch or int,n"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>code</name> = <call><name>wmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>5</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiOil; y,x,ch or int,n,attr"</expr></argument>,
<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> = <call><name>wmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"hline requires 2 to 5 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>code</name> != <name>ERR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"argument 1 or 3 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>whline</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"hline"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr>"wmove"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_InsCh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O;ch or int"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Ol;ch or int,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iiO;y,x,ch or int"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iiOl;y,x,ch or int, attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"insch requires 1 or 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"argument 1 or 3 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwinsch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>winsch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"insch"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_InCh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>rtn</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>rtn</name> = <call><name>winch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwinch</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"inch requires 0 or 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>rtn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_InStr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rtn</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn2</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><name>rtn2</name> = <call><name>winnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>rtn</name></expr></argument>, <argument><expr>1023</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;n"</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rtn2</name> = <call><name>winnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>rtn</name></expr></argument>,<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr>1023</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;y,x"</expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rtn2</name> = <call><name>mvwinnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>rtn</name></expr></argument>,<argument><expr>1023</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii;y,x,n"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>rtn2</name> = <call><name>mvwinnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>rtn</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr>1023</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"instr requires 0 or 3 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>rtn2</name> == <name>ERR</name></expr>)</condition><then>
<expr_stmt><expr><name><name>rtn</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_InsStr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init> , <name>attr_old</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init>, <name>use_attr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s;str"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"sl;str,attr"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iis;y,x,str"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iisl;y,x,str,attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"insstr requires 1 to 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>attr_old</name> = <call><name>getattrs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwinsstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rtn</name> = <call><name>winsstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"insstr"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_InsNStr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init> , <name>attr_old</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_xy</name> <init>= <expr><name>FALSE</name></expr></init>, <name>use_attr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"si;str,n"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"sil;str,n,attr"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iisi;y,x,str,n"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_xy</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>5</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"iisil;y,x,str,n,attr"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_xy</name> = <name>use_attr</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"insnstr requires 2 to 5 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>attr_old</name> = <call><name>getattrs</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>use_xy</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rtn</name> = <call><name>mvwinsnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rtn</name> = <call><name>winsnstr</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>use_attr</name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>wattrset</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>attr_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"insnstr"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Is_LineTouched</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>erg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;line"</expr></argument>, <argument><expr>&amp;<name>line</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>erg</name> = <call><name>is_linetouched</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>erg</name> == <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"is_linetouched: line number outside of boundaries"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>erg</name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_False</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_True</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_NoOutRefresh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pminrow</name></decl>,<decl><type ref="prev"/><name>pmincol</name></decl>,<decl><type ref="prev"/><name>sminrow</name></decl>,<decl><type ref="prev"/><name>smincol</name></decl>,<decl><type ref="prev"/><name>smaxrow</name></decl>,<decl><type ref="prev"/><name>smaxcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WINDOW_HAS_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>0</expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>win</name>-&gt;<name>_flags</name></name> &amp; <name>_ISPAD</name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>6</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
<argument><expr>"iiiiii;" \
"pminrow,pmincol,sminrow,smincol,smaxrow,smaxcol"</expr></argument>,
<argument><expr>&amp;<name>pminrow</name></expr></argument>, <argument><expr>&amp;<name>pmincol</name></expr></argument>, <argument><expr>&amp;<name>sminrow</name></expr></argument>,
<argument><expr>&amp;<name>smincol</name></expr></argument>, <argument><expr>&amp;<name>smaxrow</name></expr></argument>, <argument><expr>&amp;<name>smaxcol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>pnoutrefresh</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,
<argument><expr><name>pminrow</name></expr></argument>, <argument><expr><name>pmincol</name></expr></argument>, <argument><expr><name>sminrow</name></expr></argument>,
<argument><expr><name>smincol</name></expr></argument>, <argument><expr><name>smaxrow</name></expr></argument>, <argument><expr><name>smaxcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"pnoutrefresh"</expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>,
<argument><expr>"noutrefresh() called for a pad "
"requires 6 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":noutrefresh"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"wnoutrefresh"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Overlay</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCursesWindowObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_copywin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sminrow</name></decl>, <decl><type ref="prev"/><name>smincol</name></decl>, <decl><type ref="prev"/><name>dminrow</name></decl>, <decl><type ref="prev"/><name>dmincol</name></decl>, <decl><type ref="prev"/><name>dmaxrow</name></decl>, <decl><type ref="prev"/><name>dmaxcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!;window object"</expr></argument>,
<argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>7</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!iiiiii;window object, int, int, int, int, int, int"</expr></argument>,
<argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>sminrow</name></expr></argument>, <argument><expr>&amp;<name>smincol</name></expr></argument>,
<argument><expr>&amp;<name>dminrow</name></expr></argument>, <argument><expr>&amp;<name>dmincol</name></expr></argument>, <argument><expr>&amp;<name>dmaxrow</name></expr></argument>, <argument><expr>&amp;<name>dmaxcol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_copywin</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"overlay requires one or seven arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>use_copywin</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>copywin</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name><name>temp</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>sminrow</name></expr></argument>, <argument><expr><name>smincol</name></expr></argument>,
<argument><expr><name>dminrow</name></expr></argument>, <argument><expr><name>dmincol</name></expr></argument>, <argument><expr><name>dmaxrow</name></expr></argument>, <argument><expr><name>dmaxcol</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"copywin"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>overlay</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name><name>temp</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"overlay"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Overwrite</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyCursesWindowObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_copywin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sminrow</name></decl>, <decl><type ref="prev"/><name>smincol</name></decl>, <decl><type ref="prev"/><name>dminrow</name></decl>, <decl><type ref="prev"/><name>dmincol</name></decl>, <decl><type ref="prev"/><name>dmaxrow</name></decl>, <decl><type ref="prev"/><name>dmaxcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!;window object"</expr></argument>,
<argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>7</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O!iiiiii;window object, int, int, int, int, int, int"</expr></argument>,
<argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>sminrow</name></expr></argument>, <argument><expr>&amp;<name>smincol</name></expr></argument>,
<argument><expr>&amp;<name>dminrow</name></expr></argument>, <argument><expr>&amp;<name>dmincol</name></expr></argument>, <argument><expr>&amp;<name>dmaxrow</name></expr></argument>, <argument><expr>&amp;<name>dmaxcol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>use_copywin</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"overwrite requires one or seven arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>use_copywin</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>copywin</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name><name>temp</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>sminrow</name></expr></argument>, <argument><expr><name>smincol</name></expr></argument>,
<argument><expr><name>dminrow</name></expr></argument>, <argument><expr><name>dmincol</name></expr></argument>, <argument><expr><name>dmaxrow</name></expr></argument>, <argument><expr><name>dmaxcol</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"copywin"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rtn</name> = <call><name>overwrite</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name><name>temp</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"overwrite"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_PutWin</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O;fileobj"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>PyFile_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument must be a file object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>putwin</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"putwin"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_RedrawLine</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii;beg,num"</expr></argument>, <argument><expr>&amp;<name>beg</name></expr></argument>, <argument><expr>&amp;<name>num</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wredrawln</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>beg</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"redrawln"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Refresh</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pminrow</name></decl>,<decl><type ref="prev"/><name>pmincol</name></decl>,<decl><type ref="prev"/><name>sminrow</name></decl>,<decl><type ref="prev"/><name>smincol</name></decl>,<decl><type ref="prev"/><name>smaxrow</name></decl>,<decl><type ref="prev"/><name>smaxcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WINDOW_HAS_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>0</expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>win</name>-&gt;<name>_flags</name></name> &amp; <name>_ISPAD</name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>6</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
<argument><expr>"iiiiii;" \
"pminrow,pmincol,sminrow,smincol,smaxrow,smaxcol"</expr></argument>,
<argument><expr>&amp;<name>pminrow</name></expr></argument>, <argument><expr>&amp;<name>pmincol</name></expr></argument>, <argument><expr>&amp;<name>sminrow</name></expr></argument>,
<argument><expr>&amp;<name>smincol</name></expr></argument>, <argument><expr>&amp;<name>smaxrow</name></expr></argument>, <argument><expr>&amp;<name>smaxcol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>prefresh</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,
<argument><expr><name>pminrow</name></expr></argument>, <argument><expr><name>pmincol</name></expr></argument>, <argument><expr><name>sminrow</name></expr></argument>,
<argument><expr><name>smincol</name></expr></argument>, <argument><expr><name>smaxrow</name></expr></argument>, <argument><expr><name>smaxcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"prefresh"</expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>,
<argument><expr>"refresh() for a pad requires 6 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>":refresh"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<decl_stmt><decl><type><name>Py_BEGIN_ALLOW_THREADS</name></type>
<name>rtn</name> <init>= <expr><call><name>wrefresh</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>Py_END_ALLOW_THREADS</name></macro>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr>"prefresh"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_SetScrollRegion</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;top, bottom"</expr></argument>,<argument><expr>&amp;<name>y</name></expr></argument>,<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wsetscrreg</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"wsetscrreg"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_SubWin</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>begin_y</name></decl>, <decl><type ref="prev"/><name>begin_x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nlines</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ncols</name> = 0</expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;begin_y,begin_x"</expr></argument>,<argument><expr>&amp;<name>begin_y</name></expr></argument>,<argument><expr>&amp;<name>begin_x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiii;nlines,ncols,begin_y,begin_x"</expr></argument>,
<argument><expr>&amp;<name>nlines</name></expr></argument>,<argument><expr>&amp;<name>ncols</name></expr></argument>,<argument><expr>&amp;<name>begin_y</name></expr></argument>,<argument><expr>&amp;<name>begin_x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"subwin requires 2 or 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOW_HAS_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>win</name>-&gt;<name>_flags</name></name> &amp; <name>_ISPAD</name></expr>)</condition><then>
<expr_stmt><expr><name>win</name> = <call><name>subpad</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>nlines</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>begin_y</name></expr></argument>, <argument><expr><name>begin_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>win</name> = <call><name>subwin</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>nlines</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>begin_y</name></expr></argument>, <argument><expr><name>begin_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>win</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Scroll</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>scroll</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"scroll"</expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i;nlines"</expr></argument>, <argument><expr>&amp;<name>nlines</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wscrl</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>nlines</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"scroll"</expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"scroll requires 0 or 1 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_TouchLine</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;start,count"</expr></argument>,<argument><expr>&amp;<name>st</name></expr></argument>,<argument><expr>&amp;<name>cnt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>touchline</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"touchline"</expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iii;start,count,val"</expr></argument>, <argument><expr>&amp;<name>st</name></expr></argument>, <argument><expr>&amp;<name>cnt</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wtouchln</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"touchline"</expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"touchline requires 2 or 3 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_Vline</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>code</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>attr_t</name></type> <name>attr</name> <init>= <expr><name>A_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lattr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oi;ch or int,n"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>3</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"Oil;ch or int,n,attr"</expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiOi;y,x,ch or int,n"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>code</name> = <call><name>wmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>5</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiOil; y,x,ch or int,n,attr"</expr></argument>,
<argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>temp</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr>&amp;<name>lattr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>attr</name> = <name>lattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> = <call><name>wmove</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"vline requires 2 to 5 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><name>code</name> != <name>ERR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>PyCurses_ConvertToChtype</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"argument 1 or 3 must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>wvline</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>win</name></name></expr></argument>, <argument><expr><name>ch</name> | <name>attr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"vline"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr>"wmove"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PyCursesWindow_Methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"addch"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_AddCh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"addnstr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_AddNStr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"addstr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_AddStr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"attroff"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_AttrOff</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"attron"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_AttrOn</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"attrset"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_AttrSet</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bkgd"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Bkgd</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"chgat"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_ChgAt</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"bkgdset"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_BkgdSet</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"border"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Border</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"box"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Box</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clear"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wclear</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clearok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_clearok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clrtobot"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wclrtobot</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"clrtoeol"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wclrtoeol</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cursyncup"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wcursyncup</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"delch"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_DelCh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"deleteln"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wdeleteln</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"derwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_DerWin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"echochar"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_EchoChar</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"enclose"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Enclose</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"erase"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_werase</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getbegyx"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_getbegyx</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getbkgd"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_GetBkgd</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getch"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_GetCh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getkey"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_GetKey</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getmaxyx"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_getmaxyx</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getparyx"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_getparyx</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getstr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_GetStr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getyx"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_getyx</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"hline"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Hline</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"idcok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_idcok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"idlok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_idlok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"immedok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_immedok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"inch"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_InCh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"insch"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_InsCh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"insdelln"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_winsdelln</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"insertln"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_winsertln</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"insnstr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_InsNStr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"insstr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_InsStr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"instr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_InStr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"is_linetouched"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Is_LineTouched</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"is_wintouched"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_is_wintouched</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"keypad"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_keypad</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"leaveok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_leaveok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"move"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wmove</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mvderwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_mvderwin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mvwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_mvwin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nodelay"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_nodelay</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"notimeout"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_notimeout</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noutrefresh"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_NoOutRefresh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nooutrefresh"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_NoOutRefresh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"overlay"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Overlay</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{
<expr>"overwrite"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Overwrite</name></expr>,
<expr><name>METH_VARARGS</name></expr>
}</block></expr>,
<expr><block>{<expr>"putwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_PutWin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"redrawln"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_RedrawLine</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"redrawwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_redrawwin</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"refresh"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Refresh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"resize"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wresize</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"scroll"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Scroll</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"scrollok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_scrollok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setscrreg"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_SetScrollRegion</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"standend"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wstandend</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"standout"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wstandout</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"subpad"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_SubWin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"subwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_SubWin</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"syncdown"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wsyncdown</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"syncok"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_syncok</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"syncup"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wsyncup</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"timeout"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_wtimeout</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"touchline"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_TouchLine</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"touchwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_touchwin</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"untouchwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_untouchwin</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"vline"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCursesWindow_Vline</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCursesWindow_GetAttr</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>PyCursesWindow_Methods</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>PyCursesWindow_Type</name> <init>= <expr><block>{
<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>
"_curses.curses window"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PyCursesWindowObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>)<name>PyCursesWindow_Dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)<name>PyCursesWindow_GetAttr</name></expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
}</block></expr></init></decl>;</decl_stmt>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>beep</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>def_prog_mode</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>def_shell_mode</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>doupdate</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>endwin</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>flash</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>nocbreak</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>noecho</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>nonl</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>noraw</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>reset_prog_mode</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>reset_shell_mode</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>resetty</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnFunction</name><argument_list>(<argument>savetty</argument>)</argument_list></macro>
<macro><name>NoArgOrFlagNoReturnFunction</name><argument_list>(<argument>cbreak</argument>)</argument_list></macro>
<macro><name>NoArgOrFlagNoReturnFunction</name><argument_list>(<argument>echo</argument>)</argument_list></macro>
<macro><name>NoArgOrFlagNoReturnFunction</name><argument_list>(<argument>nl</argument>)</argument_list></macro>
<macro><name>NoArgOrFlagNoReturnFunction</name><argument_list>(<argument>raw</argument>)</argument_list></macro>
<macro><name>NoArgReturnIntFunction</name><argument_list>(<argument>baudrate</argument>)</argument_list></macro>
<macro><name>NoArgReturnIntFunction</name><argument_list>(<argument>termattrs</argument>)</argument_list></macro>
<macro><name>NoArgReturnStringFunction</name><argument_list>(<argument>termname</argument>)</argument_list></macro>
<macro><name>NoArgReturnStringFunction</name><argument_list>(<argument>longname</argument>)</argument_list></macro>
<macro><name>NoArgTrueFalseFunction</name><argument_list>(<argument>can_change_color</argument>)</argument_list></macro>
<macro><name>NoArgTrueFalseFunction</name><argument_list>(<argument>has_colors</argument>)</argument_list></macro>
<macro><name>NoArgTrueFalseFunction</name><argument_list>(<argument>has_ic</argument>)</argument_list></macro>
<macro><name>NoArgTrueFalseFunction</name><argument_list>(<argument>has_il</argument>)</argument_list></macro>
<macro><name>NoArgTrueFalseFunction</name><argument_list>(<argument>isendwin</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnVoidFunction</name><argument_list>(<argument>flushinp</argument>)</argument_list></macro>
<macro><name>NoArgNoReturnVoidFunction</name><argument_list>(<argument>noqiflush</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_filter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>filter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Color_Content</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>color</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></expr></expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"h:color_content"</expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>color_content</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>, <argument><expr>&amp;<name>g</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call> != <name>ERR</name></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(iii)"</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>,
<argument><expr>"Argument 1 was out of range. Check value of COLORS."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_color_pair</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></expr></expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:color_pair"</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>n</name> &lt;&lt; 8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Curs_Set</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>vis</name></decl>,<decl><type ref="prev"/><name>erg</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:curs_set"</expr></argument>, <argument><expr>&amp;<name>vis</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>erg</name> = <call><name>curs_set</name><argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>erg</name> == <name>ERR</name></expr>)</condition><then> <return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><name>erg</name></expr></argument>, <argument><expr>"curs_set"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>erg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Delay_Output</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i:delay_output"</expr></argument>, <argument><expr>&amp;<name>ms</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>delay_output</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"delay_output"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_EraseChar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesInitialised</name></type>
<name>ch</name> <init>= <expr><call><name>erasechar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_getsyx</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<function_decl><type><name>PyCursesInitialised</name></type>
<name>getsyx</name><parameter_list>(<param><decl><type><name>y</name></type></decl></param>, <param><decl><type><name>x</name></type></decl></param>)</parameter_list>;</function_decl>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ii)"</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_GetMouse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MEVENT</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesInitialised</name></type>
<name>rtn</name> <init>= <expr><call><name>getmouse</name><argument_list>( <argument><expr>&amp;<name>event</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rtn</name> == <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"getmouse() returned ERR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(hiiil)"</expr></argument>,
<argument><expr>(<name>short</name>)<name><name>event</name>.<name>id</name></name></expr></argument>,
<argument><expr><name><name>event</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>event</name>.<name>y</name></name></expr></argument>, <argument><expr><name><name>event</name>.<name>z</name></name></expr></argument>,
<argument><expr>(<name>long</name>) <name><name>event</name>.<name>bstate</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_UngetMouse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MEVENT</name></type> <name>event</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"hiiil"</expr></argument>,
<argument><expr>&amp;<name><name>event</name>.<name>id</name></name></expr></argument>,
<argument><expr>&amp;<name><name>event</name>.<name>x</name></name></expr></argument>, <argument><expr>&amp;<name><name>event</name>.<name>y</name></name></expr></argument>, <argument><expr>&amp;<name><name>event</name>.<name>z</name></name></expr></argument>,
<argument><expr>(<name>int</name> *) &amp;<name><name>event</name>.<name>bstate</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>ungetmouse</name><argument_list>(<argument><expr>&amp;<name>event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"ungetmouse"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_GetWin</name><parameter_list>(<param><decl><type><name>PyCursesWindowObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>temp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyFile_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument must be a file object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>win</name> = <call><name>getwin</name><argument_list>(<argument><expr><call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>win</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_HalfDelay</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tenths</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"b:halfdelay"</expr></argument>, <argument><expr>&amp;<name>tenths</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>halfdelay</name><argument_list>(<argument><expr><name>tenths</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"halfdelay"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type> <name>PyCurses_has_key</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i"</expr></argument>,<argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>has_key</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_False</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_True</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Init_Color</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>color</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></expr></expr_stmt>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"hhhh;color,r,g,b"</expr></argument>, <argument><expr>&amp;<name>color</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>, <argument><expr>&amp;<name>g</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"init_color requires 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>init_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"init_color"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Init_Pair</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>pair</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></expr></expr_stmt>
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> != 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"init_pair requires 3 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"hhh;pair, f, b"</expr></argument>, <argument><expr>&amp;<name>pair</name></expr></argument>, <argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>init_pair</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"init_pair"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ModDict</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_InitScr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>initialised</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>win</name> = <call><name>initscr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>win</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>initialised</name> = <name>initialised_setupterm</name> = <name>TRUE</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetDictInt</name><parameter_list>(<param><type><name>string</name></type></param>,<param><type><name>ch</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { PyObject *o = PyInt_FromLong((long) (ch)); if (o &amp;&amp; PyDict_SetItemString(ModDict, string, o) == 0) { Py_DECREF(o); } } while (0)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_ULCORNER"</expr></argument>, <argument><expr>(<name>ACS_ULCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_LLCORNER"</expr></argument>, <argument><expr>(<name>ACS_LLCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_URCORNER"</expr></argument>, <argument><expr>(<name>ACS_URCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_LRCORNER"</expr></argument>, <argument><expr>(<name>ACS_LRCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_LTEE"</expr></argument>, <argument><expr>(<name>ACS_LTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_RTEE"</expr></argument>, <argument><expr>(<name>ACS_RTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BTEE"</expr></argument>, <argument><expr>(<name>ACS_BTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_TTEE"</expr></argument>, <argument><expr>(<name>ACS_TTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_HLINE"</expr></argument>, <argument><expr>(<name>ACS_HLINE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_VLINE"</expr></argument>, <argument><expr>(<name>ACS_VLINE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_PLUS"</expr></argument>, <argument><expr>(<name>ACS_PLUS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NCURSES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_S1"</expr></argument>, <argument><expr>(<name>ACS_S1</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_S9"</expr></argument>, <argument><expr>(<name>ACS_S9</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_DIAMOND"</expr></argument>, <argument><expr>(<name>ACS_DIAMOND</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_CKBOARD"</expr></argument>, <argument><expr>(<name>ACS_CKBOARD</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_DEGREE"</expr></argument>, <argument><expr>(<name>ACS_DEGREE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_PLMINUS"</expr></argument>, <argument><expr>(<name>ACS_PLMINUS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BULLET"</expr></argument>, <argument><expr>(<name>ACS_BULLET</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_LARROW"</expr></argument>, <argument><expr>(<name>ACS_LARROW</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_RARROW"</expr></argument>, <argument><expr>(<name>ACS_RARROW</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_DARROW"</expr></argument>, <argument><expr>(<name>ACS_DARROW</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_UARROW"</expr></argument>, <argument><expr>(<name>ACS_UARROW</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BOARD"</expr></argument>, <argument><expr>(<name>ACS_BOARD</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_LANTERN"</expr></argument>, <argument><expr>(<name>ACS_LANTERN</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BLOCK"</expr></argument>, <argument><expr>(<name>ACS_BLOCK</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BSSB"</expr></argument>, <argument><expr>(<name>ACS_ULCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SSBB"</expr></argument>, <argument><expr>(<name>ACS_LLCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BBSS"</expr></argument>, <argument><expr>(<name>ACS_URCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SBBS"</expr></argument>, <argument><expr>(<name>ACS_LRCORNER</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SBSS"</expr></argument>, <argument><expr>(<name>ACS_RTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SSSB"</expr></argument>, <argument><expr>(<name>ACS_LTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SSBS"</expr></argument>, <argument><expr>(<name>ACS_BTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BSSS"</expr></argument>, <argument><expr>(<name>ACS_TTEE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_BSBS"</expr></argument>, <argument><expr>(<name>ACS_HLINE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SBSB"</expr></argument>, <argument><expr>(<name>ACS_VLINE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_SSSS"</expr></argument>, <argument><expr>(<name>ACS_PLUS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_S3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_S3"</expr></argument>, <argument><expr>(<name>ACS_S3</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_S7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_S7"</expr></argument>, <argument><expr>(<name>ACS_S7</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_LEQUAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_LEQUAL"</expr></argument>, <argument><expr>(<name>ACS_LEQUAL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_GEQUAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_GEQUAL"</expr></argument>, <argument><expr>(<name>ACS_GEQUAL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_PI"</expr></argument>, <argument><expr>(<name>ACS_PI</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_NEQUAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_NEQUAL"</expr></argument>, <argument><expr>(<name>ACS_NEQUAL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACS_STERLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ACS_STERLING"</expr></argument>, <argument><expr>(<name>ACS_STERLING</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"LINES"</expr></argument>, <argument><expr><name>LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLS"</expr></argument>, <argument><expr><name>COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_setupterm</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>keywds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>termstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name><name>kwlist</name><index>[]</index></name> <init>= <expr><block>{<expr>"term"</expr>, <expr>"fd"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(
<argument><expr><name>args</name></expr></argument>, <argument><expr><name>keywds</name></expr></argument>, <argument><expr>"|zi:setupterm"</expr></argument>, <argument><expr><name>kwlist</name></expr></argument>, <argument><expr>&amp;<name>termstr</name></expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>fd</name> == -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>PyObject</name>*</type> <name>sys_stdout</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sys_stdout</name> = <call><name>PySys_GetObject</name><argument_list>(<argument><expr>"stdout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sys_stdout</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(
<argument><expr><name>PyCursesError</name></expr></argument>,
<argument><expr>"lost sys.stdout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fd</name> = <call><name>PyObject_AsFileDescriptor</name><argument_list>(<argument><expr><name>sys_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fd</name> == -1</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>setupterm</name><argument_list>(<argument><expr><name>termstr</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call> == <name>ERR</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>s</name> <init>= <expr>"setupterm: unknown error"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = "setupterm: could not find terminal"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = "setupterm: could not find terminfo database"</expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>initialised_setupterm</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_IntrFlush</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;True(1), False(0)"</expr></argument>,<argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"intrflush requires 1 argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>intrflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"intrflush"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_IS_TERM_RESIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Is_Term_Resized</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii:is_term_resized"</expr></argument>, <argument><expr>&amp;<name>lines</name></expr></argument>, <argument><expr>&amp;<name>columns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>is_term_resized</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_True</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_False</name></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_KeyName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>knp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i"</expr></argument>,<argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>ch</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr>"invalid key number"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>knp</name> = <call><name>keyname</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>(<name>knp</name> == <name>NULL</name>) ? "" : (<name>char</name> *)<name>knp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_KillChar</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> = <call><name>killchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Meta</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;True(1), False(0)"</expr></argument>,<argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"meta requires 1 argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>meta</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"meta"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_MouseInterval</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>interval</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;interval"</expr></argument>,<argument><expr>&amp;<name>interval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>mouseinterval</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"mouseinterval"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_MouseMask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>newmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mmask_t</name></type> <name>oldmask</name></decl>, <decl><type ref="prev"/><name>availmask</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;mousemask"</expr></argument>,<argument><expr>&amp;<name>newmask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>availmask</name> = <call><name>mousemask</name><argument_list>(<argument><expr><name>newmask</name></expr></argument>, <argument><expr>&amp;<name>oldmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ll)"</expr></argument>, <argument><expr>(<name>long</name>)<name>availmask</name></expr></argument>, <argument><expr>(<name>long</name>)<name>oldmask</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Napms</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i;ms"</expr></argument>, <argument><expr>&amp;<name>ms</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"i"</expr></argument>, <argument><expr><call><name>napms</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_NewPad</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;nlines,ncols"</expr></argument>,<argument><expr>&amp;<name>nlines</name></expr></argument>,<argument><expr>&amp;<name>ncols</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>win</name> = <call><name>newpad</name><argument_list>(<argument><expr><name>nlines</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>win</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_NewWindow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WINDOW</name> *</type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>begin_y</name><init>=<expr>0</expr></init>, <name>begin_x</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<switch>switch <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>2</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii;nlines,ncols"</expr></argument>,<argument><expr>&amp;<name>nlines</name></expr></argument>,<argument><expr>&amp;<name>ncols</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr>4</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"iiii;nlines,ncols,begin_y,begin_x"</expr></argument>,
<argument><expr>&amp;<name>nlines</name></expr></argument>,<argument><expr>&amp;<name>ncols</name></expr></argument>,<argument><expr>&amp;<name>begin_y</name></expr></argument>,<argument><expr>&amp;<name>begin_x</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"newwin requires 2 or 4 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>win</name> = <call><name>newwin</name><argument_list>(<argument><expr><name>nlines</name></expr></argument>,<argument><expr><name>ncols</name></expr></argument>,<argument><expr><name>begin_y</name></expr></argument>,<argument><expr><name>begin_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>win</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr><name>catchall_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr>(<name>PyObject</name> *)<call><name>PyCursesWindow_New</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Pair_Content</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>pair</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></expr></expr_stmt>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"h;pair"</expr></argument>, <argument><expr>&amp;<name>pair</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"pair_content requires 1 argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<if>if <condition>(<expr><call><name>pair_content</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call>==<name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>,
<argument><expr>"Argument 1 was out of range. (1..COLOR_PAIRS-1)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"(ii)"</expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_pair_number</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></expr></expr_stmt>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i;pairvalue"</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
<argument><expr>"pair_number requires 1 argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr>(<name>n</name> &amp; <name>A_COLOR</name>) &gt;&gt; 8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Putp</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"s;str"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>putp</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"putp"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_QiFlush</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><call><name>qiflush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
</case><case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"i;True(1) or False(0)"</expr></argument>, <argument><expr>&amp;<name>flag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <expr_stmt><expr><call><name>qiflush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else <expr_stmt><expr><call><name>noqiflush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"qiflush requires 0 or 1 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_RESIZETERM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_RESIZE_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>update_lines_cols</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name> <init>= <expr><call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"curses"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>m</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>o</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"LINES"</expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>ModDict</name></expr></argument>, <argument><expr>"LINES"</expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>o</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"COLS"</expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>ModDict</name></expr></argument>, <argument><expr>"COLS"</expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_RESIZETERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_ResizeTerm</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii:resizeterm"</expr></argument>, <argument><expr>&amp;<name>lines</name></expr></argument>, <argument><expr>&amp;<name>columns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>resizeterm</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"resizeterm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>update_lines_cols</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_RESIZE_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Resize_Term</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"ii:resize_term"</expr></argument>, <argument><expr>&amp;<name>lines</name></expr></argument>, <argument><expr>&amp;<name>columns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>resize_term</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"resize_term"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>update_lines_cols</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_setsyx</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call>!=2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"setsyx requires 2 arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"ii;y, x"</expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>setsyx</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Start_Color</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>c</name></decl>, *<decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesInitialised</name></type>
<name>code</name> <init>= <expr><call><name>start_color</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>code</name> != <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>initialisedcolors</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>ModDict</name></expr></argument>, <argument><expr>"COLORS"</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr>(<name>long</name>) <name>COLOR_PAIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>ModDict</name></expr></argument>, <argument><expr>"COLOR_PAIRS"</expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"start_color() returned ERR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_tigetflag</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>capname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesSetupTermCalled</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z"</expr></argument>, <argument><expr>&amp;<name>capname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>( <argument><expr>(<name>long</name>) <call><name>tigetflag</name><argument_list>( <argument><expr><name>capname</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_tigetnum</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>capname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesSetupTermCalled</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z"</expr></argument>, <argument><expr>&amp;<name>capname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>( <argument><expr>(<name>long</name>) <call><name>tigetnum</name><argument_list>( <argument><expr><name>capname</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_tigetstr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>capname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesSetupTermCalled</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"z"</expr></argument>, <argument><expr>&amp;<name>capname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>capname</name> = <call><name>tigetstr</name><argument_list>( <argument><expr><name>capname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>capname</name> == 0 || <name>capname</name> == (<name>char</name>*) -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>( <argument><expr><name>capname</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_tparm</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name><init>=<expr>0</expr></init>,<name>i2</name><init>=<expr>0</expr></init>,<name>i3</name><init>=<expr>0</expr></init>,<name>i4</name><init>=<expr>0</expr></init>,<name>i5</name><init>=<expr>0</expr></init>,<name>i6</name><init>=<expr>0</expr></init>,<name>i7</name><init>=<expr>0</expr></init>,<name>i8</name><init>=<expr>0</expr></init>,<name>i9</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>PyCursesSetupTermCalled</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"s|iiiiiiiii:tparm"</expr></argument>,
<argument><expr>&amp;<name>fmt</name></expr></argument>, <argument><expr>&amp;<name>i1</name></expr></argument>, <argument><expr>&amp;<name>i2</name></expr></argument>, <argument><expr>&amp;<name>i3</name></expr></argument>, <argument><expr>&amp;<name>i4</name></expr></argument>,
<argument><expr>&amp;<name>i5</name></expr></argument>, <argument><expr>&amp;<name>i6</name></expr></argument>, <argument><expr>&amp;<name>i7</name></expr></argument>, <argument><expr>&amp;<name>i8</name></expr></argument>, <argument><expr>&amp;<name>i9</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>tparm</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>,<argument><expr><name>i3</name></expr></argument>,<argument><expr><name>i4</name></expr></argument>,<argument><expr><name>i5</name></expr></argument>,<argument><expr><name>i6</name></expr></argument>,<argument><expr><name>i7</name></expr></argument>,<argument><expr><name>i8</name></expr></argument>,<argument><expr><name>i9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"tparm() returned NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_TypeAhead</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;fd"</expr></argument>,<argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>typeahead</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr>"typeahead"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_UnCtrl</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chtype</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"O;ch or int"</expr></argument>,<argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ch</name> = (<name>chtype</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ch</name> = (<name>chtype</name>) *<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>unctrl</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_UngetCh</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"O;ch or int"</expr></argument>,<argument><expr>&amp;<name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ch</name> = (<name>int</name>) <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>ch</name> = (<name>int</name>) *<call><name>PyString_AsString</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"argument must be a ch or an int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><call><name>PyCursesCheckERR</name><argument_list>(<argument><expr><call><name>ungetch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"ungetch"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Use_Env</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<macro><name>PyCursesInitialised</name></macro>
<switch>switch<condition>(<expr><call><name>PyTuple_Size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr>1</expr>:
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr>"i;True(1), False(0)"</expr></argument>,<argument><expr>&amp;<name>flag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"use_env requires 1 argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><call><name>use_env</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyCurses_Use_Default_Colors</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyCursesInitialised</name>
<name>PyCursesInitialisedColor</name></type>
<name>code</name> <init>= <expr><call><name>use_default_colors</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>code</name> != <name>ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Py_None</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyCursesError</name></expr></argument>, <argument><expr>"use_default_colors() returned ERR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PyCurses_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"baudrate"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_baudrate</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"beep"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_beep</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"can_change_color"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_can_change_color</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"cbreak"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_cbreak</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"color_content"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Color_Content</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"color_pair"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_color_pair</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"curs_set"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Curs_Set</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"def_prog_mode"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_def_prog_mode</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"def_shell_mode"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_def_shell_mode</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"delay_output"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Delay_Output</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"doupdate"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_doupdate</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"echo"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_echo</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"endwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_endwin</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"erasechar"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_EraseChar</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"filter"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_filter</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"flash"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_flash</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"flushinp"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_flushinp</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"getmouse"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_GetMouse</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ungetmouse"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_UngetMouse</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"getsyx"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_getsyx</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"getwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_GetWin</name></expr>, <expr><name>METH_O</name></expr>}</block></expr>,
<expr><block>{<expr>"has_colors"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_has_colors</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"has_ic"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_has_ic</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"has_il"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_has_il</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"has_key"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_has_key</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"halfdelay"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_HalfDelay</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"init_color"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Init_Color</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"init_pair"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Init_Pair</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"initscr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_InitScr</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"intrflush"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_IntrFlush</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"isendwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_isendwin</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_IS_TERM_RESIZED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"is_term_resized"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Is_Term_Resized</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"keyname"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_KeyName</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"killchar"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_KillChar</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"longname"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_longname</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"meta"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Meta</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"mouseinterval"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_MouseInterval</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"mousemask"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_MouseMask</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"napms"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Napms</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"newpad"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_NewPad</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"newwin"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_NewWindow</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nl"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_nl</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nocbreak"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_nocbreak</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noecho"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_noecho</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"nonl"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_nonl</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noqiflush"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_noqiflush</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"noraw"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_noraw</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pair_content"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Pair_Content</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"pair_number"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_pair_number</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"putp"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Putp</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"qiflush"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_QiFlush</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"raw"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_raw</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"reset_prog_mode"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_reset_prog_mode</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"reset_shell_mode"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_reset_shell_mode</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"resetty"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_resetty</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_RESIZETERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"resizeterm"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_ResizeTerm</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CURSES_RESIZE_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"resize_term"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Resize_Term</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"savetty"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_savetty</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"setsyx"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_setsyx</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{
<expr>"setupterm"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_setupterm</name></expr>,
<expr><name>METH_VARARGS</name>|<name>METH_KEYWORDS</name></expr>
}</block></expr>,
<expr><block>{<expr>"start_color"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Start_Color</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"termattrs"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_termattrs</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"termname"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_termname</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tigetflag"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_tigetflag</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tigetnum"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_tigetnum</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tigetstr"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_tigetstr</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"tparm"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_tparm</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"typeahead"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_TypeAhead</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"unctrl"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_UnCtrl</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"ungetch"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_UngetCh</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<expr><block>{<expr>"use_env"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Use_Env</name></expr>, <expr><name>METH_VARARGS</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT_SYSV_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"use_default_colors"</expr>, <expr>(<name>PyCFunction</name>)<name>PyCurses_Use_Default_Colors</name></expr>, <expr><name>METH_NOARGS</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>init_curses</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>, *<decl><type ref="prev"/><name>v</name></decl>, *<decl><type ref="prev"/><name>c_api_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> *</type><name><name>PyCurses_API</name><index>[<expr><name>PyCurses_API_pointers</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr>&amp;<name>PyCursesWindow_Type</name></expr></argument>)</argument_list></call> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyCurses_API</name><index>[<expr>0</expr>]</index></name> = (<name>void</name> *)&amp;<name>PyCursesWindow_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyCurses_API</name><index>[<expr>1</expr>]</index></name> = (<name>void</name> *)<name>func_PyCursesSetupTermCalled</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyCurses_API</name><index>[<expr>2</expr>]</index></name> = (<name>void</name> *)<name>func_PyCursesInitialised</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PyCurses_API</name><index>[<expr>3</expr>]</index></name> = (<name>void</name> *)<name>func_PyCursesInitialisedColor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_curses"</expr></argument>, <argument><expr><name>PyCurses_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>d</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>ModDict</name> = <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_api_object</name> = <call><name>PyCObject_FromVoidPtr</name><argument_list>(<argument><expr>(<name>void</name> *)<name>PyCurses_API</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"_C_API"</expr></argument>, <argument><expr><name>c_api_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>c_api_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PyCursesError</name> = <call><name>PyErr_NewException</name><argument_list>(<argument><expr>"_curses.error"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"error"</expr></argument>, <argument><expr><name>PyCursesError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>PyCursesVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"version"</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"__version__"</expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ERR"</expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"OK"</expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_ATTRIBUTES"</expr></argument>, <argument><expr><name>A_ATTRIBUTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_NORMAL"</expr></argument>, <argument><expr><name>A_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_STANDOUT"</expr></argument>, <argument><expr><name>A_STANDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_UNDERLINE"</expr></argument>, <argument><expr><name>A_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_REVERSE"</expr></argument>, <argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_BLINK"</expr></argument>, <argument><expr><name>A_BLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_DIM"</expr></argument>, <argument><expr><name>A_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_BOLD"</expr></argument>, <argument><expr><name>A_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_ALTCHARSET"</expr></argument>, <argument><expr><name>A_ALTCHARSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_INVIS"</expr></argument>, <argument><expr><name>A_INVIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_PROTECT"</expr></argument>, <argument><expr><name>A_PROTECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_CHARTEXT"</expr></argument>, <argument><expr><name>A_CHARTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_COLOR"</expr></argument>, <argument><expr><name>A_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>A_HORIZONTAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_HORIZONTAL"</expr></argument>, <argument><expr><name>A_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>A_LEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_LEFT"</expr></argument>, <argument><expr><name>A_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>A_LOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_LOW"</expr></argument>, <argument><expr><name>A_LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>A_RIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_RIGHT"</expr></argument>, <argument><expr><name>A_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>A_TOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_TOP"</expr></argument>, <argument><expr><name>A_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>A_VERTICAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"A_VERTICAL"</expr></argument>, <argument><expr><name>A_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_BLACK"</expr></argument>, <argument><expr><name>COLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_RED"</expr></argument>, <argument><expr><name>COLOR_RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_GREEN"</expr></argument>, <argument><expr><name>COLOR_GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_YELLOW"</expr></argument>, <argument><expr><name>COLOR_YELLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_BLUE"</expr></argument>, <argument><expr><name>COLOR_BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_MAGENTA"</expr></argument>, <argument><expr><name>COLOR_MAGENTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_CYAN"</expr></argument>, <argument><expr><name>COLOR_CYAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"COLOR_WHITE"</expr></argument>, <argument><expr><name>COLOR_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSES_MOUSE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON1_PRESSED"</expr></argument>, <argument><expr><name>BUTTON1_PRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON1_RELEASED"</expr></argument>, <argument><expr><name>BUTTON1_RELEASED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON1_CLICKED"</expr></argument>, <argument><expr><name>BUTTON1_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON1_DOUBLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON1_DOUBLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON1_TRIPLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON1_TRIPLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON2_PRESSED"</expr></argument>, <argument><expr><name>BUTTON2_PRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON2_RELEASED"</expr></argument>, <argument><expr><name>BUTTON2_RELEASED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON2_CLICKED"</expr></argument>, <argument><expr><name>BUTTON2_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON2_DOUBLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON2_DOUBLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON2_TRIPLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON2_TRIPLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON3_PRESSED"</expr></argument>, <argument><expr><name>BUTTON3_PRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON3_RELEASED"</expr></argument>, <argument><expr><name>BUTTON3_RELEASED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON3_CLICKED"</expr></argument>, <argument><expr><name>BUTTON3_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON3_DOUBLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON3_DOUBLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON3_TRIPLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON3_TRIPLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON4_PRESSED"</expr></argument>, <argument><expr><name>BUTTON4_PRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON4_RELEASED"</expr></argument>, <argument><expr><name>BUTTON4_RELEASED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON4_CLICKED"</expr></argument>, <argument><expr><name>BUTTON4_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON4_DOUBLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON4_DOUBLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON4_TRIPLE_CLICKED"</expr></argument>, <argument><expr><name>BUTTON4_TRIPLE_CLICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON_SHIFT"</expr></argument>, <argument><expr><name>BUTTON_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON_CTRL"</expr></argument>, <argument><expr><name>BUTTON_CTRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"BUTTON_ALT"</expr></argument>, <argument><expr><name>BUTTON_ALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"ALL_MOUSE_EVENTS"</expr></argument>, <argument><expr><name>ALL_MOUSE_EVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"REPORT_MOUSE_POSITION"</expr></argument>, <argument><expr><name>REPORT_MOUSE_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key_n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key_n2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for (<init><expr><name>key</name>=<name>KEY_MIN</name></expr>;</init> <condition><expr><name>key</name> &lt; <name>KEY_MAX</name></expr>;</condition> <incr><expr><name>key</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>key_n</name> = (<name>char</name> *)<call><name>keyname</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key_n</name> == <name>NULL</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>key_n</name></expr></argument>,<argument><expr>"UNKNOWN KEY"</expr></argument>)</argument_list></call>==0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key_n</name></expr></argument>,<argument><expr>"KEY_F("</expr></argument>,<argument><expr>6</expr></argument>)</argument_list></call>==0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p1</name></decl>, *<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key_n2</name> = <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key_n</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>key_n2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>p1</name> = <name>key_n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> = <name>key_n2</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>p1</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>p1</name> != '(' &amp;&amp; *<name>p1</name> != ')'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p2</name> = *<name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>p1</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>p2</name> = (<name>char</name>)0</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>key_n2</name> = <name>key_n</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr><name>key_n2</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>key_n2</name> != <name>key_n</name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key_n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"KEY_MIN"</expr></argument>, <argument><expr><name>KEY_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDictInt</name><argument_list>(<argument><expr>"KEY_MAX"</expr></argument>, <argument><expr><name>KEY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block></function></block></function></block></function>
</unit>
