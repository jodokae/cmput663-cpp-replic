<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Modules/future_builtins.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>module_doc</name></expr></argument>,
<argument><expr>"This module provides functions that will be builtins in Python 3.0,\n\
but that conflict with builtins that already exist in Python 2.x.\n\
\n\
Functions:\n\
\n\
hex(arg) -- Returns the hexadecimal representation of an integer\n\
oct(arg) -- Returns the octal representation of an integer\n\
\n\
The typical usage of this module is to replace existing builtins in a\n\
module's namespace:\n \n\
from future_builtins import hex, oct\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>builtin_hex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyNumber_ToBase</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>hex_doc</name></expr></argument>,
<argument><expr>"hex(number) -&gt; string\n\
\n\
Return the hexadecimal representation of an integer or long integer."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>builtin_oct</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyNumber_ToBase</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>oct_doc</name></expr></argument>,
<argument><expr>"oct(number) -&gt; string\n\
\n\
Return the octal representation of an integer or long integer."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>builtin_ascii</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>PyDoc_STRVAR</name><argument_list>(<argument><expr><name>ascii_doc</name></expr></argument>,
<argument><expr>"ascii(object) -&gt; string\n\
\n\
Return the same as repr(). In Python 3.x, the repr() result will\n\
contain printable characters unescaped, while the ascii() result\n\
will have such characters backslash-escaped."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>module_functions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"hex"</expr>, <expr><name>builtin_hex</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>hex_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"oct"</expr>, <expr><name>builtin_oct</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>oct_doc</name></expr>}</block></expr>,
<expr><block>{<expr>"ascii"</expr>, <expr><name>builtin_ascii</name></expr>, <expr><name>METH_O</name></expr>, <expr><name>ascii_doc</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>PyMODINIT_FUNC</name></type>
<name>initfuture_builtins</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>, *<decl><type ref="prev"/><name>itertools</name></decl>, *<decl><type ref="prev"/><name>iter_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>it_funcs</name><index>[]</index></name> <init>= <expr><block>{<expr>"imap"</expr>, <expr>"ifilter"</expr>, <expr>"izip"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>cur_func</name></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule3</name><argument_list>(<argument><expr>"future_builtins"</expr></argument>, <argument><expr><name>module_functions</name></expr></argument>, <argument><expr><name>module_doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>m</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>itertools</name> = <call><name>PyImport_ImportModuleNoBlock</name><argument_list>(<argument><expr>"itertools"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>itertools</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<for>for (<init><expr><name>cur_func</name> = <name>it_funcs</name></expr>;</init> <condition><expr>*<name>cur_func</name></expr>;</condition> <incr><expr>++<name>cur_func</name></expr></incr>) <block>{
<expr_stmt><expr><name>iter_func</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>itertools</name></expr></argument>, <argument><expr>*<name>cur_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>iter_func</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>*<name>cur_func</name>+1</expr></argument>, <argument><expr><name>iter_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>itertools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
