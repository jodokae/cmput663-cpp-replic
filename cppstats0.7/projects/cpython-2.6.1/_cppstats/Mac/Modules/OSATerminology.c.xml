<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Mac/Modules/OSATerminology.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyOSA_GetAppTerminology</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>AEDesc</name></type> <name>theDesc</name> <init>= <expr><block>{<expr>0</expr>,<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>defaultComponent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SInt16</name></type> <name>defaultTerminology</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>didLaunch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSAError</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modeFlags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;|i"</expr></argument>, <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr>&amp;<name>modeFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>defaultComponent</name> = <call><name>OpenDefaultComponent</name> <argument_list>(<argument><expr><name>kOSAComponentType</name></expr></argument>, <argument><expr>'ascr'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>GetComponentInstanceError</name> <argument_list>(<argument><expr><name>defaultComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>OSAGetAppTerminology</name> <argument_list>(
<argument><expr><name>defaultComponent</name></expr></argument>,
<argument><expr><name>modeFlags</name></expr></argument>,
<argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr><name>defaultTerminology</name></expr></argument>,
<argument><expr>&amp;<name>didLaunch</name></expr></argument>,
<argument><expr>&amp;<name>theDesc</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;i"</expr></argument>, <argument><expr><name>AEDesc_New</name></expr></argument>, <argument><expr>&amp;<name>theDesc</name></expr></argument>, <argument><expr><name>didLaunch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>PyOSA_GetSysTerminology</name><parameter_list>(<param><decl><type><name>PyObject</name>*</type> <name>self</name></decl></param>, <param><decl><type><name>PyObject</name>*</type> <name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>AEDesc</name></type> <name>theDesc</name> <init>= <expr><block>{<expr>0</expr>,<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>defaultComponent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SInt16</name></type> <name>defaultTerminology</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>didLaunch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSAError</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modeFlags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;|i"</expr></argument>, <argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>, <argument><expr>&amp;<name>modeFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>defaultComponent</name> = <call><name>OpenDefaultComponent</name> <argument_list>(<argument><expr><name>kOSAComponentType</name></expr></argument>, <argument><expr>'ascr'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>GetComponentInstanceError</name> <argument_list>(<argument><expr><name>defaultComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>OSAGetAppTerminology</name> <argument_list>(
<argument><expr><name>defaultComponent</name></expr></argument>,
<argument><expr><name>modeFlags</name></expr></argument>,
<argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr><name>defaultTerminology</name></expr></argument>,
<argument><expr>&amp;<name>didLaunch</name></expr></argument>,
<argument><expr>&amp;<name>theDesc</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;i"</expr></argument>, <argument><expr><name>AEDesc_New</name></expr></argument>, <argument><expr>&amp;<name>theDesc</name></expr></argument>, <argument><expr><name>didLaunch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>OSATerminology_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"GetAppTerminology"</expr>,
<expr>(<name>PyCFunction</name>) <name>PyOSA_GetAppTerminology</name></expr>,
<expr><name>METH_VARARGS</name></expr>,
<expr>"Get an applications terminology, as an AEDesc object."</expr>
}</block></expr>,
<expr><block>{
<expr>"GetSysTerminology"</expr>,
<expr>(<name>PyCFunction</name>) <name>PyOSA_GetSysTerminology</name></expr>,
<expr><name>METH_VARARGS</name></expr>,
<expr>"Get an applications system terminology, as an AEDesc object."</expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr>(<name>PyCFunction</name>) <name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>initOSATerminology</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"In 3.x, OSATerminology is removed."</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_InitModule</name><argument_list>(<argument><expr>"OSATerminology"</expr></argument>, <argument><expr><name>OSATerminology_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
