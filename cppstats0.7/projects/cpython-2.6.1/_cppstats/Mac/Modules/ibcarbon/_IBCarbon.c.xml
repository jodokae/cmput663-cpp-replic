<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Mac/Modules/ibcarbon/_IBCarbon.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TOOLBOX_OBJECT_GLUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_CFStringRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>CFStringRef</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBCarbon_Error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>IBNibRef_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;IBNibRef_Type || PyObject_TypeCheck((x), &amp;IBNibRef_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>IBNibRefObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>IBNibRef</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>IBNibRefObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>IBNibRefObj_New</name><parameter_list>(<param><decl><type><name>IBNibRef</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>IBNibRefObject</name> *</type><name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>IBNibRefObject</name></expr></argument>, <argument><expr>&amp;<name>IBNibRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>IBNibRefObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>IBNibRef</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>IBNibRefObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"IBNibRef required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>IBNibRefObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IBNibRefObj_dealloc</name><parameter_list>(<param><decl><type><name>IBNibRefObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>DisposeNibReference</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBNibRefObj_CreateWindowFromNib</name><parameter_list>(<param><decl><type><name>IBNibRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>outWindow</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateWindowFromNib</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>inName</name></expr></argument>,
<argument><expr>&amp;<name>outWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>WinObj_New</name></expr></argument>, <argument><expr><name>outWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBNibRefObj_CreateMenuFromNib</name><parameter_list>(<param><decl><type><name>IBNibRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MenuHandle</name></type> <name>outMenuRef</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateMenuFromNib</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>inName</name></expr></argument>,
<argument><expr>&amp;<name>outMenuRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MenuObj_New</name></expr></argument>, <argument><expr><name>outMenuRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBNibRefObj_CreateMenuBarFromNib</name><parameter_list>(<param><decl><type><name>IBNibRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>outMenuBar</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateMenuBarFromNib</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>inName</name></expr></argument>,
<argument><expr>&amp;<name>outMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>outMenuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBNibRefObj_SetMenuBarFromNib</name><parameter_list>(<param><decl><type><name>IBNibRefObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inName</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMenuBarFromNib</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>inName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>IBNibRefObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"CreateWindowFromNib"</expr>, <expr>(<name>PyCFunction</name>)<name>IBNibRefObj_CreateWindowFromNib</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inName) -&gt; (WindowPtr outWindow)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CreateMenuFromNib"</expr>, <expr>(<name>PyCFunction</name>)<name>IBNibRefObj_CreateMenuFromNib</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inName) -&gt; (MenuHandle outMenuRef)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CreateMenuBarFromNib"</expr>, <expr>(<name>PyCFunction</name>)<name>IBNibRefObj_CreateMenuBarFromNib</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inName) -&gt; (Handle outMenuBar)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMenuBarFromNib"</expr>, <expr>(<name>PyCFunction</name>)<name>IBNibRefObj_SetMenuBarFromNib</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inName) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBNibRefObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IBNibRef</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>IBNibRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>IBNibRefObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBNibRefObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>IBNibRef_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_IBCarbon.IBNibRef"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>IBNibRefObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>IBNibRefObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>IBNibRefObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>IBNibRefObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>IBNibRefObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>IBNibRefObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>IBNibRefObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>IBNibRefObj_tp_init</name></expr>,
<expr><name>IBNibRefObj_tp_alloc</name></expr>,
<expr><name>IBNibRefObj_tp_new</name></expr>,
<expr><name>IBNibRefObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IBCarbon_CreateNibReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>inNibName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IBNibRef</name></type> <name>outNibRef</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CFStringRefObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>inNibName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateNibReference</name><argument_list>(<argument><expr><name>inNibName</name></expr></argument>,
<argument><expr>&amp;<name>outNibRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>IBNibRefObj_New</name></expr></argument>, <argument><expr><name>outNibRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>IBCarbon_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"CreateNibReference"</expr>, <expr>(<name>PyCFunction</name>)<name>IBCarbon_CreateNibReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CFStringRef inNibName) -&gt; (IBNibRef outNibRef)"</argument>)</argument_list></macro>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init_IBCarbon</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_IBCarbon"</expr></argument>, <argument><expr><name>IBCarbon_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IBCarbon_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>IBCarbon_Error</name> == <name>NULL</name> ||
<call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>IBCarbon_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>IBNibRef_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>IBNibRef_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>IBNibRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"IBNibRef"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>IBNibRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>IBNibRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"IBNibRefType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>IBNibRef_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
