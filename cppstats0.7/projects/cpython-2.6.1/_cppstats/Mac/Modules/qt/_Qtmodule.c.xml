<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Mac/Modules/qt/_Qtmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL ) {PyErr_SetString(PyExc_NotImplementedError, "Not available in this shared library/OS version"); return NULL; }} while(0)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QuickTime/QuickTime.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TOOLBOX_OBJECT_GLUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_TrackObj_New</name><parameter_list>(<param><decl><type><name>Track</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_TrackObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Track</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_MovieObj_New</name><parameter_list>(<param><decl><type><name>Movie</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_MovieObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Movie</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_MovieCtlObj_New</name><parameter_list>(<param><decl><type><name>MovieController</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_MovieCtlObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>MovieController</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_TimeBaseObj_New</name><parameter_list>(<param><decl><type><name>TimeBase</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_TimeBaseObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>TimeBase</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_UserDataObj_New</name><parameter_list>(<param><decl><type><name>UserData</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_UserDataObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>UserData</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>PyObject</name> *</type><name>_MediaObj_New</name><parameter_list>(<param><decl><type><name>Media</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>_MediaObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type></decl></param>, <param><decl><type><name>Media</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_New</name></cpp:macro> <cpp:value>_TrackObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_Convert</name></cpp:macro> <cpp:value>_TrackObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_New</name></cpp:macro> <cpp:value>_MovieObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_Convert</name></cpp:macro> <cpp:value>_MovieObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_New</name></cpp:macro> <cpp:value>_MovieCtlObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_Convert</name></cpp:macro> <cpp:value>_MovieCtlObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_New</name></cpp:macro> <cpp:value>_TimeBaseObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_Convert</name></cpp:macro> <cpp:value>_TimeBaseObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_New</name></cpp:macro> <cpp:value>_UserDataObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_Convert</name></cpp:macro> <cpp:value>_UserDataObj_Convert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_New</name></cpp:macro> <cpp:value>_MediaObj_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_Convert</name></cpp:macro> <cpp:value>_MediaObj_Convert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetMediaNextInterestingTimeOnly</name><parameter_list>(<param><type><name>media</name></type></param>, <param><type><name>flags</name></type></param>, <param><type><name>time</name></type></param>, <param><type><name>rate</name></type></param>, <param><type><name>rv</name></type></param>)</parameter_list></cpp:macro> <cpp:value>GetMediaNextInterestingTime(media, flags, time, rate, rv, NULL)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>QtTimeRecord_New</name><parameter_list>(<param><decl><type><name>TimeRecord</name> *</type><name>itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>itself</name>-&gt;<name>base</name></name></expr>)</condition><then>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;lO&amp;"</expr></argument>, <argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr>&amp;<name><name>itself</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>scale</name></name></expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>base</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;lO"</expr></argument>, <argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr>&amp;<name><name>itself</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>itself</name>-&gt;<name>scale</name></name></expr></argument>,
<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>QtTimeRecord_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>TimeRecord</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if<condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"O&amp;l|O"</expr></argument>, <argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name><name>p_itself</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>&amp;<name><name>p_itself</name>-&gt;<name>scale</name></name></expr></argument>,
<argument><expr>&amp;<name>base</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>( <expr><name>base</name> == <name>NULL</name> || <name>base</name> == <name>Py_None</name></expr> )</condition><then>
<expr_stmt><expr><name><name>p_itself</name>-&gt;<name>base</name></name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>( <expr>!<call><name>TimeBaseObj_Convert</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>&amp;<name><name>p_itself</name>-&gt;<name>base</name></name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>QtMusicMIDIPacket_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>MusicMIDIPacket</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
<if>if<condition>( <expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>"hls#"</expr></argument>, <argument><expr>&amp;<name><name>p_itself</name>-&gt;<name>length</name></name></expr></argument>, <argument><expr>&amp;<name><name>p_itself</name>-&gt;<name>reserved</name></name></expr></argument>, <argument><expr><name><name>p_itself</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr> )</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>IdleManager_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;IdleManager_Type || PyObject_TypeCheck((x), &amp;IdleManager_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>IdleManagerObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>IdleManager</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>IdleManagerObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>IdleManagerObj_New</name><parameter_list>(<param><decl><type><name>IdleManager</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>IdleManagerObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create IdleManager from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>IdleManagerObject</name></expr></argument>, <argument><expr>&amp;<name>IdleManager_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>IdleManagerObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>IdleManager</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>IdleManagerObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"IdleManager required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>IdleManagerObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>IdleManagerObj_dealloc</name><parameter_list>(<param><decl><type><name>IdleManagerObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>IdleManagerObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>IdleManagerObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>IdleManagerObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>IdleManagerObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdleManagerObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>IdleManager_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.IdleManager"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>IdleManagerObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>IdleManagerObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>IdleManagerObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>IdleManagerObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>IdleManagerObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>IdleManagerObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>IdleManagerObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>IdleManagerObj_tp_init</name></expr>,
<expr><name>IdleManagerObj_tp_alloc</name></expr>,
<expr><name>IdleManagerObj_tp_new</name></expr>,
<expr><name>IdleManagerObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>MovieController_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;MovieController_Type || PyObject_TypeCheck((x), &amp;MovieController_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>MovieControllerObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>MovieController</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>MovieControllerObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>MovieCtlObj_New</name><parameter_list>(<param><decl><type><name>MovieController</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MovieControllerObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create MovieController from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>MovieControllerObject</name></expr></argument>, <argument><expr>&amp;<name>MovieController_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>MovieCtlObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>MovieController</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>MovieCtlObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"MovieController required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>MovieControllerObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MovieCtlObj_dealloc</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>DisposeMovieController</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetMovie</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>movieWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>movieWindow</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>where</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>movieWindow</name></expr></argument>,
<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetIndMovie</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetIndMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetIndMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetIndMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCRemoveAllMovies</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCRemoveAllMovies</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCRemoveAllMovies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCRemoveAllMovies</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCRemoveAMovie</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCRemoveAMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCRemoveAMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCRemoveAMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCRemoveMovie</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCRemoveMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCRemoveMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCRemoveMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCIsPlayerEvent</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventRecord</name></type> <name>e</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCIsPlayerEvent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCIsPlayerEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCIsPlayerEvent</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCDoAction</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>params</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCDoAction</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCDoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hs"</expr></argument>,
<argument><expr>&amp;<name>action</name></expr></argument>,
<argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCDoAction</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>action</name></expr></argument>,
<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetControllerAttached</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>attach</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetControllerAttached</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetControllerAttached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>attach</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetControllerAttached</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>attach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCIsControllerAttached</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCIsControllerAttached</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCIsControllerAttached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCIsControllerAttached</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetControllerPort</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>gp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetControllerPort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetControllerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetControllerPort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetControllerPort</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetControllerPort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetControllerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetControllerPort</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetVisible</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>visible</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetVisible</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetVisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>visible</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetVisible</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetVisible</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetVisible</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetVisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetVisible</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetControllerBoundsRect</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetControllerBoundsRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetControllerBoundsRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetControllerBoundsRect</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetControllerBoundsRect</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetControllerBoundsRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetControllerBoundsRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetControllerBoundsRect</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetControllerBoundsRgn</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetControllerBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetControllerBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetControllerBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetWindowRgn</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetWindowRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetWindowRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetWindowRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCMovieChanged</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCMovieChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCMovieChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCMovieChanged</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetDuration</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetDuration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetDuration</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetCurrentTime</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetCurrentTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetCurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetCurrentTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCNewAttachedController</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCNewAttachedController</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCNewAttachedController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>where</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCNewAttachedController</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCDraw</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCDraw</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCDraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCDraw</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCActivate</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>activate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCActivate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCActivate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>,
<argument><expr>&amp;<name>activate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCActivate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>activate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCIdle</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCIdle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCIdle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCKey</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SInt8</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiers</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCKey</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"bl"</expr></argument>,
<argument><expr>&amp;<name>key</name></expr></argument>,
<argument><expr>&amp;<name>modifiers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCKey</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCClick</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>when</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiers</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCClick</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>where</name></expr></argument>,
<argument><expr>&amp;<name>when</name></expr></argument>,
<argument><expr>&amp;<name>modifiers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCClick</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>where</name></expr></argument>,
<argument><expr><name>when</name></expr></argument>,
<argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCEnableEditing</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enabled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCEnableEditing</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCEnableEditing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>enabled</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCEnableEditing</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCIsEditingEnabled</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCIsEditingEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCIsEditingEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCIsEditingEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCCopy</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCCopy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCCopy</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCCut</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCCut</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCCut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCCut</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCPaste</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>srcMovie</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCPaste</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCPaste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcMovie</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCPaste</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>srcMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCClear</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCClear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCClear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCClear</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCUndo</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCUndo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCUndo</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCPositionController</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>movieRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>controllerRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>someFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCPositionController</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCPositionController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>movieRect</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>controllerRect</name></expr></argument>,
<argument><expr>&amp;<name>someFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCPositionController</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>movieRect</name></expr></argument>,
<argument><expr>&amp;<name>controllerRect</name></expr></argument>,
<argument><expr><name>someFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetControllerInfo</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>someFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetControllerInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetControllerInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetControllerInfo</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>someFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>someFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetClip</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>movieClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theClip</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>movieClip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetClip</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theClip</name></expr></argument>,
<argument><expr><name>movieClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetClip</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>movieClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetClip</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>theClip</name></expr></argument>,
<argument><expr>&amp;<name>movieClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theClip</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>movieClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCDrawBadge</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>movieRgn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>badgeRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCDrawBadge</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCDrawBadge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>movieRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCDrawBadge</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>movieRgn</name></expr></argument>,
<argument><expr>&amp;<name>badgeRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>badgeRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetUpEditMenu</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MenuHandle</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetUpEditMenu</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetUpEditMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
<argument><expr>&amp;<name>modifiers</name></expr></argument>,
<argument><expr><name>MenuObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetUpEditMenu</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>modifiers</name></expr></argument>,
<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetMenuString</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>aString</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetMenuString</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetMenuString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lhO&amp;"</expr></argument>,
<argument><expr>&amp;<name>modifiers</name></expr></argument>,
<argument><expr>&amp;<name>item</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetMenuString</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>modifiers</name></expr></argument>,
<argument><expr><name>item</name></expr></argument>,
<argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCPtInController</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>thePt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>inController</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCPtInController</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCPtInController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>thePt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCPtInController</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>thePt</name></expr></argument>,
<argument><expr>&amp;<name>inController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>inController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCInvalidate</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>invalidRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCInvalidate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCInvalidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>invalidRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCInvalidate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>invalidRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCAdjustCursor</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiers</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCAdjustCursor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCAdjustCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>where</name></expr></argument>,
<argument><expr>&amp;<name>modifiers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCAdjustCursor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>where</name></expr></argument>,
<argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCGetInterfaceElement</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MCInterfaceElement</name></type> <name>whichElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>element</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCGetInterfaceElement</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCGetInterfaceElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ls"</expr></argument>,
<argument><expr>&amp;<name>whichElement</name></expr></argument>,
<argument><expr>&amp;<name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCGetInterfaceElement</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>whichElement</name></expr></argument>,
<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCAddMovieSegment</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>srcMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>scaled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCAddMovieSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCAddMovieSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcMovie</name></expr></argument>,
<argument><expr>&amp;<name>scaled</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCAddMovieSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>srcMovie</name></expr></argument>,
<argument><expr><name>scaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCTrimMovieSegment</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCTrimMovieSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCTrimMovieSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCTrimMovieSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetIdleManager</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>im</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetIdleManager</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetIdleManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>IdleManagerObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>im</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetIdleManager</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_MCSetControllerCapabilities</name><parameter_list>(<param><decl><type><name>MovieControllerObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsMask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MCSetControllerCapabilities</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MCSetControllerCapabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>flagsMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MCSetControllerCapabilities</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>flagsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>MovieCtlObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"MCSetMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie theMovie, WindowPtr movieWindow, Point where) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetIndMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetIndMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index) -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCRemoveAllMovies"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCRemoveAllMovies</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCRemoveAMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCRemoveAMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie m) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCRemoveMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCRemoveMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCIsPlayerEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCIsPlayerEvent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(EventRecord e) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCDoAction"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCDoAction</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short action, void * params) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetControllerAttached"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetControllerAttached</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean attach) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCIsControllerAttached"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCIsControllerAttached</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetControllerPort"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetControllerPort</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CGrafPtr gp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetControllerPort"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetControllerPort</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CGrafPtr _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetVisible"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetVisible</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean visible) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetVisible"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetVisible</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetControllerBoundsRect"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetControllerBoundsRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv, Rect bounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetControllerBoundsRect"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetControllerBoundsRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect bounds) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetControllerBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetControllerBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetWindowRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetWindowRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr w) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCMovieChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCMovieChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie m) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetDuration"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetDuration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue duration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetCurrentTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetCurrentTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv, TimeScale scale)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCNewAttachedController"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCNewAttachedController</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie theMovie, WindowPtr w, Point where) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCDraw"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCDraw</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr w) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCActivate"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCActivate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr w, Boolean activate) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCIdle"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCIdle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCKey"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCKey</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SInt8 key, long modifiers) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCClick"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCClick</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr w, Point where, long when, long modifiers) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCEnableEditing"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCEnableEditing</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean enabled) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCIsEditingEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCIsEditingEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCCopy"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCCopy</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCCut"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCCut</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCPaste"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCPaste</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie srcMovie) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCClear"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCClear</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCUndo"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCUndo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCPositionController"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCPositionController</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect movieRect, Rect controllerRect, long someFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetControllerInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetControllerInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv, long someFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theClip, RgnHandle movieClip) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv, RgnHandle theClip, RgnHandle movieClip)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCDrawBadge"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCDrawBadge</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle movieRgn) -&gt; (ComponentResult _rv, RgnHandle badgeRgn)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetUpEditMenu"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetUpEditMenu</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long modifiers, MenuHandle mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetMenuString"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetMenuString</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long modifiers, short item, Str255 aString) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCPtInController"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCPtInController</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point thePt) -&gt; (ComponentResult _rv, Boolean inController)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCInvalidate"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCInvalidate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr w, RgnHandle invalidRgn) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCAdjustCursor"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCAdjustCursor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr w, Point where, long modifiers) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCGetInterfaceElement"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCGetInterfaceElement</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MCInterfaceElement whichElement, void * element) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCAddMovieSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCAddMovieSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie srcMovie, Boolean scaled) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCTrimMovieSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCTrimMovieSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetIdleManager"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetIdleManager</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(IdleManager im) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MCSetControllerCapabilities"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieCtlObj_MCSetControllerCapabilities</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long flags, long flagsMask) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieCtlObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieController</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>MovieCtlObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>MovieControllerObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieCtlObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>MovieController_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.MovieController"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MovieControllerObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>MovieCtlObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>MovieCtlObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>MovieCtlObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>MovieCtlObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>MovieCtlObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>MovieCtlObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>MovieCtlObj_tp_init</name></expr>,
<expr><name>MovieCtlObj_tp_alloc</name></expr>,
<expr><name>MovieCtlObj_tp_new</name></expr>,
<expr><name>MovieCtlObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>TimeBase_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;TimeBase_Type || PyObject_TypeCheck((x), &amp;TimeBase_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>TimeBaseObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>TimeBase</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>TimeBaseObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>TimeBaseObj_New</name><parameter_list>(<param><decl><type><name>TimeBase</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TimeBaseObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create TimeBase from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>TimeBaseObject</name></expr></argument>, <argument><expr>&amp;<name>TimeBase_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>TimeBaseObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>TimeBase</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>TimeBaseObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"TimeBase required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>TimeBaseObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TimeBaseObj_dealloc</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_DisposeTimeBase</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DisposeTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>DisposeTimeBase</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseTime</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>tr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseTime</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>tr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseValue</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>t</name></expr></argument>,
<argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseValue</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>t</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseRate</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseRate</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseStartTime</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>tr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseStartTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseStartTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseStartTime</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>tr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseStartTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseStartTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseStopTime</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>tr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseStopTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseStopTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseStopTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseStopTime</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>tr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseStopTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseStopTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseStopTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseFlags</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseFlags</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseFlags</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>timeBaseFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>timeBaseFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseFlags</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>timeBaseFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseMasterTimeBase</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>master</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>slaveZero</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseMasterTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseMasterTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>master</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseMasterTimeBase</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>master</name></expr></argument>,
<argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseMasterTimeBase</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseMasterTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseMasterTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseMasterTimeBase</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseMasterClock</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>clockMeister</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>slaveZero</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseMasterClock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseMasterClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clockMeister</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseMasterClock</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>clockMeister</name></expr></argument>,
<argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseMasterClock</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseMasterClock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseMasterClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseMasterClock</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseStatus</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>unpinnedTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseStatus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseStatus</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>unpinnedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>unpinnedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_SetTimeBaseZero</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>zero</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTimeBaseZero</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTimeBaseZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>zero</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTimeBaseZero</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_GetTimeBaseEffectiveRate</name><parameter_list>(<param><decl><type><name>TimeBaseObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTimeBaseEffectiveRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTimeBaseEffectiveRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTimeBaseEffectiveRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>TimeBaseObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"DisposeTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_DisposeTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeScale s) -&gt; (TimeValue _rv, TimeRecord tr)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord tr) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseValue"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue t, TimeScale s) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseRate"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseRate"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed r) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseStartTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseStartTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeScale s) -&gt; (TimeValue _rv, TimeRecord tr)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseStartTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseStartTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord tr) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseStopTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseStopTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeScale s) -&gt; (TimeValue _rv, TimeRecord tr)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseStopTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseStopTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord tr) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long timeBaseFlags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseMasterTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseMasterTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeBase master, TimeRecord slaveZero) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseMasterTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseMasterTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeBase _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseMasterClock"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseMasterClock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Component clockMeister, TimeRecord slaveZero) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseMasterClock"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseMasterClock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentInstance _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseStatus</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv, TimeRecord unpinnedTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTimeBaseZero"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_SetTimeBaseZero</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord zero) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTimeBaseEffectiveRate"</expr>, <expr>(<name>PyCFunction</name>)<name>TimeBaseObj_GetTimeBaseEffectiveRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TimeBaseObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>TimeBaseObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TimeBaseObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>TimeBase_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.TimeBase"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeBaseObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>TimeBaseObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>TimeBaseObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>TimeBaseObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>TimeBaseObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>TimeBaseObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>TimeBaseObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>TimeBaseObj_tp_init</name></expr>,
<expr><name>TimeBaseObj_tp_alloc</name></expr>,
<expr><name>TimeBaseObj_tp_new</name></expr>,
<expr><name>TimeBaseObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>UserData_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;UserData_Type || PyObject_TypeCheck((x), &amp;UserData_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>UserDataObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>UserData</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>UserDataObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>UserDataObj_New</name><parameter_list>(<param><decl><type><name>UserData</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>UserDataObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create UserData from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>UserDataObject</name></expr></argument>, <argument><expr>&amp;<name>UserData_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>UserDataObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>UserData</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>UserDataObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"UserData required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>UserDataObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UserDataObj_dealloc</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>DisposeUserData</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_GetUserData</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_AddUserData</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_RemoveUserData</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RemoveUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>RemoveUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_CountUserDataType</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CountUserDataType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountUserDataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>CountUserDataType</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_GetNextUserDataType</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetNextUserDataType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetNextUserDataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetNextUserDataType</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_AddUserDataText</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itlRegionTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddUserDataText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddUserDataText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;lh"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr>&amp;<name>itlRegionTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddUserDataText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>itlRegionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_GetUserDataText</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itlRegionTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetUserDataText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetUserDataText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;lh"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr>&amp;<name>itlRegionTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetUserDataText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>itlRegionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_RemoveUserDataText</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>udType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itlRegionTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RemoveUserDataText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveUserDataText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lh"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>udType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr>&amp;<name>itlRegionTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>RemoveUserDataText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>udType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>itlRegionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_PutUserDataIntoHandle</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutUserDataIntoHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutUserDataIntoHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutUserDataIntoHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_CopyUserData</name><parameter_list>(<param><decl><type><name>UserDataObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>dstUserData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>copyRule</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>UserDataObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstUserData</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>copyRule</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CopyUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstUserData</name></expr></argument>,
<argument><expr><name>copyRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>UserDataObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"GetUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_GetUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle data, OSType udType, long index) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_AddUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle data, OSType udType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"RemoveUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_RemoveUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType udType, long index) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CountUserDataType"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_CountUserDataType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType udType) -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetNextUserDataType"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_GetNextUserDataType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType udType) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddUserDataText"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_AddUserDataText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle data, OSType udType, long index, short itlRegionTag) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetUserDataText"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_GetUserDataText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle data, OSType udType, long index, short itlRegionTag) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"RemoveUserDataText"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_RemoveUserDataText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType udType, long index, short itlRegionTag) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutUserDataIntoHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_PutUserDataIntoHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle h) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>UserDataObj_CopyUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(UserData dstUserData, OSType copyRule) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>UserDataObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>UserDataObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>UserDataObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UserDataObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>UserData_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.UserData"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>UserDataObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>UserDataObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>UserDataObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>UserDataObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>UserDataObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>UserDataObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>UserDataObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>UserDataObj_tp_init</name></expr>,
<expr><name>UserDataObj_tp_alloc</name></expr>,
<expr><name>UserDataObj_tp_new</name></expr>,
<expr><name>UserDataObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Media_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;Media_Type || PyObject_TypeCheck((x), &amp;Media_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>MediaObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Media</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>MediaObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>MediaObj_New</name><parameter_list>(<param><decl><type><name>Media</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MediaObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create Media from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>MediaObject</name></expr></argument>, <argument><expr>&amp;<name>Media_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>MediaObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Media</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>MediaObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Media required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>MediaObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MediaObj_dealloc</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>DisposeTrackMedia</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_LoadMediaIntoRam</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LoadMediaIntoRam</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LoadMediaIntoRam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lll"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>LoadMediaIntoRam</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaTrack</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaTrack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaTrack</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaCreationTime</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaCreationTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaCreationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaCreationTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaModificationTime</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaModificationTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaModificationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaModificationTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaTimeScale</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaTimeScale</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaTimeScale</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>timeScale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>timeScale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMediaTimeScale</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>timeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDuration</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDuration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaDuration</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaLanguage</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaLanguage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaLanguage</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>language</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>language</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMediaLanguage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaQuality</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaQuality</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaQuality</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaQuality</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>quality</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaQuality</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMediaQuality</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaHandlerDescription</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>creatorName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creatorManufacturer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaHandlerDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaHandlerDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>creatorName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMediaHandlerDescription</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>mediaType</name></expr></argument>,
<argument><expr><name>creatorName</name></expr></argument>,
<argument><expr>&amp;<name>creatorManufacturer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>creatorManufacturer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaUserData</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaHandler</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaHandler</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaHandler</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaHandler</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandlerComponent</name></type> <name>mH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaHandler</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaHandler</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>mH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_BeginMediaEdits</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>BeginMediaEdits</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>BeginMediaEdits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>BeginMediaEdits</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_EndMediaEdits</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>EndMediaEdits</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EndMediaEdits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>EndMediaEdits</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaDefaultDataRefIndex</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaDefaultDataRefIndex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaDefaultDataRefIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaDefaultDataRefIndex</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDataHandlerDescription</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dhType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>creatorName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creatorManufacturer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDataHandlerDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDataHandlerDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>creatorName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMediaDataHandlerDescription</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr>&amp;<name>dhType</name></expr></argument>,
<argument><expr><name>creatorName</name></expr></argument>,
<argument><expr>&amp;<name>creatorManufacturer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dhType</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>creatorManufacturer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDataHandler</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDataHandler</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaDataHandler</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaDataHandler</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandlerComponent</name></type> <name>dataHandler</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaDataHandler</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataHandler</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaDataHandler</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>dataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaSampleDescriptionCount</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaSampleDescriptionCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaSampleDescriptionCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaSampleDescriptionCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaSampleDescription</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>descH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaSampleDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaSampleDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>descH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMediaSampleDescription</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>descH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaSampleDescription</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>descH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaSampleDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaSampleDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>descH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaSampleDescription</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>descH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaSampleCount</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaSampleCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaSampleCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaSyncSampleCount</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaSyncSampleCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaSyncSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaSyncSampleCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SampleNumToMediaTime</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>logicalSampleNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SampleNumToMediaTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SampleNumToMediaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>logicalSampleNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SampleNumToMediaTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>logicalSampleNum</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>,
<argument><expr>&amp;<name>sampleDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>,
<argument><expr><name>sampleDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_MediaTimeToSampleNum</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaTimeToSampleNum</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaTimeToSampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>MediaTimeToSampleNum</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr>&amp;<name>sampleNum</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>,
<argument><expr>&amp;<name>sampleDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>sampleNum</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>,
<argument><expr><name>sampleDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_AddMediaSample</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>durationPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>sampleDescriptionH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numberOfSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>sampleFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddMediaSample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddMediaSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lllO&amp;lh"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataIn</name></expr></argument>,
<argument><expr>&amp;<name>inOffset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr>&amp;<name>durationPerSample</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDescriptionH</name></expr></argument>,
<argument><expr>&amp;<name>numberOfSamples</name></expr></argument>,
<argument><expr>&amp;<name>sampleFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddMediaSample</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dataIn</name></expr></argument>,
<argument><expr><name>inOffset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>durationPerSample</name></expr></argument>,
<argument><expr><name>sampleDescriptionH</name></expr></argument>,
<argument><expr><name>numberOfSamples</name></expr></argument>,
<argument><expr><name>sampleFlags</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_AddMediaSampleReference</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>durationPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>sampleDescriptionH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numberOfSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>sampleFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddMediaSampleReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddMediaSampleReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lllO&amp;lh"</expr></argument>,
<argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr>&amp;<name>durationPerSample</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDescriptionH</name></expr></argument>,
<argument><expr>&amp;<name>numberOfSamples</name></expr></argument>,
<argument><expr>&amp;<name>sampleFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddMediaSampleReference</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dataOffset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>durationPerSample</name></expr></argument>,
<argument><expr><name>sampleDescriptionH</name></expr></argument>,
<argument><expr><name>numberOfSamples</name></expr></argument>,
<argument><expr><name>sampleFlags</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaSample</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxSizeToGrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>durationPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>sampleDescriptionH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleDescriptionIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxNumberOfSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numberOfSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>sampleFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaSample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llO&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataOut</name></expr></argument>,
<argument><expr>&amp;<name>maxSizeToGrow</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDescriptionH</name></expr></argument>,
<argument><expr>&amp;<name>maxNumberOfSamples</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaSample</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dataOut</name></expr></argument>,
<argument><expr><name>maxSizeToGrow</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>,
<argument><expr>&amp;<name>durationPerSample</name></expr></argument>,
<argument><expr><name>sampleDescriptionH</name></expr></argument>,
<argument><expr>&amp;<name>sampleDescriptionIndex</name></expr></argument>,
<argument><expr><name>maxNumberOfSamples</name></expr></argument>,
<argument><expr>&amp;<name>numberOfSamples</name></expr></argument>,
<argument><expr>&amp;<name>sampleFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lllllh"</expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>,
<argument><expr><name>durationPerSample</name></expr></argument>,
<argument><expr><name>sampleDescriptionIndex</name></expr></argument>,
<argument><expr><name>numberOfSamples</name></expr></argument>,
<argument><expr><name>sampleFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaSampleReference</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>durationPerSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>sampleDescriptionH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleDescriptionIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxNumberOfSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>numberOfSamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>sampleFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaSampleReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaSampleReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;l"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDescriptionH</name></expr></argument>,
<argument><expr>&amp;<name>maxNumberOfSamples</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaSampleReference</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>,
<argument><expr>&amp;<name>durationPerSample</name></expr></argument>,
<argument><expr><name>sampleDescriptionH</name></expr></argument>,
<argument><expr>&amp;<name>sampleDescriptionIndex</name></expr></argument>,
<argument><expr><name>maxNumberOfSamples</name></expr></argument>,
<argument><expr>&amp;<name>numberOfSamples</name></expr></argument>,
<argument><expr>&amp;<name>sampleFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llllllh"</expr></argument>,
<argument><expr><name>dataOffset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>,
<argument><expr><name>durationPerSample</name></expr></argument>,
<argument><expr><name>sampleDescriptionIndex</name></expr></argument>,
<argument><expr><name>numberOfSamples</name></expr></argument>,
<argument><expr><name>sampleFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaPreferredChunkSize</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxChunkSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaPreferredChunkSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaPreferredChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>maxChunkSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaPreferredChunkSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>maxChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaPreferredChunkSize</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxChunkSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaPreferredChunkSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaPreferredChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaPreferredChunkSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>maxChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>maxChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaShadowSync</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>frameDiffSampleNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>syncSampleNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaShadowSync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaShadowSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>frameDiffSampleNum</name></expr></argument>,
<argument><expr>&amp;<name>syncSampleNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaShadowSync</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>frameDiffSampleNum</name></expr></argument>,
<argument><expr><name>syncSampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaShadowSync</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>frameDiffSampleNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>syncSampleNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaShadowSync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaShadowSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>frameDiffSampleNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaShadowSync</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>frameDiffSampleNum</name></expr></argument>,
<argument><expr>&amp;<name>syncSampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>syncSampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDataSize</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDataSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMediaDataSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDataSize64</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDataSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDataSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaDataSize64</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_CopyMediaUserData</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Media</name></type> <name>dstMedia</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>copyRule</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyMediaUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMediaUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>MediaObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstMedia</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>copyRule</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CopyMediaUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstMedia</name></expr></argument>,
<argument><expr><name>copyRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaNextInterestingTime</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>interestingTimeFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaNextInterestingTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaNextInterestingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
<argument><expr>&amp;<name>interestingTimeFlags</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMediaNextInterestingTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>interestingTimeFlags</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>,
<argument><expr>&amp;<name>interestingTime</name></expr></argument>,
<argument><expr>&amp;<name>interestingDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>interestingTime</name></expr></argument>,
<argument><expr><name>interestingDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDataRef</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataRefAttributes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaDataRef</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>dataRefAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>dataRefAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaDataRef</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;O&amp;"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaDataRef</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaDataRefAttributes</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataRefAttributes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaDataRefAttributes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaDataRefAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hl"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr>&amp;<name>dataRefAttributes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMediaDataRefAttributes</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>dataRefAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_AddMediaDataRef</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddMediaDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddMediaDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddMediaDataRef</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaDataRefCount</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>count</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaDataRefCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaDataRefCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMediaDataRefCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_SetMediaPlayHints</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsMask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMediaPlayHints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMediaPlayHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>flagsMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMediaPlayHints</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>flagsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaPlayHints</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaPlayHints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaPlayHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMediaPlayHints</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_GetMediaNextInterestingTimeOnly</name><parameter_list>(<param><decl><type><name>MediaObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>interestingTimeFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMediaNextInterestingTimeOnly</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMediaNextInterestingTimeOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
<argument><expr>&amp;<name>interestingTimeFlags</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMediaNextInterestingTimeOnly</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>interestingTimeFlags</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>,
<argument><expr>&amp;<name>interestingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>interestingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>MediaObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"LoadMediaIntoRam"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_LoadMediaIntoRam</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, TimeValue duration, long flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaTrack"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaTrack</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaCreationTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaCreationTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaModificationTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaModificationTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeScale _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeScale timeScale) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDuration"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDuration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaLanguage"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaLanguage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaLanguage"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaLanguage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short language) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaQuality"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaQuality</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaQuality"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaQuality</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short quality) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaHandlerDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaHandlerDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 creatorName) -&gt; (OSType mediaType, OSType creatorManufacturer)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UserData _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaHandler</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (MediaHandler _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaHandler</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandlerComponent mH) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"BeginMediaEdits"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_BeginMediaEdits</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"EndMediaEdits"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_EndMediaEdits</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaDefaultDataRefIndex"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaDefaultDataRefIndex</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDataHandlerDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDataHandlerDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index, Str255 creatorName) -&gt; (OSType dhType, OSType creatorManufacturer)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDataHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDataHandler</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index) -&gt; (DataHandler _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaDataHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaDataHandler</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index, DataHandlerComponent dataHandler) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaSampleDescriptionCount"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaSampleDescriptionCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaSampleDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaSampleDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long index, SampleDescriptionHandle descH) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaSampleDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaSampleDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long index, SampleDescriptionHandle descH) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaSampleCount"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaSampleCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaSyncSampleCount"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaSyncSampleCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SampleNumToMediaTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SampleNumToMediaTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long logicalSampleNum) -&gt; (TimeValue sampleTime, TimeValue sampleDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaTimeToSampleNum"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_MediaTimeToSampleNum</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time) -&gt; (long sampleNum, TimeValue sampleTime, TimeValue sampleDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddMediaSample"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_AddMediaSample</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataIn, long inOffset, unsigned long size, TimeValue durationPerSample, SampleDescriptionHandle sampleDescriptionH, long numberOfSamples, short sampleFlags) -&gt; (TimeValue sampleTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddMediaSampleReference"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_AddMediaSampleReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long dataOffset, unsigned long size, TimeValue durationPerSample, SampleDescriptionHandle sampleDescriptionH, long numberOfSamples, short sampleFlags) -&gt; (TimeValue sampleTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaSample"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaSample</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataOut, long maxSizeToGrow, TimeValue time, SampleDescriptionHandle sampleDescriptionH, long maxNumberOfSamples) -&gt; (long size, TimeValue sampleTime, TimeValue durationPerSample, long sampleDescriptionIndex, long numberOfSamples, short sampleFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaSampleReference"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaSampleReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, SampleDescriptionHandle sampleDescriptionH, long maxNumberOfSamples) -&gt; (long dataOffset, long size, TimeValue sampleTime, TimeValue durationPerSample, long sampleDescriptionIndex, long numberOfSamples, short sampleFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaPreferredChunkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaPreferredChunkSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long maxChunkSize) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaPreferredChunkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaPreferredChunkSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long maxChunkSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaShadowSync"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaShadowSync</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long frameDiffSampleNum, long syncSampleNum) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaShadowSync"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaShadowSync</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long frameDiffSampleNum) -&gt; (long syncSampleNum)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDataSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDataSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDataSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; (wide dataSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyMediaUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_CopyMediaUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Media dstMedia, OSType copyRule) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaNextInterestingTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaNextInterestingTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short interestingTimeFlags, TimeValue time, Fixed rate) -&gt; (TimeValue interestingTime, TimeValue interestingDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index) -&gt; (Handle dataRef, OSType dataRefType, long dataRefAttributes)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index, Handle dataRef, OSType dataRefType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaDataRefAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaDataRefAttributes</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short index, long dataRefAttributes) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddMediaDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_AddMediaDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType) -&gt; (short index)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaDataRefCount"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaDataRefCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short count)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMediaPlayHints"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_SetMediaPlayHints</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long flags, long flagsMask) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaPlayHints"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaPlayHints</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMediaNextInterestingTimeOnly"</expr>, <expr>(<name>PyCFunction</name>)<name>MediaObj_GetMediaNextInterestingTimeOnly</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short interestingTimeFlags, TimeValue time, Fixed rate) -&gt; (TimeValue interestingTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MediaObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Media</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>MediaObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>MediaObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MediaObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Media_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.Media"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MediaObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>MediaObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>MediaObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>MediaObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>MediaObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>MediaObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>MediaObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>MediaObj_tp_init</name></expr>,
<expr><name>MediaObj_tp_alloc</name></expr>,
<expr><name>MediaObj_tp_new</name></expr>,
<expr><name>MediaObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Track_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;Track_Type || PyObject_TypeCheck((x), &amp;Track_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>TrackObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Track</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>TrackObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>TrackObj_New</name><parameter_list>(<param><decl><type><name>Track</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TrackObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create Track from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>TrackObject</name></expr></argument>, <argument><expr>&amp;<name>Track_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>TrackObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Track</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>TrackObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Track required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>TrackObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TrackObj_dealloc</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>DisposeMovieTrack</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_LoadTrackIntoRam</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LoadTrackIntoRam</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LoadTrackIntoRam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lll"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>LoadTrackIntoRam</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackPict</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackPict</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackPict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackPict</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackClipRgn</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackClipRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackClipRgn</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theClip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackClipRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackDisplayBoundsRgn</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackDisplayBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackMovieBoundsRgn</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackMovieBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackMovieBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackMovieBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackBoundsRgn</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackMatte</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackMatte</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackMatte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackMatte</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackMatte</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>theMatte</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackMatte</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackMatte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMatte</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackMatte</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theMatte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackID</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackID</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackMovie</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackCreationTime</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackCreationTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackCreationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackCreationTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackModificationTime</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackModificationTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackModificationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackModificationTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackEnabled</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackEnabled</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>isEnabled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>isEnabled</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>isEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackUsage</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackUsage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackUsage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackUsage</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usage</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackUsage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackUsage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackDuration</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackDuration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackDuration</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackOffset</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackOffset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackOffset</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackOffset</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>movieOffsetTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackOffset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>movieOffsetTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackOffset</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>movieOffsetTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackLayer</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackLayer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackLayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackLayer</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackLayer</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>layer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackLayer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackLayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>layer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackLayer</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackAlternate</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackAlternate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackAlternate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackAlternate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackAlternate</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>alternateT</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackAlternate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackAlternate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>alternateT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackAlternate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>alternateT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackVolume</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackVolume</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackVolume</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackVolume</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackDimensions</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetTrackDimensions</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackDimensions</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackDimensions</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackUserData</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackSoundLocalizationSettings</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settings</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackSoundLocalizationSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackSoundLocalizationSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetTrackSoundLocalizationSettings</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackSoundLocalizationSettings</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settings</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackSoundLocalizationSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackSoundLocalizationSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetTrackSoundLocalizationSettings</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_NewTrackMedia</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Media</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>timeScale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewTrackMedia</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewTrackMedia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>mediaType</name></expr></argument>,
<argument><expr>&amp;<name>timeScale</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NewTrackMedia</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>mediaType</name></expr></argument>,
<argument><expr><name>timeScale</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MediaObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackMedia</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Media</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackMedia</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackMedia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackMedia</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MediaObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_InsertMediaIntoTrack</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>trackStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>mediaTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>mediaDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>mediaRate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>InsertMediaIntoTrack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertMediaIntoTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lllO&amp;"</expr></argument>,
<argument><expr>&amp;<name>trackStart</name></expr></argument>,
<argument><expr>&amp;<name>mediaTime</name></expr></argument>,
<argument><expr>&amp;<name>mediaDuration</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>mediaRate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>InsertMediaIntoTrack</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>trackStart</name></expr></argument>,
<argument><expr><name>mediaTime</name></expr></argument>,
<argument><expr><name>mediaDuration</name></expr></argument>,
<argument><expr><name>mediaRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_InsertTrackSegment</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>dstTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>srcIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>srcDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dstIn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>InsertTrackSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertTrackSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstTrack</name></expr></argument>,
<argument><expr>&amp;<name>srcIn</name></expr></argument>,
<argument><expr>&amp;<name>srcDuration</name></expr></argument>,
<argument><expr>&amp;<name>dstIn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>InsertTrackSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstTrack</name></expr></argument>,
<argument><expr><name>srcIn</name></expr></argument>,
<argument><expr><name>srcDuration</name></expr></argument>,
<argument><expr><name>dstIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_InsertEmptyTrackSegment</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dstIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dstDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>InsertEmptyTrackSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertEmptyTrackSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>dstIn</name></expr></argument>,
<argument><expr>&amp;<name>dstDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>InsertEmptyTrackSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstIn</name></expr></argument>,
<argument><expr><name>dstDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_DeleteTrackSegment</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DeleteTrackSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteTrackSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>DeleteTrackSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_ScaleTrackSegment</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>oldDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>newDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ScaleTrackSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ScaleTrackSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>oldDuration</name></expr></argument>,
<argument><expr>&amp;<name>newDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>ScaleTrackSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>oldDuration</name></expr></argument>,
<argument><expr><name>newDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_IsScrapMovie</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>IsScrapMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsScrapMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>IsScrapMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_CopyTrackSettings</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>dstTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyTrackSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyTrackSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstTrack</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CopyTrackSettings</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_AddEmptyTrackToMovie</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>dstMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>dstTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddEmptyTrackToMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddEmptyTrackToMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstMovie</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddEmptyTrackToMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstMovie</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>dstTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>dstTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_AddClonedTrackToMovie</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>dstMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>dstTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddClonedTrackToMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddClonedTrackToMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstMovie</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddClonedTrackToMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstMovie</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr>&amp;<name>dstTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>dstTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_AddTrackReference</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>refTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>refType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>addedIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddTrackReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddTrackReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>refTrack</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>refType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddTrackReference</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>refTrack</name></expr></argument>,
<argument><expr><name>refType</name></expr></argument>,
<argument><expr>&amp;<name>addedIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>addedIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_DeleteTrackReference</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>refType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DeleteTrackReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteTrackReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>refType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>DeleteTrackReference</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>refType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackReference</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>refTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>refType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>refTrack</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>refType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetTrackReference</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>refTrack</name></expr></argument>,
<argument><expr><name>refType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackReference</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>refType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>refType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackReference</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>refType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetNextTrackReferenceType</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>refType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetNextTrackReferenceType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetNextTrackReferenceType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>refType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetNextTrackReferenceType</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>refType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackReferenceCount</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>refType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackReferenceCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackReferenceCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>refType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackReferenceCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>refType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackEditRate</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackEditRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackEditRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>atTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackEditRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>atTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackDataSize</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackDataSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackDataSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackDataSize64</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackDataSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackDataSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetTrackDataSize64</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_PtInTrack</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PtInTrack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>PtInTrack</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_CopyTrackUserData</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>dstTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>copyRule</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyTrackUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyTrackUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstTrack</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>copyRule</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CopyTrackUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstTrack</name></expr></argument>,
<argument><expr><name>copyRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackNextInterestingTime</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>interestingTimeFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackNextInterestingTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackNextInterestingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlO&amp;"</expr></argument>,
<argument><expr>&amp;<name>interestingTimeFlags</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetTrackNextInterestingTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>interestingTimeFlags</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>,
<argument><expr>&amp;<name>interestingTime</name></expr></argument>,
<argument><expr>&amp;<name>interestingDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>interestingTime</name></expr></argument>,
<argument><expr><name>interestingDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackSegmentDisplayBoundsRgn</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackSegmentDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackSegmentDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackSegmentDisplayBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackStatus</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackStatus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetTrackStatus</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_SetTrackLoadSettings</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>preloadTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>preloadDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>preloadFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defaultHints</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetTrackLoadSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetTrackLoadSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"llll"</expr></argument>,
<argument><expr>&amp;<name>preloadTime</name></expr></argument>,
<argument><expr>&amp;<name>preloadDuration</name></expr></argument>,
<argument><expr>&amp;<name>preloadFlags</name></expr></argument>,
<argument><expr>&amp;<name>defaultHints</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetTrackLoadSettings</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>preloadTime</name></expr></argument>,
<argument><expr><name>preloadDuration</name></expr></argument>,
<argument><expr><name>preloadFlags</name></expr></argument>,
<argument><expr><name>defaultHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_GetTrackLoadSettings</name><parameter_list>(<param><decl><type><name>TrackObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>preloadTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>preloadDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>preloadFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defaultHints</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetTrackLoadSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetTrackLoadSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetTrackLoadSettings</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>preloadTime</name></expr></argument>,
<argument><expr>&amp;<name>preloadDuration</name></expr></argument>,
<argument><expr>&amp;<name>preloadFlags</name></expr></argument>,
<argument><expr>&amp;<name>defaultHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llll"</expr></argument>,
<argument><expr><name>preloadTime</name></expr></argument>,
<argument><expr><name>preloadDuration</name></expr></argument>,
<argument><expr><name>preloadFlags</name></expr></argument>,
<argument><expr><name>defaultHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>TrackObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"LoadTrackIntoRam"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_LoadTrackIntoRam</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, TimeValue duration, long flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackPict"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackPict</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time) -&gt; (PicHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theClip) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackDisplayBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackDisplayBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackMovieBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackMovieBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackMatte"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackMatte</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PixMapHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackMatte"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackMatte</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle theMatte) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackID"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackID</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackCreationTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackCreationTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackModificationTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackModificationTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean isEnabled) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackUsage"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackUsage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackUsage"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackUsage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long usage) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackDuration"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackDuration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackOffset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackOffset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue movieOffsetTime) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackLayer"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackLayer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackLayer"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackLayer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short layer) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackAlternate"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackAlternate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackAlternate"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackAlternate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track alternateT) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short volume) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Fixed width, Fixed height)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed width, Fixed height) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UserData _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackSoundLocalizationSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackSoundLocalizationSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle settings)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackSoundLocalizationSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackSoundLocalizationSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle settings) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewTrackMedia"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_NewTrackMedia</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType mediaType, TimeScale timeScale, Handle dataRef, OSType dataRefType) -&gt; (Media _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackMedia"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackMedia</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Media _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"InsertMediaIntoTrack"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_InsertMediaIntoTrack</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue trackStart, TimeValue mediaTime, TimeValue mediaDuration, Fixed mediaRate) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"InsertTrackSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_InsertTrackSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track dstTrack, TimeValue srcIn, TimeValue srcDuration, TimeValue dstIn) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"InsertEmptyTrackSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_InsertEmptyTrackSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue dstIn, TimeValue dstDuration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DeleteTrackSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_DeleteTrackSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ScaleTrackSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_ScaleTrackSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue oldDuration, TimeValue newDuration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"IsScrapMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_IsScrapMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Component _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyTrackSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_CopyTrackSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track dstTrack) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddEmptyTrackToMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_AddEmptyTrackToMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie dstMovie, Handle dataRef, OSType dataRefType) -&gt; (Track dstTrack)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddClonedTrackToMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_AddClonedTrackToMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie dstMovie, long flags) -&gt; (Track dstTrack)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddTrackReference"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_AddTrackReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track refTrack, OSType refType) -&gt; (long addedIndex)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DeleteTrackReference"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_DeleteTrackReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType refType, long index) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackReference"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track refTrack, OSType refType, long index) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackReference"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType refType, long index) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetNextTrackReferenceType"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetNextTrackReferenceType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType refType) -&gt; (OSType _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackReferenceCount"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackReferenceCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType refType) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackEditRate"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackEditRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue atTime) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackDataSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackDataSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackDataSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; (wide dataSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PtInTrack"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_PtInTrack</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyTrackUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_CopyTrackUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track dstTrack, OSType copyRule) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackNextInterestingTime"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackNextInterestingTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short interestingTimeFlags, TimeValue time, Fixed rate) -&gt; (TimeValue interestingTime, TimeValue interestingDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackSegmentDisplayBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackSegmentDisplayBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, TimeValue duration) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackStatus</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetTrackLoadSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_SetTrackLoadSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue preloadTime, TimeValue preloadDuration, long preloadFlags, long defaultHints) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetTrackLoadSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>TrackObj_GetTrackLoadSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue preloadTime, TimeValue preloadDuration, long preloadFlags, long defaultHints)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>TrackObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>TrackObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TrackObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Track_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.Track"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>TrackObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>TrackObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>TrackObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>TrackObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>TrackObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>TrackObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>TrackObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>TrackObj_tp_init</name></expr>,
<expr><name>TrackObj_tp_alloc</name></expr>,
<expr><name>TrackObj_tp_new</name></expr>,
<expr><name>TrackObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Movie_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;Movie_Type || PyObject_TypeCheck((x), &amp;Movie_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>MovieObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>Movie</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>MovieObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>MovieObj_New</name><parameter_list>(<param><decl><type><name>Movie</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MovieObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create Movie from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>MovieObject</name></expr></argument>, <argument><expr>&amp;<name>Movie_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>MovieObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>Movie</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>MovieObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Movie required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>MovieObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MovieObj_dealloc</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr>)</condition><then> <expr_stmt><expr><call><name>DisposeMovie</name><argument_list>(<argument><expr><name><name>self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_MoviesTask</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxMilliSecToUse</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MoviesTask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MoviesTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>maxMilliSecToUse</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>MoviesTask</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>maxMilliSecToUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PrerollMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>Rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PrerollMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PrerollMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>Rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PrerollMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>Rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_AbortPrePrerollMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AbortPrePrerollMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AbortPrePrerollMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>AbortPrePrerollMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_LoadMovieIntoRam</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LoadMovieIntoRam</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>LoadMovieIntoRam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lll"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>LoadMovieIntoRam</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieActive</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>active</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieActive</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>active</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieActive</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieActive</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieActive</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieActive</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_StartMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>StartMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>StartMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>StartMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_StopMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>StopMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>StopMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>StopMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GoToBeginningOfMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GoToBeginningOfMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GoToBeginningOfMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GoToBeginningOfMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GoToEndOfMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GoToEndOfMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GoToEndOfMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GoToEndOfMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_IsMovieDone</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>IsMovieDone</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>IsMovieDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>IsMovieDone</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePreviewMode</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePreviewMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePreviewMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMoviePreviewMode</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMoviePreviewMode</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>usePreview</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMoviePreviewMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMoviePreviewMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>usePreview</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMoviePreviewMode</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>usePreview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_ShowMoviePoster</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ShowMoviePoster</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ShowMoviePoster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ShowMoviePoster</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieTimeBase</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieTimeBase</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieMasterTimeBase</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>slaveZero</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieMasterTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieMasterTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tb</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieMasterTimeBase</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>tb</name></expr></argument>,
<argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieMasterClock</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>clockMeister</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>slaveZero</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieMasterClock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieMasterClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clockMeister</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieMasterClock</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>clockMeister</name></expr></argument>,
<argument><expr>&amp;<name>slaveZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_ChooseMovieClock</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ChooseMovieClock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ChooseMovieClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ChooseMovieClock</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieGWorld</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMovieGWorld</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>port</name></expr></argument>,
<argument><expr>&amp;<name>gdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><name>OptResObj_New</name></expr></argument>, <argument><expr><name>gdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieGWorld</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieGWorld</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>port</name></expr></argument>,
<argument><expr><name>gdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieNaturalBoundsRect</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>naturalBounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieNaturalBoundsRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieNaturalBoundsRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMovieNaturalBoundsRect</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>naturalBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>naturalBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetNextTrackForCompositing</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>theTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetNextTrackForCompositing</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetNextTrackForCompositing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theTrack</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetNextTrackForCompositing</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetPrevTrackForCompositing</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>theTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetPrevTrackForCompositing</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPrevTrackForCompositing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theTrack</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetPrevTrackForCompositing</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePict</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePict</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMoviePict</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePosterPict</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePosterPict</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePosterPict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMoviePosterPict</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_UpdateMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UpdateMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>UpdateMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_InvalidateMovieRegion</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>invalidRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>InvalidateMovieRegion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InvalidateMovieRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>invalidRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>InvalidateMovieRegion</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>invalidRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieBox</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>boxRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieBox</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMovieBox</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieBox</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>boxRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieBox</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieBox</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieDisplayClipRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieDisplayClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieDisplayClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieDisplayClipRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieDisplayClipRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieDisplayClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieDisplayClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theClip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieDisplayClipRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieClipRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieClipRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieClipRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theClip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieClipRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieDisplayBoundsRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieDisplayBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieBoundsRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieVideoOutput</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>vout</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieVideoOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieVideoOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vout</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieVideoOutput</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieIntoHandle</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>publicMovie</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieIntoHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieIntoHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>publicMovie</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieIntoHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>publicMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieIntoDataFork</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieIntoDataFork</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieIntoDataFork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hll"</expr></argument>,
<argument><expr>&amp;<name>fRefNum</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>maxSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieIntoDataFork</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>fRefNum</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieIntoDataFork64</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieIntoDataFork64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieIntoDataFork64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;l"</expr></argument>,
<argument><expr>&amp;<name>fRefNum</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>maxSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieIntoDataFork64</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>fRefNum</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieIntoStorage</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieIntoStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieIntoStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>maxSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieIntoStorage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieForDataRefIntoHandle</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>publicMovie</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieForDataRefIntoHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieForDataRefIntoHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>publicMovie</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieForDataRefIntoHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>publicMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieCreationTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieCreationTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieCreationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieCreationTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieModificationTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieModificationTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieModificationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieModificationTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieTimeScale</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieTimeScale</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieTimeScale</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>timeScale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>timeScale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieTimeScale</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>timeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieDuration</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieDuration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieDuration</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieRate</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieRate</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePreferredRate</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePreferredRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePreferredRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMoviePreferredRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMoviePreferredRate</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMoviePreferredRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMoviePreferredRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMoviePreferredRate</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePreferredVolume</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePreferredVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePreferredVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMoviePreferredVolume</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMoviePreferredVolume</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMoviePreferredVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMoviePreferredVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMoviePreferredVolume</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieVolume</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieVolume</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieVolume</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieVolume</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePreviewTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>previewTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>previewDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePreviewTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePreviewTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMoviePreviewTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>previewTime</name></expr></argument>,
<argument><expr>&amp;<name>previewDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>previewTime</name></expr></argument>,
<argument><expr><name>previewDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMoviePreviewTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>previewTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>previewDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMoviePreviewTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMoviePreviewTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>previewTime</name></expr></argument>,
<argument><expr>&amp;<name>previewDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMoviePreviewTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>previewTime</name></expr></argument>,
<argument><expr><name>previewDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMoviePosterTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviePosterTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviePosterTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMoviePosterTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMoviePosterTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>posterTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMoviePosterTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMoviePosterTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>posterTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMoviePosterTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>posterTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>selectionTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>selectionDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>selectionTime</name></expr></argument>,
<argument><expr>&amp;<name>selectionDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>selectionTime</name></expr></argument>,
<argument><expr><name>selectionDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>selectionTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>selectionDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>selectionTime</name></expr></argument>,
<argument><expr>&amp;<name>selectionDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>selectionTime</name></expr></argument>,
<argument><expr><name>selectionDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieActiveSegment</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieActiveSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieActiveSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieActiveSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieActiveSegment</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieActiveSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieActiveSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMovieActiveSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>currentTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>currentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>currentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>newtime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>newtime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>newtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieTimeValue</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>newtime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieTimeValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieTimeValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>newtime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieTimeValue</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>newtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieUserData</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieTrackCount</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieTrackCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieTrackCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieTrackCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieTrack</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>trackID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieTrack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>trackID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieTrack</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>trackID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieIndTrack</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieIndTrack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieIndTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieIndTrack</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieIndTrackType</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>trackType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieIndTrackType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieIndTrackType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;l"</expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>trackType</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieIndTrackType</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr><name>trackType</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_NewMovieTrack</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>trackVolume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieTrack</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>,
<argument><expr>&amp;<name>trackVolume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NewMovieTrack</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>,
<argument><expr><name>trackVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetAutoTrackAlternatesEnabled</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetAutoTrackAlternatesEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetAutoTrackAlternatesEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"b"</expr></argument>,
<argument><expr>&amp;<name>enable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetAutoTrackAlternatesEnabled</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SelectMovieAlternates</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SelectMovieAlternates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SelectMovieAlternates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SelectMovieAlternates</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_InsertMovieSegment</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>dstMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>srcIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>srcDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dstIn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>InsertMovieSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertMovieSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstMovie</name></expr></argument>,
<argument><expr>&amp;<name>srcIn</name></expr></argument>,
<argument><expr>&amp;<name>srcDuration</name></expr></argument>,
<argument><expr>&amp;<name>dstIn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>InsertMovieSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstMovie</name></expr></argument>,
<argument><expr><name>srcIn</name></expr></argument>,
<argument><expr><name>srcDuration</name></expr></argument>,
<argument><expr><name>dstIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_InsertEmptyMovieSegment</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dstIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dstDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>InsertEmptyMovieSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>InsertEmptyMovieSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>dstIn</name></expr></argument>,
<argument><expr>&amp;<name>dstDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>InsertEmptyMovieSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstIn</name></expr></argument>,
<argument><expr><name>dstDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_DeleteMovieSegment</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DeleteMovieSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMovieSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>DeleteMovieSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_ScaleMovieSegment</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>oldDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>newDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ScaleMovieSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ScaleMovieSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>oldDuration</name></expr></argument>,
<argument><expr>&amp;<name>newDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>ScaleMovieSegment</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>oldDuration</name></expr></argument>,
<argument><expr><name>newDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_CutMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CutMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CutMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>CutMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_CopyMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>CopyMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PasteMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PasteMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PasteMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>PasteMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_AddMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>AddMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_ClearMovieSelection</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ClearMovieSelection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClearMovieSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ClearMovieSelection</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieIntoTypedHandle</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>targetTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>handleType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>publicMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>dur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>userComp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieIntoTypedHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieIntoTypedHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;lllO&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>targetTrack</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>handleType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>publicMovie</name></expr></argument>,
<argument><expr>&amp;<name>start</name></expr></argument>,
<argument><expr>&amp;<name>dur</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>userComp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieIntoTypedHandle</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>targetTrack</name></expr></argument>,
<argument><expr><name>handleType</name></expr></argument>,
<argument><expr><name>publicMovie</name></expr></argument>,
<argument><expr><name>start</name></expr></argument>,
<argument><expr><name>dur</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>userComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_CopyMovieSettings</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>dstMovie</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyMovieSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMovieSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstMovie</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CopyMovieSettings</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_ConvertMovieToFile</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>onlyTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>outputFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>userComp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ConvertMovieToFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ConvertMovieToFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;hlO&amp;"</expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>onlyTrack</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>outputFile</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>userComp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>ConvertMovieToFile</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>onlyTrack</name></expr></argument>,
<argument><expr>&amp;<name>outputFile</name></expr></argument>,
<argument><expr><name>fileType</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>resID</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>userComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>resID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieDataSize</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieDataSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieDataSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieDataSize64</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieDataSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieDataSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMovieDataSize64</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PtInMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>pt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PtInMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PtInMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>PtInMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieLanguage</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>language</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieLanguage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>language</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMovieLanguage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_CopyMovieUserData</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>dstMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>copyRule</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CopyMovieUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CopyMovieUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstMovie</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>copyRule</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CopyMovieUserData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dstMovie</name></expr></argument>,
<argument><expr><name>copyRule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieNextInterestingTime</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>interestingTimeFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numMediaTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>whichMediaTypes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>interestingDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieNextInterestingTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieNextInterestingTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhO&amp;lO&amp;"</expr></argument>,
<argument><expr>&amp;<name>interestingTimeFlags</name></expr></argument>,
<argument><expr>&amp;<name>numMediaTypes</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>whichMediaTypes</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetMovieNextInterestingTime</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>interestingTimeFlags</name></expr></argument>,
<argument><expr><name>numMediaTypes</name></expr></argument>,
<argument><expr>&amp;<name>whichMediaTypes</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>,
<argument><expr>&amp;<name>interestingTime</name></expr></argument>,
<argument><expr>&amp;<name>interestingDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>interestingTime</name></expr></argument>,
<argument><expr><name>interestingDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_AddMovieResource</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>resName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddMovieResource</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddMovieResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;"</expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>resName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddMovieResource</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>resRefNum</name></expr></argument>,
<argument><expr>&amp;<name>resId</name></expr></argument>,
<argument><expr><name>resName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_UpdateMovieResource</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>resName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UpdateMovieResource</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateMovieResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhO&amp;"</expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr>&amp;<name>resId</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>resName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>UpdateMovieResource</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>resRefNum</name></expr></argument>,
<argument><expr><name>resId</name></expr></argument>,
<argument><expr><name>resName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_AddMovieToStorage</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddMovieToStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddMovieToStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddMovieToStorage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_UpdateMovieInStorage</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UpdateMovieInStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UpdateMovieInStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>UpdateMovieInStorage</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_HasMovieChanged</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HasMovieChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>HasMovieChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>HasMovieChanged</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_ClearMovieChanged</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ClearMovieChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClearMovieChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ClearMovieChanged</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieDefaultDataRef</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieDefaultDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieDefaultDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMovieDefaultDataRef</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieDefaultDataRef</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieDefaultDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieDefaultDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMovieDefaultDataRef</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMovieColorTable</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>ctab</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMovieColorTable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMovieColorTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ctab</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetMovieColorTable</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>ctab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieColorTable</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>ctab</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieColorTable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieColorTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMovieColorTable</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>ctab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>ctab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_FlattenMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>movieFlattenFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>createMovieFileFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>resName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlattenMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlattenMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;O&amp;hlO&amp;"</expr></argument>,
<argument><expr>&amp;<name>movieFlattenFlags</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>createMovieFileFlags</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>resName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>FlattenMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>movieFlattenFlags</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr><name>createMovieFileFlags</name></expr></argument>,
<argument><expr>&amp;<name>resId</name></expr></argument>,
<argument><expr><name>resName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_FlattenMovieData</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>movieFlattenFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>createMovieFileFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlattenMovieData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlattenMovieData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;O&amp;hl"</expr></argument>,
<argument><expr>&amp;<name>movieFlattenFlags</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>createMovieFileFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlattenMovieData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>movieFlattenFlags</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr><name>createMovieFileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_FlattenMovieDataToDataRef</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>movieFlattenFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>createMovieFileFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlattenMovieDataToDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlattenMovieDataToDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;O&amp;O&amp;hl"</expr></argument>,
<argument><expr>&amp;<name>movieFlattenFlags</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>createMovieFileFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlattenMovieDataToDataRef</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>movieFlattenFlags</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr><name>createMovieFileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_MovieSearchText</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>searchFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>searchTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>searchTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>searchOffset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieSearchText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieSearchText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"sll"</expr></argument>,
<argument><expr>&amp;<name>text</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr>&amp;<name>searchFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>MovieSearchText</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>text</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>searchFlags</name></expr></argument>,
<argument><expr>&amp;<name>searchTrack</name></expr></argument>,
<argument><expr>&amp;<name>searchTime</name></expr></argument>,
<argument><expr>&amp;<name>searchOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>searchTrack</name></expr></argument>,
<argument><expr><name>searchTime</name></expr></argument>,
<argument><expr><name>searchOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetPosterBox</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>boxRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetPosterBox</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetPosterBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>GetPosterBox</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetPosterBox</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>boxRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetPosterBox</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetPosterBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetPosterBox</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>boxRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieSegmentDisplayBoundsRgn</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieSegmentDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieSegmentDisplayBoundsRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieSegmentDisplayBoundsRgn</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMovieStatus</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>firstProblemTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieStatus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetMovieStatus</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>firstProblemTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>firstProblemTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_NewMovieController</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieController</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>movieRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>someFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieController</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>movieRect</name></expr></argument>,
<argument><expr>&amp;<name>someFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NewMovieController</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>movieRect</name></expr></argument>,
<argument><expr><name>someFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieCtlObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_PutMovieOnScrap</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>movieScrapFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PutMovieOnScrap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PutMovieOnScrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>movieScrapFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutMovieOnScrap</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>movieScrapFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_SetMoviePlayHints</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsMask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetMoviePlayHints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetMoviePlayHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>flagsMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SetMoviePlayHints</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>flagsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_GetMaxLoadedTimeInMovie</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMaxLoadedTimeInMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMaxLoadedTimeInMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMaxLoadedTimeInMovie</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_QTMovieNeedsTimeTable</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>needsTimeTable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTMovieNeedsTimeTable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTMovieNeedsTimeTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTMovieNeedsTimeTable</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>needsTimeTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"b"</expr></argument>,
<argument><expr><name>needsTimeTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_QTGetDataRefMaxFileOffset</name><parameter_list>(<param><decl><type><name>MovieObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetDataRefMaxFileOffset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetDataRefMaxFileOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTGetDataRefMaxFileOffset</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>MovieObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"MoviesTask"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_MoviesTask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long maxMilliSecToUse) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PrerollMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PrerollMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, Fixed Rate) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AbortPrePrerollMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_AbortPrePrerollMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSErr err) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"LoadMovieIntoRam"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_LoadMovieIntoRam</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, TimeValue duration, long flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieActive"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieActive</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean active) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieActive"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieActive</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"StartMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_StartMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"StopMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_StopMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GoToBeginningOfMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GoToBeginningOfMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GoToEndOfMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GoToEndOfMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"IsMovieDone"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_IsMovieDone</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePreviewMode"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePreviewMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMoviePreviewMode"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMoviePreviewMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean usePreview) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ShowMoviePoster"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_ShowMoviePoster</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeBase _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieMasterTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieMasterTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeBase tb, TimeRecord slaveZero) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieMasterClock"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieMasterClock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Component clockMeister, TimeRecord slaveZero) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ChooseMovieClock"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_ChooseMovieClock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CGrafPtr port, GDHandle gdh)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CGrafPtr port, GDHandle gdh) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieNaturalBoundsRect"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieNaturalBoundsRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Rect naturalBounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetNextTrackForCompositing"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetNextTrackForCompositing</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track theTrack) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetPrevTrackForCompositing"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetPrevTrackForCompositing</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track theTrack) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePict"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePict</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time) -&gt; (PicHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePosterPict"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePosterPict</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (PicHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"UpdateMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_UpdateMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"InvalidateMovieRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_InvalidateMovieRegion</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle invalidRgn) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieBox"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieBox</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Rect boxRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieBox"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieBox</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect boxRect) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieDisplayClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieDisplayClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieDisplayClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieDisplayClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theClip) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(RgnHandle theClip) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieDisplayBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieDisplayBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieVideoOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieVideoOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance vout) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieIntoHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieIntoHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle publicMovie) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieIntoDataFork"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieIntoDataFork</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short fRefNum, long offset, long maxSize) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieIntoDataFork64"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieIntoDataFork64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long fRefNum, wide offset, unsigned long maxSize) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieIntoStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieIntoStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, wide offset, unsigned long maxSize) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieForDataRefIntoHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieForDataRefIntoHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType, Handle publicMovie) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieCreationTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieCreationTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieModificationTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieModificationTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeScale _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeScale timeScale) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieDuration"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieDuration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieRate"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieRate"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed rate) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePreferredRate"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePreferredRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMoviePreferredRate"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMoviePreferredRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed rate) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePreferredVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePreferredVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMoviePreferredVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMoviePreferredVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short volume) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short volume) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePreviewTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePreviewTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue previewTime, TimeValue previewDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMoviePreviewTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMoviePreviewTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue previewTime, TimeValue previewDuration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviePosterTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMoviePosterTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMoviePosterTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMoviePosterTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue posterTime) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue selectionTime, TimeValue selectionDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue selectionTime, TimeValue selectionDuration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieActiveSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieActiveSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieActiveSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieActiveSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue startTime, TimeValue duration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue _rv, TimeRecord currentTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord newtime) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieTimeValue"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieTimeValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue newtime) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UserData _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieTrackCount"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieTrackCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieTrack"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieTrack</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long trackID) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieIndTrack"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieIndTrack</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long index) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieIndTrackType"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieIndTrackType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long index, OSType trackType, long flags) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieTrack"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_NewMovieTrack</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed width, Fixed height, short trackVolume) -&gt; (Track _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetAutoTrackAlternatesEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetAutoTrackAlternatesEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Boolean enable) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SelectMovieAlternates"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SelectMovieAlternates</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"InsertMovieSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_InsertMovieSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie dstMovie, TimeValue srcIn, TimeValue srcDuration, TimeValue dstIn) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"InsertEmptyMovieSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_InsertEmptyMovieSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue dstIn, TimeValue dstDuration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DeleteMovieSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_DeleteMovieSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ScaleMovieSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_ScaleMovieSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue oldDuration, TimeValue newDuration) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CutMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_CutMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_CopyMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PasteMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PasteMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie src) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_AddMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie src) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClearMovieSelection"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_ClearMovieSelection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieIntoTypedHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieIntoTypedHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track targetTrack, OSType handleType, Handle publicMovie, TimeValue start, TimeValue dur, long flags, ComponentInstance userComp) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyMovieSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_CopyMovieSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie dstMovie) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ConvertMovieToFile"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_ConvertMovieToFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Track onlyTrack, FSSpec outputFile, OSType fileType, OSType creator, ScriptCode scriptTag, long flags, ComponentInstance userComp) -&gt; (short resID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieDataSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieDataSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieDataSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue startTime, TimeValue duration) -&gt; (wide dataSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PtInMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PtInMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Point pt) -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieLanguage"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieLanguage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long language) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CopyMovieUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_CopyMovieUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Movie dstMovie, OSType copyRule) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieNextInterestingTime"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieNextInterestingTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short interestingTimeFlags, short numMediaTypes, OSType whichMediaTypes, TimeValue time, Fixed rate) -&gt; (TimeValue interestingTime, TimeValue interestingDuration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddMovieResource"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_AddMovieResource</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resRefNum, Str255 resName) -&gt; (short resId)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"UpdateMovieResource"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_UpdateMovieResource</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resRefNum, short resId, Str255 resName) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddMovieToStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_AddMovieToStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"UpdateMovieInStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_UpdateMovieInStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"HasMovieChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_HasMovieChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClearMovieChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_ClearMovieChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieDefaultDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieDefaultDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieDefaultDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieDefaultDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Handle dataRef, OSType dataRefType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMovieColorTable"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMovieColorTable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CTabHandle ctab) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieColorTable"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieColorTable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (CTabHandle ctab)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlattenMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_FlattenMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long movieFlattenFlags, FSSpec theFile, OSType creator, ScriptCode scriptTag, long createMovieFileFlags, Str255 resName) -&gt; (short resId)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlattenMovieData"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_FlattenMovieData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long movieFlattenFlags, FSSpec theFile, OSType creator, ScriptCode scriptTag, long createMovieFileFlags) -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlattenMovieDataToDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_FlattenMovieDataToDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long movieFlattenFlags, Handle dataRef, OSType dataRefType, OSType creator, ScriptCode scriptTag, long createMovieFileFlags) -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieSearchText"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_MovieSearchText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Ptr text, long size, long searchFlags) -&gt; (Track searchTrack, TimeValue searchTime, long searchOffset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetPosterBox"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetPosterBox</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Rect boxRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetPosterBox"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetPosterBox</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect boxRect) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieSegmentDisplayBoundsRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieSegmentDisplayBoundsRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue time, TimeValue duration) -&gt; (RgnHandle _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMovieStatus</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ComponentResult _rv, Track firstProblemTrack)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieController"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_NewMovieController</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Rect movieRect, long someFlags) -&gt; (MovieController _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutMovieOnScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_PutMovieOnScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long movieScrapFlags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetMoviePlayHints"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_SetMoviePlayHints</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long flags, long flagsMask) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMaxLoadedTimeInMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_GetMaxLoadedTimeInMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeValue time)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTMovieNeedsTimeTable"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_QTMovieNeedsTimeTable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (Boolean needsTimeTable)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetDataRefMaxFileOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>MovieObj_QTGetDataRefMaxFileOffset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType dataRefType, Handle dataRef) -&gt; (long offset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>MovieObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>MovieObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MovieObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Movie_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.Movie"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MovieObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>MovieObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>MovieObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>MovieObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>MovieObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>MovieObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>MovieObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>MovieObj_tp_init</name></expr>,
<expr><name>MovieObj_tp_alloc</name></expr>,
<expr><name>MovieObj_tp_new</name></expr>,
<expr><name>MovieObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>SGOutput_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;SGOutput_Type || PyObject_TypeCheck((x), &amp;SGOutput_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>SGOutputObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>SGOutput</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>SGOutputObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>SGOutputObj_New</name><parameter_list>(<param><decl><type><name>SGOutput</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SGOutputObject</name> *</type><name>it</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>itself</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>Qt_Error</name></expr></argument>,<argument><expr>"Cannot create SGOutput from NULL pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>SGOutputObject</name></expr></argument>, <argument><expr>&amp;<name>SGOutput_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>SGOutputObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>SGOutput</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>v</name> == <name>Py_None</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_itself</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>SGOutputObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"SGOutput required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>SGOutputObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SGOutputObj_dealloc</name><parameter_list>(<param><decl><type><name>SGOutputObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>SGOutputObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_getsetlist</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_tp_init</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_tp_alloc</name></cpp:macro> <cpp:value>PyType_GenericAlloc</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>SGOutputObj_tp_new</name><parameter_list>(<param><decl><type><name>PyTypeObject</name> *</type><name>type</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_kwds</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>itself</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>kw</name><index>[]</index></name> <init>= <expr><block>{<expr>"itself"</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTupleAndKeywords</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr><name>_kwds</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>, <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itself</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>_self</name> = <call><name><name>type</name>-&gt;<name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr>((<name>SGOutputObject</name> *)<name>_self</name>)-&gt;<name>ob_itself</name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr><name>_self</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SGOutputObj_tp_free</name></cpp:macro> <cpp:value>PyObject_Del</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>SGOutput_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Qt.SGOutput"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGOutputObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>SGOutputObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>)0</expr>,
<expr>(<name>setattrfunc</name>)0</expr>,
<expr>(<name>cmpfunc</name>) <name>SGOutputObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>SGOutputObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>SGOutputObj_hash</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>PyObject_GenericGetAttr</name></expr>,
<expr><name>PyObject_GenericSetAttr</name></expr>,
<expr>0</expr>,
<expr><name>Py_TPFLAGS_DEFAULT</name>|<name>Py_TPFLAGS_BASETYPE</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>SGOutputObj_methods</name></expr>,
<expr>0</expr>,
<expr><name>SGOutputObj_getsetlist</name></expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr>0</expr>,
<expr><name>SGOutputObj_tp_init</name></expr>,
<expr><name>SGOutputObj_tp_alloc</name></expr>,
<expr><name>SGOutputObj_tp_new</name></expr>,
<expr><name>SGOutputObj_tp_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_EnterMovies</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>EnterMovies</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EnterMovies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>EnterMovies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ExitMovies</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ExitMovies</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ExitMovies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ExitMovies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetMoviesError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviesError</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviesError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMoviesError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ClearMoviesStickyError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ClearMoviesStickyError</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClearMoviesStickyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ClearMoviesStickyError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetMoviesStickyError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMoviesStickyError</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMoviesStickyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMoviesStickyError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetWallClockTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>wallClockTimeBase</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetWallClockTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetWallClockTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTGetWallClockTimeBase</name><argument_list>(<argument><expr>&amp;<name>wallClockTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>wallClockTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTIdleManagerOpen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTIdleManagerOpen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTIdleManagerOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTIdleManagerOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>IdleManagerObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CreateMovieControl</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>theWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>localRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ControlHandle</name></type> <name>returnedControl</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CreateMovieControl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateMovieControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr>&amp;<name>options</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateMovieControl</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>,
<argument><expr>&amp;<name>localRect</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>,
<argument><expr>&amp;<name>returnedControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>localRect</name></expr></argument>,
<argument><expr><name>CtlObj_New</name></expr></argument>, <argument><expr><name>returnedControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DisposeMatte</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>theMatte</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DisposeMatte</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DisposeMatte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMatte</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>DisposeMatte</name><argument_list>(<argument><expr><name>theMatte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NewMovie</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetTimeUntilNextTask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetTimeUntilNextTask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetTimeUntilNextTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTGetTimeUntilNextTask</name><argument_list>(<argument><expr>&amp;<name>duration</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetDataHandler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataHandlerSubType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetDataHandler</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataHandlerSubType</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GetDataHandler</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataHandlerSubType</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_PasteHandleIntoMovie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>handleType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>userComp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PasteHandleIntoMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PasteHandleIntoMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>handleType</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>userComp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PasteHandleIntoMovie</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>handleType</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>userComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetMovieImporterForDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>importer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMovieImporterForDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMovieImporterForDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMovieImporterForDataRef</name><argument_list>(<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr>&amp;<name>importer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>importer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetMIMETypeInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>mimeStringStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>mimeStringLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>infoSelector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>infoDataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>infoDataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetMIMETypeInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetMIMETypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"shO&amp;s"</expr></argument>,
<argument><expr>&amp;<name>mimeStringStart</name></expr></argument>,
<argument><expr>&amp;<name>mimeStringLength</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoSelector</name></expr></argument>,
<argument><expr>&amp;<name>infoDataPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTGetMIMETypeInfo</name><argument_list>(<argument><expr><name>mimeStringStart</name></expr></argument>,
<argument><expr><name>mimeStringLength</name></expr></argument>,
<argument><expr><name>infoSelector</name></expr></argument>,
<argument><expr><name>infoDataPtr</name></expr></argument>,
<argument><expr>&amp;<name>infoDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>infoDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TrackTimeToMediaTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>theTrack</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TrackTimeToMediaTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TrackTimeToMediaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;"</expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theTrack</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TrackTimeToMediaTime</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
<argument><expr><name>theTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewUserData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>theUserData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewUserData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewUserData</name><argument_list>(<argument><expr>&amp;<name>theUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>theUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewUserDataFromHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>theUserData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewUserDataFromHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewUserDataFromHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewUserDataFromHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>,
<argument><expr>&amp;<name>theUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>theUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CreateMovieFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fileSpec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>createMovieFileFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>newmovie</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CreateMovieFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateMovieFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hl"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>createMovieFileFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateMovieFile</name><argument_list>(<argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr><name>createMovieFileFlags</name></expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr>&amp;<name>newmovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"hO&amp;"</expr></argument>,
<argument><expr><name>resRefNum</name></expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>newmovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_OpenMovieFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fileSpec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SInt8</name></type> <name>permission</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OpenMovieFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OpenMovieFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr>&amp;<name>permission</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>OpenMovieFile</name><argument_list>(<argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>resRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CloseMovieFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CloseMovieFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CloseMovieFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CloseMovieFile</name><argument_list>(<argument><expr><name>resRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DeleteMovieFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fileSpec</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DeleteMovieFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMovieFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fileSpec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>DeleteMovieFile</name><argument_list>(<argument><expr>&amp;<name>fileSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dataRefWasChanged</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhh"</expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr>&amp;<name>resId</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieFromFile</name><argument_list>(<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>resRefNum</name></expr></argument>,
<argument><expr>&amp;<name>resId</name></expr></argument>,
<argument><expr>(<name>StringPtr</name>)0</expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>,
<argument><expr>&amp;<name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;hb"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>resId</name></expr></argument>,
<argument><expr><name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dataRefWasChanged</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieFromHandle</name><argument_list>(<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>,
<argument><expr>&amp;<name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromDataFork</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dataRefWasChanged</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromDataFork</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromDataFork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hlh"</expr></argument>,
<argument><expr>&amp;<name>fRefNum</name></expr></argument>,
<argument><expr>&amp;<name>fileOffset</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieFromDataFork</name><argument_list>(<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>fRefNum</name></expr></argument>,
<argument><expr><name>fileOffset</name></expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>,
<argument><expr>&amp;<name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromDataFork64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>fileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dataRefWasChanged</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromDataFork64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromDataFork64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lO&amp;h"</expr></argument>,
<argument><expr>&amp;<name>fRefNum</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>fileOffset</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieFromDataFork64</name><argument_list>(<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>fRefNum</name></expr></argument>,
<argument><expr>&amp;<name>fileOffset</name></expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>,
<argument><expr>&amp;<name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dtaRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;O&amp;"</expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dtaRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieFromDataRef</name><argument_list>(<argument><expr>&amp;<name>m</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr>&amp;<name>id</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dtaRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>m</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromStorageOffset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>fileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dataRefWasCataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromStorageOffset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromStorageOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>fileOffset</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieFromStorageOffset</name><argument_list>(<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileOffset</name></expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>,
<argument><expr>&amp;<name>dataRefWasCataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>dataRefWasCataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieForDataRefFromHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dataRefWasChanged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieForDataRefFromHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieForDataRefFromHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>NewMovieForDataRefFromHandle</name><argument_list>(<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>,
<argument><expr>&amp;<name>dataRefWasChanged</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>dataRefWasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_RemoveMovieResource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resId</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RemoveMovieResource</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveMovieResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hh"</expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr>&amp;<name>resId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>RemoveMovieResource</name><argument_list>(<argument><expr><name>resRefNum</name></expr></argument>,
<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CreateMovieStorage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>createMovieFileFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>outDataHandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>newmovie</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CreateMovieStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateMovieStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;hl"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>createMovieFileFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateMovieStorage</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr><name>createMovieFileFlags</name></expr></argument>,
<argument><expr>&amp;<name>outDataHandler</name></expr></argument>,
<argument><expr>&amp;<name>newmovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>outDataHandler</name></expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>newmovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_OpenMovieStorage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>outDataHandler</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OpenMovieStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>OpenMovieStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>OpenMovieStorage</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr>&amp;<name>outDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>outDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CloseMovieStorage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CloseMovieStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CloseMovieStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CloseMovieStorage</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DeleteMovieStorage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DeleteMovieStorage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DeleteMovieStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>DeleteMovieStorage</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CreateShortcutMovieFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fileSpec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>createMovieFileFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>targetDataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>targetDataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CreateShortcutMovieFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CreateShortcutMovieFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hlO&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>,
<argument><expr>&amp;<name>createMovieFileFlags</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>targetDataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>targetDataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CreateShortcutMovieFile</name><argument_list>(<argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>,
<argument><expr><name>createMovieFileFlags</name></expr></argument>,
<argument><expr><name>targetDataRef</name></expr></argument>,
<argument><expr><name>targetDataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CanQuickTimeOpenFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fileSpec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileNameExtension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outCanOpenWithGraphicsImporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outCanOpenAsMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outPreferGraphicsImporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>inFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CanQuickTimeOpenFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CanQuickTimeOpenFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileNameExtension</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CanQuickTimeOpenFile</name><argument_list>(<argument><expr>&amp;<name>fileSpec</name></expr></argument>,
<argument><expr><name>fileType</name></expr></argument>,
<argument><expr><name>fileNameExtension</name></expr></argument>,
<argument><expr>&amp;<name>outCanOpenWithGraphicsImporter</name></expr></argument>,
<argument><expr>&amp;<name>outCanOpenAsMovie</name></expr></argument>,
<argument><expr>&amp;<name>outPreferGraphicsImporter</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bbb"</expr></argument>,
<argument><expr><name>outCanOpenWithGraphicsImporter</name></expr></argument>,
<argument><expr><name>outCanOpenAsMovie</name></expr></argument>,
<argument><expr><name>outPreferGraphicsImporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CanQuickTimeOpenDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outCanOpenWithGraphicsImporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outCanOpenAsMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>outPreferGraphicsImporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>inFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CanQuickTimeOpenDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CanQuickTimeOpenDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CanQuickTimeOpenDataRef</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>outCanOpenWithGraphicsImporter</name></expr></argument>,
<argument><expr>&amp;<name>outCanOpenAsMovie</name></expr></argument>,
<argument><expr>&amp;<name>outPreferGraphicsImporter</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"bbb"</expr></argument>,
<argument><expr><name>outCanOpenWithGraphicsImporter</name></expr></argument>,
<argument><expr><name>outCanOpenAsMovie</name></expr></argument>,
<argument><expr><name>outPreferGraphicsImporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewMovieFromScrap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewMovieFromScrap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewMovieFromScrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NewMovieFromScrap</name><argument_list>(<argument><expr><name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTNewAlias</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>minimal</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTNewAlias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTNewAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr>&amp;<name>minimal</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTNewAlias</name><argument_list>(<argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr>&amp;<name>alias</name></expr></argument>,
<argument><expr><name>minimal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_EndFullScreen</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>fullState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>EndFullScreen</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>EndFullScreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"sl"</expr></argument>,
<argument><expr>&amp;<name>fullState</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>EndFullScreen</name><argument_list>(<argument><expr><name>fullState</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_AddSoundDescriptionExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoundDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddSoundDescriptionExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddSoundDescriptionExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>extension</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddSoundDescriptionExtension</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>extension</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetSoundDescriptionExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoundDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetSoundDescriptionExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetSoundDescriptionExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetSoundDescriptionExtension</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr>&amp;<name>extension</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_RemoveSoundDescriptionExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoundDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RemoveSoundDescriptionExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveSoundDescriptionExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>RemoveSoundDescriptionExtension</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTIsStandardParameterDialogEvent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventRecord</name></type> <name>pEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTParameterDialog</name></type> <name>createdDialog</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTIsStandardParameterDialogEvent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTIsStandardParameterDialogEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>createdDialog</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTIsStandardParameterDialogEvent</name><argument_list>(<argument><expr>&amp;<name>pEvent</name></expr></argument>,
<argument><expr><name>createdDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildEventRecord</name></expr></argument>, <argument><expr>&amp;<name>pEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTDismissStandardParameterDialog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTParameterDialog</name></type> <name>createdDialog</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTDismissStandardParameterDialog</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTDismissStandardParameterDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>createdDialog</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTDismissStandardParameterDialog</name><argument_list>(<argument><expr><name>createdDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTStandardParameterDialogDoAction</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTParameterDialog</name></type> <name>createdDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>params</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTStandardParameterDialogDoAction</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTStandardParameterDialogDoAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"lls"</expr></argument>,
<argument><expr>&amp;<name>createdDialog</name></expr></argument>,
<argument><expr>&amp;<name>action</name></expr></argument>,
<argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTStandardParameterDialogDoAction</name><argument_list>(<argument><expr><name>createdDialog</name></expr></argument>,
<argument><expr><name>action</name></expr></argument>,
<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTRegisterAccessKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>accessKeyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>accessKey</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTRegisterAccessKey</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTRegisterAccessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>accessKeyType</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>accessKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTRegisterAccessKey</name><argument_list>(<argument><expr><name>accessKeyType</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>accessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTUnregisterAccessKey</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>accessKeyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>accessKey</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTUnregisterAccessKey</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTUnregisterAccessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>accessKeyType</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>accessKey</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTUnregisterAccessKey</name><argument_list>(<argument><expr><name>accessKeyType</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>accessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetSupportedRestrictions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>inRestrictionClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>outRestrictionIDs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetSupportedRestrictions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetSupportedRestrictions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>inRestrictionClass</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTGetSupportedRestrictions</name><argument_list>(<argument><expr><name>inRestrictionClass</name></expr></argument>,
<argument><expr>&amp;<name>outRestrictionIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>outRestrictionIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTTextToNativeText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theText</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTTextToNativeText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTTextToNativeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theText</name></expr></argument>,
<argument><expr>&amp;<name>encoding</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTTextToNativeText</name><argument_list>(<argument><expr><name>theText</name></expr></argument>,
<argument><expr><name>encoding</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VideoMediaResetStatistics</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VideoMediaResetStatistics</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VideoMediaResetStatistics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VideoMediaResetStatistics</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VideoMediaGetStatistics</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VideoMediaGetStatistics</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VideoMediaGetStatistics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VideoMediaGetStatistics</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VideoMediaGetStallCount</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>stalls</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VideoMediaGetStallCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VideoMediaGetStallCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VideoMediaGetStallCount</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>stalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>stalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VideoMediaSetCodecParameter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>parameterID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>parameterChangeSeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VideoMediaSetCodecParameter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VideoMediaSetCodecParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;lsl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>parameterID</name></expr></argument>,
<argument><expr>&amp;<name>parameterChangeSeed</name></expr></argument>,
<argument><expr>&amp;<name>dataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VideoMediaSetCodecParameter</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>parameterID</name></expr></argument>,
<argument><expr><name>parameterChangeSeed</name></expr></argument>,
<argument><expr><name>dataPtr</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VideoMediaGetCodecParameter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>parameterID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>outParameterData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VideoMediaGetCodecParameter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VideoMediaGetCodecParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>parameterID</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>outParameterData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VideoMediaGetCodecParameter</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>parameterID</name></expr></argument>,
<argument><expr><name>outParameterData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaAddTextSample</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fontNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fontSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Style</name></type> <name>textFace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>textColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>backColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>textJustification</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>textBox</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>displayFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>scrollDelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>rgbHiliteColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaAddTextSample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaAddTextSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;slhhbhllhhl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>text</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr>&amp;<name>fontNumber</name></expr></argument>,
<argument><expr>&amp;<name>fontSize</name></expr></argument>,
<argument><expr>&amp;<name>textFace</name></expr></argument>,
<argument><expr>&amp;<name>textJustification</name></expr></argument>,
<argument><expr>&amp;<name>displayFlags</name></expr></argument>,
<argument><expr>&amp;<name>scrollDelay</name></expr></argument>,
<argument><expr>&amp;<name>hiliteStart</name></expr></argument>,
<argument><expr>&amp;<name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaAddTextSample</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>text</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>fontNumber</name></expr></argument>,
<argument><expr><name>fontSize</name></expr></argument>,
<argument><expr><name>textFace</name></expr></argument>,
<argument><expr>&amp;<name>textColor</name></expr></argument>,
<argument><expr>&amp;<name>backColor</name></expr></argument>,
<argument><expr><name>textJustification</name></expr></argument>,
<argument><expr>&amp;<name>textBox</name></expr></argument>,
<argument><expr><name>displayFlags</name></expr></argument>,
<argument><expr><name>scrollDelay</name></expr></argument>,
<argument><expr><name>hiliteStart</name></expr></argument>,
<argument><expr><name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>textColor</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>backColor</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>textBox</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaAddTESample</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TEHandle</name></type> <name>hTE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>backColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>textJustification</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>textBox</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>displayFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>scrollDelay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>rgbHiliteColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaAddTESample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaAddTESample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hllhhl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>hTE</name></expr></argument>,
<argument><expr>&amp;<name>textJustification</name></expr></argument>,
<argument><expr>&amp;<name>displayFlags</name></expr></argument>,
<argument><expr>&amp;<name>scrollDelay</name></expr></argument>,
<argument><expr>&amp;<name>hiliteStart</name></expr></argument>,
<argument><expr>&amp;<name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaAddTESample</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>hTE</name></expr></argument>,
<argument><expr>&amp;<name>backColor</name></expr></argument>,
<argument><expr><name>textJustification</name></expr></argument>,
<argument><expr>&amp;<name>textBox</name></expr></argument>,
<argument><expr><name>displayFlags</name></expr></argument>,
<argument><expr><name>scrollDelay</name></expr></argument>,
<argument><expr><name>hiliteStart</name></expr></argument>,
<argument><expr><name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>backColor</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>textBox</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaAddHiliteSample</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>rgbHiliteColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaAddHiliteSample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaAddHiliteSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>hiliteStart</name></expr></argument>,
<argument><expr>&amp;<name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaAddHiliteSample</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>hiliteStart</name></expr></argument>,
<argument><expr><name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaDrawRaw</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>gw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextDescriptionHandle</name></type> <name>tdh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaDrawRaw</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaDrawRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;slO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>GWorldObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gw</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tdh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaDrawRaw</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>gw</name></expr></argument>,
<argument><expr><name>gd</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>,
<argument><expr><name>tdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaSetTextProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atMediaTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaSetTextProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaSetTextProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llsl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>atMediaTime</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaSetTextProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>atMediaTime</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaRawSetup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>gw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextDescriptionHandle</name></type> <name>tdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaRawSetup</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaRawSetup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;slO&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>GWorldObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gw</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tdh</name></expr></argument>,
<argument><expr>&amp;<name>sampleDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaRawSetup</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>gw</name></expr></argument>,
<argument><expr><name>gd</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>,
<argument><expr><name>tdh</name></expr></argument>,
<argument><expr><name>sampleDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaRawIdle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>gw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaRawIdle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaRawIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>GWorldObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gw</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>,
<argument><expr>&amp;<name>flagsIn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaRawIdle</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>gw</name></expr></argument>,
<argument><expr><name>gd</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>,
<argument><expr><name>flagsIn</name></expr></argument>,
<argument><expr>&amp;<name>flagsOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flagsOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaGetTextProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atMediaTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaGetTextProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaGetTextProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llsl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>atMediaTime</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaGetTextProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>atMediaTime</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaFindNextText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>findFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>foundTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>foundDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaFindNextText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaFindNextText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;slhl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>text</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr>&amp;<name>findFlags</name></expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaFindNextText</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>text</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>findFlags</name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>foundTime</name></expr></argument>,
<argument><expr>&amp;<name>foundDuration</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>foundTime</name></expr></argument>,
<argument><expr><name>foundDuration</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaHiliteTextSample</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>sampleTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>hiliteEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>rgbHiliteColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaHiliteTextSample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaHiliteTextSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lhh"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>sampleTime</name></expr></argument>,
<argument><expr>&amp;<name>hiliteStart</name></expr></argument>,
<argument><expr>&amp;<name>hiliteEnd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaHiliteTextSample</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>sampleTime</name></expr></argument>,
<argument><expr><name>hiliteStart</name></expr></argument>,
<argument><expr><name>hiliteEnd</name></expr></argument>,
<argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>rgbHiliteColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextMediaSetTextSampleData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextMediaSetTextSampleData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextMediaSetTextSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextMediaSetTextSampleData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaSetProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>spriteIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>propertyValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaSetProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaSetProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteIndex</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>propertyValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaSetProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteIndex</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>spriteIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>propertyValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteIndex</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>propertyValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteIndex</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaHitTestSprites</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>spriteHitIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaHitTestSprites</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaHitTestSprites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>loc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaHitTestSprites</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>loc</name></expr></argument>,
<argument><expr>&amp;<name>spriteHitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>spriteHitIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaCountSprites</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numSprites</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaCountSprites</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaCountSprites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaCountSprites</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>numSprites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>numSprites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaCountImages</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numImages</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaCountImages</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaCountImages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaCountImages</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>numImages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>numImages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetIndImageDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>imageDescription</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetIndImageDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetIndImageDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>imageDescription</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetIndImageDescription</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>,
<argument><expr><name>imageDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetDisplayedSampleNumber</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetDisplayedSampleNumber</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetDisplayedSampleNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetDisplayedSampleNumber</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>sampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>sampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetSpriteName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>spriteName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetSpriteName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetSpriteName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>spriteName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetSpriteName</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>,
<argument><expr><name>spriteName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetImageName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>imageName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetImageName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetImageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>imageName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetImageName</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>,
<argument><expr><name>imageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaSetSpriteProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>propertyValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaSetSpriteProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaSetSpriteProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>propertyValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaSetSpriteProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetSpriteProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>propertyValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetSpriteProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetSpriteProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>propertyValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetSpriteProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaHitTestAllSprites</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteHitID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaHitTestAllSprites</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaHitTestAllSprites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>loc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaHitTestAllSprites</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>loc</name></expr></argument>,
<argument><expr>&amp;<name>spriteHitID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>spriteHitID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaHitTestOneSprite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>wasHit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaHitTestOneSprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaHitTestOneSprite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>loc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaHitTestOneSprite</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>loc</name></expr></argument>,
<argument><expr>&amp;<name>wasHit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>wasHit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaSpriteIndexToID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>spriteIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaSpriteIndexToID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaSpriteIndexToID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaSpriteIndexToID</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteIndex</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaSpriteIDToIndex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>spriteIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaSpriteIDToIndex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaSpriteIDToIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaSpriteIDToIndex</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>,
<argument><expr>&amp;<name>spriteIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>spriteIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaSetActionVariable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>variableID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaSetActionVariable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaSetActionVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lf"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>variableID</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaSetActionVariable</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>variableID</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetActionVariable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>variableID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetActionVariable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetActionVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>variableID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetActionVariable</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>variableID</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lf"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaDisposeSprite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>spriteID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaDisposeSprite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaDisposeSprite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>spriteID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaDisposeSprite</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>spriteID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaSetActionVariableToString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>variableID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>theCString</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaSetActionVariableToString</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaSetActionVariableToString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>variableID</name></expr></argument>,
<argument><expr>&amp;<name>theCString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaSetActionVariableToString</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>variableID</name></expr></argument>,
<argument><expr><name>theCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaGetActionVariableAsString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>variableID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theCString</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaGetActionVariableAsString</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaGetActionVariableAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>variableID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaGetActionVariableAsString</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>variableID</name></expr></argument>,
<argument><expr>&amp;<name>theCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theCString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaNewImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>desiredID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaNewImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaNewImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>desiredID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaNewImage</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>desiredID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaDisposeImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaDisposeImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaDisposeImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaDisposeImage</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaImageIndexToID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>imageID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaImageIndexToID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaImageIndexToID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaImageIndexToID</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>,
<argument><expr>&amp;<name>imageID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>imageID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SpriteMediaImageIDToIndex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTAtomID</name></type> <name>imageID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SpriteMediaImageIDToIndex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SpriteMediaImageIDToIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>imageID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SpriteMediaImageIDToIndex</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>imageID</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaSetPan</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>xPercent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>yPercent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaSetPan</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaSetPan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>xPercent</name></expr></argument>,
<argument><expr>&amp;<name>yPercent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaSetPan</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>xPercent</name></expr></argument>,
<argument><expr><name>yPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaSetZoom</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>factor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaSetZoom</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaSetZoom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>factor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaSetZoom</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaSetZoomRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bottom</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaSetZoomRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaSetZoomRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>left</name></expr></argument>,
<argument><expr>&amp;<name>top</name></expr></argument>,
<argument><expr>&amp;<name>right</name></expr></argument>,
<argument><expr>&amp;<name>bottom</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaSetZoomRect</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>left</name></expr></argument>,
<argument><expr><name>top</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>,
<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaGetRefConBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bottom</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaGetRefConBounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaGetRefConBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaGetRefConBounds</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>,
<argument><expr>&amp;<name>left</name></expr></argument>,
<argument><expr>&amp;<name>top</name></expr></argument>,
<argument><expr>&amp;<name>right</name></expr></argument>,
<argument><expr>&amp;<name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lllll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>left</name></expr></argument>,
<argument><expr><name>top</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>,
<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaGetRefConID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refConID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaGetRefConID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaGetRefConID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaGetRefConID</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>,
<argument><expr>&amp;<name>refConID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>refConID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaIDToRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refConID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaIDToRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaIDToRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>refConID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaIDToRefCon</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>refConID</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaGetDisplayedFrameNumber</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flashFrameNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaGetDisplayedFrameNumber</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaGetDisplayedFrameNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaGetDisplayedFrameNumber</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flashFrameNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flashFrameNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaFrameNumberToMovieTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flashFrameNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>movieTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaFrameNumberToMovieTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaFrameNumberToMovieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flashFrameNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaFrameNumberToMovieTime</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flashFrameNumber</name></expr></argument>,
<argument><expr>&amp;<name>movieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>movieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaFrameLabelToMovieTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>theLabel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>movieTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaFrameLabelToMovieTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaFrameLabelToMovieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>theLabel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaFrameLabelToMovieTime</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>theLabel</name></expr></argument>,
<argument><expr>&amp;<name>movieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>movieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaGetFlashVariable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theVariableCStringOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaGetFlashVariable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaGetFlashVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaGetFlashVariable</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>path</name></expr></argument>,
<argument><expr>&amp;<name>name</name></expr></argument>,
<argument><expr>&amp;<name>theVariableCStringOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lccO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theVariableCStringOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaSetFlashVariable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>updateFocus</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaSetFlashVariable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaSetFlashVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>updateFocus</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaSetFlashVariable</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>path</name></expr></argument>,
<argument><expr>&amp;<name>name</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>,
<argument><expr><name>updateFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lccc"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaDoButtonActions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>buttonID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>transition</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaDoButtonActions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaDoButtonActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>buttonID</name></expr></argument>,
<argument><expr>&amp;<name>transition</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaDoButtonActions</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>path</name></expr></argument>,
<argument><expr><name>buttonID</name></expr></argument>,
<argument><expr><name>transition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lc"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FlashMediaGetSupportedSwfVersion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt8</name></type> <name>swfVersion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FlashMediaGetSupportedSwfVersion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FlashMediaGetSupportedSwfVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FlashMediaGetSupportedSwfVersion</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>swfVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>swfVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DGetCurrentGroup</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>group</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DGetCurrentGroup</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DGetCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DGetCurrentGroup</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DTranslateNamedObjectTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>objectName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>z</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DTranslateNamedObjectTo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DTranslateNamedObjectTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>z</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DTranslateNamedObjectTo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>objectName</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>,
<argument><expr><name>y</name></expr></argument>,
<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lc"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DScaleNamedObjectTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>objectName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>xScale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>yScale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>zScale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DScaleNamedObjectTo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DScaleNamedObjectTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>xScale</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>yScale</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>zScale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DScaleNamedObjectTo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>objectName</name></expr></argument>,
<argument><expr><name>xScale</name></expr></argument>,
<argument><expr><name>yScale</name></expr></argument>,
<argument><expr><name>zScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lc"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DRotateNamedObjectTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>objectName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>xDegrees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>yDegrees</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>zDegrees</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DRotateNamedObjectTo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DRotateNamedObjectTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>xDegrees</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>yDegrees</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>zDegrees</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DRotateNamedObjectTo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>objectName</name></expr></argument>,
<argument><expr><name>xDegrees</name></expr></argument>,
<argument><expr><name>yDegrees</name></expr></argument>,
<argument><expr><name>zDegrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lc"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DSetCameraData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>cameraData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DSetCameraData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DSetCameraData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>cameraData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DSetCameraData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>cameraData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DGetCameraData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>cameraData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DGetCameraData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DGetCameraData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>cameraData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DGetCameraData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>cameraData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DSetCameraAngleAspect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTFloatSingle</name></type> <name>fov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTFloatSingle</name></type> <name>aspectRatioXToY</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DSetCameraAngleAspect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DSetCameraAngleAspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ff"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>fov</name></expr></argument>,
<argument><expr>&amp;<name>aspectRatioXToY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DSetCameraAngleAspect</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>fov</name></expr></argument>,
<argument><expr><name>aspectRatioXToY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DGetCameraAngleAspect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTFloatSingle</name></type> <name>fov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTFloatSingle</name></type> <name>aspectRatioXToY</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DGetCameraAngleAspect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DGetCameraAngleAspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DGetCameraAngleAspect</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>fov</name></expr></argument>,
<argument><expr>&amp;<name>aspectRatioXToY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lff"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>fov</name></expr></argument>,
<argument><expr><name>aspectRatioXToY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DSetCameraRange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>tQ3CameraRange</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DSetCameraRange</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DSetCameraRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>tQ3CameraRange</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DSetCameraRange</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>tQ3CameraRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_Media3DGetCameraRange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>tQ3CameraRange</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>Media3DGetCameraRange</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>Media3DGetCameraRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>tQ3CameraRange</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>Media3DGetCameraRange</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>tQ3CameraRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NewTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>_rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NewTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NewTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NewTimeBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ConvertTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>theTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>newBase</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ConvertTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ConvertTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>theTime</name></expr></argument>,
<argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>newBase</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ConvertTime</name><argument_list>(<argument><expr>&amp;<name>theTime</name></expr></argument>,
<argument><expr><name>newBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>theTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ConvertTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>theTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>newScale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ConvertTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ConvertTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>theTime</name></expr></argument>,
<argument><expr>&amp;<name>newScale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ConvertTimeScale</name><argument_list>(<argument><expr>&amp;<name>theTime</name></expr></argument>,
<argument><expr><name>newScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>theTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_AddTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>AddTime</name><argument_list>(<argument><expr>&amp;<name>dst</name></expr></argument>,
<argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SubtractTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SubtractTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SubtractTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SubtractTime</name><argument_list>(<argument><expr>&amp;<name>dst</name></expr></argument>,
<argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicMediaGetIndexedTunePlayer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ti</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleDescIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicMediaGetIndexedTunePlayer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicMediaGetIndexedTunePlayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ti</name></expr></argument>,
<argument><expr>&amp;<name>sampleDescIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicMediaGetIndexedTunePlayer</name><argument_list>(<argument><expr><name>ti</name></expr></argument>,
<argument><expr><name>sampleDescIndex</name></expr></argument>,
<argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CodecManagerVersion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>version</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CodecManagerVersion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CodecManagerVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CodecManagerVersion</name><argument_list>(<argument><expr>&amp;<name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetMaxCompressionSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>colorDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompressorComponent</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetMaxCompressionSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetMaxCompressionSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hlO&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>colorDepth</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetMaxCompressionSize</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>colorDepth</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>codec</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetCompressionTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>colorDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompressorComponent</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>temporalQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>compressTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetCompressionTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetCompressionTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hO&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>colorDepth</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetCompressionTime</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>colorDepth</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>codec</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>,
<argument><expr>&amp;<name>temporalQuality</name></expr></argument>,
<argument><expr>&amp;<name>compressTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>,
<argument><expr><name>temporalQuality</name></expr></argument>,
<argument><expr><name>compressTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompressImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompressImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompressImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;lO&amp;O&amp;s"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CompressImage</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DecompressImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>mask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DecompressImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DecompressImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"sO&amp;O&amp;O&amp;O&amp;hO&amp;"</expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dst</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>,
<argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>DecompressImage</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>dstRect</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetSimilarity</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>similarity</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetSimilarity</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetSimilarity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;s"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetSimilarity</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr>&amp;<name>similarity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>similarity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetImageDescriptionCTable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>ctable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetImageDescriptionCTable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetImageDescriptionCTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetImageDescriptionCTable</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr>&amp;<name>ctable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>ctable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SetImageDescriptionCTable</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>ctable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SetImageDescriptionCTable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SetImageDescriptionCTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ctable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>SetImageDescriptionCTable</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>ctable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetImageDescriptionExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetImageDescriptionExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetImageDescriptionExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>idType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetImageDescriptionExtension</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr>&amp;<name>extension</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_AddImageDescriptionExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddImageDescriptionExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddImageDescriptionExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>extension</name></expr></argument>,
<argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddImageDescriptionExtension</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>extension</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_RemoveImageDescriptionExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RemoveImageDescriptionExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>RemoveImageDescriptionExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>idType</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>RemoveImageDescriptionExtension</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CountImageDescriptionExtensionType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CountImageDescriptionExtensionType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CountImageDescriptionExtensionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CountImageDescriptionExtensionType</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>,
<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetNextImageDescriptionExtensionType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetNextImageDescriptionExtensionType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetNextImageDescriptionExtensionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetNextImageDescriptionExtensionType</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
<argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FindCodec</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecComponent</name></type> <name>specCodec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompressorComponent</name></type> <name>compressor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecompressorComponent</name></type> <name>decompressor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FindCodec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FindCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>specCodec</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>FindCodec</name><argument_list>(<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>specCodec</name></expr></argument>,
<argument><expr>&amp;<name>compressor</name></expr></argument>,
<argument><expr>&amp;<name>decompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>compressor</name></expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>decompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompressPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>srcPicture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>dstPicture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompressPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompressPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcPicture</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstPicture</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CompressPicture</name><argument_list>(<argument><expr><name>srcPicture</name></expr></argument>,
<argument><expr><name>dstPicture</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompressPictureFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>srcRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>dstRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompressPictureFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompressPictureFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hhlO&amp;"</expr></argument>,
<argument><expr>&amp;<name>srcRefNum</name></expr></argument>,
<argument><expr>&amp;<name>dstRefNum</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CompressPictureFile</name><argument_list>(<argument><expr><name>srcRefNum</name></expr></argument>,
<argument><expr><name>dstRefNum</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ConvertImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>srcDD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>srcData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>colorDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>ctable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>accuracy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecType</name></type> <name>cType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecComponent</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>dstDD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>dstData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ConvertImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ConvertImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;shO&amp;llO&amp;O&amp;O&amp;s"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcDD</name></expr></argument>,
<argument><expr>&amp;<name>srcData</name></expr></argument>,
<argument><expr>&amp;<name>colorDepth</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ctable</name></expr></argument>,
<argument><expr>&amp;<name>accuracy</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>cType</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>codec</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstDD</name></expr></argument>,
<argument><expr>&amp;<name>dstData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>ConvertImage</name><argument_list>(<argument><expr><name>srcDD</name></expr></argument>,
<argument><expr><name>srcData</name></expr></argument>,
<argument><expr><name>colorDepth</name></expr></argument>,
<argument><expr><name>ctable</name></expr></argument>,
<argument><expr><name>accuracy</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>,
<argument><expr><name>cType</name></expr></argument>,
<argument><expr><name>codec</name></expr></argument>,
<argument><expr><name>dstDD</name></expr></argument>,
<argument><expr><name>dstData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_AddFilePreview</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>previewType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>previewData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AddFilePreview</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AddFilePreview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"hO&amp;O&amp;"</expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>previewType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>previewData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>AddFilePreview</name><argument_list>(<argument><expr><name>resRefNum</name></expr></argument>,
<argument><expr><name>previewType</name></expr></argument>,
<argument><expr><name>previewData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetBestDeviceRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>rp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetBestDeviceRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetBestDeviceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetBestDeviceRect</name><argument_list>(<argument><expr>&amp;<name>gdh</name></expr></argument>,
<argument><expr>&amp;<name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>OptResObj_New</name></expr></argument>, <argument><expr><name>gdh</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GDHasScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GDHasScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GDHasScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GDHasScale</name><argument_list>(<argument><expr><name>gdh</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GDGetScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GDGetScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GDGetScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GDGetScale</name><argument_list>(<argument><expr><name>gdh</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GDSetScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GDSetScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GDSetScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gdh</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>scale</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GDSetScale</name><argument_list>(<argument><expr><name>gdh</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetGraphicsImporterForFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>gi</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetGraphicsImporterForFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetGraphicsImporterForFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetGraphicsImporterForFile</name><argument_list>(<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr>&amp;<name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetGraphicsImporterForDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>gi</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetGraphicsImporterForDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetGraphicsImporterForDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetGraphicsImporterForDataRef</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetGraphicsImporterForFileWithFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>gi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetGraphicsImporterForFileWithFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetGraphicsImporterForFileWithFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetGraphicsImporterForFileWithFlags</name><argument_list>(<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr>&amp;<name>gi</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GetGraphicsImporterForDataRefWithFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>gi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GetGraphicsImporterForDataRefWithFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GetGraphicsImporterForDataRefWithFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetGraphicsImporterForDataRefWithFlags</name><argument_list>(<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>gi</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>gi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MakeImageDescriptionForPixMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pixmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>idh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MakeImageDescriptionForPixMap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MakeImageDescriptionForPixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pixmap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>MakeImageDescriptionForPixMap</name><argument_list>(<argument><expr><name>pixmap</name></expr></argument>,
<argument><expr>&amp;<name>idh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>idh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MakeImageDescriptionForEffect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>effectType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>idh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MakeImageDescriptionForEffect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MakeImageDescriptionForEffect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>effectType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>MakeImageDescriptionForEffect</name><argument_list>(<argument><expr><name>effectType</name></expr></argument>,
<argument><expr>&amp;<name>idh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>idh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetPixelSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>PixelFormat</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetPixelSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetPixelSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>PixelFormat</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTGetPixelSize</name><argument_list>(<argument><expr><name>PixelFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetPixelFormatDepthForImageDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>PixelFormat</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetPixelFormatDepthForImageDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetPixelFormatDepthForImageDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>PixelFormat</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTGetPixelFormatDepthForImageDescription</name><argument_list>(<argument><expr><name>PixelFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetPixMapHandleRowBytes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetPixMapHandleRowBytes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetPixMapHandleRowBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTGetPixMapHandleRowBytes</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTSetPixMapHandleRowBytes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rowBytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTSetPixMapHandleRowBytes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTSetPixMapHandleRowBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>,
<argument><expr>&amp;<name>rowBytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTSetPixMapHandleRowBytes</name><argument_list>(<argument><expr><name>pm</name></expr></argument>,
<argument><expr><name>rowBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetPixMapHandleGammaLevel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetPixMapHandleGammaLevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetPixMapHandleGammaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTGetPixMapHandleGammaLevel</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTSetPixMapHandleGammaLevel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>gammaLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTSetPixMapHandleGammaLevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTSetPixMapHandleGammaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>gammaLevel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTSetPixMapHandleGammaLevel</name><argument_list>(<argument><expr><name>pm</name></expr></argument>,
<argument><expr><name>gammaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTGetPixMapHandleRequestedGammaLevel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTGetPixMapHandleRequestedGammaLevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTGetPixMapHandleRequestedGammaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTGetPixMapHandleRequestedGammaLevel</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTSetPixMapHandleRequestedGammaLevel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSErr</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>requestedGammaLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTSetPixMapHandleRequestedGammaLevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTSetPixMapHandleRequestedGammaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pm</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>requestedGammaLevel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>QTSetPixMapHandleRequestedGammaLevel</name><argument_list>(<argument><expr><name>pm</name></expr></argument>,
<argument><expr><name>requestedGammaLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompAdd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompAdd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompAdd</name><argument_list>(<argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompSub</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompSub</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompSub</name><argument_list>(<argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompNeg</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompNeg</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompNeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompNeg</name><argument_list>(<argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompShift</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>shift</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompShift</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompShift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"h"</expr></argument>,
<argument><expr>&amp;<name>shift</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompShift</name><argument_list>(<argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompMul</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompMul</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompMul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>src1</name></expr></argument>,
<argument><expr>&amp;<name>src2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompMul</name><argument_list>(<argument><expr><name>src1</name></expr></argument>,
<argument><expr><name>src2</name></expr></argument>,
<argument><expr>&amp;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompDiv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>numerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>denominator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>remainder</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompDiv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompDiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>denominator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>CompDiv</name><argument_list>(<argument><expr>&amp;<name>numerator</name></expr></argument>,
<argument><expr><name>denominator</name></expr></argument>,
<argument><expr>&amp;<name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>numerator</name></expr></argument>,
<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompFixMul</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>compSrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>fixSrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>compDst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompFixMul</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompFixMul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>fixSrc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompFixMul</name><argument_list>(<argument><expr>&amp;<name>compSrc</name></expr></argument>,
<argument><expr><name>fixSrc</name></expr></argument>,
<argument><expr>&amp;<name>compDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>compSrc</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>compDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompMulDiv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>co</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>divisor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompMulDiv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompMulDiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>mul</name></expr></argument>,
<argument><expr>&amp;<name>divisor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompMulDiv</name><argument_list>(<argument><expr>&amp;<name>co</name></expr></argument>,
<argument><expr><name>mul</name></expr></argument>,
<argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompMulDivTrunc</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>co</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>divisor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>remainder</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompMulDivTrunc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompMulDivTrunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"ll"</expr></argument>,
<argument><expr>&amp;<name>mul</name></expr></argument>,
<argument><expr>&amp;<name>divisor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>CompMulDivTrunc</name><argument_list>(<argument><expr>&amp;<name>co</name></expr></argument>,
<argument><expr><name>mul</name></expr></argument>,
<argument><expr><name>divisor</name></expr></argument>,
<argument><expr>&amp;<name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>co</name></expr></argument>,
<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompCompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>minusb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompCompare</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>a</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>minusb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>CompCompare</name><argument_list>(<argument><expr>&amp;<name>a</name></expr></argument>,
<argument><expr>&amp;<name>minusb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_CompSquareRoot</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CompSquareRoot</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>CompSquareRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>CompSquareRoot</name><argument_list>(<argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FixMulDiv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>mul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>divisor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FixMulDiv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FixMulDiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>mul</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>divisor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FixMulDiv</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr><name>mul</name></expr></argument>,
<argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_UnsignedFixMulDiv</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>mul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>divisor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UnsignedFixMulDiv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>UnsignedFixMulDiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>mul</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>divisor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>UnsignedFixMulDiv</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr><name>mul</name></expr></argument>,
<argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FixExp2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FixExp2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FixExp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FixExp2</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FixLog2</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FixLog2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FixLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FixLog2</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_FixPow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>exp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FixPow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>FixPow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>base</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>exp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>FixPow</name><argument_list>(<argument><expr><name>base</name></expr></argument>,
<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataReType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataReType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataReType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataReType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataReType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataReType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetDataFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetDataFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetDataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetDataFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetDataHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetDataHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetDataHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetDataHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetImageDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetImageDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetImageDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetImageDescription</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataOffsetAndSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataOffsetAndSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataOffsetAndSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataOffsetAndSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportReadData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportReadData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportReadData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportReadData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataPtr</name></expr></argument>,
<argument><expr><name>dataOffset</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>clipRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clipRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetClip</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>clipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>clipRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetClip</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>clipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>clipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetSourceRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>sourceRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetSourceRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetSourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>sourceRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetSourceRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>sourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetSourceRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>sourceRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetSourceRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetSourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetSourceRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>sourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>sourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetNaturalBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>naturalBounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetNaturalBounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetNaturalBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetNaturalBounds</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>naturalBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>naturalBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportDraw</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportDraw</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportDraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportDraw</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetGWorld</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>port</name></expr></argument>,
<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetGWorld</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>port</name></expr></argument>,
<argument><expr>&amp;<name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><name>OptResObj_New</name></expr></argument>, <argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetBoundsRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetBoundsRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetBoundsRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetBoundsRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetBoundsRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetBoundsRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetBoundsRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetBoundsRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSaveAsPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSaveAsPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSaveAsPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSaveAsPicture</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetGraphicsMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>graphicsMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>opColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetGraphicsMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetGraphicsMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>graphicsMode</name></expr></argument>,
<argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetGraphicsMode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>graphicsMode</name></expr></argument>,
<argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetGraphicsMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>graphicsMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>opColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetGraphicsMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetGraphicsMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetGraphicsMode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>graphicsMode</name></expr></argument>,
<argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>graphicsMode</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetQuality</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetQuality</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetQuality</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetQuality</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>quality</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetQuality</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetQuality</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSaveAsQuickTimeImageFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSaveAsQuickTimeImageFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSaveAsQuickTimeImageFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSaveAsQuickTimeImageFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetDataReferenceOffsetAndLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetDataReferenceOffsetAndLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetDataReferenceOffsetAndLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetDataReferenceOffsetAndLimit</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataReferenceOffsetAndLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataReferenceOffsetAndLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataReferenceOffsetAndLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataReferenceOffsetAndLimit</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetAliasedDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetAliasedDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetAliasedDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetAliasedDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportValidate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>valid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportValidate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportValidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportValidate</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetMetaData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>userData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetMetaData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetMetaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>userData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetMetaData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetMIMETypeList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainerPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetMIMETypeList</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetMIMETypeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetMIMETypeList</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportDoesDrawAllPixels</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>drawsAllPixels</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportDoesDrawAllPixels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportDoesDrawAllPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportDoesDrawAllPixels</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>drawsAllPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>drawsAllPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetAsPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>picture</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetAsPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetAsPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetAsPicture</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportExportImageFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileCreator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>fss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportExportImageFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportExportImageFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileCreator</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportExportImageFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>fileType</name></expr></argument>,
<argument><expr><name>fileCreator</name></expr></argument>,
<argument><expr>&amp;<name>fss</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetExportImageTypeList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainerPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetExportImageTypeList</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetExportImageTypeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetExportImageTypeList</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetExportSettingsAsAtomContainer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainerPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetExportSettingsAsAtomContainer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetExportSettingsAsAtomContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetExportSettingsAsAtomContainer</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetExportSettingsFromAtomContainer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetExportSettingsFromAtomContainer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetExportSettingsFromAtomContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetExportSettingsFromAtomContainer</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetImageCount</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>imageCount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetImageCount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetImageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetImageCount</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>imageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>imageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetImageIndex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetImageIndex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetImageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetImageIndex</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetImageIndex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>imageIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetImageIndex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetImageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetImageIndex</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>imageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>imageIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataOffsetAndSize64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataOffsetAndSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataOffsetAndSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataOffsetAndSize64</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportReadData64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportReadData64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportReadData64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sO&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataPtr</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportReadData64</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetDataReferenceOffsetAndLimit64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetDataReferenceOffsetAndLimit64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetDataReferenceOffsetAndLimit64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetDataReferenceOffsetAndLimit64</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDataReferenceOffsetAndLimit64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDataReferenceOffsetAndLimit64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDataReferenceOffsetAndLimit64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDataReferenceOffsetAndLimit64</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDefaultClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>defaultRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDefaultClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDefaultClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDefaultClip</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>defaultRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>defaultRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDefaultGraphicsMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>defaultGraphicsMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>defaultOpColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDefaultGraphicsMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDefaultGraphicsMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDefaultGraphicsMode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>defaultGraphicsMode</name></expr></argument>,
<argument><expr>&amp;<name>defaultOpColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>defaultGraphicsMode</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>defaultOpColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDefaultSourceRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>defaultSourceRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDefaultSourceRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDefaultSourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDefaultSourceRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>defaultSourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>defaultSourceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetColorSyncProfile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>profile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetColorSyncProfile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetColorSyncProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetColorSyncProfile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetDestRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>destRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetDestRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetDestRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>destRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetDestRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>destRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetDestRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>destRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetDestRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetDestRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetDestRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>destRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>destRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportGetBaseDataOffsetAndSize64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportGetBaseDataOffsetAndSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportGetBaseDataOffsetAndSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportGetBaseDataOffsetAndSize64</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImportSetImageIndexToThumbnail</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImportSetImageIndexToThumbnail</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImportSetImageIndexToThumbnail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImportSetImageIndexToThumbnail</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportDoExport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>actualSizeWritten</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportDoExport</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportDoExport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportDoExport</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>actualSizeWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>actualSizeWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportCanTranscode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>canTranscode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportCanTranscode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportCanTranscode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportCanTranscode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>canTranscode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>canTranscode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportDoTranscode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportDoTranscode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportDoTranscode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportDoTranscode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportCanUseCompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>canUseCompressor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>codecSettingsAtomContainerPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportCanUseCompressor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportCanUseCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>codecSettingsAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportCanUseCompressor</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>canUseCompressor</name></expr></argument>,
<argument><expr><name>codecSettingsAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>canUseCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportDoUseCompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>codecSettingsAtomContainer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>outDesc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportDoUseCompressor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportDoUseCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>codecSettingsAtomContainer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportDoUseCompressor</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>codecSettingsAtomContainer</name></expr></argument>,
<argument><expr>&amp;<name>outDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>outDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportDoStandaloneExport</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportDoStandaloneExport</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportDoStandaloneExport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportDoStandaloneExport</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetDefaultFileTypeAndCreator</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileCreator</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetDefaultFileTypeAndCreator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetDefaultFileTypeAndCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetDefaultFileTypeAndCreator</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fileType</name></expr></argument>,
<argument><expr>&amp;<name>fileCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileType</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetDefaultFileNameExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileNameExtension</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetDefaultFileNameExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetDefaultFileNameExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetDefaultFileNameExtension</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fileNameExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileNameExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetMIMETypeList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainerPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetMIMETypeList</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetMIMETypeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetMIMETypeList</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetSettingsFromAtomContainer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetSettingsFromAtomContainer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetSettingsFromAtomContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetSettingsFromAtomContainer</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetSettingsAsAtomContainer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>qtAtomContainerPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetSettingsAsAtomContainer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetSettingsAsAtomContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetSettingsAsAtomContainer</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>qtAtomContainerPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetSettingsAsText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theText</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetSettingsAsText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetSettingsAsText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetSettingsAsText</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetDontRecompress</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dontRecompress</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetDontRecompress</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetDontRecompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dontRecompress</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetDontRecompress</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dontRecompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetDontRecompress</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dontRecompress</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetDontRecompress</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetDontRecompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetDontRecompress</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dontRecompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>dontRecompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInterlaceStyle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>interlaceStyle</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInterlaceStyle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInterlaceStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>interlaceStyle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInterlaceStyle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>interlaceStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInterlaceStyle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>interlaceStyle</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInterlaceStyle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInterlaceStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInterlaceStyle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>interlaceStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>interlaceStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetMetaData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>userData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetMetaData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetMetaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>userData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetMetaData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetMetaData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>userData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetMetaData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetMetaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>userData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetMetaData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetTargetDataSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>targetDataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetTargetDataSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetTargetDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>targetDataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetTargetDataSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>targetDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetTargetDataSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>targetDataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetTargetDataSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetTargetDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetTargetDataSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>targetDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>targetDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetCompressionMethod</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>compressionMethod</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetCompressionMethod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetCompressionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>compressionMethod</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetCompressionMethod</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>compressionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetCompressionMethod</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>compressionMethod</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetCompressionMethod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetCompressionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetCompressionMethod</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>compressionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>compressionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetCompressionQuality</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetCompressionQuality</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetCompressionQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetCompressionQuality</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetCompressionQuality</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetCompressionQuality</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetCompressionQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetCompressionQuality</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetResolution</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>horizontalResolution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>verticalResolution</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetResolution</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>horizontalResolution</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>verticalResolution</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetResolution</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>horizontalResolution</name></expr></argument>,
<argument><expr><name>verticalResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetResolution</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>horizontalResolution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>verticalResolution</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetResolution</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetResolution</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>horizontalResolution</name></expr></argument>,
<argument><expr>&amp;<name>verticalResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>horizontalResolution</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>verticalResolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetDepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depth</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetDepth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetDepth</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetDepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depth</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetDepth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetDepth</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetColorSyncProfile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>colorSyncProfile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetColorSyncProfile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetColorSyncProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>colorSyncProfile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetColorSyncProfile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>colorSyncProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetColorSyncProfile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>colorSyncProfile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetColorSyncProfile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetColorSyncProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetColorSyncProfile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>colorSyncProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>colorSyncProfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputPtr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputPtr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;slO&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputPtr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputGraphicsImporter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>grip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputGraphicsImporter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputGraphicsImporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>grip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputGraphicsImporter</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>grip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputGraphicsImporter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsImportComponent</name></type> <name>grip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputGraphicsImporter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputGraphicsImporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputGraphicsImporter</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>grip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>grip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>picture</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>picture</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputPicture</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>picture</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputPicture</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>gworld</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>GWorldObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gworld</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputGWorld</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>gworld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>gworld</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputGWorld</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>gworld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>GWorldObj_New</name></expr></argument>, <argument><expr><name>gworld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputPixmap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pixmap</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputPixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputPixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>pixmap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputPixmap</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputPixmap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pixmap</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputPixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputPixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputPixmap</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetInputOffsetAndLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetInputOffsetAndLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetInputOffsetAndLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetInputOffsetAndLimit</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputOffsetAndLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputOffsetAndLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputOffsetAndLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputOffsetAndLimit</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportMayExporterReadInputData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>mayReadInputData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportMayExporterReadInputData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportMayExporterReadInputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportMayExporterReadInputData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>mayReadInputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>mayReadInputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputDataSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputDataSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputDataSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportReadInputData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportReadInputData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportReadInputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportReadInputData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataPtr</name></expr></argument>,
<argument><expr><name>dataOffset</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputImageDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputImageDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputImageDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputImageDescription</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputImageDimensions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>dimensions</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputImageDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputImageDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputImageDimensions</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>dimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetInputImageDepth</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inputDepth</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetInputImageDepth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetInputImageDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetInputImageDepth</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>inputDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportDrawInputImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>gw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>dstRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportDrawInputImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportDrawInputImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gw</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportDrawInputImage</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>gw</name></expr></argument>,
<argument><expr><name>gd</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetOutputDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetOutputDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetOutputDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetOutputDataReference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetOutputFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetOutputFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetOutputFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetOutputFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetOutputHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetOutputHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetOutputHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetOutputHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetOutputOffsetAndMaxSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>truncateFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputOffsetAndMaxSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputOffsetAndMaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llb"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>maxSize</name></expr></argument>,
<argument><expr>&amp;<name>truncateFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetOutputOffsetAndMaxSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>maxSize</name></expr></argument>,
<argument><expr><name>truncateFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetOutputOffsetAndMaxSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>truncateFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputOffsetAndMaxSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputOffsetAndMaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetOutputOffsetAndMaxSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>maxSize</name></expr></argument>,
<argument><expr>&amp;<name>truncateFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lllb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>maxSize</name></expr></argument>,
<argument><expr><name>truncateFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetOutputFileTypeAndCreator</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileCreator</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputFileTypeAndCreator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputFileTypeAndCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileCreator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetOutputFileTypeAndCreator</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>fileType</name></expr></argument>,
<argument><expr><name>fileCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetOutputFileTypeAndCreator</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileCreator</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputFileTypeAndCreator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputFileTypeAndCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetOutputFileTypeAndCreator</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fileType</name></expr></argument>,
<argument><expr>&amp;<name>fileCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileType</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetOutputMark</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mark</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputMark</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetOutputMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>mark</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetOutputMark</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetOutputMark</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mark</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputMark</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetOutputMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetOutputMark</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportReadOutputData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportReadOutputData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportReadOutputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataOffset</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportReadOutputData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataPtr</name></expr></argument>,
<argument><expr><name>dataOffset</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetThumbnailEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enableThumbnail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxThumbnailWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxThumbnailHeight</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetThumbnailEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetThumbnailEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;bll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>enableThumbnail</name></expr></argument>,
<argument><expr>&amp;<name>maxThumbnailWidth</name></expr></argument>,
<argument><expr>&amp;<name>maxThumbnailHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetThumbnailEnabled</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>enableThumbnail</name></expr></argument>,
<argument><expr><name>maxThumbnailWidth</name></expr></argument>,
<argument><expr><name>maxThumbnailHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetThumbnailEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>thumbnailEnabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxThumbnailWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxThumbnailHeight</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetThumbnailEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetThumbnailEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetThumbnailEnabled</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>thumbnailEnabled</name></expr></argument>,
<argument><expr>&amp;<name>maxThumbnailWidth</name></expr></argument>,
<argument><expr>&amp;<name>maxThumbnailHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lbll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>thumbnailEnabled</name></expr></argument>,
<argument><expr><name>maxThumbnailWidth</name></expr></argument>,
<argument><expr><name>maxThumbnailHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportSetExifEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enableExif</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportSetExifEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportSetExifEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>enableExif</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportSetExifEnabled</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>enableExif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsExportGetExifEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicsExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>exifEnabled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsExportGetExifEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsExportGetExifEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsExportGetExifEnabled</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>exifEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>exifEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ImageTranscoderBeginSequence</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageTranscoderComponent</name></type> <name>itc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>srcDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>dstDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ImageTranscoderBeginSequence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ImageTranscoderBeginSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;sl"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itc</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcDesc</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>ImageTranscoderBeginSequence</name><argument_list>(<argument><expr><name>itc</name></expr></argument>,
<argument><expr><name>srcDesc</name></expr></argument>,
<argument><expr>&amp;<name>dstDesc</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dstDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ImageTranscoderDisposeData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageTranscoderComponent</name></type> <name>itc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dstData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ImageTranscoderDisposeData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ImageTranscoderDisposeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itc</name></expr></argument>,
<argument><expr>&amp;<name>dstData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>ImageTranscoderDisposeData</name><argument_list>(<argument><expr><name>itc</name></expr></argument>,
<argument><expr><name>dstData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ImageTranscoderEndSequence</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageTranscoderComponent</name></type> <name>itc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ImageTranscoderEndSequence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ImageTranscoderEndSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>itc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>ImageTranscoderEndSequence</name><argument_list>(<argument><expr><name>itc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ClockGetTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aClock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>out</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ClockGetTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClockGetTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aClock</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>ClockGetTime</name><argument_list>(<argument><expr><name>aClock</name></expr></argument>,
<argument><expr>&amp;<name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ClockSetTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aClock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>tb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ClockSetTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClockSetTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aClock</name></expr></argument>,
<argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>ClockSetTimeBase</name><argument_list>(<argument><expr><name>aClock</name></expr></argument>,
<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_ClockGetRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aClock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>ClockGetRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>ClockGetRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aClock</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>ClockGetRate</name><argument_list>(<argument><expr><name>aClock</name></expr></argument>,
<argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCPositionRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCPositionRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCPositionRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCPositionRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>rp</name></expr></argument>,
<argument><expr>&amp;<name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>rp</name></expr></argument>,
<argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCPositionDialog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCPositionDialog</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCPositionDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCPositionDialog</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>,
<argument><expr>&amp;<name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCSetTestImagePictHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>testPict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>testRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>testFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCSetTestImagePictHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCSetTestImagePictHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>testPict</name></expr></argument>,
<argument><expr>&amp;<name>testFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCSetTestImagePictHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>testPict</name></expr></argument>,
<argument><expr>&amp;<name>testRect</name></expr></argument>,
<argument><expr><name>testFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>testRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCSetTestImagePictFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>testFileRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>testRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>testFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCSetTestImagePictFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCSetTestImagePictFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>testFileRef</name></expr></argument>,
<argument><expr>&amp;<name>testFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCSetTestImagePictFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>testFileRef</name></expr></argument>,
<argument><expr>&amp;<name>testRect</name></expr></argument>,
<argument><expr><name>testFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>testRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCSetTestImagePixMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>testPixMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>testRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>testFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCSetTestImagePixMap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCSetTestImagePixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>testPixMap</name></expr></argument>,
<argument><expr>&amp;<name>testFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCSetTestImagePixMap</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>testPixMap</name></expr></argument>,
<argument><expr>&amp;<name>testRect</name></expr></argument>,
<argument><expr><name>testFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>testRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCGetBestDeviceRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCGetBestDeviceRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCGetBestDeviceRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCGetBestDeviceRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCRequestImageSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCRequestImageSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCRequestImageSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCRequestImageSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCCompressImage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCCompressImage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCCompressImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCCompressImage</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCCompressPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>srcPicture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>dstPicture</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCCompressPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCCompressPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcPicture</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dstPicture</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCCompressPicture</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>srcPicture</name></expr></argument>,
<argument><expr><name>dstPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCCompressPictureFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>srcRefNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>dstRefNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCCompressPictureFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCCompressPictureFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>srcRefNum</name></expr></argument>,
<argument><expr>&amp;<name>dstRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCCompressPictureFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>srcRefNum</name></expr></argument>,
<argument><expr><name>dstRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCRequestSequenceSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCRequestSequenceSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCRequestSequenceSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCRequestSequenceSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCCompressSequenceBegin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCCompressSequenceBegin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCCompressSequenceBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCCompressSequenceBegin</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCCompressSequenceFrame</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>dataSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>notSyncFlag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCCompressSequenceFrame</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCCompressSequenceFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCCompressSequenceFrame</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>,
<argument><expr>&amp;<name>notSyncFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>,
<argument><expr><name>notSyncFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCCompressSequenceEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCCompressSequenceEnd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCCompressSequenceEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCCompressSequenceEnd</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCDefaultPictHandleSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>srcPicture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>motion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCDefaultPictHandleSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCDefaultPictHandleSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcPicture</name></expr></argument>,
<argument><expr>&amp;<name>motion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCDefaultPictHandleSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>srcPicture</name></expr></argument>,
<argument><expr><name>motion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCDefaultPictFileSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>srcRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>motion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCDefaultPictFileSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCDefaultPictFileSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>srcRef</name></expr></argument>,
<argument><expr>&amp;<name>motion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCDefaultPictFileSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>srcRef</name></expr></argument>,
<argument><expr><name>motion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCDefaultPixMapSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>motion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCDefaultPixMapSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCDefaultPixMapSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>,
<argument><expr>&amp;<name>motion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCDefaultPixMapSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>,
<argument><expr><name>motion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCGetInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>infoType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCGetInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCGetInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoType</name></expr></argument>,
<argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCGetInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>infoType</name></expr></argument>,
<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCSetInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>infoType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCSetInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCSetInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoType</name></expr></argument>,
<argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCSetInfo</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>infoType</name></expr></argument>,
<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCSetCompressFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCSetCompressFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCSetCompressFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCSetCompressFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCGetCompressFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCGetCompressFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCGetCompressFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCGetCompressFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCGetSettingsAsText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>text</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCGetSettingsAsText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCGetSettingsAsText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCGetSettingsAsText</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SCAsyncIdle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SCAsyncIdle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SCAsyncIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SCAsyncIdle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TweenerReset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TweenerComponent</name></type> <name>tc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TweenerReset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TweenerReset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TweenerReset</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TCGetSourceRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HandlerError</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeCodeDescriptionHandle</name></type> <name>tcdH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>srefH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TCGetSourceRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TCGetSourceRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tcdH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TCGetSourceRef</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>tcdH</name></expr></argument>,
<argument><expr>&amp;<name>srefH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>srefH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TCSetSourceRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HandlerError</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeCodeDescriptionHandle</name></type> <name>tcdH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>srefH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TCSetSourceRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TCSetSourceRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tcdH</name></expr></argument>,
<argument><expr><name>UserDataObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srefH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TCSetSourceRef</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>tcdH</name></expr></argument>,
<argument><expr><name>srefH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TCSetTimeCodeFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HandlerError</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsMask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TCSetTimeCodeFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TCSetTimeCodeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>flagsMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TCSetTimeCodeFlags</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>flagsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TCGetTimeCodeFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HandlerError</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TCGetTimeCodeFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TCGetTimeCodeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TCGetTimeCodeFlags</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>targetTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>usedTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>addedDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataH</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>targetTrack</name></expr></argument>,
<argument><expr>&amp;<name>atTime</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataH</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>targetTrack</name></expr></argument>,
<argument><expr>&amp;<name>usedTrack</name></expr></argument>,
<argument><expr><name>atTime</name></expr></argument>,
<argument><expr>&amp;<name>addedDuration</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>,
<argument><expr>&amp;<name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>usedTrack</name></expr></argument>,
<argument><expr><name>addedDuration</name></expr></argument>,
<argument><expr><name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>targetTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>usedTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>addedDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>targetTrack</name></expr></argument>,
<argument><expr>&amp;<name>atTime</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>targetTrack</name></expr></argument>,
<argument><expr>&amp;<name>usedTrack</name></expr></argument>,
<argument><expr><name>atTime</name></expr></argument>,
<argument><expr>&amp;<name>addedDuration</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>,
<argument><expr>&amp;<name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>usedTrack</name></expr></argument>,
<argument><expr><name>addedDuration</name></expr></argument>,
<argument><expr><name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetSampleDuration</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetSampleDuration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetSampleDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetSampleDuration</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetSampleDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetSampleDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetSampleDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>mediaType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetSampleDescription</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetMediaFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AliasHandle</name></type> <name>alias</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetMediaFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetMediaFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>alias</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetMediaFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetDimensions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetDimensions</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetChunkSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>chunkSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetChunkSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>chunkSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetChunkSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>chunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetAuxiliaryData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>handleType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetAuxiliaryData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetAuxiliaryData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>handleType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetAuxiliaryData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>handleType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetFromScrap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>fromScrap</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetFromScrap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetFromScrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fromScrap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetFromScrap</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>fromScrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportDoUserDialog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>canceled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportDoUserDialog</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportDoUserDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportDoUserDialog</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>theData</name></expr></argument>,
<argument><expr>&amp;<name>canceled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>canceled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetDuration</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetDuration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetDuration</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetAuxiliaryDataType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>auxType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetAuxiliaryDataType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetAuxiliaryDataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetAuxiliaryDataType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>auxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>auxType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportValidate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>valid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportValidate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportValidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportValidate</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>theData</name></expr></argument>,
<argument><expr>&amp;<name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetFileType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetFileType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetFileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetFileType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>targetTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>usedTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>addedDuration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>targetTrack</name></expr></argument>,
<argument><expr>&amp;<name>atTime</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportDataRef</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>targetTrack</name></expr></argument>,
<argument><expr>&amp;<name>usedTrack</name></expr></argument>,
<argument><expr><name>atTime</name></expr></argument>,
<argument><expr>&amp;<name>addedDuration</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>,
<argument><expr>&amp;<name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TrackObj_New</name></expr></argument>, <argument><expr><name>usedTrack</name></expr></argument>,
<argument><expr><name>addedDuration</name></expr></argument>,
<argument><expr><name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetSampleDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetSampleDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetSampleDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetSampleDescription</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr>&amp;<name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetOffsetAndLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetOffsetAndLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetOffsetAndLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetOffsetAndLimit</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetOffsetAndLimit64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetOffsetAndLimit64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetOffsetAndLimit64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetOffsetAndLimit64</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportIdle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportIdle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportIdle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>,
<argument><expr>&amp;<name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>outFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportValidateDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt8</name></type> <name>valid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportValidateDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportValidateDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportValidateDataRef</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetLoadState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>importerLoadState</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetLoadState</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetLoadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetLoadState</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>importerLoadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>importerLoadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetMaxLoadedTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetMaxLoadedTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetMaxLoadedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetMaxLoadedTime</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportEstimateCompletionTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportEstimateCompletionTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportEstimateCompletionTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportEstimateCompletionTime</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetDontBlock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>dontBlock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetDontBlock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetDontBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>dontBlock</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetDontBlock</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dontBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetDontBlock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>willBlock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetDontBlock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetDontBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetDontBlock</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>willBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>willBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetIdleManager</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>im</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetIdleManager</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetIdleManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>IdleManagerObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>im</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetIdleManager</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportSetNewMovieFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>newMovieFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportSetNewMovieFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportSetNewMovieFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportSetNewMovieFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>newMovieFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieImportGetDestinationMediaType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieImportGetDestinationMediaType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieImportGetDestinationMediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieImportGetDestinationMediaType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportToHandle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>onlyThisTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportToHandle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportToHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataH</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>onlyThisTrack</name></expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportToHandle</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataH</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>onlyThisTrack</name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportToFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>onlyThisTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportToFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportToFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>onlyThisTrack</name></expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportToFile</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>theFile</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>onlyThisTrack</name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportGetAuxiliaryData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>handleType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportGetAuxiliaryData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportGetAuxiliaryData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportGetAuxiliaryData</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataH</name></expr></argument>,
<argument><expr>&amp;<name>handleType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>handleType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportSetSampleDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportSetSampleDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportSetSampleDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>mediaType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportSetSampleDescription</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>,
<argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportDoUserDialog</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>onlyThisTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>canceled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportDoUserDialog</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportDoUserDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>onlyThisTrack</name></expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportDoUserDialog</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>onlyThisTrack</name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>,
<argument><expr>&amp;<name>canceled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>canceled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportGetCreatorType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportGetCreatorType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportGetCreatorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportGetCreatorType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportToDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>onlyThisTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>startTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>duration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportToDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportToDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>onlyThisTrack</name></expr></argument>,
<argument><expr>&amp;<name>startTime</name></expr></argument>,
<argument><expr>&amp;<name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportToDataRef</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>onlyThisTrack</name></expr></argument>,
<argument><expr><name>startTime</name></expr></argument>,
<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportFromProceduresToDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportFromProceduresToDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportFromProceduresToDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportFromProceduresToDataRef</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportValidate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Track</name></type> <name>onlyThisTrack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>valid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportValidate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportValidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr><name>TrackObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>onlyThisTrack</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportValidate</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>onlyThisTrack</name></expr></argument>,
<argument><expr>&amp;<name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportGetFileNameExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>extension</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportGetFileNameExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportGetFileNameExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportGetFileNameExtension</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportGetShortFileTypeString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>typeString</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportGetShortFileTypeString</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportGetShortFileTypeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>typeString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportGetShortFileTypeString</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>typeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MovieExportGetSourceMediaType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovieExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>mediaType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MovieExportGetSourceMediaType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MovieExportGetSourceMediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MovieExportGetSourceMediaType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextExportGetTimeFraction</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>movieTimeFraction</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextExportGetTimeFraction</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextExportGetTimeFraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextExportGetTimeFraction</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>movieTimeFraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>movieTimeFraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextExportSetTimeFraction</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>movieTimeFraction</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextExportSetTimeFraction</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextExportSetTimeFraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>movieTimeFraction</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextExportSetTimeFraction</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>movieTimeFraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextExportGetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>setting</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextExportGetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextExportGetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextExportGetSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TextExportSetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>setting</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TextExportSetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TextExportSetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>setting</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TextExportSetSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MIDIImportGetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>setting</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MIDIImportGetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MIDIImportGetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MIDIImportGetSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MIDIImportSetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextExportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>setting</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MIDIImportSetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MIDIImportSetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>setting</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MIDIImportSetSettings</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImageImportSetSequenceEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicImageMovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImageImportSetSequenceEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImageImportSetSequenceEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>enable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImageImportSetSequenceEnabled</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_GraphicsImageImportGetSequenceEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GraphicImageMovieImportComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GraphicsImageImportGetSequenceEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>GraphicsImageImportGetSequenceEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>GraphicsImageImportGetSequenceEnabled</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_PreviewShowData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pnotComponent</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>inHere</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PreviewShowData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PreviewShowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>inHere</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>PreviewShowData</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>dataType</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr>&amp;<name>inHere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_PreviewMakePreviewReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pnotComponent</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>previewType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>sourceFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PreviewMakePreviewReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PreviewMakePreviewReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>sourceFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>PreviewMakePreviewReference</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>&amp;<name>previewType</name></expr></argument>,
<argument><expr>&amp;<name>resID</name></expr></argument>,
<argument><expr>&amp;<name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>previewType</name></expr></argument>,
<argument><expr><name>resID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_PreviewEvent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pnotComponent</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventRecord</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>handledEvent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>PreviewEvent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>PreviewEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>PreviewEvent</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>&amp;<name>e</name></expr></argument>,
<argument><expr>&amp;<name>handledEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;b"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildEventRecord</name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>,
<argument><expr><name>handledEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataCodecDecompress</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataCodecComponent</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>srcData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>srcSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dstData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>dstBufferSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataCodecDecompress</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataCodecDecompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;slsl"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dc</name></expr></argument>,
<argument><expr>&amp;<name>srcData</name></expr></argument>,
<argument><expr>&amp;<name>srcSize</name></expr></argument>,
<argument><expr>&amp;<name>dstData</name></expr></argument>,
<argument><expr>&amp;<name>dstBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataCodecDecompress</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>srcData</name></expr></argument>,
<argument><expr><name>srcSize</name></expr></argument>,
<argument><expr><name>dstData</name></expr></argument>,
<argument><expr><name>dstBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataCodecGetCompressBufferSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataCodecComponent</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>srcSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>dstSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataCodecGetCompressBufferSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataCodecGetCompressBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dc</name></expr></argument>,
<argument><expr>&amp;<name>srcSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataCodecGetCompressBufferSize</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>srcSize</name></expr></argument>,
<argument><expr>&amp;<name>dstSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>dstSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataCodecCompress</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataCodecComponent</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>srcData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>srcSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dstData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>dstBufferSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>actualDstSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>decompressSlop</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataCodecCompress</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataCodecCompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;slsl"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dc</name></expr></argument>,
<argument><expr>&amp;<name>srcData</name></expr></argument>,
<argument><expr>&amp;<name>srcSize</name></expr></argument>,
<argument><expr>&amp;<name>dstData</name></expr></argument>,
<argument><expr>&amp;<name>dstBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataCodecCompress</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>srcData</name></expr></argument>,
<argument><expr><name>srcSize</name></expr></argument>,
<argument><expr><name>dstData</name></expr></argument>,
<argument><expr><name>dstBufferSize</name></expr></argument>,
<argument><expr>&amp;<name>actualDstSize</name></expr></argument>,
<argument><expr>&amp;<name>decompressSlop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>actualDstSize</name></expr></argument>,
<argument><expr><name>decompressSlop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataCodecBeginInterruptSafe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataCodecComponent</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxSrcSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataCodecBeginInterruptSafe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataCodecBeginInterruptSafe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dc</name></expr></argument>,
<argument><expr>&amp;<name>maxSrcSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataCodecBeginInterruptSafe</name><argument_list>(<argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>maxSrcSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataCodecEndInterruptSafe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataCodecComponent</name></type> <name>dc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataCodecEndInterruptSafe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataCodecEndInterruptSafe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataCodecEndInterruptSafe</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>,
<argument><expr>&amp;<name>hOffset</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetData</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>hOffset</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHPutData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHPutData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHPutData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>,
<argument><expr>&amp;<name>hOffset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHPutData</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>hOffset</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHFlushData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHFlushData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHFlushData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHFlushData</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHOpenForWrite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHOpenForWrite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHOpenForWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHOpenForWrite</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHCloseForWrite</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHCloseForWrite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHCloseForWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHCloseForWrite</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHOpenForRead</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHOpenForRead</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHOpenForRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHOpenForRead</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHCloseForRead</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHCloseForRead</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHCloseForRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHCloseForRead</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetDataRef</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataRef</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHCompareDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>equal</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHCompareDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHCompareDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHCompareDataRef</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHTask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHTask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHTask</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHFinishData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>PlaceToPutDataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>Cancel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHFinishData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHFinishData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sb"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>PlaceToPutDataPtr</name></expr></argument>,
<argument><expr>&amp;<name>Cancel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHFinishData</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>PlaceToPutDataPtr</name></expr></argument>,
<argument><expr><name>Cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHFlushCache</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHFlushCache</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHFlushCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHFlushCache</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHResolveDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>theDataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>wasChanged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>userInterfaceAllowed</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHResolveDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHResolveDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theDataRef</name></expr></argument>,
<argument><expr>&amp;<name>userInterfaceAllowed</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHResolveDataRef</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>theDataRef</name></expr></argument>,
<argument><expr>&amp;<name>wasChanged</name></expr></argument>,
<argument><expr><name>userInterfaceAllowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>wasChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetFileSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fileSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetFileSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetFileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetFileSize</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHCanUseDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>useFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHCanUseDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHCanUseDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHCanUseDataRef</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>useFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>useFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHPreextend</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxToAdd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>spaceAdded</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHPreextend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHPreextend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>maxToAdd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHPreextend</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>maxToAdd</name></expr></argument>,
<argument><expr>&amp;<name>spaceAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>spaceAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetFileSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fileSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetFileSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetFileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetFileSize</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetFreeSpace</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>freeSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetFreeSpace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetFreeSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetFreeSpace</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>freeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>freeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHCreateFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>deleteExisting</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHCreateFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHCreateFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>deleteExisting</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHCreateFile</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>deleteExisting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetPreferredBlockSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>blockSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetPreferredBlockSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetPreferredBlockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetPreferredBlockSize</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDeviceIndex</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>deviceIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDeviceIndex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDeviceIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDeviceIndex</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>deviceIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>deviceIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHIsStreamingDataHandler</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>yes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHIsStreamingDataHandler</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHIsStreamingDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHIsStreamingDataHandler</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataInBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>startOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataInBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataInBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>startOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataInBuffer</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>startOffset</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetScheduleAheadTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>millisecs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetScheduleAheadTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetScheduleAheadTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetScheduleAheadTime</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>millisecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>millisecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetCacheSizeLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>cacheSizeLimit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetCacheSizeLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetCacheSizeLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>cacheSizeLimit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetCacheSizeLimit</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>cacheSizeLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetCacheSizeLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>cacheSizeLimit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetCacheSizeLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetCacheSizeLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetCacheSizeLimit</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>cacheSizeLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>cacheSizeLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetMovie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetMovie</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHAddMovie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHAddMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHAddMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHAddMovie</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHUpdateMovie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHUpdateMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHUpdateMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHUpdateMovie</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHDoesBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>buffersReads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>buffersWrites</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHDoesBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHDoesBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHDoesBuffer</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>buffersReads</name></expr></argument>,
<argument><expr>&amp;<name>buffersWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lbb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>buffersReads</name></expr></argument>,
<argument><expr><name>buffersWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetFileName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>str</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetFileName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetFileName</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetAvailableFileSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fileSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetAvailableFileSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetAvailableFileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetAvailableFileSize</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetMacOSFileType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetMacOSFileType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetMacOSFileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetMacOSFileType</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>fileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetMIMEType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>mimeType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetMIMEType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetMIMEType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetMIMEType</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetDataRefWithAnchor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>anchorDataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetDataRefWithAnchor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetDataRefWithAnchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>anchorDataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetDataRefWithAnchor</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>anchorDataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataRefWithAnchor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>anchorDataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataRefWithAnchor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataRefWithAnchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>anchorDataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataRefWithAnchor</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>anchorDataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetMacOSFileType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>fileType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetMacOSFileType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetMacOSFileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>fileType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetMacOSFileType</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>fileType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>tb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetTimeBase</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetInfoFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetInfoFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetInfoFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetInfoFlags</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetFileSize64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>fileSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetFileSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetFileSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetFileSize64</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHPreextend64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>maxToAdd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>spaceAdded</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHPreextend64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHPreextend64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>maxToAdd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHPreextend64</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>maxToAdd</name></expr></argument>,
<argument><expr>&amp;<name>spaceAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>spaceAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetFileSize64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>fileSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetFileSize64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetFileSize64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>fileSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetFileSize64</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetFreeSpace64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>freeSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetFreeSpace64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetFreeSpace64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetFreeSpace64</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>freeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>freeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHAppend64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>fileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHAppend64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHAppend64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>data</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHAppend64</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>,
<argument><expr>&amp;<name>fileOffset</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>fileOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHPollRead</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>dataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>dataSizeSoFar</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHPollRead</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHPollRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>dataPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHPollRead</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>dataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataSizeSoFar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>dataSizeSoFar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataAvailability</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>missing_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>missing_len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataAvailability</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataAvailability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataAvailability</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr>&amp;<name>missing_offset</name></expr></argument>,
<argument><expr>&amp;<name>missing_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>missing_offset</name></expr></argument>,
<argument><expr><name>missing_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataRefAsType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>requestedType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataRefAsType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataRefAsType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>requestedType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataRefAsType</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>requestedType</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetDataRefExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetDataRefExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetDataRefExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>extension</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetDataRefExtension</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>extension</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataRefExtension</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>idType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataRefExtension</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataRefExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>idType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataRefExtension</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>extension</name></expr></argument>,
<argument><expr><name>idType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetMovieWithFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>theMovie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetMovieWithFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetMovieWithFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetMovieWithFlags</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>theMovie</name></expr></argument>,
<argument><expr>&amp;<name>id</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;h"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>theMovie</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetFileTypeOrdering</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHFileTypeOrderingHandle</name></type> <name>orderingListHandle</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetFileTypeOrdering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetFileTypeOrdering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetFileTypeOrdering</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>orderingListHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>orderingListHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHCreateFileWithFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>creator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>deleteExisting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHCreateFileWithFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHCreateFileWithFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;bl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>creator</name></expr></argument>,
<argument><expr>&amp;<name>deleteExisting</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHCreateFileWithFlags</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>creator</name></expr></argument>,
<argument><expr><name>deleteExisting</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>what</name></expr></argument>,
<argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetInfo</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>,
<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetIdleManager</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>im</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetIdleManager</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetIdleManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>IdleManagerObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>im</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetIdleManager</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHDeleteFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHDeleteFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHDeleteFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHDeleteFile</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetMovieUsageFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetMovieUsageFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetMovieUsageFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetMovieUsageFlags</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHUseTemporaryDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHUseTemporaryDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHUseTemporaryDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHUseTemporaryDataRef</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetTemporaryDataRefCapabilities</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outUnderstoodFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetTemporaryDataRefCapabilities</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetTemporaryDataRefCapabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetTemporaryDataRefCapabilities</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr>&amp;<name>outUnderstoodFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>outUnderstoodFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHRenameFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>newDataRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHRenameFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHRenameFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>newDataRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHRenameFile</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>newDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHPlaybackHints</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>minFileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxFileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHPlaybackHints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHPlaybackHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>minFileOffset</name></expr></argument>,
<argument><expr>&amp;<name>maxFileOffset</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHPlaybackHints</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>minFileOffset</name></expr></argument>,
<argument><expr><name>maxFileOffset</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHPlaybackHints64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>minFileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>maxFileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHPlaybackHints64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHPlaybackHints64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>minFileOffset</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>maxFileOffset</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHPlaybackHints64</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr>&amp;<name>minFileOffset</name></expr></argument>,
<argument><expr>&amp;<name>maxFileOffset</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHGetDataRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHGetDataRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHGetDataRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHGetDataRate</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DataHSetTimeHints</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DataHandler</name></type> <name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bandwidthPriority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>minTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>maxTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DataHSetTimeHints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DataHSetTimeHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lllll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>bandwidthPriority</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>,
<argument><expr>&amp;<name>minTime</name></expr></argument>,
<argument><expr>&amp;<name>maxTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>DataHSetTimeHints</name><argument_list>(<argument><expr><name>dh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>bandwidthPriority</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>,
<argument><expr><name>minTime</name></expr></argument>,
<argument><expr><name>maxTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetMaxSrcRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>inputStd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>maxSrcRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetMaxSrcRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetMaxSrcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputStd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetMaxSrcRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>inputStd</name></expr></argument>,
<argument><expr>&amp;<name>maxSrcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>maxSrcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetActiveSrcRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>inputStd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>activeSrcRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetActiveSrcRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetActiveSrcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputStd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetActiveSrcRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>inputStd</name></expr></argument>,
<argument><expr>&amp;<name>activeSrcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>activeSrcRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetDigitizerRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>digitizerRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetDigitizerRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetDigitizerRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetDigitizerRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>digitizerRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>digitizerRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetDigitizerRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>digitizerRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetDigitizerRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetDigitizerRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetDigitizerRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>digitizerRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>digitizerRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetVBlankRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>inputStd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>vBlankRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetVBlankRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetVBlankRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputStd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetVBlankRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>inputStd</name></expr></argument>,
<argument><expr>&amp;<name>vBlankRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>vBlankRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetMaskPixMap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>maskPixMap</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetMaskPixMap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetMaskPixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>maskPixMap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetMaskPixMap</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>maskPixMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDUseThisCLUT</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>colorTableHandle</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDUseThisCLUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDUseThisCLUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>colorTableHandle</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDUseThisCLUT</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>colorTableHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetInputGammaValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>channel1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>channel2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>channel3</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetInputGammaValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetInputGammaValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>channel1</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>channel2</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>channel3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetInputGammaValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>channel1</name></expr></argument>,
<argument><expr><name>channel2</name></expr></argument>,
<argument><expr><name>channel3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetInputGammaValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>channel1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>channel2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>channel3</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetInputGammaValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetInputGammaValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetInputGammaValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>channel1</name></expr></argument>,
<argument><expr>&amp;<name>channel2</name></expr></argument>,
<argument><expr>&amp;<name>channel3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>channel1</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>channel2</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>channel3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetBrightness</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>brightness</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetBrightness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetBrightness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetBrightness</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>brightness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>brightness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetBrightness</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>brightness</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetBrightness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetBrightness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetBrightness</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>brightness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>brightness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetContrast</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>contrast</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetContrast</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetContrast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetContrast</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>contrast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>contrast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetHue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>hue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetHue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetHue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetHue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>hue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>hue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetSharpness</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sharpness</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetSharpness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetSharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetSharpness</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetSaturation</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>saturation</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetSaturation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetSaturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetSaturation</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetContrast</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>contrast</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetContrast</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetContrast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetContrast</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>contrast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>contrast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetHue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>hue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetHue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetHue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetHue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>hue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>hue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetSharpness</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sharpness</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetSharpness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetSharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetSharpness</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetSaturation</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>saturation</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetSaturation</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetSaturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetSaturation</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGrabOneFrame</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGrabOneFrame</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGrabOneFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGrabOneFrame</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetMaxAuxBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>pm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetMaxAuxBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetMaxAuxBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetMaxAuxBuffer</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>pm</name></expr></argument>,
<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetCurrentFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inputCurrentFlag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outputCurrentFlag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetCurrentFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetCurrentFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetCurrentFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputCurrentFlag</name></expr></argument>,
<argument><expr>&amp;<name>outputCurrentFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>inputCurrentFlag</name></expr></argument>,
<argument><expr><name>outputCurrentFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetKeyColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetKeyColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetKeyColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetKeyColor</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetKeyColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetKeyColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetKeyColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetKeyColor</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDAddKeyColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDAddKeyColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDAddKeyColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDAddKeyColor</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetNextKeyColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetNextKeyColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetNextKeyColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetNextKeyColor</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetKeyColorRange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>minRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>maxRGB</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetKeyColorRange</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetKeyColorRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetKeyColorRange</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>minRGB</name></expr></argument>,
<argument><expr>&amp;<name>maxRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>minRGB</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>maxRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetKeyColorRange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>minRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>maxRGB</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetKeyColorRange</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetKeyColorRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetKeyColorRange</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>minRGB</name></expr></argument>,
<argument><expr>&amp;<name>maxRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>minRGB</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>maxRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetInputColorSpaceMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>colorSpaceMode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetInputColorSpaceMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetInputColorSpaceMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>colorSpaceMode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetInputColorSpaceMode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>colorSpaceMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetInputColorSpaceMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>colorSpaceMode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetInputColorSpaceMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetInputColorSpaceMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetInputColorSpaceMode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>colorSpaceMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>colorSpaceMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetClipState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>clipEnable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetClipState</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetClipState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>clipEnable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetClipState</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>clipEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetClipState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>clipEnable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetClipState</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetClipState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetClipState</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>clipEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>clipEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetClipRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>clipRegion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clipRegion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetClipRgn</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>clipRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDClearClipRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>clipRegion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDClearClipRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDClearClipRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>clipRegion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDClearClipRgn</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>clipRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetCLUTInUse</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>colorTableHandle</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetCLUTInUse</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetCLUTInUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetCLUTInUse</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>colorTableHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>colorTableHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetPLLFilterType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>pllType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetPLLFilterType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetPLLFilterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>pllType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetPLLFilterType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>pllType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetPLLFilterType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>pllType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetPLLFilterType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetPLLFilterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetPLLFilterType</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>pllType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>pllType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetMaskandValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>blendLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetMaskandValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetMaskandValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;H"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>blendLevel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetMaskandValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>blendLevel</name></expr></argument>,
<argument><expr>&amp;<name>mask</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetMasterBlendLevel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>blendLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetMasterBlendLevel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetMasterBlendLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetMasterBlendLevel</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>blendLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>blendLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetPlayThruOnOff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>state</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetPlayThruOnOff</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetPlayThruOnOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetPlayThruOnOff</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetFieldPreference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fieldFlag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetFieldPreference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetFieldPreference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fieldFlag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetFieldPreference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>fieldFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetFieldPreference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fieldFlag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetFieldPreference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetFieldPreference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetFieldPreference</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>fieldFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>fieldFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDPreflightGlobalRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GrafPtr</name></type> <name>theWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>globalRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDPreflightGlobalRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDPreflightGlobalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDPreflightGlobalRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>theWindow</name></expr></argument>,
<argument><expr>&amp;<name>globalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>globalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetPlayThruGlobalRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GrafPtr</name></type> <name>theWindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>globalRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetPlayThruGlobalRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetPlayThruGlobalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theWindow</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetPlayThruGlobalRect</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>theWindow</name></expr></argument>,
<argument><expr>&amp;<name>globalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>globalRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetBlackLevelValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>blackLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetBlackLevelValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetBlackLevelValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetBlackLevelValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>blackLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>blackLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetBlackLevelValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>blackLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetBlackLevelValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetBlackLevelValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetBlackLevelValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>blackLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>blackLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetWhiteLevelValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>whiteLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetWhiteLevelValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetWhiteLevelValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetWhiteLevelValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>whiteLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>whiteLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetWhiteLevelValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>whiteLevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetWhiteLevelValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetWhiteLevelValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetWhiteLevelValue</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>whiteLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>whiteLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetVideoDefaults</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>blackLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>whiteLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>brightness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>hue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>saturation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>contrast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sharpness</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetVideoDefaults</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetVideoDefaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetVideoDefaults</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>blackLevel</name></expr></argument>,
<argument><expr>&amp;<name>whiteLevel</name></expr></argument>,
<argument><expr>&amp;<name>brightness</name></expr></argument>,
<argument><expr>&amp;<name>hue</name></expr></argument>,
<argument><expr>&amp;<name>saturation</name></expr></argument>,
<argument><expr>&amp;<name>contrast</name></expr></argument>,
<argument><expr>&amp;<name>sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lHHHHHHH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>blackLevel</name></expr></argument>,
<argument><expr><name>whiteLevel</name></expr></argument>,
<argument><expr><name>brightness</name></expr></argument>,
<argument><expr><name>hue</name></expr></argument>,
<argument><expr><name>saturation</name></expr></argument>,
<argument><expr><name>contrast</name></expr></argument>,
<argument><expr><name>sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetNumberOfInputs</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>inputs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetNumberOfInputs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetNumberOfInputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetNumberOfInputs</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetInputFormat</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>format</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetInputFormat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetInputFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>input</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetInputFormat</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>input</name></expr></argument>,
<argument><expr>&amp;<name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetInput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>input</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetInput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>input</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetInput</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetInput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>input</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetInput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetInput</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetInputStandard</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>inputStandard</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetInputStandard</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetInputStandard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputStandard</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetInputStandard</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>inputStandard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetupBuffers</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdigBufferRecListHandle</name></type> <name>bufferList</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetupBuffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetupBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>bufferList</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetupBuffers</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>bufferList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGrabOneFrameAsync</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>buffer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGrabOneFrameAsync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGrabOneFrameAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGrabOneFrameAsync</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDDone</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>buffer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDDone</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDDone</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetCompression</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>compressType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>temporalQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>keyFrameRate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetCompression</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetCompression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hlll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>compressType</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>,
<argument><expr>&amp;<name>temporalQuality</name></expr></argument>,
<argument><expr>&amp;<name>keyFrameRate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetCompression</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>compressType</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>,
<argument><expr><name>temporalQuality</name></expr></argument>,
<argument><expr><name>keyFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDCompressOneFrameAsync</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDCompressOneFrameAsync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDCompressOneFrameAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDCompressOneFrameAsync</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetImageDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetImageDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetImageDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetImageDescription</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDResetCompressSequence</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDResetCompressSequence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDResetCompressSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDResetCompressSequence</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetCompressionOnOff</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>state</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetCompressionOnOff</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetCompressionOnOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetCompressionOnOff</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetCompressionTypes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VDCompressionListHandle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetCompressionTypes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetCompressionTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetCompressionTypes</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>TimeBaseObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetTimeBase</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetFrameRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>framesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetFrameRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>framesPerSecond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetFrameRate</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>framesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetDataRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>milliSecPerFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>framesPerSecond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetDataRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetDataRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetDataRate</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>milliSecPerFrame</name></expr></argument>,
<argument><expr>&amp;<name>framesPerSecond</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llO&amp;l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>milliSecPerFrame</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>framesPerSecond</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetSoundInputDriver</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>soundDriverName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetSoundInputDriver</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetSoundInputDriver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>soundDriverName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetSoundInputDriver</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>soundDriverName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetDMADepths</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>depthArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>preferredDepth</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetDMADepths</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetDMADepths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetDMADepths</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>depthArray</name></expr></argument>,
<argument><expr>&amp;<name>preferredDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>depthArray</name></expr></argument>,
<argument><expr><name>preferredDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetPreferredTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>preferred</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetPreferredTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetPreferredTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetPreferredTimeScale</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>preferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>preferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDReleaseAsyncBuffers</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDReleaseAsyncBuffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDReleaseAsyncBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDReleaseAsyncBuffers</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetDataRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetDataRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetDataRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetDataRate</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetTimeCode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>atTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>timeCodeFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>timeCodeTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetTimeCode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetTimeCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ss"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>timeCodeFormat</name></expr></argument>,
<argument><expr>&amp;<name>timeCodeTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetTimeCode</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>atTime</name></expr></argument>,
<argument><expr><name>timeCodeFormat</name></expr></argument>,
<argument><expr><name>timeCodeTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QtTimeRecord_New</name></expr></argument>, <argument><expr>&amp;<name>atTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDUseSafeBuffers</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>useSafeBuffers</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDUseSafeBuffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDUseSafeBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>useSafeBuffers</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDUseSafeBuffers</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>useSafeBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetSoundInputSource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>videoInput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>soundInput</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetSoundInputSource</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetSoundInputSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>videoInput</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetSoundInputSource</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>videoInput</name></expr></argument>,
<argument><expr>&amp;<name>soundInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>soundInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetCompressionTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>compressionType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>srcRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>temporalQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>compressTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetCompressionTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetCompressionTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>compressionType</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetCompressionTime</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>compressionType</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>,
<argument><expr>&amp;<name>temporalQuality</name></expr></argument>,
<argument><expr>&amp;<name>compressTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>srcRect</name></expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>,
<argument><expr><name>temporalQuality</name></expr></argument>,
<argument><expr><name>compressTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetPreferredPacketSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>preferredPacketSizeInBytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetPreferredPacketSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetPreferredPacketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>preferredPacketSizeInBytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetPreferredPacketSize</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>preferredPacketSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetPreferredImageDimensions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetPreferredImageDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetPreferredImageDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetPreferredImageDimensions</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetPreferredImageDimensions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetPreferredImageDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetPreferredImageDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetPreferredImageDimensions</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetInputName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>videoInput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetInputName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetInputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>videoInput</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetInputName</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>videoInput</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDSetDestinationPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>destPort</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDSetDestinationPort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDSetDestinationPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>destPort</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDSetDestinationPort</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>destPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDGetDeviceNameAndFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>outName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>outNameFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDGetDeviceNameAndFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDGetDeviceNameAndFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>outName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDGetDeviceNameAndFlags</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>outName</name></expr></argument>,
<argument><expr>&amp;<name>outNameFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>outNameFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_VDCaptureStateChanging</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoDigitizerComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>inStateFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>VDCaptureStateChanging</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>VDCaptureStateChanging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inStateFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>VDCaptureStateChanging</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>inStateFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseGetDetailedParseError</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>errorLine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringPtr</name></type> <name>errDesc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseGetDetailedParseError</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseGetDetailedParseError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>errDesc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseGetDetailedParseError</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>errorLine</name></expr></argument>,
<argument><expr><name>errDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>errorLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseAddElement</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>elementName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nameSpaceID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>elementID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>elementFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseAddElement</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseAddElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>nameSpaceID</name></expr></argument>,
<argument><expr>&amp;<name>elementFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseAddElement</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>elementName</name></expr></argument>,
<argument><expr><name>nameSpaceID</name></expr></argument>,
<argument><expr>&amp;<name>elementID</name></expr></argument>,
<argument><expr><name>elementFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lcl"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>elementName</name></expr></argument>,
<argument><expr><name>elementID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseAddAttribute</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>elementID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nameSpaceID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>attributeName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>attributeID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseAddAttribute</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseAddAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>elementID</name></expr></argument>,
<argument><expr>&amp;<name>nameSpaceID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseAddAttribute</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr><name>elementID</name></expr></argument>,
<argument><expr><name>nameSpaceID</name></expr></argument>,
<argument><expr>&amp;<name>attributeName</name></expr></argument>,
<argument><expr>&amp;<name>attributeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lcl"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>attributeName</name></expr></argument>,
<argument><expr><name>attributeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseAddMultipleAttributes</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>elementID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nameSpaceIDs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>attributeNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>attributeIDs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseAddMultipleAttributes</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseAddMultipleAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>elementID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseAddMultipleAttributes</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr><name>elementID</name></expr></argument>,
<argument><expr>&amp;<name>nameSpaceIDs</name></expr></argument>,
<argument><expr>&amp;<name>attributeNames</name></expr></argument>,
<argument><expr>&amp;<name>attributeIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llcl"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>nameSpaceIDs</name></expr></argument>,
<argument><expr><name>attributeNames</name></expr></argument>,
<argument><expr><name>attributeIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseAddAttributeAndValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>elementID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nameSpaceID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>attributeName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>attributeID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>attributeValueKind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>attributeValueKindInfo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseAddAttributeAndValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseAddAttributeAndValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>elementID</name></expr></argument>,
<argument><expr>&amp;<name>nameSpaceID</name></expr></argument>,
<argument><expr>&amp;<name>attributeValueKind</name></expr></argument>,
<argument><expr>&amp;<name>attributeValueKindInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseAddAttributeAndValue</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr><name>elementID</name></expr></argument>,
<argument><expr><name>nameSpaceID</name></expr></argument>,
<argument><expr>&amp;<name>attributeName</name></expr></argument>,
<argument><expr>&amp;<name>attributeID</name></expr></argument>,
<argument><expr><name>attributeValueKind</name></expr></argument>,
<argument><expr><name>attributeValueKindInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lcl"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>attributeName</name></expr></argument>,
<argument><expr><name>attributeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseAddAttributeValueKind</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>elementID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>attributeID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>attributeValueKind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>attributeValueKindInfo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseAddAttributeValueKind</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseAddAttributeValueKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>elementID</name></expr></argument>,
<argument><expr>&amp;<name>attributeID</name></expr></argument>,
<argument><expr>&amp;<name>attributeValueKind</name></expr></argument>,
<argument><expr>&amp;<name>attributeValueKindInfo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseAddAttributeValueKind</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr><name>elementID</name></expr></argument>,
<argument><expr><name>attributeID</name></expr></argument>,
<argument><expr><name>attributeValueKind</name></expr></argument>,
<argument><expr><name>attributeValueKindInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseAddNameSpace</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>nameSpaceURL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>nameSpaceID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseAddNameSpace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseAddNameSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseAddNameSpace</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>nameSpaceURL</name></expr></argument>,
<argument><expr>&amp;<name>nameSpaceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lcl"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>nameSpaceURL</name></expr></argument>,
<argument><expr><name>nameSpaceID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseSetOffsetAndLimit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>limit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseSetOffsetAndLimit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseSetOffsetAndLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseSetOffsetAndLimit</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_XMLParseSetEventParseRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>aParser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refcon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XMLParseSetEventParseRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>XMLParseSetEventParseRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aParser</name></expr></argument>,
<argument><expr>&amp;<name>refcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>XMLParseSetEventParseRefCon</name><argument_list>(<argument><expr><name>aParser</name></expr></argument>,
<argument><expr><name>refcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGInitialize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGInitialize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGInitialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGInitialize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetDataOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>movieFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whereFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetDataOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetDataOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>movieFile</name></expr></argument>,
<argument><expr>&amp;<name>whereFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetDataOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>movieFile</name></expr></argument>,
<argument><expr><name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetDataOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>movieFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whereFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetDataOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetDataOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>PyMac_GetFSSpec</name></expr></argument>, <argument><expr>&amp;<name>movieFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetDataOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>movieFile</name></expr></argument>,
<argument><expr>&amp;<name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gp</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>gd</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetGWorld</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>gp</name></expr></argument>,
<argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>gp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>gd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetGWorld</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>gp</name></expr></argument>,
<argument><expr>&amp;<name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>GrafObj_New</name></expr></argument>, <argument><expr><name>gp</name></expr></argument>,
<argument><expr><name>OptResObj_New</name></expr></argument>, <argument><expr><name>gd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGNewChannel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>channelType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>ref</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGNewChannel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGNewChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>channelType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGNewChannel</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>channelType</name></expr></argument>,
<argument><expr>&amp;<name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGDisposeChannel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGDisposeChannel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGDisposeChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGDisposeChannel</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGStartPreview</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGStartPreview</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGStartPreview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGStartPreview</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGStartRecord</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGStartRecord</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGStartRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGStartRecord</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGIdle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGIdle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGIdle</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGStop</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGStop</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGStop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPause</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>pause</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPause</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>pause</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPause</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPrepare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>prepareForPreview</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>prepareForRecord</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPrepare</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPrepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;bb"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>prepareForPreview</name></expr></argument>,
<argument><expr>&amp;<name>prepareForRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPrepare</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>prepareForPreview</name></expr></argument>,
<argument><expr><name>prepareForRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGRelease</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGRelease</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGRelease</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetMovie</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetMovie</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetMovie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetMovie</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>MovieObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetMaximumRecordTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ticks</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetMaximumRecordTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetMaximumRecordTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>ticks</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetMaximumRecordTime</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetMaximumRecordTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ticks</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetMaximumRecordTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetMaximumRecordTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetMaximumRecordTime</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetStorageSpaceRemaining</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetStorageSpaceRemaining</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetStorageSpaceRemaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetStorageSpaceRemaining</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetTimeRemaining</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ticksLeft</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetTimeRemaining</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetTimeRemaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetTimeRemaining</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>ticksLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ticksLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGrabPict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PicHandle</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>offscreenDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>grabPictFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGrabPict</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGrabPict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;hl"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>,
<argument><expr>&amp;<name>offscreenDepth</name></expr></argument>,
<argument><expr>&amp;<name>grabPictFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGrabPict</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>,
<argument><expr><name>offscreenDepth</name></expr></argument>,
<argument><expr><name>grabPictFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetLastMovieResID</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetLastMovieResID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetLastMovieResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetLastMovieResID</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>resID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>resID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sgFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>sgFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetFlags</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sgFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetFlags</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>sgFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>sgFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGNewChannelFromComponent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>newChannel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>sgChannelComponent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGNewChannelFromComponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGNewChannelFromComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgChannelComponent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGNewChannelFromComponent</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>newChannel</name></expr></argument>,
<argument><expr><name>sgChannelComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>newChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>UserDataObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ud</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>ud</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>ud</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetIndChannel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>chanType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetIndChannel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetIndChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetIndChannel</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr>&amp;<name>ref</name></expr></argument>,
<argument><expr>&amp;<name>chanType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>chanType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGUpdate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>updateRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGUpdate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>updateRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGUpdate</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetPause</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>paused</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetPause</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetPause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetPause</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>paused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>paused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>UserDataObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ud</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>ud</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>ud</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>previewMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>recordMode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetMode</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>previewMode</name></expr></argument>,
<argument><expr>&amp;<name>recordMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lbb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>previewMode</name></expr></argument>,
<argument><expr><name>recordMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whereFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>whereFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetDataRef</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetDataRef</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whereFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetDataRef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetDataRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetDataRef</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGNewOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whereFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGNewOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGNewOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>dataRefType</name></expr></argument>,
<argument><expr>&amp;<name>whereFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGNewOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>dataRefType</name></expr></argument>,
<argument><expr><name>whereFlags</name></expr></argument>,
<argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>SGOutputObj_New</name></expr></argument>, <argument><expr><name>sgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGDisposeOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGDisposeOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGDisposeOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGDisposeOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetOutputFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whereFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetOutputFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetOutputFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>whereFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetOutputFlags</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr><name>whereFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetDataOutputStorageSpaceRemaining</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>space</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetDataOutputStorageSpaceRemaining</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetDataOutputStorageSpaceRemaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetDataOutputStorageSpaceRemaining</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGHandleUpdateEvent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventRecord</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>handled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGHandleUpdateEvent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGHandleUpdateEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>event</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGHandleUpdateEvent</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>event</name></expr></argument>,
<argument><expr>&amp;<name>handled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>handled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetOutputNextOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>nextOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetOutputNextOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetOutputNextOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>nextOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetOutputNextOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr><name>nextOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetOutputNextOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>nextOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetOutputNextOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetOutputNextOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetOutputNextOutput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>nextOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>SGOutputObj_New</name></expr></argument>, <argument><expr><name>nextOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetOutputMaximumOffset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>maxOffset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetOutputMaximumOffset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetOutputMaximumOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>,
<argument><expr><name>PyMac_Getwide</name></expr></argument>, <argument><expr>&amp;<name>maxOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetOutputMaximumOffset</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>maxOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetOutputMaximumOffset</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>maxOffset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetOutputMaximumOffset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetOutputMaximumOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetOutputMaximumOffset</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>maxOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>maxOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetOutputDataReference</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>dataRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>dataRefType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetOutputDataReference</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetOutputDataReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetOutputDataReference</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>dataRef</name></expr></argument>,
<argument><expr>&amp;<name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>dataRef</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>dataRefType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGWriteExtendedMovieData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGWriteExtendedMovieData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGWriteExtendedMovieData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;sl"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGWriteExtendedMovieData</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>SGOutputObj_New</name></expr></argument>, <argument><expr><name>sgOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetStorageSpaceRemaining64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>bytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetStorageSpaceRemaining64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetStorageSpaceRemaining64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetStorageSpaceRemaining64</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetDataOutputStorageSpaceRemaining64</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>space</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetDataOutputStorageSpaceRemaining64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetDataOutputStorageSpaceRemaining64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetDataOutputStorageSpaceRemaining64</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr>&amp;<name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGWriteMovieData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGWriteMovieData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGWriteMovieData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;sl"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGWriteMovieData</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>tb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetTimeBase</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGAddMovieData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>chRefCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>writeType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGAddMovieData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGAddMovieData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;slllh"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>,
<argument><expr>&amp;<name>chRefCon</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>writeType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGAddMovieData</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>chRefCon</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>writeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChangedSource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChangedSource</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChangedSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChangedSource</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGAddExtendedMovieData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptr</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wide</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>chRefCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>writeType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>whichOutput</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGAddExtendedMovieData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGAddExtendedMovieData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;slllh"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>p</name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>,
<argument><expr>&amp;<name>chRefCon</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr>&amp;<name>writeType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGAddExtendedMovieData</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr>&amp;<name>offset</name></expr></argument>,
<argument><expr><name>chRefCon</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>writeType</name></expr></argument>,
<argument><expr>&amp;<name>whichOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_Buildwide</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>SGOutputObj_New</name></expr></argument>, <argument><expr><name>whichOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGAddOutputDataRefToMedia</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGOutput</name></type> <name>sgOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Media</name></type> <name>theMedia</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGAddOutputDataRefToMedia</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGAddOutputDataRefToMedia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>SGOutputObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sgOut</name></expr></argument>,
<argument><expr><name>MediaObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theMedia</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGAddOutputDataRefToMedia</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sgOut</name></expr></argument>,
<argument><expr><name>theMedia</name></expr></argument>,
<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetSettingsSummary</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>summaryText</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetSettingsSummary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetSettingsSummary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>summaryText</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetSettingsSummary</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>summaryText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelUsage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usage</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelUsage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>usage</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelUsage</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>usage</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelUsage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelBounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelBounds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelBounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelBounds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelVolume</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelVolume</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>channelInfo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>channelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>channelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelPlayFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>playFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelPlayFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelPlayFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>playFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelPlayFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>playFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelPlayFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>playFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelPlayFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelPlayFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelPlayFlags</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>playFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>playFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelMaxFrames</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>frameCount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelMaxFrames</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelMaxFrames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>frameCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelMaxFrames</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>frameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelMaxFrames</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>frameCount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelMaxFrames</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelMaxFrames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelMaxFrames</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>frameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>frameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelRefCon</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theClip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelClip</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelClip</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelSampleDescription</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>sampleDesc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelSampleDescription</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelSampleDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDesc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelSampleDescription</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>sampleDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringPtr</name></type> <name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelDevice</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelDevice</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelTimeScale</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelPutPicture</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelPutPicture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelPutPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelPutPicture</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelSetRequestedDataRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelSetRequestedDataRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelSetRequestedDataRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelSetRequestedDataRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelGetRequestedDataRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelGetRequestedDataRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelGetRequestedDataRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelGetRequestedDataRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelSetDataSourceName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelSetDataSourceName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelSetDataSourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelSetDataSourceName</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelGetDataSourceName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScriptCode</name></type> <name>scriptTag</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelGetDataSourceName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelGetDataSourceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelGetDataSourceName</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr>&amp;<name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>scriptTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelSetCodecSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settings</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelSetCodecSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelSetCodecSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelSetCodecSettings</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGChannelGetCodecSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settings</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGChannelGetCodecSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGChannelGetCodecSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGChannelGetCodecSettings</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>tb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelTimeBase</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelRefCon</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetChannelDeviceAndInputNames</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>outDeviceName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>outInputName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>outInputNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetChannelDeviceAndInputNames</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetChannelDeviceAndInputNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>outDeviceName</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>outInputName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetChannelDeviceAndInputNames</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>outDeviceName</name></expr></argument>,
<argument><expr><name>outInputName</name></expr></argument>,
<argument><expr>&amp;<name>outInputNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>outInputNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelDeviceInput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>inInputNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelDeviceInput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelDeviceInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>inInputNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelDeviceInput</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>inInputNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetChannelSettingsStateChanging</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>inFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetChannelSettingsStateChanging</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetChannelSettingsStateChanging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>inFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetChannelSettingsStateChanging</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>inFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGInitChannel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>owner</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGInitChannel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGInitChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>owner</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGInitChannel</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGWriteSamples</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Movie</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AliasHandle</name></type> <name>theFile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGWriteSamples</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGWriteSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>MovieObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>m</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theFile</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGWriteSamples</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>,
<argument><expr><name>theFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetDataRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bytesPerSecond</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetDataRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetDataRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetDataRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>bytesPerSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGAlignChannelRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGAlignChannelRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGAlignChannelRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGAlignChannelRect</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelGetDitl</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>ditl</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelGetDitl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelGetDitl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelGetDitl</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>ditl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>ditl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelGetTitle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>title</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelGetTitle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelGetTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelGetTitle</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelCanRun</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelCanRun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelCanRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelCanRun</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelInstall</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogPtr</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemOffset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelInstall</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelInstall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>DlgObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>,
<argument><expr>&amp;<name>itemOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelInstall</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>d</name></expr></argument>,
<argument><expr><name>itemOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelEvent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogPtr</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventRecord</name></type> <name>theEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemHit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>handled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelEvent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;hO&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>DlgObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>,
<argument><expr>&amp;<name>itemOffset</name></expr></argument>,
<argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>theEvent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelEvent</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>d</name></expr></argument>,
<argument><expr><name>itemOffset</name></expr></argument>,
<argument><expr>&amp;<name>theEvent</name></expr></argument>,
<argument><expr>&amp;<name>itemHit</name></expr></argument>,
<argument><expr>&amp;<name>handled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lhb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>itemHit</name></expr></argument>,
<argument><expr><name>handled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelItem</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogPtr</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelItem</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;hh"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>DlgObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>,
<argument><expr>&amp;<name>itemOffset</name></expr></argument>,
<argument><expr>&amp;<name>itemNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelItem</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>d</name></expr></argument>,
<argument><expr><name>itemOffset</name></expr></argument>,
<argument><expr><name>itemNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelRemove</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogPtr</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemOffset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelRemove</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>DlgObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>,
<argument><expr>&amp;<name>itemOffset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelRemove</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>d</name></expr></argument>,
<argument><expr><name>itemOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelSetGrabber</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>sg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelSetGrabber</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelSetGrabber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelSetGrabber</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelSetResFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRef</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelSetResFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelSetResFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr>&amp;<name>resRef</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelSetResFile</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>resRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelGetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelGetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelGetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelGetSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>ud</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>UserDataObj_New</name></expr></argument>, <argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelSetSettings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UserData</name></type> <name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelSetSettings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelSetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>UserDataObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ud</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelSetSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>ud</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelValidateInput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>ok</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelValidateInput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelValidateInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelValidateInput</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGPanelGetDITLForSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SeqGrabComponent</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>ditl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>requestedSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGPanelGetDITLForSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGPanelGetDITLForSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGPanelGetDITLForSize</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr>&amp;<name>ditl</name></expr></argument>,
<argument><expr>&amp;<name>requestedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>ditl</name></expr></argument>,
<argument><expr><name>PyMac_BuildPoint</name></expr></argument>, <argument><expr><name>requestedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetSrcVideoBounds</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetSrcVideoBounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetSrcVideoBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetSrcVideoBounds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetVideoRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetVideoRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetVideoRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetVideoRect</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetVideoRect</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetVideoRect</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetVideoRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetVideoRect</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetVideoCompressorType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>compressorType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetVideoCompressorType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetVideoCompressorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetVideoCompressorType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>compressorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>compressorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetVideoCompressorType</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>compressorType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetVideoCompressorType</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetVideoCompressorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>compressorType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetVideoCompressorType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>compressorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetVideoCompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompressorComponent</name></type> <name>compressor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>temporalQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>keyFrameRate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetVideoCompressor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetVideoCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>compressor</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>,
<argument><expr>&amp;<name>temporalQuality</name></expr></argument>,
<argument><expr>&amp;<name>keyFrameRate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetVideoCompressor</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>compressor</name></expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>,
<argument><expr><name>temporalQuality</name></expr></argument>,
<argument><expr><name>keyFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetVideoCompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompressorComponent</name></type> <name>compressor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>spatialQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecQ</name></type> <name>temporalQuality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>keyFrameRate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetVideoCompressor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetVideoCompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetVideoCompressor</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>,
<argument><expr>&amp;<name>compressor</name></expr></argument>,
<argument><expr>&amp;<name>spatialQuality</name></expr></argument>,
<argument><expr>&amp;<name>temporalQuality</name></expr></argument>,
<argument><expr>&amp;<name>keyFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lhO&amp;lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>compressor</name></expr></argument>,
<argument><expr><name>spatialQuality</name></expr></argument>,
<argument><expr><name>temporalQuality</name></expr></argument>,
<argument><expr><name>keyFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetVideoDigitizerComponent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetVideoDigitizerComponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetVideoDigitizerComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetVideoDigitizerComponent</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetVideoDigitizerComponent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>vdig</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetVideoDigitizerComponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetVideoDigitizerComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vdig</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetVideoDigitizerComponent</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>vdig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGVideoDigitizerChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGVideoDigitizerChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGVideoDigitizerChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGVideoDigitizerChanged</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGrabFrame</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bufferNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGrabFrame</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGrabFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>bufferNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGrabFrame</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>bufferNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGrabFrameComplete</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bufferNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>done</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGrabFrameComplete</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGrabFrameComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>bufferNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGrabFrameComplete</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>bufferNum</name></expr></argument>,
<argument><expr>&amp;<name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGCompressFrame</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bufferNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGCompressFrame</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGCompressFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>bufferNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGCompressFrame</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>bufferNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetCompressBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>compressSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetCompressBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetCompressBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>compressSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetCompressBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr>&amp;<name>compressSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetCompressBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>compressSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetCompressBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetCompressBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetCompressBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>,
<argument><expr>&amp;<name>compressSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lhO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>compressSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetBufferInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bufferNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixMapHandle</name></type> <name>bufferPM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bufferRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>compressBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>compressBufferRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetBufferInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetBufferInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>bufferNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetBufferInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>bufferNum</name></expr></argument>,
<argument><expr>&amp;<name>bufferPM</name></expr></argument>,
<argument><expr>&amp;<name>bufferRect</name></expr></argument>,
<argument><expr>&amp;<name>compressBuffer</name></expr></argument>,
<argument><expr>&amp;<name>compressBufferRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>bufferPM</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bufferRect</name></expr></argument>,
<argument><expr><name>GWorldObj_New</name></expr></argument>, <argument><expr><name>compressBuffer</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>compressBufferRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetUseScreenBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>useScreenBuffer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetUseScreenBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetUseScreenBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>useScreenBuffer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetUseScreenBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>useScreenBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetUseScreenBuffer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>useScreenBuffer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetUseScreenBuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetUseScreenBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetUseScreenBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>useScreenBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>useScreenBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetFrameRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>frameRate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetFrameRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>frameRate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetFrameRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>frameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetFrameRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>frameRate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetFrameRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetFrameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetFrameRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>frameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>frameRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetPreferredPacketSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>preferredPacketSizeInBytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetPreferredPacketSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetPreferredPacketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>preferredPacketSizeInBytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetPreferredPacketSize</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>preferredPacketSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetPreferredPacketSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>preferredPacketSizeInBytes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetPreferredPacketSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetPreferredPacketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetPreferredPacketSize</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>preferredPacketSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>preferredPacketSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetUserVideoCompressorList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>compressorTypes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetUserVideoCompressorList</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetUserVideoCompressorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>compressorTypes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetUserVideoCompressorList</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>compressorTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetUserVideoCompressorList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>compressorTypes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetUserVideoCompressorList</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetUserVideoCompressorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetUserVideoCompressorList</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>compressorTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>compressorTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetSoundInputDriver</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>driverName</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetSoundInputDriver</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetSoundInputDriver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>driverName</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetSoundInputDriver</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>driverName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetSoundInputDriver</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetSoundInputDriver</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetSoundInputDriver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetSoundInputDriver</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSoundInputDriverChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSoundInputDriverChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSoundInputDriverChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSoundInputDriverChanged</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetSoundRecordChunkSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>seconds</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetSoundRecordChunkSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetSoundRecordChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>seconds</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetSoundRecordChunkSize</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetSoundRecordChunkSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetSoundRecordChunkSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetSoundRecordChunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetSoundRecordChunkSize</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetSoundInputRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetSoundInputRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetSoundInputRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetSoundInputRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetSoundInputRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetSoundInputRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetSoundInputRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetSoundInputRate</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_BuildFixed</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetSoundInputParameters</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>sampleSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>compressionType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetSoundInputParameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetSoundInputParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hhO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>sampleSize</name></expr></argument>,
<argument><expr>&amp;<name>numChannels</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>compressionType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetSoundInputParameters</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>sampleSize</name></expr></argument>,
<argument><expr><name>numChannels</name></expr></argument>,
<argument><expr><name>compressionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetSoundInputParameters</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>sampleSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>numChannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>compressionType</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetSoundInputParameters</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetSoundInputParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetSoundInputParameters</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>sampleSize</name></expr></argument>,
<argument><expr>&amp;<name>numChannels</name></expr></argument>,
<argument><expr>&amp;<name>compressionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lhhO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>sampleSize</name></expr></argument>,
<argument><expr><name>numChannels</name></expr></argument>,
<argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name>compressionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetAdditionalSoundRates</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>rates</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetAdditionalSoundRates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetAdditionalSoundRates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rates</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetAdditionalSoundRates</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetAdditionalSoundRates</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>rates</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetAdditionalSoundRates</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetAdditionalSoundRates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetAdditionalSoundRates</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetFontName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringPtr</name></type> <name>pstr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetFontName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetFontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>pstr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetFontName</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetFontSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>fontSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetFontSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>fontSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetFontSize</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>fontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetTextForeColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>theColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetTextForeColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetTextForeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetTextForeColor</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>theColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>theColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetTextBackColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>theColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetTextBackColor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetTextBackColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetTextBackColor</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>theColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>theColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetJustification</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>just</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetJustification</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetJustification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>just</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetJustification</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>just</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGGetTextReturnToSpaceValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>rettospace</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGGetTextReturnToSpaceValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGGetTextReturnToSpaceValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGGetTextReturnToSpaceValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr>&amp;<name>rettospace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>rettospace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_SGSetTextReturnToSpaceValue</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SGChannel</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>rettospace</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SGSetTextReturnToSpaceValue</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>SGSetTextReturnToSpaceValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>,
<argument><expr>&amp;<name>rettospace</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>SGSetTextReturnToSpaceValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>rettospace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetCurrentClientName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>str</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetCurrentClientName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetCurrentClientName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetCurrentClientName</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputSetClientName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>str</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputSetClientName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputSetClientName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputSetClientName</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetClientName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>str</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetClientName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetClientName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetClientName</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputBegin</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputBegin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputBegin</name><argument_list>(<argument><expr><name>vo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputEnd</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputEnd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputEnd</name><argument_list>(<argument><expr><name>vo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputSetDisplayMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>displayModeID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputSetDisplayMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputSetDisplayMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr>&amp;<name>displayModeID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputSetDisplayMode</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>displayModeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetDisplayMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>displayModeID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetDisplayMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetDisplayMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetDisplayMode</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr>&amp;<name>displayModeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>displayModeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GWorldPtr</name></type> <name>gw</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetGWorld</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr>&amp;<name>gw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>GWorldObj_New</name></expr></argument>, <argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetIndSoundOutput</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>outputComponent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetIndSoundOutput</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetIndSoundOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetIndSoundOutput</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr>&amp;<name>outputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>outputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetClock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>clock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetClock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetClock</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr>&amp;<name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputSetEchoPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>echoPort</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputSetEchoPort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputSetEchoPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>echoPort</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputSetEchoPort</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>echoPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputGetIndImageDecompressor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>codec</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputGetIndImageDecompressor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputGetIndImageDecompressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputGetIndImageDecompressor</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr>&amp;<name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTVideoOutputBaseSetEchoPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTVideoOutputComponent</name></type> <name>vo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>echoPort</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTVideoOutputBaseSetEchoPort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTVideoOutputBaseSetEchoPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vo</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>echoPort</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTVideoOutputBaseSetEchoPort</name><argument_list>(<argument><expr><name>vo</name></expr></argument>,
<argument><expr><name>echoPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetChunkManagementFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>flagsMask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetChunkManagementFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetChunkManagementFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>flagsMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetChunkManagementFlags</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>flagsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetChunkManagementFlags</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetChunkManagementFlags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetChunkManagementFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetChunkManagementFlags</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetPurgeableChunkMemoryAllowance</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>allowance</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetPurgeableChunkMemoryAllowance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetPurgeableChunkMemoryAllowance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>allowance</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetPurgeableChunkMemoryAllowance</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>allowance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetPurgeableChunkMemoryAllowance</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>allowance</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetPurgeableChunkMemoryAllowance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetPurgeableChunkMemoryAllowance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetPurgeableChunkMemoryAllowance</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>allowance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>allowance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaEmptyAllPurgeableChunks</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaEmptyAllPurgeableChunks</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaEmptyAllPurgeableChunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaEmptyAllPurgeableChunks</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetHandlerCapabilities</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsMask</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetHandlerCapabilities</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetHandlerCapabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>flagsMask</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetHandlerCapabilities</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>flagsMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaIdle</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atMediaTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flagsOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeRecord</name></type> <name>movieTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaIdle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>atMediaTime</name></expr></argument>,
<argument><expr>&amp;<name>flagsIn</name></expr></argument>,
<argument><expr><name>QtTimeRecord_Convert</name></expr></argument>, <argument><expr>&amp;<name>movieTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaIdle</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>atMediaTime</name></expr></argument>,
<argument><expr><name>flagsIn</name></expr></argument>,
<argument><expr>&amp;<name>flagsOut</name></expr></argument>,
<argument><expr>&amp;<name>movieTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>flagsOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetMediaInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetMediaInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetMediaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetMediaInfo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaPutMediaInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>h</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaPutMediaInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaPutMediaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaPutMediaInfo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetActive</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enableMedia</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetActive</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>enableMedia</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetActive</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>enableMedia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetRate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetRate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetRate</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGGetStatus</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>statusErr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGGetStatus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGGetStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGGetStatus</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>statusErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>statusErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaTrackEdited</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaTrackEdited</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaTrackEdited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaTrackEdited</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetMediaTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>newTimeScale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetMediaTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetMediaTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>newTimeScale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetMediaTimeScale</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>newTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetMovieTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>newTimeScale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetMovieTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetMovieTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>newTimeScale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetMovieTimeScale</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>newTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetGWorld</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>aPort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDHandle</name></type> <name>aGD</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetGWorld</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetGWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>GrafObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aPort</name></expr></argument>,
<argument><expr><name>OptResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>aGD</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetGWorld</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>aPort</name></expr></argument>,
<argument><expr><name>aGD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetDimensions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>height</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetDimensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetDimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetDimensions</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>,
<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetClip</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>theClip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetClip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>theClip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetClip</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>theClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetTrackOpaque</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>trackIsOpaque</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetTrackOpaque</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetTrackOpaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetTrackOpaque</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>trackIsOpaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>trackIsOpaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetGraphicsMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>opColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetGraphicsMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetGraphicsMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetGraphicsMode</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument>,
<argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetGraphicsMode</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RGBColor</name></type> <name>opColor</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetGraphicsMode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetGraphicsMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetGraphicsMode</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>opColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGSetVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGSetVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGSetVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGSetVolume</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetSoundBalance</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>balance</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetSoundBalance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetSoundBalance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>balance</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetSoundBalance</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetSoundBalance</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>balance</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetSoundBalance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetSoundBalance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetSoundBalance</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetNextBoundsChange</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>when</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetNextBoundsChange</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetNextBoundsChange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetNextBoundsChange</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetSrcRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>atMediaTime</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetSrcRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetSrcRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>,
<argument><expr>&amp;<name>atMediaTime</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetSrcRgn</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>rgn</name></expr></argument>,
<argument><expr><name>atMediaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaPreroll</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaPreroll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaPreroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>time</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaPreroll</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSampleDescriptionChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSampleDescriptionChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSampleDescriptionChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSampleDescriptionChanged</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaHasCharacteristic</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>characteristic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>hasIt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaHasCharacteristic</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaHasCharacteristic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>characteristic</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaHasCharacteristic</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>characteristic</name></expr></argument>,
<argument><expr>&amp;<name>hasIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>hasIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetOffscreenBufferSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CTabHandle</name></type> <name>ctab</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetOffscreenBufferSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetOffscreenBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>depth</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ctab</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetOffscreenBufferSize</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>bounds</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>ctab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>PyMac_BuildRect</name></expr></argument>, <argument><expr>&amp;<name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetHints</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hints</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetHints</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>hints</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetHints</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>requestedLanguage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>actualLanguage</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr>&amp;<name>requestedLanguage</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetName</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>requestedLanguage</name></expr></argument>,
<argument><expr>&amp;<name>actualLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>actualLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaForceUpdate</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>forceUpdateFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaForceUpdate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaForceUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>forceUpdateFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaForceUpdate</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>forceUpdateFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetDrawingRgn</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>partialRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetDrawingRgn</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetDrawingRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetDrawingRgn</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>partialRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>partialRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGSetActiveSegment</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>activeStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>activeDuration</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGSetActiveSegment</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGSetActiveSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>activeStart</name></expr></argument>,
<argument><expr>&amp;<name>activeDuration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGSetActiveSegment</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>activeStart</name></expr></argument>,
<argument><expr><name>activeDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaInvalidateRegion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>invalRgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaInvalidateRegion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaInvalidateRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>invalRgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaInvalidateRegion</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>invalRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetNextStepTime</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>mediaTimeIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeValue</name></type> <name>mediaTimeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>rate</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetNextStepTime</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetNextStepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hlO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>mediaTimeIn</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetNextStepTime</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>mediaTimeIn</name></expr></argument>,
<argument><expr>&amp;<name>mediaTimeOut</name></expr></argument>,
<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>mediaTimeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaChangedNonPrimarySource</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inputIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaChangedNonPrimarySource</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaChangedNonPrimarySource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>inputIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaChangedNonPrimarySource</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>inputIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaTrackReferencesChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaTrackReferencesChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaTrackReferencesChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaTrackReferencesChanged</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaReleaseSampleDataPointer</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaReleaseSampleDataPointer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaReleaseSampleDataPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>sampleNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaReleaseSampleDataPointer</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>sampleNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaTrackPropertyAtomChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaTrackPropertyAtomChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaTrackPropertyAtomChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaTrackPropertyAtomChanged</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetVideoParam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whichParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetVideoParam</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetVideoParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>whichParam</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetVideoParam</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>whichParam</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetVideoParam</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>whichParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetVideoParam</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetVideoParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>whichParam</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetVideoParam</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>whichParam</name></expr></argument>,
<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lH"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaCompare</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>isOK</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Media</name></type> <name>srcMedia</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>srcMediaComponent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaCompare</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>MediaObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcMedia</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>srcMediaComponent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaCompare</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>isOK</name></expr></argument>,
<argument><expr><name>srcMedia</name></expr></argument>,
<argument><expr><name>srcMediaComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>isOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetClock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>clock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetClock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetClock</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetSoundOutputComponent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>outputComponent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetSoundOutputComponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetSoundOutputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>CmpObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>outputComponent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetSoundOutputComponent</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>outputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetSoundOutputComponent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Component</name></type> <name>outputComponent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetSoundOutputComponent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetSoundOutputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetSoundOutputComponent</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>outputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>CmpObj_New</name></expr></argument>, <argument><expr><name>outputComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetSoundLocalizationData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetSoundLocalizationData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetSoundLocalizationData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetSoundLocalizationData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetInvalidRegion</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RgnHandle</name></type> <name>rgn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetInvalidRegion</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetInvalidRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>rgn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetInvalidRegion</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>rgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSampleDescriptionB2N</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>sampleDescriptionH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSampleDescriptionB2N</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSampleDescriptionB2N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDescriptionH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSampleDescriptionB2N</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>sampleDescriptionH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSampleDescriptionN2B</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SampleDescriptionHandle</name></type> <name>sampleDescriptionH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSampleDescriptionN2B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSampleDescriptionN2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>sampleDescriptionH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSampleDescriptionN2B</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>sampleDescriptionH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaFlushNonPrimarySourceData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inputIndex</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaFlushNonPrimarySourceData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaFlushNonPrimarySourceData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>inputIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaFlushNonPrimarySourceData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>inputIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetURLLink</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>displayWhere</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>urlLink</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetURLLink</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetURLLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>displayWhere</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetURLLink</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>displayWhere</name></expr></argument>,
<argument><expr>&amp;<name>urlLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>urlLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaHitTestForTargetRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>targetRefCon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaHitTestForTargetRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaHitTestForTargetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>loc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaHitTestForTargetRefCon</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>loc</name></expr></argument>,
<argument><expr>&amp;<name>targetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>targetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaHitTestTargetRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>targetRefCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>wasHit</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaHitTestTargetRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaHitTestTargetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>targetRefCon</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>loc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaHitTestTargetRefCon</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>targetRefCon</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>loc</name></expr></argument>,
<argument><expr>&amp;<name>wasHit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>wasHit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaDisposeTargetRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>targetRefCon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaDisposeTargetRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaDisposeTargetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>targetRefCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaDisposeTargetRefCon</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>targetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaTargetRefConsEqual</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>firstRefCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>secondRefCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>equal</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaTargetRefConsEqual</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaTargetRefConsEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>firstRefCon</name></expr></argument>,
<argument><expr>&amp;<name>secondRefCon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaTargetRefConsEqual</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>firstRefCon</name></expr></argument>,
<argument><expr><name>secondRefCon</name></expr></argument>,
<argument><expr>&amp;<name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaPrePrerollCancel</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>refcon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaPrePrerollCancel</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaPrePrerollCancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>refcon</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaPrePrerollCancel</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>refcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaEnterEmptyEdit</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaEnterEmptyEdit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaEnterEmptyEdit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaEnterEmptyEdit</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaCurrentMediaQueuedData</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>milliSecs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaCurrentMediaQueuedData</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaCurrentMediaQueuedData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaCurrentMediaQueuedData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>milliSecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>milliSecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetEffectiveVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetEffectiveVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetEffectiveVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetEffectiveVolume</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetSoundLevelMeteringEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enabled</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetSoundLevelMeteringEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetSoundLevelMeteringEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetSoundLevelMeteringEnabled</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetSoundLevelMeteringEnabled</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>enable</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetSoundLevelMeteringEnabled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetSoundLevelMeteringEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>enable</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetSoundLevelMeteringEnabled</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetEffectiveSoundBalance</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>balance</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetEffectiveSoundBalance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetEffectiveSoundBalance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetEffectiveSoundBalance</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetScreenLock</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>lockIt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetScreenLock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetScreenLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>lockIt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetScreenLock</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>lockIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetErrorString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>theError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>errorString</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetErrorString</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetErrorString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>theError</name></expr></argument>,
<argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>errorString</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetErrorString</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>theError</name></expr></argument>,
<argument><expr><name>errorString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetSoundEqualizerBandLevels</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt8</name></type> <name>bandLevels</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetSoundEqualizerBandLevels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetSoundEqualizerBandLevels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetSoundEqualizerBandLevels</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>bandLevels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>bandLevels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaDoIdleActions</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaDoIdleActions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaDoIdleActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaDoIdleActions</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetSoundBassAndTreble</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>treble</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetSoundBassAndTreble</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetSoundBassAndTreble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;hh"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>bass</name></expr></argument>,
<argument><expr>&amp;<name>treble</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetSoundBassAndTreble</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>bass</name></expr></argument>,
<argument><expr><name>treble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetSoundBassAndTreble</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>treble</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetSoundBassAndTreble</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetSoundBassAndTreble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetSoundBassAndTreble</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>bass</name></expr></argument>,
<argument><expr>&amp;<name>treble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lhh"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>bass</name></expr></argument>,
<argument><expr><name>treble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaTimeBaseChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaTimeBaseChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaTimeBaseChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaTimeBaseChanged</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaMCIsPlayerEvent</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EventRecord</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>handledIt</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaMCIsPlayerEvent</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaMCIsPlayerEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetEventRecord</name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaMCIsPlayerEvent</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>e</name></expr></argument>,
<argument><expr>&amp;<name>handledIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lb"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>handledIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetMediaLoadState</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mediaLoadState</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetMediaLoadState</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetMediaLoadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetMediaLoadState</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>mediaLoadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>mediaLoadState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaVideoOutputChanged</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentInstance</name></type> <name>vout</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaVideoOutputChanged</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaVideoOutputChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>vout</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaVideoOutputChanged</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaEmptySampleCache</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sampleCount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaEmptySampleCache</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaEmptySampleCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>sampleNum</name></expr></argument>,
<argument><expr>&amp;<name>sampleCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaEmptySampleCache</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>sampleNum</name></expr></argument>,
<argument><expr><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGetPublicInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>infoSelector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>infoDataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>ioDataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGetPublicInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGetPublicInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoSelector</name></expr></argument>,
<argument><expr>&amp;<name>infoDataPtr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGetPublicInfo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>infoSelector</name></expr></argument>,
<argument><expr><name>infoDataPtr</name></expr></argument>,
<argument><expr>&amp;<name>ioDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ioDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaSetPublicInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSType</name></type> <name>infoSelector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>infoDataPtr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>dataSize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaSetPublicInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaSetPublicInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;sl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>infoSelector</name></expr></argument>,
<argument><expr>&amp;<name>infoDataPtr</name></expr></argument>,
<argument><expr>&amp;<name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaSetPublicInfo</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>infoSelector</name></expr></argument>,
<argument><expr><name>infoDataPtr</name></expr></argument>,
<argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaRefConSetProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>propertyValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaRefConSetProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaRefConSetProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>propertyValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaRefConSetProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaRefConGetProperty</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>propertyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type> <name>propertyValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaRefConGetProperty</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaRefConGetProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>,
<argument><expr>&amp;<name>propertyType</name></expr></argument>,
<argument><expr>&amp;<name>propertyValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaRefConGetProperty</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>,
<argument><expr><name>propertyType</name></expr></argument>,
<argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaNavigateTargetRefCon</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>navigation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>refCon</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaNavigateTargetRefCon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaNavigateTargetRefCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr>&amp;<name>navigation</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaNavigateTargetRefCon</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>navigation</name></expr></argument>,
<argument><expr>&amp;<name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>refCon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGGetIdleManager</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>pim</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGGetIdleManager</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGGetIdleManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGGetIdleManager</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr>&amp;<name>pim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>IdleManagerObj_New</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MediaGSetIdleManager</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MediaHandler</name></type> <name>mh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdleManager</name></type> <name>im</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MediaGSetIdleManager</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MediaGSetIdleManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mh</name></expr></argument>,
<argument><expr><name>IdleManagerObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>im</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MediaGSetIdleManager</name><argument_list>(<argument><expr><name>mh</name></expr></argument>,
<argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTMIDIGetMIDIPorts</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIPortListHandle</name></type> <name>inputPorts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIPortListHandle</name></type> <name>outputPorts</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTMIDIGetMIDIPorts</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTMIDIGetMIDIPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTMIDIGetMIDIPorts</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr>&amp;<name>inputPorts</name></expr></argument>,
<argument><expr>&amp;<name>outputPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>inputPorts</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>outputPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTMIDIUseSendPort</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>portIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inUse</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTMIDIUseSendPort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTMIDIUseSendPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>portIndex</name></expr></argument>,
<argument><expr>&amp;<name>inUse</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTMIDIUseSendPort</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>portIndex</name></expr></argument>,
<argument><expr><name>inUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_QTMIDISendMIDI</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIComponent</name></type> <name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>portIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicMIDIPacket</name></type> <name>mp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>QTMIDISendMIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>QTMIDISendMIDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>ci</name></expr></argument>,
<argument><expr>&amp;<name>portIndex</name></expr></argument>,
<argument><expr><name>QtMusicMIDIPacket_Convert</name></expr></argument>, <argument><expr>&amp;<name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>QTMIDISendMIDI</name><argument_list>(<argument><expr><name>ci</name></expr></argument>,
<argument><expr><name>portIndex</name></expr></argument>,
<argument><expr>&amp;<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetPart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>midiChannel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>polyphony</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetPart</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetPart</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr>&amp;<name>midiChannel</name></expr></argument>,
<argument><expr>&amp;<name>polyphony</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>midiChannel</name></expr></argument>,
<argument><expr><name>polyphony</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>midiChannel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>polyphony</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPart</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>midiChannel</name></expr></argument>,
<argument><expr>&amp;<name>polyphony</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPart</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>midiChannel</name></expr></argument>,
<argument><expr><name>polyphony</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartInstrumentNumber</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>instrumentNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartInstrumentNumber</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartInstrumentNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>instrumentNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartInstrumentNumber</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>instrumentNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetPartInstrumentNumber</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetPartInstrumentNumber</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetPartInstrumentNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetPartInstrumentNumber</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicStorePartInstrument</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>instrumentNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicStorePartInstrument</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicStorePartInstrument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>instrumentNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicStorePartInstrument</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>instrumentNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetPartAtomicInstrument</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AtomicInstrument</name></type> <name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetPartAtomicInstrument</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetPartAtomicInstrument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetPartAtomicInstrument</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr>&amp;<name>ai</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartAtomicInstrument</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AtomicInstrumentPtr</name></type> <name>aiP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartAtomicInstrument</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartAtomicInstrument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lsl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>aiP</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartAtomicInstrument</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>aiP</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetPartKnob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetPartKnob</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetPartKnob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>knobID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetPartKnob</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>knobID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartKnob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartKnob</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartKnob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>knobID</name></expr></argument>,
<argument><expr>&amp;<name>knobValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartKnob</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>knobID</name></expr></argument>,
<argument><expr><name>knobValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetKnob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetKnob</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetKnob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>knobID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetKnob</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>knobID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetKnob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetKnob</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetKnob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>knobID</name></expr></argument>,
<argument><expr>&amp;<name>knobValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetKnob</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>knobID</name></expr></argument>,
<argument><expr><name>knobValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetPartName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringPtr</name></type> <name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetPartName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetPartName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetPartName</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartName</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringPtr</name></type> <name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartName</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ls"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartName</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicPlayNote</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>velocity</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicPlayNote</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicPlayNote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>pitch</name></expr></argument>,
<argument><expr>&amp;<name>velocity</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicPlayNote</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>pitch</name></expr></argument>,
<argument><expr><name>velocity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicResetPart</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicResetPart</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicResetPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicResetPart</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartController</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicController</name></type> <name>controllerNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>controllerValue</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartController</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>controllerNumber</name></expr></argument>,
<argument><expr>&amp;<name>controllerValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartController</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>controllerNumber</name></expr></argument>,
<argument><expr><name>controllerValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetPartController</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicController</name></type> <name>controllerNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetPartController</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetPartController</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>controllerNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetPartController</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>controllerNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetInstrumentNames</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiableInstruments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>instrumentNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>instrumentCategoryLasts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>instrumentCategoryNames</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetInstrumentNames</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetInstrumentNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>modifiableInstruments</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetInstrumentNames</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>modifiableInstruments</name></expr></argument>,
<argument><expr>&amp;<name>instrumentNames</name></expr></argument>,
<argument><expr>&amp;<name>instrumentCategoryLasts</name></expr></argument>,
<argument><expr>&amp;<name>instrumentCategoryNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>instrumentNames</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>instrumentCategoryLasts</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>instrumentCategoryNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetDrumNames</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>modifiableInstruments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>instrumentNumbers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>instrumentNames</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetDrumNames</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetDrumNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>modifiableInstruments</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetDrumNames</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>modifiableInstruments</name></expr></argument>,
<argument><expr>&amp;<name>instrumentNumbers</name></expr></argument>,
<argument><expr>&amp;<name>instrumentNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>instrumentNumbers</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>instrumentNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetMasterTune</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetMasterTune</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetMasterTune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetMasterTune</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetMasterTune</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>masterTune</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetMasterTune</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetMasterTune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>masterTune</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetMasterTune</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>masterTune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetDeviceConnection</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetDeviceConnection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetDeviceConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetDeviceConnection</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>,
<argument><expr>&amp;<name>id1</name></expr></argument>,
<argument><expr>&amp;<name>id2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>id1</name></expr></argument>,
<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicUseDeviceConnection</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicUseDeviceConnection</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicUseDeviceConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>id1</name></expr></argument>,
<argument><expr>&amp;<name>id2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicUseDeviceConnection</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>id1</name></expr></argument>,
<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetKnobSettingStrings</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>isGlobal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settingsNames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settingsCategoryLasts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>settingsCategoryNames</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetKnobSettingStrings</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetKnobSettingStrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>knobIndex</name></expr></argument>,
<argument><expr>&amp;<name>isGlobal</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetKnobSettingStrings</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>knobIndex</name></expr></argument>,
<argument><expr><name>isGlobal</name></expr></argument>,
<argument><expr>&amp;<name>settingsNames</name></expr></argument>,
<argument><expr>&amp;<name>settingsCategoryLasts</name></expr></argument>,
<argument><expr>&amp;<name>settingsCategoryNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>settingsNames</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>settingsCategoryLasts</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>settingsCategoryNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetMIDIPorts</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>inputPortCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>outputPortCount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetMIDIPorts</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetMIDIPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetMIDIPorts</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr>&amp;<name>inputPortCount</name></expr></argument>,
<argument><expr>&amp;<name>outputPortCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>inputPortCount</name></expr></argument>,
<argument><expr><name>outputPortCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSendMIDI</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>portIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicMIDIPacket</name></type> <name>mp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSendMIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSendMIDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>portIndex</name></expr></argument>,
<argument><expr><name>QtMusicMIDIPacket_Convert</name></expr></argument>, <argument><expr>&amp;<name>mp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSendMIDI</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>portIndex</name></expr></argument>,
<argument><expr>&amp;<name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetOfflineTimeTo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>newTimeStamp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetOfflineTimeTo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetOfflineTimeTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>newTimeStamp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetOfflineTimeTo</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>newTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetInfoText</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>selector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>textH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>styleH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetInfoText</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetInfoText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>selector</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetInfoText</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>selector</name></expr></argument>,
<argument><expr>&amp;<name>textH</name></expr></argument>,
<argument><expr>&amp;<name>styleH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>textH</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>styleH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGetInstrumentInfo</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>getInstrumentInfoFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InstrumentInfoListHandle</name></type> <name>infoListH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGetInstrumentInfo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGetInstrumentInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>getInstrumentInfoFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGetInstrumentInfo</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>getInstrumentInfoFlags</name></expr></argument>,
<argument><expr>&amp;<name>infoListH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>infoListH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicTask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicTask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicTask</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartInstrumentNumberInterruptSafe</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>instrumentNumber</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartInstrumentNumberInterruptSafe</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartInstrumentNumberInterruptSafe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;ll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>instrumentNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartInstrumentNumberInterruptSafe</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>instrumentNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicSetPartSoundLocalization</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicSetPartSoundLocalization</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicSetPartSoundLocalization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lO&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicSetPartSoundLocalization</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGenericConfigure</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>baseResID</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGenericConfigure</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGenericConfigure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>mode</name></expr></argument>,
<argument><expr>&amp;<name>flags</name></expr></argument>,
<argument><expr>&amp;<name>baseResID</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGenericConfigure</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>baseResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGenericGetKnobList</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>knobType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GenericKnobDescriptionListHandle</name></type> <name>gkdlH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGenericGetKnobList</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGenericGetKnobList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>knobType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGenericGetKnobList</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>knobType</name></expr></argument>,
<argument><expr>&amp;<name>gkdlH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>gkdlH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicGenericSetResourceNumbers</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>resourceIDH</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicGenericSetResourceNumbers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicGenericSetResourceNumbers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>resourceIDH</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicGenericSetResourceNumbers</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>resourceIDH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicDerivedMIDISend</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicMIDIPacket</name></type> <name>packet</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicDerivedMIDISend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicDerivedMIDISend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr><name>QtMusicMIDIPacket_Convert</name></expr></argument>, <argument><expr>&amp;<name>packet</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicDerivedMIDISend</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr>&amp;<name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicDerivedOpenResFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicDerivedOpenResFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicDerivedOpenResFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicDerivedOpenResFile</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MusicDerivedCloseResFile</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MusicComponent</name></type> <name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>resRefNum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MusicDerivedCloseResFile</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MusicDerivedCloseResFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;h"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>mc</name></expr></argument>,
<argument><expr>&amp;<name>resRefNum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>MusicDerivedCloseResFile</name><argument_list>(<argument><expr><name>mc</name></expr></argument>,
<argument><expr><name>resRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NAUnregisterMusicDevice</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NoteAllocator</name></type> <name>na</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>index</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NAUnregisterMusicDevice</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NAUnregisterMusicDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>na</name></expr></argument>,
<argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NAUnregisterMusicDevice</name><argument_list>(<argument><expr><name>na</name></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NASaveMusicConfiguration</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NoteAllocator</name></type> <name>na</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NASaveMusicConfiguration</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NASaveMusicConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>na</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NASaveMusicConfiguration</name><argument_list>(<argument><expr><name>na</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NAGetMIDIPorts</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NoteAllocator</name></type> <name>na</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIPortListHandle</name></type> <name>inputPorts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QTMIDIPortListHandle</name></type> <name>outputPorts</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NAGetMIDIPorts</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NAGetMIDIPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>na</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NAGetMIDIPorts</name><argument_list>(<argument><expr><name>na</name></expr></argument>,
<argument><expr>&amp;<name>inputPorts</name></expr></argument>,
<argument><expr>&amp;<name>outputPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;O&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>inputPorts</name></expr></argument>,
<argument><expr><name>ResObj_New</name></expr></argument>, <argument><expr><name>outputPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_NATask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NoteAllocator</name></type> <name>na</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NATask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>NATask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>na</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>NATask</name><argument_list>(<argument><expr><name>na</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetHeader</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type> <name>header</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetHeader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;s"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>header</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetHeader</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneGetTimeBase</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeBase</name></type> <name>tb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneGetTimeBase</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneGetTimeBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneGetTimeBase</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr>&amp;<name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"lO&amp;"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>TimeBaseObj_New</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetTimeScale</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneGetTimeScale</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeScale</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneGetTimeScale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneGetTimeScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneGetTimeScale</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr>&amp;<name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneInstant</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tune</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tunePosition</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneInstant</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneInstant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>tunePosition</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneInstant</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr>&amp;<name>tune</name></expr></argument>,
<argument><expr><name>tunePosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"ll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>tune</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneStop</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>stopFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneStop</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>stopFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneStop</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>stopFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Fixed</name></type> <name>volume</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr><name>PyMac_GetFixed</name></expr></argument>, <argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetVolume</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneGetVolume</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneGetVolume</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneGetVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneGetVolume</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TunePreroll</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TunePreroll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TunePreroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TunePreroll</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneUnroll</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneUnroll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneUnroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneUnroll</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetPartTranspose</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>part</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>transpose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>velocityShift</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetPartTranspose</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetPartTranspose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;lll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>part</name></expr></argument>,
<argument><expr>&amp;<name>transpose</name></expr></argument>,
<argument><expr>&amp;<name>velocityShift</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetPartTranspose</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>part</name></expr></argument>,
<argument><expr><name>transpose</name></expr></argument>,
<argument><expr><name>velocityShift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneGetNoteAllocator</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NoteAllocator</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneGetNoteAllocator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneGetNoteAllocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneGetNoteAllocator</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_New</name></expr></argument>, <argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetSofter</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>softer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetSofter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetSofter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>softer</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetSofter</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>softer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneTask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneTask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneTask</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetBalance</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>balance</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetBalance</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetBalance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>balance</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetBalance</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetSoundLocalization</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Handle</name></type> <name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetSoundLocalization</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetSoundLocalization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr><name>ResObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetSoundLocalization</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetHeaderWithSize</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> *</type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetHeaderWithSize</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetHeaderWithSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;sl"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>header</name></expr></argument>,
<argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetHeaderWithSize</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>header</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneSetPartMix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>partNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>balance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mixFlags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneSetPartMix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneSetPartMix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;llll"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>partNumber</name></expr></argument>,
<argument><expr>&amp;<name>volume</name></expr></argument>,
<argument><expr>&amp;<name>balance</name></expr></argument>,
<argument><expr>&amp;<name>mixFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneSetPartMix</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>partNumber</name></expr></argument>,
<argument><expr><name>volume</name></expr></argument>,
<argument><expr><name>balance</name></expr></argument>,
<argument><expr><name>mixFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_TuneGetPartMix</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ComponentResult</name></type> <name>_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TunePlayer</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>partNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>volumeOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>balanceOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mixFlagsOut</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TuneGetPartMix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>TuneGetPartMix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;l"</expr></argument>,
<argument><expr><name>CmpInstObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>,
<argument><expr>&amp;<name>partNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_rv</name> = <call><name>TuneGetPartMix</name><argument_list>(<argument><expr><name>tp</name></expr></argument>,
<argument><expr><name>partNumber</name></expr></argument>,
<argument><expr>&amp;<name>volumeOut</name></expr></argument>,
<argument><expr>&amp;<name>balanceOut</name></expr></argument>,
<argument><expr>&amp;<name>mixFlagsOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"llll"</expr></argument>,
<argument><expr><name>_rv</name></expr></argument>,
<argument><expr><name>volumeOut</name></expr></argument>,
<argument><expr><name>balanceOut</name></expr></argument>,
<argument><expr><name>mixFlagsOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_AlignWindow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>front</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AlignWindow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>AlignWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;b"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>wp</name></expr></argument>,
<argument><expr>&amp;<name>front</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>AlignWindow</name><argument_list>(<argument><expr><name>wp</name></expr></argument>,
<argument><expr><name>front</name></expr></argument>,
<argument><expr>(<name>Rect</name> *)0</expr></argument>,
<argument><expr>(<name>ICMAlignmentProcRecordPtr</name>)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_DragAlignedWindow</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WindowPtr</name></type> <name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>startPt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Rect</name></type> <name>boundsRect</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DragAlignedWindow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>DragAlignedWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;O&amp;O&amp;"</expr></argument>,
<argument><expr><name>WinObj_Convert</name></expr></argument>, <argument><expr>&amp;<name>wp</name></expr></argument>,
<argument><expr><name>PyMac_GetPoint</name></expr></argument>, <argument><expr>&amp;<name>startPt</name></expr></argument>,
<argument><expr><name>PyMac_GetRect</name></expr></argument>, <argument><expr>&amp;<name>boundsRect</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>DragAlignedWindow</name><argument_list>(<argument><expr><name>wp</name></expr></argument>,
<argument><expr><name>startPt</name></expr></argument>,
<argument><expr>&amp;<name>boundsRect</name></expr></argument>,
<argument><expr>(<name>Rect</name> *)0</expr></argument>,
<argument><expr>(<name>ICMAlignmentProcRecordPtr</name>)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Qt_MoviesTask</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxMilliSecToUse</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MoviesTask</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyMac_PRECHECK</name><argument_list>(<argument><expr><name>MoviesTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"l"</expr></argument>,
<argument><expr>&amp;<name>maxMilliSecToUse</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>MoviesTask</name><argument_list>(<argument><expr>(<name>Movie</name>)0</expr></argument>,
<argument><expr><name>maxMilliSecToUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Qt_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"EnterMovies"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_EnterMovies</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ExitMovies"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ExitMovies</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviesError"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetMoviesError</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClearMoviesStickyError"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ClearMoviesStickyError</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMoviesStickyError"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetMoviesStickyError</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetWallClockTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetWallClockTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeBase wallClockTimeBase)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTIdleManagerOpen"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTIdleManagerOpen</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (IdleManager _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CreateMovieControl"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CreateMovieControl</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr theWindow, Movie theMovie, UInt32 options) -&gt; (Rect localRect, ControlHandle returnedControl)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DisposeMatte"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DisposeMatte</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle theMatte) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long flags) -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetTimeUntilNextTask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetTimeUntilNextTask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long scale) -&gt; (long duration)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetDataHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetDataHandler</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataHandlerSubType, long flags) -&gt; (Component _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PasteHandleIntoMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_PasteHandleIntoMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle h, OSType handleType, Movie theMovie, long flags, ComponentInstance userComp) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMovieImporterForDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetMovieImporterForDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType dataRefType, Handle dataRef, long flags) -&gt; (Component importer)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetMIMETypeInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetMIMETypeInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(char* mimeStringStart, short mimeStringLength, OSType infoSelector, void * infoDataPtr) -&gt; (long infoDataSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TrackTimeToMediaTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TrackTimeToMediaTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeValue value, Track theTrack) -&gt; (TimeValue _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewUserData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewUserData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UserData theUserData)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewUserDataFromHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewUserDataFromHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle h) -&gt; (UserData theUserData)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CreateMovieFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CreateMovieFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fileSpec, OSType creator, ScriptCode scriptTag, long createMovieFileFlags) -&gt; (short resRefNum, Movie newmovie)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"OpenMovieFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_OpenMovieFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fileSpec, SInt8 permission) -&gt; (short resRefNum)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CloseMovieFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CloseMovieFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resRefNum) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DeleteMovieFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DeleteMovieFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fileSpec) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resRefNum, short resId, short newMovieFlags) -&gt; (Movie theMovie, short resId, Boolean dataRefWasChanged)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle h, short newMovieFlags) -&gt; (Movie theMovie, Boolean dataRefWasChanged)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromDataFork"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromDataFork</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short fRefNum, long fileOffset, short newMovieFlags) -&gt; (Movie theMovie, Boolean dataRefWasChanged)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromDataFork64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromDataFork64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long fRefNum, wide fileOffset, short newMovieFlags) -&gt; (Movie theMovie, Boolean dataRefWasChanged)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short flags, Handle dataRef, OSType dtaRefType) -&gt; (Movie m, short id)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromStorageOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromStorageOffset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, wide fileOffset, short newMovieFlags) -&gt; (Movie theMovie, Boolean dataRefWasCataRefType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieForDataRefFromHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieForDataRefFromHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle h, short newMovieFlags, Handle dataRef, OSType dataRefType) -&gt; (Movie theMovie, Boolean dataRefWasChanged)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"RemoveMovieResource"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_RemoveMovieResource</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resRefNum, short resId) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CreateMovieStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CreateMovieStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType, OSType creator, ScriptCode scriptTag, long createMovieFileFlags) -&gt; (DataHandler outDataHandler, Movie newmovie)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"OpenMovieStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_OpenMovieStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType, long flags) -&gt; (DataHandler outDataHandler)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CloseMovieStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CloseMovieStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DeleteMovieStorage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DeleteMovieStorage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CreateShortcutMovieFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CreateShortcutMovieFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fileSpec, OSType creator, ScriptCode scriptTag, long createMovieFileFlags, Handle targetDataRef, OSType targetDataRefType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CanQuickTimeOpenFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CanQuickTimeOpenFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fileSpec, OSType fileType, OSType fileNameExtension, UInt32 inFlags) -&gt; (Boolean outCanOpenWithGraphicsImporter, Boolean outCanOpenAsMovie, Boolean outPreferGraphicsImporter)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CanQuickTimeOpenDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CanQuickTimeOpenDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType, UInt32 inFlags) -&gt; (Boolean outCanOpenWithGraphicsImporter, Boolean outCanOpenAsMovie, Boolean outPreferGraphicsImporter)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewMovieFromScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewMovieFromScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long newMovieFlags) -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTNewAlias"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTNewAlias</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec fss, Boolean minimal) -&gt; (AliasHandle alias)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"EndFullScreen"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_EndFullScreen</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Ptr fullState, long flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddSoundDescriptionExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_AddSoundDescriptionExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SoundDescriptionHandle desc, Handle extension, OSType idType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetSoundDescriptionExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetSoundDescriptionExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SoundDescriptionHandle desc, OSType idType) -&gt; (Handle extension)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"RemoveSoundDescriptionExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_RemoveSoundDescriptionExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SoundDescriptionHandle desc, OSType idType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTIsStandardParameterDialogEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTIsStandardParameterDialogEvent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTParameterDialog createdDialog) -&gt; (EventRecord pEvent)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTDismissStandardParameterDialog"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTDismissStandardParameterDialog</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTParameterDialog createdDialog) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTStandardParameterDialogDoAction"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTStandardParameterDialogDoAction</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTParameterDialog createdDialog, long action, void * params) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTRegisterAccessKey"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTRegisterAccessKey</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 accessKeyType, long flags, Handle accessKey) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTUnregisterAccessKey"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTUnregisterAccessKey</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Str255 accessKeyType, long flags, Handle accessKey) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetSupportedRestrictions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetSupportedRestrictions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType inRestrictionClass) -&gt; (UInt32 outRestrictionIDs)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTTextToNativeText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTTextToNativeText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle theText, long encoding, long flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VideoMediaResetStatistics"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VideoMediaResetStatistics</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VideoMediaGetStatistics"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VideoMediaGetStatistics</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VideoMediaGetStallCount"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VideoMediaGetStallCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, unsigned long stalls)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VideoMediaSetCodecParameter"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VideoMediaSetCodecParameter</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, CodecType cType, OSType parameterID, long parameterChangeSeed, void * dataPtr, long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VideoMediaGetCodecParameter"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VideoMediaGetCodecParameter</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, CodecType cType, OSType parameterID, Handle outParameterData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaAddTextSample"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaAddTextSample</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Ptr text, unsigned long size, short fontNumber, short fontSize, Style textFace, short textJustification, long displayFlags, TimeValue scrollDelay, short hiliteStart, short hiliteEnd, TimeValue duration) -&gt; (ComponentResult _rv, RGBColor textColor, RGBColor backColor, Rect textBox, RGBColor rgbHiliteColor, TimeValue sampleTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaAddTESample"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaAddTESample</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TEHandle hTE, short textJustification, long displayFlags, TimeValue scrollDelay, short hiliteStart, short hiliteEnd, TimeValue duration) -&gt; (ComponentResult _rv, RGBColor backColor, Rect textBox, RGBColor rgbHiliteColor, TimeValue sampleTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaAddHiliteSample"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaAddHiliteSample</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short hiliteStart, short hiliteEnd, TimeValue duration) -&gt; (ComponentResult _rv, RGBColor rgbHiliteColor, TimeValue sampleTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaDrawRaw"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaDrawRaw</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, GWorldPtr gw, GDHandle gd, void * data, long dataSize, TextDescriptionHandle tdh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaSetTextProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaSetTextProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeValue atMediaTime, long propertyType, void * data, long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaRawSetup"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaRawSetup</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, GWorldPtr gw, GDHandle gd, void * data, long dataSize, TextDescriptionHandle tdh, TimeValue sampleDuration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaRawIdle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaRawIdle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, GWorldPtr gw, GDHandle gd, TimeValue sampleTime, long flagsIn) -&gt; (ComponentResult _rv, long flagsOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaGetTextProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaGetTextProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeValue atMediaTime, long propertyType, void * data, long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaFindNextText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaFindNextText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Ptr text, long size, short findFlags, TimeValue startTime) -&gt; (ComponentResult _rv, TimeValue foundTime, TimeValue foundDuration, long offset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaHiliteTextSample"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaHiliteTextSample</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeValue sampleTime, short hiliteStart, short hiliteEnd) -&gt; (ComponentResult _rv, RGBColor rgbHiliteColor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextMediaSetTextSampleData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextMediaSetTextSampleData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * data, OSType dataType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaSetProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaSetProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short spriteIndex, long propertyType, void * propertyValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short spriteIndex, long propertyType, void * propertyValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaHitTestSprites"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaHitTestSprites</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long flags, Point loc) -&gt; (ComponentResult _rv, short spriteHitIndex)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaCountSprites"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaCountSprites</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, short numSprites)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaCountImages"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaCountImages</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, short numImages)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetIndImageDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetIndImageDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short imageIndex, ImageDescriptionHandle imageDescription) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetDisplayedSampleNumber"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetDisplayedSampleNumber</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, long sampleNum)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetSpriteName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetSpriteName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID spriteID, Str255 spriteName) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetImageName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetImageName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short imageIndex, Str255 imageName) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaSetSpriteProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaSetSpriteProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID spriteID, long propertyType, void * propertyValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetSpriteProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetSpriteProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID spriteID, long propertyType, void * propertyValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaHitTestAllSprites"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaHitTestAllSprites</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long flags, Point loc) -&gt; (ComponentResult _rv, QTAtomID spriteHitID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaHitTestOneSprite"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaHitTestOneSprite</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID spriteID, long flags, Point loc) -&gt; (ComponentResult _rv, Boolean wasHit)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaSpriteIndexToID"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaSpriteIndexToID</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short spriteIndex) -&gt; (ComponentResult _rv, QTAtomID spriteID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaSpriteIDToIndex"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaSpriteIDToIndex</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID spriteID) -&gt; (ComponentResult _rv, short spriteIndex)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaSetActionVariable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaSetActionVariable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID variableID, float value) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetActionVariable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetActionVariable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID variableID) -&gt; (ComponentResult _rv, float value)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaDisposeSprite"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaDisposeSprite</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID spriteID) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaSetActionVariableToString"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaSetActionVariableToString</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID variableID, Ptr theCString) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaGetActionVariableAsString"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaGetActionVariableAsString</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID variableID) -&gt; (ComponentResult _rv, Handle theCString)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaNewImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaNewImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Handle dataRef, OSType dataRefType, QTAtomID desiredID) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaDisposeImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaDisposeImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short imageIndex) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaImageIndexToID"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaImageIndexToID</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short imageIndex) -&gt; (ComponentResult _rv, QTAtomID imageID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SpriteMediaImageIDToIndex"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SpriteMediaImageIDToIndex</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTAtomID imageID) -&gt; (ComponentResult _rv, short imageIndex)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaSetPan"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaSetPan</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short xPercent, short yPercent) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaSetZoom"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaSetZoom</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short factor) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaSetZoomRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaSetZoomRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long left, long top, long right, long bottom) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaGetRefConBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaGetRefConBounds</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long refCon) -&gt; (ComponentResult _rv, long left, long top, long right, long bottom)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaGetRefConID"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaGetRefConID</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long refCon) -&gt; (ComponentResult _rv, long refConID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaIDToRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaIDToRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long refConID) -&gt; (ComponentResult _rv, long refCon)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaGetDisplayedFrameNumber"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaGetDisplayedFrameNumber</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, long flashFrameNumber)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaFrameNumberToMovieTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaFrameNumberToMovieTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long flashFrameNumber) -&gt; (ComponentResult _rv, TimeValue movieTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaFrameLabelToMovieTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaFrameLabelToMovieTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Ptr theLabel) -&gt; (ComponentResult _rv, TimeValue movieTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaGetFlashVariable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaGetFlashVariable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, char path, char name, Handle theVariableCStringOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaSetFlashVariable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaSetFlashVariable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Boolean updateFocus) -&gt; (ComponentResult _rv, char path, char name, char value)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaDoButtonActions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaDoButtonActions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long buttonID, long transition) -&gt; (ComponentResult _rv, char path)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FlashMediaGetSupportedSwfVersion"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FlashMediaGetSupportedSwfVersion</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, UInt8 swfVersion)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DGetCurrentGroup"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DGetCurrentGroup</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * group) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DTranslateNamedObjectTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DTranslateNamedObjectTo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Fixed x, Fixed y, Fixed z) -&gt; (ComponentResult _rv, char objectName)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DScaleNamedObjectTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DScaleNamedObjectTo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Fixed xScale, Fixed yScale, Fixed zScale) -&gt; (ComponentResult _rv, char objectName)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DRotateNamedObjectTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DRotateNamedObjectTo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Fixed xDegrees, Fixed yDegrees, Fixed zDegrees) -&gt; (ComponentResult _rv, char objectName)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DSetCameraData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DSetCameraData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * cameraData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DGetCameraData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DGetCameraData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * cameraData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DSetCameraAngleAspect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DSetCameraAngleAspect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, QTFloatSingle fov, QTFloatSingle aspectRatioXToY) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DGetCameraAngleAspect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DGetCameraAngleAspect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, QTFloatSingle fov, QTFloatSingle aspectRatioXToY)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DSetCameraRange"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DSetCameraRange</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * tQ3CameraRange) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"Media3DGetCameraRange"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_Media3DGetCameraRange</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * tQ3CameraRange) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NewTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NewTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (TimeBase _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ConvertTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ConvertTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord theTime, TimeBase newBase) -&gt; (TimeRecord theTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ConvertTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ConvertTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord theTime, TimeScale newScale) -&gt; (TimeRecord theTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_AddTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord dst, TimeRecord src) -&gt; (TimeRecord dst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SubtractTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SubtractTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TimeRecord dst, TimeRecord src) -&gt; (TimeRecord dst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicMediaGetIndexedTunePlayer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicMediaGetIndexedTunePlayer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ti, long sampleDescIndex) -&gt; (ComponentResult _rv, ComponentInstance tp)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CodecManagerVersion"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CodecManagerVersion</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (long version)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetMaxCompressionSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetMaxCompressionSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle src, Rect srcRect, short colorDepth, CodecQ quality, CodecType cType, CompressorComponent codec) -&gt; (long size)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetCompressionTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetCompressionTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle src, Rect srcRect, short colorDepth, CodecType cType, CompressorComponent codec) -&gt; (CodecQ spatialQuality, CodecQ temporalQuality, unsigned long compressTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompressImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompressImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle src, Rect srcRect, CodecQ quality, CodecType cType, ImageDescriptionHandle desc, Ptr data) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DecompressImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DecompressImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Ptr data, ImageDescriptionHandle desc, PixMapHandle dst, Rect srcRect, Rect dstRect, short mode, RgnHandle mask) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetSimilarity"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetSimilarity</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle src, Rect srcRect, ImageDescriptionHandle desc, Ptr data) -&gt; (Fixed similarity)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetImageDescriptionCTable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetImageDescriptionCTable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc) -&gt; (CTabHandle ctable)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SetImageDescriptionCTable"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SetImageDescriptionCTable</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc, CTabHandle ctable) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetImageDescriptionExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetImageDescriptionExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc, long idType, long index) -&gt; (Handle extension)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddImageDescriptionExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_AddImageDescriptionExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc, Handle extension, long idType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"RemoveImageDescriptionExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_RemoveImageDescriptionExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc, long idType, long index) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CountImageDescriptionExtensionType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CountImageDescriptionExtensionType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc, long idType) -&gt; (long count)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetNextImageDescriptionExtensionType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetNextImageDescriptionExtensionType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle desc) -&gt; (long idType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FindCodec"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FindCodec</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(CodecType cType, CodecComponent specCodec) -&gt; (CompressorComponent compressor, DecompressorComponent decompressor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompressPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompressPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PicHandle srcPicture, PicHandle dstPicture, CodecQ quality, CodecType cType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompressPictureFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompressPictureFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short srcRefNum, short dstRefNum, CodecQ quality, CodecType cType) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ConvertImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ConvertImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageDescriptionHandle srcDD, Ptr srcData, short colorDepth, CTabHandle ctable, CodecQ accuracy, CodecQ quality, CodecType cType, CodecComponent codec, ImageDescriptionHandle dstDD, Ptr dstData) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AddFilePreview"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_AddFilePreview</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short resRefNum, OSType previewType, Handle previewData) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetBestDeviceRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetBestDeviceRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (GDHandle gdh, Rect rp)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GDHasScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GDHasScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gdh, short depth) -&gt; (Fixed scale)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GDGetScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GDGetScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gdh) -&gt; (Fixed scale, short flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GDSetScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GDSetScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GDHandle gdh, Fixed scale, short flags) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetGraphicsImporterForFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetGraphicsImporterForFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec theFile) -&gt; (ComponentInstance gi)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetGraphicsImporterForDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetGraphicsImporterForDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType) -&gt; (ComponentInstance gi)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetGraphicsImporterForFileWithFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetGraphicsImporterForFileWithFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(FSSpec theFile, long flags) -&gt; (ComponentInstance gi)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetGraphicsImporterForDataRefWithFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GetGraphicsImporterForDataRefWithFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Handle dataRef, OSType dataRefType, long flags) -&gt; (ComponentInstance gi)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MakeImageDescriptionForPixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MakeImageDescriptionForPixMap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pixmap) -&gt; (ImageDescriptionHandle idh)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MakeImageDescriptionForEffect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MakeImageDescriptionForEffect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType effectType) -&gt; (ImageDescriptionHandle idh)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetPixelSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetPixelSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType PixelFormat) -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetPixelFormatDepthForImageDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetPixelFormatDepthForImageDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(OSType PixelFormat) -&gt; (short _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetPixMapHandleRowBytes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetPixMapHandleRowBytes</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTSetPixMapHandleRowBytes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTSetPixMapHandleRowBytes</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm, long rowBytes) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetPixMapHandleGammaLevel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetPixMapHandleGammaLevel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTSetPixMapHandleGammaLevel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTSetPixMapHandleGammaLevel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm, Fixed gammaLevel) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTGetPixMapHandleRequestedGammaLevel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTGetPixMapHandleRequestedGammaLevel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTSetPixMapHandleRequestedGammaLevel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTSetPixMapHandleRequestedGammaLevel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(PixMapHandle pm, Fixed requestedGammaLevel) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompAdd"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompAdd</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (wide src, wide dst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompSub"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompSub</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (wide src, wide dst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompNeg"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompNeg</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (wide dst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompShift"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompShift</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(short shift) -&gt; (wide src)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompMul"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompMul</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long src1, long src2) -&gt; (wide dst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompDiv"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompDiv</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long denominator) -&gt; (long _rv, wide numerator, long remainder)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompFixMul"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompFixMul</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed fixSrc) -&gt; (wide compSrc, wide compDst)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompMulDiv"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompMulDiv</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long mul, long divisor) -&gt; (wide co)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompMulDivTrunc"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompMulDivTrunc</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long mul, long divisor) -&gt; (wide co, long remainder)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompCompare"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompCompare</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(wide a, wide minusb) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CompSquareRoot"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_CompSquareRoot</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(wide src) -&gt; (unsigned long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FixMulDiv"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FixMulDiv</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed src, Fixed mul, Fixed divisor) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"UnsignedFixMulDiv"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_UnsignedFixMulDiv</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed src, Fixed mul, Fixed divisor) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FixExp2"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FixExp2</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed src) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FixLog2"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FixLog2</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed src) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"FixPow"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_FixPow</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(Fixed base, Fixed exp) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, Handle dataRef, OSType dataReType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Handle dataRef, OSType dataReType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetDataFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetDataFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, FSSpec theFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, FSSpec theFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetDataHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetDataHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, Handle h) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Handle h)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetImageDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetImageDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, ImageDescriptionHandle desc)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataOffsetAndSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataOffsetAndSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, unsigned long offset, unsigned long size)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportReadData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportReadData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * dataPtr, unsigned long dataOffset, unsigned long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, RgnHandle clipRgn) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, RgnHandle clipRgn)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetSourceRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetSourceRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, Rect sourceRect) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetSourceRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetSourceRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Rect sourceRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetNaturalBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetNaturalBounds</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Rect naturalBounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportDraw"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportDraw</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, CGrafPtr port, GDHandle gd) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, CGrafPtr port, GDHandle gd)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetBoundsRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetBoundsRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, Rect bounds) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetBoundsRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetBoundsRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Rect bounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSaveAsPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSaveAsPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, FSSpec fss, ScriptCode scriptTag) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetGraphicsMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetGraphicsMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, long graphicsMode, RGBColor opColor) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetGraphicsMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetGraphicsMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, long graphicsMode, RGBColor opColor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetQuality"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetQuality</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, CodecQ quality) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetQuality"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetQuality</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, CodecQ quality)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSaveAsQuickTimeImageFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSaveAsQuickTimeImageFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, FSSpec fss, ScriptCode scriptTag) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetDataReferenceOffsetAndLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetDataReferenceOffsetAndLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, unsigned long offset, unsigned long limit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataReferenceOffsetAndLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataReferenceOffsetAndLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, unsigned long offset, unsigned long limit)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetAliasedDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetAliasedDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Handle dataRef, OSType dataRefType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportValidate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportValidate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Boolean valid)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetMetaData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetMetaData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * userData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetMIMETypeList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetMIMETypeList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * qtAtomContainerPtr) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportDoesDrawAllPixels"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportDoesDrawAllPixels</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, short drawsAllPixels)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetAsPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetAsPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, PicHandle picture)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportExportImageFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportExportImageFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, OSType fileType, OSType fileCreator, FSSpec fss, ScriptCode scriptTag) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetExportImageTypeList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetExportImageTypeList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * qtAtomContainerPtr) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetExportSettingsAsAtomContainer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetExportSettingsAsAtomContainer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * qtAtomContainerPtr) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetExportSettingsFromAtomContainer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetExportSettingsFromAtomContainer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * qtAtomContainer) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetImageCount"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetImageCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, unsigned long imageCount)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetImageIndex"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetImageIndex</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, unsigned long imageIndex) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetImageIndex"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetImageIndex</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, unsigned long imageIndex)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataOffsetAndSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataOffsetAndSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, wide offset, wide size)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportReadData64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportReadData64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, void * dataPtr, wide dataOffset, unsigned long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetDataReferenceOffsetAndLimit64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetDataReferenceOffsetAndLimit64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, wide offset, wide limit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDataReferenceOffsetAndLimit64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDataReferenceOffsetAndLimit64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, wide offset, wide limit)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDefaultClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDefaultClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, RgnHandle defaultRgn)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDefaultGraphicsMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDefaultGraphicsMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, long defaultGraphicsMode, RGBColor defaultOpColor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDefaultSourceRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDefaultSourceRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Rect defaultSourceRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetColorSyncProfile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetColorSyncProfile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Handle profile)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetDestRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetDestRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, Rect destRect) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetDestRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetDestRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, Rect destRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, long flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportGetBaseDataOffsetAndSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportGetBaseDataOffsetAndSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv, wide offset, wide size)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImportSetImageIndexToThumbnail"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImportSetImageIndexToThumbnail</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsImportComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportDoExport"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportDoExport</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long actualSizeWritten)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportCanTranscode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportCanTranscode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Boolean canTranscode)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportDoTranscode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportDoTranscode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportCanUseCompressor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportCanUseCompressor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * codecSettingsAtomContainerPtr) -&gt; (ComponentResult _rv, Boolean canUseCompressor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportDoUseCompressor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportDoUseCompressor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * codecSettingsAtomContainer) -&gt; (ComponentResult _rv, ImageDescriptionHandle outDesc)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportDoStandaloneExport"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportDoStandaloneExport</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetDefaultFileTypeAndCreator"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetDefaultFileTypeAndCreator</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, OSType fileType, OSType fileCreator)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetDefaultFileNameExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetDefaultFileNameExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, OSType fileNameExtension)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetMIMETypeList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetMIMETypeList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * qtAtomContainerPtr) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetSettingsFromAtomContainer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetSettingsFromAtomContainer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * qtAtomContainer) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetSettingsAsAtomContainer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetSettingsAsAtomContainer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * qtAtomContainerPtr) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetSettingsAsText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetSettingsAsText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Handle theText)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetDontRecompress"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetDontRecompress</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Boolean dontRecompress) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetDontRecompress"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetDontRecompress</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Boolean dontRecompress)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInterlaceStyle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInterlaceStyle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, unsigned long interlaceStyle) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInterlaceStyle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInterlaceStyle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long interlaceStyle)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetMetaData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetMetaData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * userData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetMetaData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetMetaData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * userData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetTargetDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetTargetDataSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, unsigned long targetDataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetTargetDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetTargetDataSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long targetDataSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetCompressionMethod"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetCompressionMethod</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, long compressionMethod) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetCompressionMethod"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetCompressionMethod</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, long compressionMethod)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetCompressionQuality"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetCompressionQuality</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, CodecQ spatialQuality) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetCompressionQuality"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetCompressionQuality</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, CodecQ spatialQuality)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetResolution"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetResolution</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Fixed horizontalResolution, Fixed verticalResolution) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetResolution"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetResolution</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Fixed horizontalResolution, Fixed verticalResolution)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetDepth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetDepth</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, long depth) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetDepth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetDepth</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, long depth)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetColorSyncProfile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetColorSyncProfile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Handle colorSyncProfile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetColorSyncProfile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetColorSyncProfile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Handle colorSyncProfile)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Handle dataRef, OSType dataRefType, ImageDescriptionHandle desc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Handle dataRef, OSType dataRefType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, FSSpec theFile, ImageDescriptionHandle desc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, FSSpec theFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Handle h, ImageDescriptionHandle desc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Handle h)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputPtr"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputPtr</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Ptr p, unsigned long size, ImageDescriptionHandle desc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputGraphicsImporter"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputGraphicsImporter</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, GraphicsImportComponent grip) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputGraphicsImporter"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputGraphicsImporter</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, GraphicsImportComponent grip)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, PicHandle picture) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, PicHandle picture)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, GWorldPtr gworld) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, GWorldPtr gworld)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputPixmap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputPixmap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, PixMapHandle pixmap) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputPixmap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputPixmap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, PixMapHandle pixmap)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetInputOffsetAndLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetInputOffsetAndLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, unsigned long offset, unsigned long limit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputOffsetAndLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputOffsetAndLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long offset, unsigned long limit)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportMayExporterReadInputData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportMayExporterReadInputData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Boolean mayReadInputData)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputDataSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputDataSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long size)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportReadInputData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportReadInputData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * dataPtr, unsigned long dataOffset, unsigned long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputImageDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputImageDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, ImageDescriptionHandle desc)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputImageDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputImageDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Rect dimensions)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetInputImageDepth"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetInputImageDepth</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, long inputDepth)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportDrawInputImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportDrawInputImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, CGrafPtr gw, GDHandle gd, Rect srcRect, Rect dstRect) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetOutputDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetOutputDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Handle dataRef, OSType dataRefType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetOutputDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetOutputDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Handle dataRef, OSType dataRefType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetOutputFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetOutputFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, FSSpec theFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetOutputFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetOutputFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, FSSpec theFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetOutputHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetOutputHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Handle h) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetOutputHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetOutputHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Handle h)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetOutputOffsetAndMaxSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetOutputOffsetAndMaxSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, unsigned long offset, unsigned long maxSize, Boolean truncateFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetOutputOffsetAndMaxSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetOutputOffsetAndMaxSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long offset, unsigned long maxSize, Boolean truncateFile)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetOutputFileTypeAndCreator"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetOutputFileTypeAndCreator</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, OSType fileType, OSType fileCreator) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetOutputFileTypeAndCreator"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetOutputFileTypeAndCreator</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, OSType fileType, OSType fileCreator)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetOutputMark"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetOutputMark</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, unsigned long mark) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetOutputMark"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetOutputMark</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, unsigned long mark)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportReadOutputData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportReadOutputData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, void * dataPtr, unsigned long dataOffset, unsigned long dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetThumbnailEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetThumbnailEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Boolean enableThumbnail, long maxThumbnailWidth, long maxThumbnailHeight) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetThumbnailEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetThumbnailEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Boolean thumbnailEnabled, long maxThumbnailWidth, long maxThumbnailHeight)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportSetExifEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportSetExifEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci, Boolean enableExif) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsExportGetExifEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsExportGetExifEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicsExportComponent ci) -&gt; (ComponentResult _rv, Boolean exifEnabled)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ImageTranscoderBeginSequence"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ImageTranscoderBeginSequence</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageTranscoderComponent itc, ImageDescriptionHandle srcDesc, void * data, long dataSize) -&gt; (ComponentResult _rv, ImageDescriptionHandle dstDesc)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ImageTranscoderDisposeData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ImageTranscoderDisposeData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageTranscoderComponent itc, void * dstData) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ImageTranscoderEndSequence"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ImageTranscoderEndSequence</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ImageTranscoderComponent itc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClockGetTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ClockGetTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aClock) -&gt; (ComponentResult _rv, TimeRecord out)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClockSetTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ClockSetTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aClock, TimeBase tb) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClockGetRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_ClockGetRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aClock) -&gt; (ComponentResult _rv, Fixed rate)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCPositionRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCPositionRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv, Rect rp, Point where)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCPositionDialog"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCPositionDialog</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, short id) -&gt; (ComponentResult _rv, Point where)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCSetTestImagePictHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCSetTestImagePictHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PicHandle testPict, short testFlags) -&gt; (ComponentResult _rv, Rect testRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCSetTestImagePictFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCSetTestImagePictFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, short testFileRef, short testFlags) -&gt; (ComponentResult _rv, Rect testRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCSetTestImagePixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCSetTestImagePixMap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PixMapHandle testPixMap, short testFlags) -&gt; (ComponentResult _rv, Rect testRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCGetBestDeviceRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCGetBestDeviceRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv, Rect r)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCRequestImageSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCRequestImageSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCCompressImage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCCompressImage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PixMapHandle src, Rect srcRect) -&gt; (ComponentResult _rv, ImageDescriptionHandle desc, Handle data)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCCompressPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCCompressPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PicHandle srcPicture, PicHandle dstPicture) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCCompressPictureFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCCompressPictureFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, short srcRefNum, short dstRefNum) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCRequestSequenceSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCRequestSequenceSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCCompressSequenceBegin"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCCompressSequenceBegin</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PixMapHandle src, Rect srcRect) -&gt; (ComponentResult _rv, ImageDescriptionHandle desc)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCCompressSequenceFrame"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCCompressSequenceFrame</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PixMapHandle src, Rect srcRect) -&gt; (ComponentResult _rv, Handle data, long dataSize, short notSyncFlag)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCCompressSequenceEnd"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCCompressSequenceEnd</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCDefaultPictHandleSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCDefaultPictHandleSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PicHandle srcPicture, short motion) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCDefaultPictFileSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCDefaultPictFileSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, short srcRef, short motion) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCDefaultPixMapSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCDefaultPixMapSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, PixMapHandle src, short motion) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCGetInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCGetInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, OSType infoType, void * info) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCSetInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCSetInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, OSType infoType, void * info) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCSetCompressFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCSetCompressFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCGetCompressFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCGetCompressFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv, long flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCGetSettingsAsText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCGetSettingsAsText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv, Handle text)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SCAsyncIdle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SCAsyncIdle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TweenerReset"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TweenerReset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TweenerComponent tc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TCGetSourceRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TCGetSourceRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeCodeDescriptionHandle tcdH) -&gt; (HandlerError _rv, UserData srefH)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TCSetSourceRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TCSetSourceRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeCodeDescriptionHandle tcdH, UserData srefH) -&gt; (HandlerError _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TCSetTimeCodeFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TCSetTimeCodeFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long flags, long flagsMask) -&gt; (HandlerError _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TCGetTimeCodeFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TCGetTimeCodeFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (HandlerError _rv, long flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Handle dataH, Movie theMovie, Track targetTrack, TimeValue atTime, long inFlags) -&gt; (ComponentResult _rv, Track usedTrack, TimeValue addedDuration, long outFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, FSSpec theFile, Movie theMovie, Track targetTrack, TimeValue atTime, long inFlags) -&gt; (ComponentResult _rv, Track usedTrack, TimeValue addedDuration, long outFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetSampleDuration"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetSampleDuration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, TimeValue duration, TimeScale scale) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetSampleDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetSampleDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, SampleDescriptionHandle desc, OSType mediaType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetMediaFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetMediaFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, AliasHandle alias) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Fixed width, Fixed height) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetChunkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetChunkSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, long chunkSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetAuxiliaryData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetAuxiliaryData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Handle data, OSType handleType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetFromScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetFromScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Boolean fromScrap) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportDoUserDialog"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportDoUserDialog</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, FSSpec theFile, Handle theData) -&gt; (ComponentResult _rv, Boolean canceled)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetDuration"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetDuration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, TimeValue duration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetAuxiliaryDataType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetAuxiliaryDataType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, OSType auxType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportValidate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportValidate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, FSSpec theFile, Handle theData) -&gt; (ComponentResult _rv, Boolean valid)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetFileType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetFileType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, OSType fileType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Handle dataRef, OSType dataRefType, Movie theMovie, Track targetTrack, TimeValue atTime, long inFlags) -&gt; (ComponentResult _rv, Track usedTrack, TimeValue addedDuration, long outFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetSampleDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetSampleDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, SampleDescriptionHandle desc, OSType mediaType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetOffsetAndLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetOffsetAndLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, unsigned long offset, unsigned long limit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetOffsetAndLimit64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetOffsetAndLimit64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, wide offset, wide limit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportIdle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportIdle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, long inFlags) -&gt; (ComponentResult _rv, long outFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportValidateDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportValidateDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Handle dataRef, OSType dataRefType) -&gt; (ComponentResult _rv, UInt8 valid)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetLoadState"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetLoadState</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, long importerLoadState)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetMaxLoadedTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetMaxLoadedTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, TimeValue time)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportEstimateCompletionTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportEstimateCompletionTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, TimeRecord time)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetDontBlock"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetDontBlock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, Boolean dontBlock) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetDontBlock"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetDontBlock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, Boolean willBlock)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetIdleManager"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetIdleManager</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, IdleManager im) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportSetNewMovieFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportSetNewMovieFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci, long newMovieFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieImportGetDestinationMediaType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieImportGetDestinationMediaType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieImportComponent ci) -&gt; (ComponentResult _rv, OSType mediaType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportToHandle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportToHandle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Handle dataH, Movie theMovie, Track onlyThisTrack, TimeValue startTime, TimeValue duration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportToFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportToFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, FSSpec theFile, Movie theMovie, Track onlyThisTrack, TimeValue startTime, TimeValue duration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportGetAuxiliaryData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportGetAuxiliaryData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Handle dataH) -&gt; (ComponentResult _rv, OSType handleType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportSetSampleDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportSetSampleDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, SampleDescriptionHandle desc, OSType mediaType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportDoUserDialog"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportDoUserDialog</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Movie theMovie, Track onlyThisTrack, TimeValue startTime, TimeValue duration) -&gt; (ComponentResult _rv, Boolean canceled)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportGetCreatorType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportGetCreatorType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci) -&gt; (ComponentResult _rv, OSType creator)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportToDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportToDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Handle dataRef, OSType dataRefType, Movie theMovie, Track onlyThisTrack, TimeValue startTime, TimeValue duration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportFromProceduresToDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportFromProceduresToDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Handle dataRef, OSType dataRefType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportValidate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportValidate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Movie theMovie, Track onlyThisTrack) -&gt; (ComponentResult _rv, Boolean valid)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportGetFileNameExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportGetFileNameExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci) -&gt; (ComponentResult _rv, OSType extension)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportGetShortFileTypeString"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportGetShortFileTypeString</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci, Str255 typeString) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MovieExportGetSourceMediaType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MovieExportGetSourceMediaType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MovieExportComponent ci) -&gt; (ComponentResult _rv, OSType mediaType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextExportGetTimeFraction"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextExportGetTimeFraction</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TextExportComponent ci) -&gt; (ComponentResult _rv, long movieTimeFraction)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextExportSetTimeFraction"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextExportSetTimeFraction</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TextExportComponent ci, long movieTimeFraction) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextExportGetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextExportGetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TextExportComponent ci) -&gt; (ComponentResult _rv, long setting)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TextExportSetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TextExportSetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TextExportComponent ci, long setting) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MIDIImportGetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MIDIImportGetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TextExportComponent ci) -&gt; (ComponentResult _rv, long setting)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MIDIImportSetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MIDIImportSetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TextExportComponent ci, long setting) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImageImportSetSequenceEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImageImportSetSequenceEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicImageMovieImportComponent ci, Boolean enable) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GraphicsImageImportGetSequenceEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_GraphicsImageImportGetSequenceEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(GraphicImageMovieImportComponent ci) -&gt; (ComponentResult _rv, Boolean enable)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PreviewShowData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_PreviewShowData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(pnotComponent p, OSType dataType, Handle data, Rect inHere) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PreviewMakePreviewReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_PreviewMakePreviewReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(pnotComponent p, FSSpec sourceFile) -&gt; (ComponentResult _rv, OSType previewType, short resID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PreviewEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_PreviewEvent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(pnotComponent p) -&gt; (ComponentResult _rv, EventRecord e, Boolean handledEvent)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataCodecDecompress"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataCodecDecompress</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataCodecComponent dc, void * srcData, UInt32 srcSize, void * dstData, UInt32 dstBufferSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataCodecGetCompressBufferSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataCodecGetCompressBufferSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataCodecComponent dc, UInt32 srcSize) -&gt; (ComponentResult _rv, UInt32 dstSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataCodecCompress"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataCodecCompress</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataCodecComponent dc, void * srcData, UInt32 srcSize, void * dstData, UInt32 dstBufferSize) -&gt; (ComponentResult _rv, UInt32 actualDstSize, UInt32 decompressSlop)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataCodecBeginInterruptSafe"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataCodecBeginInterruptSafe</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataCodecComponent dc, unsigned long maxSrcSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataCodecEndInterruptSafe"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataCodecEndInterruptSafe</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataCodecComponent dc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle h, long hOffset, long offset, long size) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHPutData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHPutData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle h, long hOffset, long size) -&gt; (ComponentResult _rv, long offset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHFlushData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHFlushData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHOpenForWrite"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHOpenForWrite</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHCloseForWrite"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHCloseForWrite</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHOpenForRead"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHOpenForRead</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHCloseForRead"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHCloseForRead</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle dataRef) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, Handle dataRef)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHCompareDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHCompareDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle dataRef) -&gt; (ComponentResult _rv, Boolean equal)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHTask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHTask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHFinishData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHFinishData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Ptr PlaceToPutDataPtr, Boolean Cancel) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHFlushCache"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHFlushCache</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHResolveDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHResolveDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle theDataRef, Boolean userInterfaceAllowed) -&gt; (ComponentResult _rv, Boolean wasChanged)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetFileSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetFileSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, long fileSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHCanUseDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHCanUseDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle dataRef) -&gt; (ComponentResult _rv, long useFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHPreextend"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHPreextend</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, unsigned long maxToAdd) -&gt; (ComponentResult _rv, unsigned long spaceAdded)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetFileSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetFileSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long fileSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetFreeSpace"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetFreeSpace</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, unsigned long freeSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHCreateFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHCreateFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, OSType creator, Boolean deleteExisting) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetPreferredBlockSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetPreferredBlockSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, long blockSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDeviceIndex"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDeviceIndex</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, long deviceIndex)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHIsStreamingDataHandler"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHIsStreamingDataHandler</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, Boolean yes)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataInBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataInBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long startOffset) -&gt; (ComponentResult _rv, long size)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetScheduleAheadTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetScheduleAheadTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, long millisecs)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetCacheSizeLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetCacheSizeLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Size cacheSizeLimit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetCacheSizeLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetCacheSizeLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, Size cacheSizeLimit)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, Movie theMovie, short id)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHAddMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHAddMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Movie theMovie) -&gt; (ComponentResult _rv, short id)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHUpdateMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHUpdateMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Movie theMovie, short id) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHDoesBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHDoesBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, Boolean buffersReads, Boolean buffersWrites)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetFileName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetFileName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Str255 str) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetAvailableFileSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetAvailableFileSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, long fileSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetMacOSFileType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetMacOSFileType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, OSType fileType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetMIMEType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetMIMEType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Str255 mimeType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetDataRefWithAnchor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetDataRefWithAnchor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle anchorDataRef, OSType dataRefType, Handle dataRef) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataRefWithAnchor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataRefWithAnchor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle anchorDataRef, OSType dataRefType) -&gt; (ComponentResult _rv, Handle dataRef)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetMacOSFileType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetMacOSFileType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, OSType fileType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, TimeBase tb) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetInfoFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetInfoFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, UInt32 flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetFileSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetFileSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, wide fileSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHPreextend64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHPreextend64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, wide maxToAdd) -&gt; (ComponentResult _rv, wide spaceAdded)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetFileSize64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetFileSize64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, wide fileSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetFreeSpace64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetFreeSpace64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, wide freeSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHAppend64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHAppend64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, void * data, unsigned long size) -&gt; (ComponentResult _rv, wide fileOffset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHPollRead"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHPollRead</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, void * dataPtr) -&gt; (ComponentResult _rv, UInt32 dataSizeSoFar)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataAvailability"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataAvailability</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long offset, long len) -&gt; (ComponentResult _rv, long missing_offset, long missing_len)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataRefAsType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataRefAsType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, OSType requestedType) -&gt; (ComponentResult _rv, Handle dataRef)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetDataRefExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetDataRefExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle extension, OSType idType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataRefExtension"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataRefExtension</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, OSType idType) -&gt; (ComponentResult _rv, Handle extension)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetMovieWithFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetMovieWithFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, short flags) -&gt; (ComponentResult _rv, Movie theMovie, short id)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetFileTypeOrdering"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetFileTypeOrdering</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, DataHFileTypeOrderingHandle orderingListHandle)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHCreateFileWithFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHCreateFileWithFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, OSType creator, Boolean deleteExisting, UInt32 flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, OSType what, void * info) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetIdleManager"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetIdleManager</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, IdleManager im) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHDeleteFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHDeleteFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetMovieUsageFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetMovieUsageFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHUseTemporaryDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHUseTemporaryDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long inFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetTemporaryDataRefCapabilities"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetTemporaryDataRefCapabilities</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh) -&gt; (ComponentResult _rv, long outUnderstoodFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHRenameFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHRenameFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, Handle newDataRef) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHPlaybackHints"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHPlaybackHints</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long flags, unsigned long minFileOffset, unsigned long maxFileOffset, long bytesPerSecond) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHPlaybackHints64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHPlaybackHints64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long flags, wide minFileOffset, wide maxFileOffset, long bytesPerSecond) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHGetDataRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHGetDataRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long flags) -&gt; (ComponentResult _rv, long bytesPerSecond)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DataHSetTimeHints"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DataHSetTimeHints</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(DataHandler dh, long flags, long bandwidthPriority, TimeScale scale, TimeValue minTime, TimeValue maxTime) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetMaxSrcRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetMaxSrcRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short inputStd) -&gt; (ComponentResult _rv, Rect maxSrcRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetActiveSrcRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetActiveSrcRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short inputStd) -&gt; (ComponentResult _rv, Rect activeSrcRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetDigitizerRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetDigitizerRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, Rect digitizerRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetDigitizerRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetDigitizerRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, Rect digitizerRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetVBlankRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetVBlankRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short inputStd) -&gt; (ComponentResult _rv, Rect vBlankRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetMaskPixMap"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetMaskPixMap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, PixMapHandle maskPixMap) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDUseThisCLUT"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDUseThisCLUT</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, CTabHandle colorTableHandle) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetInputGammaValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetInputGammaValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, Fixed channel1, Fixed channel2, Fixed channel3) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetInputGammaValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetInputGammaValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, Fixed channel1, Fixed channel2, Fixed channel3)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetBrightness"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetBrightness</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short brightness)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetBrightness"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetBrightness</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short brightness)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetContrast"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetContrast</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short contrast)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetHue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetHue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short hue)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetSharpness"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetSharpness</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short sharpness)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetSaturation"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetSaturation</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short saturation)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetContrast"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetContrast</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short contrast)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetHue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetHue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short hue)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetSharpness"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetSharpness</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short sharpness)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetSaturation"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetSaturation</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short saturation)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGrabOneFrame"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGrabOneFrame</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetMaxAuxBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetMaxAuxBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, PixMapHandle pm, Rect r)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetCurrentFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetCurrentFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, long inputCurrentFlag, long outputCurrentFlag)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetKeyColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetKeyColor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long index) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetKeyColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetKeyColor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, long index)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDAddKeyColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDAddKeyColor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, long index)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetNextKeyColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetNextKeyColor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long index) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetKeyColorRange"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetKeyColorRange</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, RGBColor minRGB, RGBColor maxRGB)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetKeyColorRange"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetKeyColorRange</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, RGBColor minRGB, RGBColor maxRGB)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetInputColorSpaceMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetInputColorSpaceMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short colorSpaceMode) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetInputColorSpaceMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetInputColorSpaceMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, short colorSpaceMode)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetClipState"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetClipState</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short clipEnable) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetClipState"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetClipState</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, short clipEnable)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, RgnHandle clipRegion) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDClearClipRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDClearClipRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, RgnHandle clipRegion) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetCLUTInUse"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetCLUTInUse</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, CTabHandle colorTableHandle)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetPLLFilterType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetPLLFilterType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short pllType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetPLLFilterType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetPLLFilterType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, short pllType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetMaskandValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetMaskandValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, unsigned short blendLevel) -&gt; (ComponentResult _rv, long mask, long value)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetMasterBlendLevel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetMasterBlendLevel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short blendLevel)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetPlayThruOnOff"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetPlayThruOnOff</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short state) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetFieldPreference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetFieldPreference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short fieldFlag) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetFieldPreference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetFieldPreference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, short fieldFlag)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDPreflightGlobalRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDPreflightGlobalRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, GrafPtr theWindow) -&gt; (ComponentResult _rv, Rect globalRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetPlayThruGlobalRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetPlayThruGlobalRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, GrafPtr theWindow) -&gt; (ComponentResult _rv, Rect globalRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetBlackLevelValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetBlackLevelValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short blackLevel)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetBlackLevelValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetBlackLevelValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short blackLevel)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetWhiteLevelValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetWhiteLevelValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short whiteLevel)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetWhiteLevelValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetWhiteLevelValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short whiteLevel)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetVideoDefaults"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetVideoDefaults</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, unsigned short blackLevel, unsigned short whiteLevel, unsigned short brightness, unsigned short hue, unsigned short saturation, unsigned short contrast, unsigned short sharpness)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetNumberOfInputs"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetNumberOfInputs</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, short inputs)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetInputFormat"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetInputFormat</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short input) -&gt; (ComponentResult _rv, short format)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetInput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetInput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short input) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetInput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetInput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, short input)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetInputStandard"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetInputStandard</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short inputStandard) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetupBuffers"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetupBuffers</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, VdigBufferRecListHandle bufferList) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGrabOneFrameAsync"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGrabOneFrameAsync</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short buffer) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDDone"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDDone</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, short buffer) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetCompression"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetCompression</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, OSType compressType, short depth, CodecQ spatialQuality, CodecQ temporalQuality, long keyFrameRate) -&gt; (ComponentResult _rv, Rect bounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDCompressOneFrameAsync"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDCompressOneFrameAsync</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetImageDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetImageDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, ImageDescriptionHandle desc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDResetCompressSequence"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDResetCompressSequence</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetCompressionOnOff"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetCompressionOnOff</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, Boolean state) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetCompressionTypes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetCompressionTypes</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, VDCompressionListHandle h) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, TimeBase t) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetFrameRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetFrameRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, Fixed framesPerSecond) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetDataRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetDataRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, long milliSecPerFrame, Fixed framesPerSecond, long bytesPerSecond)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetSoundInputDriver"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetSoundInputDriver</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, Str255 soundDriverName) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetDMADepths"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetDMADepths</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, long depthArray, long preferredDepth)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetPreferredTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetPreferredTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, TimeScale preferred)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDReleaseAsyncBuffers"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDReleaseAsyncBuffers</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetDataRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetDataRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long bytesPerSecond) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetTimeCode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetTimeCode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, void * timeCodeFormat, void * timeCodeTime) -&gt; (ComponentResult _rv, TimeRecord atTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDUseSafeBuffers"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDUseSafeBuffers</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, Boolean useSafeBuffers) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetSoundInputSource"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetSoundInputSource</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long videoInput) -&gt; (ComponentResult _rv, long soundInput)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetCompressionTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetCompressionTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, OSType compressionType, short depth) -&gt; (ComponentResult _rv, Rect srcRect, CodecQ spatialQuality, CodecQ temporalQuality, unsigned long compressTime)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetPreferredPacketSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetPreferredPacketSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long preferredPacketSizeInBytes) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetPreferredImageDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetPreferredImageDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long width, long height) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetPreferredImageDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetPreferredImageDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci) -&gt; (ComponentResult _rv, long width, long height)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetInputName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetInputName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, long videoInput, Str255 name) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDSetDestinationPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDSetDestinationPort</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, CGrafPtr destPort) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDGetDeviceNameAndFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDGetDeviceNameAndFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, Str255 outName) -&gt; (ComponentResult _rv, UInt32 outNameFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"VDCaptureStateChanging"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_VDCaptureStateChanging</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(VideoDigitizerComponent ci, UInt32 inStateFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseGetDetailedParseError"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseGetDetailedParseError</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, StringPtr errDesc) -&gt; (ComponentResult _rv, long errorLine)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseAddElement"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseAddElement</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, UInt32 nameSpaceID, long elementFlags) -&gt; (ComponentResult _rv, char elementName, UInt32 elementID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseAddAttribute"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseAddAttribute</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, UInt32 elementID, UInt32 nameSpaceID) -&gt; (ComponentResult _rv, char attributeName, UInt32 attributeID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseAddMultipleAttributes"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseAddMultipleAttributes</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, UInt32 elementID) -&gt; (ComponentResult _rv, UInt32 nameSpaceIDs, char attributeNames, UInt32 attributeIDs)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseAddAttributeAndValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseAddAttributeAndValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, UInt32 elementID, UInt32 nameSpaceID, UInt32 attributeValueKind, void * attributeValueKindInfo) -&gt; (ComponentResult _rv, char attributeName, UInt32 attributeID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseAddAttributeValueKind"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseAddAttributeValueKind</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, UInt32 elementID, UInt32 attributeID, UInt32 attributeValueKind, void * attributeValueKindInfo) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseAddNameSpace"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseAddNameSpace</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser) -&gt; (ComponentResult _rv, char nameSpaceURL, UInt32 nameSpaceID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseSetOffsetAndLimit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseSetOffsetAndLimit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, UInt32 offset, UInt32 limit) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"XMLParseSetEventParseRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_XMLParseSetEventParseRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ComponentInstance aParser, long refcon) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGInitialize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGInitialize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetDataOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetDataOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, FSSpec movieFile, long whereFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetDataOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetDataOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, FSSpec movieFile) -&gt; (ComponentResult _rv, long whereFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, CGrafPtr gp, GDHandle gd) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, CGrafPtr gp, GDHandle gd)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGNewChannel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGNewChannel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, OSType channelType) -&gt; (ComponentResult _rv, SGChannel ref)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGDisposeChannel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGDisposeChannel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGStartPreview"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGStartPreview</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGStartRecord"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGStartRecord</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGIdle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGIdle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGStop"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGStop</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPause"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPause</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Boolean pause) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPrepare"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPrepare</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Boolean prepareForPreview, Boolean prepareForRecord) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGRelease"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGRelease</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetMovie"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetMovie</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (Movie _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetMaximumRecordTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetMaximumRecordTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, unsigned long ticks) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetMaximumRecordTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetMaximumRecordTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, unsigned long ticks)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetStorageSpaceRemaining"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetStorageSpaceRemaining</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, unsigned long bytes)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetTimeRemaining"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetTimeRemaining</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, long ticksLeft)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGrabPict"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGrabPict</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Rect bounds, short offscreenDepth, long grabPictFlags) -&gt; (ComponentResult _rv, PicHandle p)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetLastMovieResID"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetLastMovieResID</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, short resID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, long sgFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, long sgFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGNewChannelFromComponent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGNewChannelFromComponent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Component sgChannelComponent) -&gt; (ComponentResult _rv, SGChannel newChannel)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, UserData ud, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, long flags) -&gt; (ComponentResult _rv, UserData ud)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetIndChannel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetIndChannel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, short index) -&gt; (ComponentResult _rv, SGChannel ref, OSType chanType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGUpdate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGUpdate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, RgnHandle updateRgn) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetPause"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetPause</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, Boolean paused)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, UserData ud, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, long flags) -&gt; (ComponentResult _rv, UserData ud)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, Boolean previewMode, Boolean recordMode)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Handle dataRef, OSType dataRefType, long whereFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetDataRef"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetDataRef</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, Handle dataRef, OSType dataRefType, long whereFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGNewOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGNewOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Handle dataRef, OSType dataRefType, long whereFlags) -&gt; (ComponentResult _rv, SGOutput sgOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGDisposeOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGDisposeOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetOutputFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetOutputFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut, long whereFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, SGOutput sgOut) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetDataOutputStorageSpaceRemaining"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetDataOutputStorageSpaceRemaining</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut) -&gt; (ComponentResult _rv, unsigned long space)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGHandleUpdateEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGHandleUpdateEvent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, EventRecord event) -&gt; (ComponentResult _rv, Boolean handled)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetOutputNextOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetOutputNextOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut, SGOutput nextOut) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetOutputNextOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetOutputNextOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut) -&gt; (ComponentResult _rv, SGOutput nextOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetOutputMaximumOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetOutputMaximumOffset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut, wide maxOffset) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetOutputMaximumOffset"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetOutputMaximumOffset</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut) -&gt; (ComponentResult _rv, wide maxOffset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetOutputDataReference"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetOutputDataReference</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut) -&gt; (ComponentResult _rv, Handle dataRef, OSType dataRefType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGWriteExtendedMovieData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGWriteExtendedMovieData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, Ptr p, long len) -&gt; (ComponentResult _rv, wide offset, SGOutput sgOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetStorageSpaceRemaining64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetStorageSpaceRemaining64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, wide bytes)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetDataOutputStorageSpaceRemaining64"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetDataOutputStorageSpaceRemaining64</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut) -&gt; (ComponentResult _rv, wide space)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGWriteMovieData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGWriteMovieData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, Ptr p, long len) -&gt; (ComponentResult _rv, long offset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, TimeBase tb)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGAddMovieData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGAddMovieData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, Ptr p, long len, long chRefCon, TimeValue time, short writeType) -&gt; (ComponentResult _rv, long offset)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChangedSource"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChangedSource</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGAddExtendedMovieData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGAddExtendedMovieData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, Ptr p, long len, long chRefCon, TimeValue time, short writeType) -&gt; (ComponentResult _rv, wide offset, SGOutput whichOutput)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGAddOutputDataRefToMedia"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGAddOutputDataRefToMedia</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGOutput sgOut, Media theMedia, SampleDescriptionHandle desc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetSettingsSummary"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetSettingsSummary</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Handle summaryText) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelUsage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelUsage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long usage) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelUsage"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelUsage</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long usage)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelBounds</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Rect bounds) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelBounds</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Rect bounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short volume) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, short volume)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long channelInfo)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelPlayFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelPlayFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long playFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelPlayFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelPlayFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long playFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelMaxFrames"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelMaxFrames</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long frameCount) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelMaxFrames"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelMaxFrames</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long frameCount)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long refCon) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, RgnHandle theClip) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, RgnHandle theClip)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelSampleDescription"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelSampleDescription</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Handle sampleDesc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelDevice</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, StringPtr name) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, TimeScale scale)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelPutPicture"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelPutPicture</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelSetRequestedDataRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelSetRequestedDataRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long bytesPerSecond) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelGetRequestedDataRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelGetRequestedDataRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long bytesPerSecond)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelSetDataSourceName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelSetDataSourceName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Str255 name, ScriptCode scriptTag) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelGetDataSourceName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelGetDataSourceName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Str255 name) -&gt; (ComponentResult _rv, ScriptCode scriptTag)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelSetCodecSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelSetCodecSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Handle settings) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGChannelGetCodecSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGChannelGetCodecSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Handle settings)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, TimeBase tb)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long refCon)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetChannelDeviceAndInputNames"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetChannelDeviceAndInputNames</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Str255 outDeviceName, Str255 outInputName) -&gt; (ComponentResult _rv, short outInputNumber)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelDeviceInput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelDeviceInput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short inInputNumber) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetChannelSettingsStateChanging"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetChannelSettingsStateChanging</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, UInt32 inFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGInitChannel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGInitChannel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, SeqGrabComponent owner) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGWriteSamples"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGWriteSamples</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Movie m, AliasHandle theFile) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetDataRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetDataRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long bytesPerSecond)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGAlignChannelRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGAlignChannelRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Rect r)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelGetDitl"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelGetDitl</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, Handle ditl)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelGetTitle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelGetTitle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, Str255 title) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelCanRun"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelCanRun</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelInstall"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelInstall</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, DialogPtr d, short itemOffset) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelEvent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, DialogPtr d, short itemOffset, EventRecord theEvent) -&gt; (ComponentResult _rv, short itemHit, Boolean handled)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelItem"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelItem</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, DialogPtr d, short itemOffset, short itemNum) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelRemove"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelRemove</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, DialogPtr d, short itemOffset) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelSetGrabber"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelSetGrabber</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SeqGrabComponent sg) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelSetResFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelSetResFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, short resRef) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelGetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelGetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, long flags) -&gt; (ComponentResult _rv, UserData ud)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelSetSettings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelSetSettings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s, SGChannel c, UserData ud, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelValidateInput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelValidateInput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, Boolean ok)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGPanelGetDITLForSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGPanelGetDITLForSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SeqGrabComponent s) -&gt; (ComponentResult _rv, Handle ditl, Point requestedSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetSrcVideoBounds"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetSrcVideoBounds</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Rect r)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetVideoRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetVideoRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Rect r) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetVideoRect"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetVideoRect</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Rect r)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetVideoCompressorType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetVideoCompressorType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, OSType compressorType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetVideoCompressorType"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetVideoCompressorType</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, OSType compressorType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetVideoCompressor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetVideoCompressor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short depth, CompressorComponent compressor, CodecQ spatialQuality, CodecQ temporalQuality, long keyFrameRate) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetVideoCompressor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetVideoCompressor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, short depth, CompressorComponent compressor, CodecQ spatialQuality, CodecQ temporalQuality, long keyFrameRate)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetVideoDigitizerComponent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetVideoDigitizerComponent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentInstance _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetVideoDigitizerComponent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetVideoDigitizerComponent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, ComponentInstance vdig) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGVideoDigitizerChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGVideoDigitizerChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGrabFrame"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGrabFrame</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short bufferNum) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGrabFrameComplete"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGrabFrameComplete</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short bufferNum) -&gt; (ComponentResult _rv, Boolean done)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGCompressFrame"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGCompressFrame</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short bufferNum) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetCompressBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetCompressBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short depth, Rect compressSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetCompressBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetCompressBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, short depth, Rect compressSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetBufferInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetBufferInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short bufferNum) -&gt; (ComponentResult _rv, PixMapHandle bufferPM, Rect bufferRect, GWorldPtr compressBuffer, Rect compressBufferRect)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetUseScreenBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetUseScreenBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Boolean useScreenBuffer) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetUseScreenBuffer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetUseScreenBuffer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Boolean useScreenBuffer)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetFrameRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetFrameRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Fixed frameRate) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetFrameRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetFrameRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Fixed frameRate)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetPreferredPacketSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetPreferredPacketSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long preferredPacketSizeInBytes) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetPreferredPacketSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetPreferredPacketSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, long preferredPacketSizeInBytes)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetUserVideoCompressorList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetUserVideoCompressorList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Handle compressorTypes) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetUserVideoCompressorList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetUserVideoCompressorList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Handle compressorTypes)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetSoundInputDriver"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetSoundInputDriver</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Str255 driverName) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetSoundInputDriver"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetSoundInputDriver</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSoundInputDriverChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSoundInputDriverChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetSoundRecordChunkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetSoundRecordChunkSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, long seconds) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetSoundRecordChunkSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetSoundRecordChunkSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (long _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetSoundInputRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetSoundInputRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Fixed rate) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetSoundInputRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetSoundInputRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (Fixed _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetSoundInputParameters"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetSoundInputParameters</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short sampleSize, short numChannels, OSType compressionType) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetSoundInputParameters"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetSoundInputParameters</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, short sampleSize, short numChannels, OSType compressionType)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetAdditionalSoundRates"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetAdditionalSoundRates</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, Handle rates) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetAdditionalSoundRates"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetAdditionalSoundRates</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, Handle rates)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetFontName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetFontName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, StringPtr pstr) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetFontSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetFontSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short fontSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetTextForeColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetTextForeColor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, RGBColor theColor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetTextBackColor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetTextBackColor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, RGBColor theColor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetJustification"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetJustification</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short just) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGGetTextReturnToSpaceValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGGetTextReturnToSpaceValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c) -&gt; (ComponentResult _rv, short rettospace)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"SGSetTextReturnToSpaceValue"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_SGSetTextReturnToSpaceValue</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(SGChannel c, short rettospace) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetCurrentClientName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetCurrentClientName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, Str255 str) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputSetClientName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputSetClientName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, Str255 str) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetClientName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetClientName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, Str255 str) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputBegin"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputBegin</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputEnd"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputEnd</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputSetDisplayMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputSetDisplayMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, long displayModeID) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetDisplayMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetDisplayMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo) -&gt; (ComponentResult _rv, long displayModeID)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo) -&gt; (ComponentResult _rv, GWorldPtr gw)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetIndSoundOutput"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetIndSoundOutput</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, long index) -&gt; (ComponentResult _rv, Component outputComponent)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetClock"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetClock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo) -&gt; (ComponentResult _rv, ComponentInstance clock)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputSetEchoPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputSetEchoPort</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, CGrafPtr echoPort) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputGetIndImageDecompressor"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputGetIndImageDecompressor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, long index) -&gt; (ComponentResult _rv, Component codec)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTVideoOutputBaseSetEchoPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTVideoOutputBaseSetEchoPort</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTVideoOutputComponent vo, CGrafPtr echoPort) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetChunkManagementFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetChunkManagementFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, UInt32 flags, UInt32 flagsMask) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetChunkManagementFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetChunkManagementFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, UInt32 flags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetPurgeableChunkMemoryAllowance"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetPurgeableChunkMemoryAllowance</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Size allowance) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetPurgeableChunkMemoryAllowance"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetPurgeableChunkMemoryAllowance</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, Size allowance)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaEmptyAllPurgeableChunks"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaEmptyAllPurgeableChunks</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetHandlerCapabilities"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetHandlerCapabilities</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long flags, long flagsMask) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaIdle"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaIdle</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeValue atMediaTime, long flagsIn, TimeRecord movieTime) -&gt; (ComponentResult _rv, long flagsOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetMediaInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetMediaInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Handle h) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaPutMediaInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaPutMediaInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Handle h) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetActive"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetActive</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Boolean enableMedia) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetRate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetRate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Fixed rate) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGGetStatus"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGGetStatus</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, ComponentResult statusErr)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaTrackEdited"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaTrackEdited</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetMediaTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetMediaTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeScale newTimeScale) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetMovieTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetMovieTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeScale newTimeScale) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetGWorld"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetGWorld</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, CGrafPtr aPort, GDHandle aGD) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetDimensions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetDimensions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Fixed width, Fixed height) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetClip"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetClip</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, RgnHandle theClip) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetTrackOpaque"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetTrackOpaque</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, Boolean trackIsOpaque)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetGraphicsMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetGraphicsMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long mode, RGBColor opColor) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetGraphicsMode"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetGraphicsMode</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, long mode, RGBColor opColor)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGSetVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGSetVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short volume) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetSoundBalance"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetSoundBalance</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short balance) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetSoundBalance"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetSoundBalance</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, short balance)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetNextBoundsChange"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetNextBoundsChange</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, TimeValue when)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetSrcRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetSrcRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, RgnHandle rgn, TimeValue atMediaTime) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaPreroll"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaPreroll</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeValue time, Fixed rate) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSampleDescriptionChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSampleDescriptionChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long index) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaHasCharacteristic"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaHasCharacteristic</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, OSType characteristic) -&gt; (ComponentResult _rv, Boolean hasIt)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetOffscreenBufferSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetOffscreenBufferSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short depth, CTabHandle ctab) -&gt; (ComponentResult _rv, Rect bounds)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetHints"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetHints</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long hints) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Str255 name, long requestedLanguage) -&gt; (ComponentResult _rv, long actualLanguage)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaForceUpdate"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaForceUpdate</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long forceUpdateFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetDrawingRgn"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetDrawingRgn</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, RgnHandle partialRgn)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGSetActiveSegment"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGSetActiveSegment</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, TimeValue activeStart, TimeValue activeDuration) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaInvalidateRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaInvalidateRegion</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, RgnHandle invalRgn) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetNextStepTime"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetNextStepTime</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short flags, TimeValue mediaTimeIn, Fixed rate) -&gt; (ComponentResult _rv, TimeValue mediaTimeOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaChangedNonPrimarySource"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaChangedNonPrimarySource</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long inputIndex) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaTrackReferencesChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaTrackReferencesChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaReleaseSampleDataPointer"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaReleaseSampleDataPointer</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long sampleNum) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaTrackPropertyAtomChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaTrackPropertyAtomChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetVideoParam"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetVideoParam</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long whichParam) -&gt; (ComponentResult _rv, unsigned short value)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetVideoParam"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetVideoParam</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long whichParam) -&gt; (ComponentResult _rv, unsigned short value)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaCompare"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaCompare</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Media srcMedia, ComponentInstance srcMediaComponent) -&gt; (ComponentResult _rv, Boolean isOK)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetClock"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetClock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, ComponentInstance clock)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetSoundOutputComponent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetSoundOutputComponent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Component outputComponent) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetSoundOutputComponent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetSoundOutputComponent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, Component outputComponent)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetSoundLocalizationData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetSoundLocalizationData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Handle data) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetInvalidRegion"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetInvalidRegion</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, RgnHandle rgn) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSampleDescriptionB2N"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSampleDescriptionB2N</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, SampleDescriptionHandle sampleDescriptionH) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSampleDescriptionN2B"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSampleDescriptionN2B</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, SampleDescriptionHandle sampleDescriptionH) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaFlushNonPrimarySourceData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaFlushNonPrimarySourceData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long inputIndex) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetURLLink"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetURLLink</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Point displayWhere) -&gt; (ComponentResult _rv, Handle urlLink)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaHitTestForTargetRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaHitTestForTargetRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long flags, Point loc) -&gt; (ComponentResult _rv, long targetRefCon)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaHitTestTargetRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaHitTestTargetRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long targetRefCon, long flags, Point loc) -&gt; (ComponentResult _rv, Boolean wasHit)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaDisposeTargetRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaDisposeTargetRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long targetRefCon) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaTargetRefConsEqual"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaTargetRefConsEqual</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long firstRefCon, long secondRefCon) -&gt; (ComponentResult _rv, Boolean equal)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaPrePrerollCancel"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaPrePrerollCancel</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, void * refcon) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaEnterEmptyEdit"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaEnterEmptyEdit</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaCurrentMediaQueuedData"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaCurrentMediaQueuedData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, long milliSecs)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetEffectiveVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetEffectiveVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, short volume)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetSoundLevelMeteringEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetSoundLevelMeteringEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, Boolean enabled)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetSoundLevelMeteringEnabled"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetSoundLevelMeteringEnabled</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Boolean enable) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetEffectiveSoundBalance"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetEffectiveSoundBalance</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, short balance)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetScreenLock"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetScreenLock</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, Boolean lockIt) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetErrorString"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetErrorString</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, ComponentResult theError, Str255 errorString) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetSoundEqualizerBandLevels"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetSoundEqualizerBandLevels</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, UInt8 bandLevels)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaDoIdleActions"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaDoIdleActions</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetSoundBassAndTreble"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetSoundBassAndTreble</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, short bass, short treble) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetSoundBassAndTreble"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetSoundBassAndTreble</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, short bass, short treble)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaTimeBaseChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaTimeBaseChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaMCIsPlayerEvent"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaMCIsPlayerEvent</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, EventRecord e) -&gt; (ComponentResult _rv, Boolean handledIt)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetMediaLoadState"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetMediaLoadState</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, long mediaLoadState)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaVideoOutputChanged"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaVideoOutputChanged</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, ComponentInstance vout) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaEmptySampleCache"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaEmptySampleCache</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long sampleNum, long sampleCount) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGetPublicInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGetPublicInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, OSType infoSelector, void * infoDataPtr) -&gt; (ComponentResult _rv, Size ioDataSize)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaSetPublicInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaSetPublicInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, OSType infoSelector, void * infoDataPtr, Size dataSize) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaRefConSetProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaRefConSetProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long refCon, long propertyType, void * propertyValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaRefConGetProperty"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaRefConGetProperty</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long refCon, long propertyType, void * propertyValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaNavigateTargetRefCon"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaNavigateTargetRefCon</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, long navigation) -&gt; (ComponentResult _rv, long refCon)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGGetIdleManager"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGGetIdleManager</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh) -&gt; (ComponentResult _rv, IdleManager pim)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MediaGSetIdleManager"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MediaGSetIdleManager</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MediaHandler mh, IdleManager im) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTMIDIGetMIDIPorts"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTMIDIGetMIDIPorts</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTMIDIComponent ci) -&gt; (ComponentResult _rv, QTMIDIPortListHandle inputPorts, QTMIDIPortListHandle outputPorts)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTMIDIUseSendPort"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTMIDIUseSendPort</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTMIDIComponent ci, long portIndex, long inUse) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"QTMIDISendMIDI"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_QTMIDISendMIDI</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(QTMIDIComponent ci, long portIndex, MusicMIDIPacket mp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetPart"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetPart</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part) -&gt; (ComponentResult _rv, long midiChannel, long polyphony)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPart"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPart</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long midiChannel, long polyphony) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartInstrumentNumber"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartInstrumentNumber</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long instrumentNumber) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetPartInstrumentNumber"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetPartInstrumentNumber</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicStorePartInstrument"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicStorePartInstrument</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long instrumentNumber) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetPartAtomicInstrument"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetPartAtomicInstrument</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long flags) -&gt; (ComponentResult _rv, AtomicInstrument ai)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartAtomicInstrument"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartAtomicInstrument</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, AtomicInstrumentPtr aiP, long flags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetPartKnob"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetPartKnob</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long knobID) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartKnob"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartKnob</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long knobID, long knobValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetKnob"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetKnob</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long knobID) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetKnob"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetKnob</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long knobID, long knobValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetPartName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetPartName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, StringPtr name) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartName"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartName</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, StringPtr name) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicPlayNote"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicPlayNote</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long pitch, long velocity) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicResetPart"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicResetPart</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartController"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartController</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, MusicController controllerNumber, long controllerValue) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetPartController"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetPartController</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, MusicController controllerNumber) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetInstrumentNames"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetInstrumentNames</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long modifiableInstruments) -&gt; (ComponentResult _rv, Handle instrumentNames, Handle instrumentCategoryLasts, Handle instrumentCategoryNames)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetDrumNames"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetDrumNames</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long modifiableInstruments) -&gt; (ComponentResult _rv, Handle instrumentNumbers, Handle instrumentNames)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetMasterTune"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetMasterTune</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetMasterTune"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetMasterTune</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long masterTune) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetDeviceConnection"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetDeviceConnection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long index) -&gt; (ComponentResult _rv, long id1, long id2)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicUseDeviceConnection"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicUseDeviceConnection</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long id1, long id2) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetKnobSettingStrings"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetKnobSettingStrings</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long knobIndex, long isGlobal) -&gt; (ComponentResult _rv, Handle settingsNames, Handle settingsCategoryLasts, Handle settingsCategoryNames)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetMIDIPorts"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetMIDIPorts</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc) -&gt; (ComponentResult _rv, long inputPortCount, long outputPortCount)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSendMIDI"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSendMIDI</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long portIndex, MusicMIDIPacket mp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetOfflineTimeTo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetOfflineTimeTo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long newTimeStamp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetInfoText"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetInfoText</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long selector) -&gt; (ComponentResult _rv, Handle textH, Handle styleH)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGetInstrumentInfo"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGetInstrumentInfo</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long getInstrumentInfoFlags) -&gt; (ComponentResult _rv, InstrumentInfoListHandle infoListH)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicTask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicTask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartInstrumentNumberInterruptSafe"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartInstrumentNumberInterruptSafe</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, long instrumentNumber) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicSetPartSoundLocalization"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicSetPartSoundLocalization</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long part, Handle data) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGenericConfigure"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGenericConfigure</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long mode, long flags, long baseResID) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGenericGetKnobList"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGenericGetKnobList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, long knobType) -&gt; (ComponentResult _rv, GenericKnobDescriptionListHandle gkdlH)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicGenericSetResourceNumbers"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicGenericSetResourceNumbers</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, Handle resourceIDH) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicDerivedMIDISend"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicDerivedMIDISend</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, MusicMIDIPacket packet) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicDerivedOpenResFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicDerivedOpenResFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MusicDerivedCloseResFile"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MusicDerivedCloseResFile</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(MusicComponent mc, short resRefNum) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NAUnregisterMusicDevice"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NAUnregisterMusicDevice</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(NoteAllocator na, long index) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NASaveMusicConfiguration"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NASaveMusicConfiguration</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(NoteAllocator na) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NAGetMIDIPorts"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NAGetMIDIPorts</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(NoteAllocator na) -&gt; (ComponentResult _rv, QTMIDIPortListHandle inputPorts, QTMIDIPortListHandle outputPorts)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"NATask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_NATask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(NoteAllocator na) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetHeader"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetHeader</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, unsigned long * header) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneGetTimeBase"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneGetTimeBase</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (ComponentResult _rv, TimeBase tb)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, TimeScale scale) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneGetTimeScale"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneGetTimeScale</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (ComponentResult _rv, TimeScale scale)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneInstant"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneInstant</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, unsigned long tunePosition) -&gt; (ComponentResult _rv, unsigned long tune)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneStop"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneStop</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, long stopFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, Fixed volume) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneGetVolume"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneGetVolume</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TunePreroll"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TunePreroll</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneUnroll"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneUnroll</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetPartTranspose"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetPartTranspose</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, unsigned long part, long transpose, long velocityShift) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneGetNoteAllocator"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneGetNoteAllocator</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (NoteAllocator _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetSofter"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetSofter</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, long softer) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneTask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneTask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetBalance"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetBalance</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, long balance) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetSoundLocalization"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetSoundLocalization</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, Handle data) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetHeaderWithSize"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetHeaderWithSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, unsigned long * header, unsigned long size) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneSetPartMix"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneSetPartMix</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, unsigned long partNumber, long volume, long balance, long mixFlags) -&gt; (ComponentResult _rv)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"TuneGetPartMix"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_TuneGetPartMix</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(TunePlayer tp, unsigned long partNumber) -&gt; (ComponentResult _rv, long volumeOut, long balanceOut, long mixFlagsOut)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"AlignWindow"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_AlignWindow</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr wp, Boolean front) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"DragAlignedWindow"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_DragAlignedWindow</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(WindowPtr wp, Point startPt, Rect boundsRect) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"MoviesTask"</expr>, <expr>(<name>PyCFunction</name>)<name>Qt_MoviesTask</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(long maxMilliSecToUse) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init_Qt</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>Track</name></expr></argument>, <argument><expr><name>TrackObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>Track</name></expr></argument>, <argument><expr><name>TrackObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>Movie</name></expr></argument>, <argument><expr><name>MovieObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>Movie</name></expr></argument>, <argument><expr><name>MovieObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>MovieController</name></expr></argument>, <argument><expr><name>MovieCtlObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>MovieController</name></expr></argument>, <argument><expr><name>MovieCtlObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>TimeBase</name></expr></argument>, <argument><expr><name>TimeBaseObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>TimeBase</name></expr></argument>, <argument><expr><name>TimeBaseObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>UserData</name></expr></argument>, <argument><expr><name>UserDataObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>UserData</name></expr></argument>, <argument><expr><name>UserDataObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_NEW</name><argument_list>(<argument><expr><name>Media</name></expr></argument>, <argument><expr><name>MediaObj_New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMac_INIT_TOOLBOX_OBJECT_CONVERT</name><argument_list>(<argument><expr><name>Media</name></expr></argument>, <argument><expr><name>MediaObj_Convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Qt"</expr></argument>, <argument><expr><name>Qt_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Qt_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Qt_Error</name> == <name>NULL</name> ||
<call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Qt_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>IdleManager_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>IdleManager_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>IdleManager_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"IdleManager"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>IdleManager_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>IdleManager_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"IdleManagerType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>IdleManager_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>MovieController_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>MovieController_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>MovieController_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MovieController"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>MovieController_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>MovieController_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MovieControllerType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>MovieController_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TimeBase_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>TimeBase_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>TimeBase_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"TimeBase"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>TimeBase_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>TimeBase_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"TimeBaseType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>TimeBase_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>UserData_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>UserData_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>UserData_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"UserData"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>UserData_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>UserData_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"UserDataType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>UserData_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Media_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Media_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Media_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Media"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Media_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Media_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MediaType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Media_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Track_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Track_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Track_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Track"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Track_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Track_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"TrackType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Track_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Movie_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>Movie_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Movie_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"Movie"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Movie_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Movie_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"MovieType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Movie_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SGOutput_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr>&amp;<name>SGOutput_Type</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SGOutput_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SGOutput"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>SGOutput_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>SGOutput_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"SGOutputType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>SGOutput_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
