<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/cpython-2.6.1/_cppstats/Mac/Modules/ColorPickermodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cp_GetColor__doc__</name><index>[]</index></name> <init>=
<expr>"GetColor(prompt, (r, g, b)) -&gt; (r, g, b), ok"</expr></init></decl>
;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>cp_GetColor</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>RGBColor</name></type> <name>inColor</name></decl>, <decl><type ref="prev"/><name>outColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name>where</name> <init>= <expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Str255</name></type> <name>prompt</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>"O&amp;O&amp;"</expr></argument>, <argument><expr><name>PyMac_GetStr255</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>QdRGB_Convert</name></expr></argument>, <argument><expr>&amp;<name>inColor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ok</name> = <call><name>GetColor</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr>&amp;<name>inColor</name></expr></argument>, <argument><expr>&amp;<name>outColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;h"</expr></argument>, <argument><expr><name>QdRGB_New</name></expr></argument>, <argument><expr>&amp;<name>outColor</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>PyMethodDef</name></type> <name><name>cp_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr>"GetColor"</expr>, <expr>(<name>PyCFunction</name>)<name>cp_GetColor</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>cp_GetColor__doc__</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr>(<name>PyCFunction</name>)<name>NULL</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cp_module_documentation</name><index>[]</index></name> <init>=
<expr>""</expr></init></decl>
;</decl_stmt>
<function><type><name>void</name></type> <name>initColorPicker</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>PyErr_WarnPy3k</name><argument_list>(<argument><expr>"In 3.x, ColorPicker is removed."</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule4</name><argument_list>(<argument><expr>"ColorPicker"</expr></argument>, <argument><expr><name>cp_methods</name></expr></argument>,
<argument><expr><name>cp_module_documentation</name></expr></argument>,
<argument><expr>(<name>PyObject</name>*)<name>NULL</name></expr></argument>,<argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"can't initialize module ColorPicker"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
