<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Mac/Modules/scrap/_Scrapmodule.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pymactoolbox.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMac_PRECHECK</name><parameter_list>(<param><type><name>rtn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if ( &amp;rtn == NULL ) {PyErr_SetString(PyExc_NotImplementedError, "Not available in this shared library/OS version"); return NULL; }} while(0)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Scrap_Error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Scrap_Type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ScrapObj_Check</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ob_type == &amp;Scrap_Type || PyObject_TypeCheck((x), &amp;Scrap_Type))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>ScrapObject</name> <block>{
<decl_stmt><decl><type><name>PyObject_HEAD</name>
<name>ScrapRef</name></type> <name>ob_itself</name></decl>;</decl_stmt>
}</block></struct></type> <name>ScrapObject</name>;</typedef>
<function><type><name>PyObject</name> *</type><name>ScrapObj_New</name><parameter_list>(<param><decl><type><name>ScrapRef</name></type> <name>itself</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ScrapObject</name> *</type><name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><name>it</name> = <call><name>PyObject_NEW</name><argument_list>(<argument><expr><name>ScrapObject</name></expr></argument>, <argument><expr>&amp;<name>Scrap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>it</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>ob_itself</name></name> = <name>itself</name></expr>;</expr_stmt>
<return>return <expr>(<name>PyObject</name> *)<name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ScrapObj_Convert</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>v</name></decl></param>, <param><decl><type><name>ScrapRef</name> *</type><name>p_itself</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>ScrapObj_Check</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Scrap required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_itself</name> = ((<name>ScrapObject</name> *)<name>v</name>)-&gt;<name>ob_itself</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ScrapObj_dealloc</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>self</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name><name>self</name>-&gt;<name>ob_type</name>-&gt;<name>tp_free</name></name><argument_list>(<argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_GetScrapFlavorFlags</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorType</name></type> <name>flavorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorFlags</name></type> <name>flavorFlags</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>flavorType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorFlags</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flavorType</name></expr></argument>,
<argument><expr>&amp;<name>flavorFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>flavorFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_GetScrapFlavorSize</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorType</name></type> <name>flavorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>byteCount</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>flavorType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flavorType</name></expr></argument>,
<argument><expr>&amp;<name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_GetScrapFlavorData</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorType</name></type> <name>flavorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type> <name>byteCount</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>flavorType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorSize</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flavorType</name></expr></argument>,
<argument><expr>&amp;<name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>int</name>)<name>byteCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>_res</name> == <name>NULL</name></expr> )</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorData</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flavorType</name></expr></argument>,
<argument><expr>&amp;<name>byteCount</name></expr></argument>,
<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>_res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_PutScrapFlavor</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorType</name></type> <name>flavorType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorFlags</name></type> <name>flavorFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>flavorData__in__</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flavorData__in_len__</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>"O&amp;Ks#"</expr></argument>,
<argument><expr><name>PyMac_GetOSType</name></expr></argument>, <argument><expr>&amp;<name>flavorType</name></expr></argument>,
<argument><expr>&amp;<name>flavorFlags</name></expr></argument>,
<argument><expr>&amp;<name>flavorData__in__</name></expr></argument>, <argument><expr>&amp;<name>flavorData__in_len__</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>PutScrapFlavor</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr><name>flavorType</name></expr></argument>,
<argument><expr><name>flavorFlags</name></expr></argument>,
<argument><expr>(<name>Size</name>)<name>flavorData__in_len__</name></expr></argument>,
<argument><expr><name>flavorData__in__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_GetScrapFlavorCount</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>infoCount</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>infoCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"l"</expr></argument>,
<argument><expr><name>infoCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_GetScrapFlavorInfoList</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>infoCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapFlavorInfo</name> *</type><name>infolist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorCount</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>,
<argument><expr>&amp;<name>infoCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>infoCount</name> == 0</expr>)</condition><then> <return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr>"[]"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>infolist</name> = (<name>ScrapFlavorInfo</name> *)<call><name>malloc</name><argument_list>(<argument><expr><name>infoCount</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ScrapFlavorInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then>
<return>return <expr><call><name>PyErr_NoMemory</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetScrapFlavorInfoList</name><argument_list>(<argument><expr><name><name>_self</name>-&gt;<name>ob_itself</name></name></expr></argument>, <argument><expr>&amp;<name>infoCount</name></expr></argument>, <argument><expr><name>infolist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infolist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>_res</name> = <call><name>PyList_New</name><argument_list>(<argument><expr><name>infoCount</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infolist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>infoCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>item</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;l"</expr></argument>, <argument><expr><name>PyMac_BuildOSType</name></expr></argument>, <argument><expr><name><name>infolist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>flavorType</name></expr></argument>,
<argument><expr><name><name>infolist</name><index>[<expr><name>i</name></expr>]</index></name>.<name>flavorFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr>!<name>item</name> || <call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>_res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> &lt; 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infolist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infolist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>ScrapObj_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"GetScrapFlavorFlags"</expr>, <expr>(<name>PyCFunction</name>)<name>ScrapObj_GetScrapFlavorFlags</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ScrapFlavorType flavorType) -&gt; (ScrapFlavorFlags flavorFlags)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetScrapFlavorSize"</expr>, <expr>(<name>PyCFunction</name>)<name>ScrapObj_GetScrapFlavorSize</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ScrapFlavorType flavorType) -&gt; (Size byteCount)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetScrapFlavorData"</expr>, <expr>(<name>PyCFunction</name>)<name>ScrapObj_GetScrapFlavorData</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ScrapFlavorType flavorType, Buffer destination) -&gt; (Size byteCount)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"PutScrapFlavor"</expr>, <expr>(<name>PyCFunction</name>)<name>ScrapObj_PutScrapFlavor</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"(ScrapFlavorType flavorType, ScrapFlavorFlags flavorFlags, Size flavorSize, Buffer flavorData) -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetScrapFlavorCount"</expr>, <expr>(<name>PyCFunction</name>)<name>ScrapObj_GetScrapFlavorCount</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (UInt32 infoCount)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetScrapFlavorInfoList"</expr>, <expr>(<name>PyCFunction</name>)<name>ScrapObj_GetScrapFlavorInfoList</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; ([(ScrapFlavorType, ScrapFlavorInfo), ...])"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyMethodChain</name></type> <name>ScrapObj_chain</name> <init>= <expr><block>{ <expr><name>ScrapObj_methods</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>ScrapObj_getattr</name><parameter_list>(<param><decl><type><name>ScrapObject</name> *</type><name>self</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>Py_FindMethodInChain</name><argument_list>(<argument><expr>&amp;<name>ScrapObj_chain</name></expr></argument>, <argument><expr>(<name>PyObject</name> *)<name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ScrapObj_setattr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ScrapObj_compare</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ScrapObj_repr</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ScrapObj_hash</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>Scrap_Type</name> <init>= <expr><block>{
<expr><call><name>PyObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
0</expr>,
<expr>"_Scrap.Scrap"</expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScrapObject</name></expr></argument>)</argument_list></sizeof></expr>,
<expr>0</expr>,
<expr>(<name>destructor</name>) <name>ScrapObj_dealloc</name></expr>,
<expr>0</expr>,
<expr>(<name>getattrfunc</name>) <name>ScrapObj_getattr</name></expr>,
<expr>(<name>setattrfunc</name>) <name>ScrapObj_setattr</name></expr>,
<expr>(<name>cmpfunc</name>) <name>ScrapObj_compare</name></expr>,
<expr>(<name>reprfunc</name>) <name>ScrapObj_repr</name></expr>,
<expr>(<name>PyNumberMethods</name> *)0</expr>,
<expr>(<name>PySequenceMethods</name> *)0</expr>,
<expr>(<name>PyMappingMethods</name> *)0</expr>,
<expr>(<name>hashfunc</name>) <name>ScrapObj_hash</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Scrap_LoadScrap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>LoadScrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Scrap_UnloadScrap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>UnloadScrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Scrap_GetCurrentScrap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScrapRef</name></type> <name>scrap</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>GetCurrentScrap</name><argument_list>(<argument><expr>&amp;<name>scrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>_res</name> = <call><name>Py_BuildValue</name><argument_list>(<argument><expr>"O&amp;"</expr></argument>,
<argument><expr><name>ScrapObj_New</name></expr></argument>, <argument><expr><name>scrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Scrap_ClearCurrentScrap</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>ClearCurrentScrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>Scrap_CallInScrapPromises</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>_self</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>_err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>_args</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>_err</name> = <call><name>CallInScrapPromises</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>_err</name> != <name>noErr</name></expr>)</condition><then> <return>return <expr><call><name>PyMac_Error</name><argument_list>(<argument><expr><name>_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_res</name> = <name>Py_None</name></expr>;</expr_stmt>
<return>return <expr><name>_res</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>Scrap_methods</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr>"LoadScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>Scrap_LoadScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"UnloadScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>Scrap_UnloadScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"GetCurrentScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>Scrap_GetCurrentScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; (ScrapRef scrap)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ClearCurrentScrap"</expr>, <expr>(<name>PyCFunction</name>)<name>Scrap_ClearCurrentScrap</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"CallInScrapPromises"</expr>, <expr>(<name>PyCFunction</name>)<name>Scrap_CallInScrapPromises</name></expr>, <expr>1</expr>,
<macro><name>PyDoc_STR</name><argument_list>(<argument>"() -&gt; None"</argument>)</argument_list></macro>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init_Scrap</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>PyObject</name> *</type><name>m</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name> *</type><name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>m</name> = <call><name>Py_InitModule</name><argument_list>(<argument><expr>"_Scrap"</expr></argument>, <argument><expr><name>Scrap_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>d</name> = <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Scrap_Error</name> = <call><name>PyMac_GetOSErrException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>Scrap_Error</name> == <name>NULL</name> ||
<call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"Error"</expr></argument>, <argument><expr><name>Scrap_Error</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name><name>Scrap_Type</name>.<name>ob_type</name></name> = &amp;<name>PyType_Type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr>&amp;<name>Scrap_Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"ScrapType"</expr></argument>, <argument><expr>(<name>PyObject</name> *)&amp;<name>Scrap_Type</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>Py_FatalError</name><argument_list>(<argument><expr>"can't initialize ScrapType"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>
